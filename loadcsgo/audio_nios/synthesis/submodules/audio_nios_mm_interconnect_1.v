// audio_nios_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module audio_nios_mm_interconnect_1 (
		input  wire        pll_outclk0_clk,                                            //                                          pll_outclk0.clk
		input  wire        pll_outclk2_clk,                                            //                                          pll_outclk2.clk
		input  wire        cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset, // cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire        timer_0_reset_reset_bridge_in_reset_reset,                  //                  timer_0_reset_reset_bridge_in_reset.reset
		input  wire [8:0]  cpu_peripheral_bridge_m0_address,                           //                             cpu_peripheral_bridge_m0.address
		output wire        cpu_peripheral_bridge_m0_waitrequest,                       //                                                     .waitrequest
		input  wire [0:0]  cpu_peripheral_bridge_m0_burstcount,                        //                                                     .burstcount
		input  wire [3:0]  cpu_peripheral_bridge_m0_byteenable,                        //                                                     .byteenable
		input  wire        cpu_peripheral_bridge_m0_read,                              //                                                     .read
		output wire [31:0] cpu_peripheral_bridge_m0_readdata,                          //                                                     .readdata
		output wire        cpu_peripheral_bridge_m0_readdatavalid,                     //                                                     .readdatavalid
		input  wire        cpu_peripheral_bridge_m0_write,                             //                                                     .write
		input  wire [31:0] cpu_peripheral_bridge_m0_writedata,                         //                                                     .writedata
		input  wire        cpu_peripheral_bridge_m0_debugaccess,                       //                                                     .debugaccess
		output wire [1:0]  hex210_s1_address,                                          //                                            hex210_s1.address
		output wire        hex210_s1_write,                                            //                                                     .write
		input  wire [31:0] hex210_s1_readdata,                                         //                                                     .readdata
		output wire [31:0] hex210_s1_writedata,                                        //                                                     .writedata
		output wire        hex210_s1_chipselect,                                       //                                                     .chipselect
		output wire [1:0]  i2c_scl_s1_address,                                         //                                           i2c_scl_s1.address
		output wire        i2c_scl_s1_write,                                           //                                                     .write
		input  wire [31:0] i2c_scl_s1_readdata,                                        //                                                     .readdata
		output wire [31:0] i2c_scl_s1_writedata,                                       //                                                     .writedata
		output wire        i2c_scl_s1_chipselect,                                      //                                                     .chipselect
		output wire [1:0]  i2c_sda_s1_address,                                         //                                           i2c_sda_s1.address
		output wire        i2c_sda_s1_write,                                           //                                                     .write
		input  wire [31:0] i2c_sda_s1_readdata,                                        //                                                     .readdata
		output wire [31:0] i2c_sda_s1_writedata,                                       //                                                     .writedata
		output wire        i2c_sda_s1_chipselect,                                      //                                                     .chipselect
		output wire [1:0]  KEYs_s1_address,                                            //                                              KEYs_s1.address
		output wire        KEYs_s1_write,                                              //                                                     .write
		input  wire [31:0] KEYs_s1_readdata,                                           //                                                     .readdata
		output wire [31:0] KEYs_s1_writedata,                                          //                                                     .writedata
		output wire        KEYs_s1_chipselect,                                         //                                                     .chipselect
		output wire [1:0]  LEDs_s1_address,                                            //                                              LEDs_s1.address
		output wire        LEDs_s1_write,                                              //                                                     .write
		input  wire [31:0] LEDs_s1_readdata,                                           //                                                     .readdata
		output wire [31:0] LEDs_s1_writedata,                                          //                                                     .writedata
		output wire        LEDs_s1_chipselect,                                         //                                                     .chipselect
		output wire [2:0]  timer_0_s1_address,                                         //                                           timer_0_s1.address
		output wire        timer_0_s1_write,                                           //                                                     .write
		input  wire [15:0] timer_0_s1_readdata,                                        //                                                     .readdata
		output wire [15:0] timer_0_s1_writedata,                                       //                                                     .writedata
		output wire        timer_0_s1_chipselect,                                      //                                                     .chipselect
		output wire [0:0]  WIFI_avalon_rs232_slave_address,                            //                              WIFI_avalon_rs232_slave.address
		output wire        WIFI_avalon_rs232_slave_write,                              //                                                     .write
		output wire        WIFI_avalon_rs232_slave_read,                               //                                                     .read
		input  wire [31:0] WIFI_avalon_rs232_slave_readdata,                           //                                                     .readdata
		output wire [31:0] WIFI_avalon_rs232_slave_writedata,                          //                                                     .writedata
		output wire [3:0]  WIFI_avalon_rs232_slave_byteenable,                         //                                                     .byteenable
		output wire        WIFI_avalon_rs232_slave_chipselect                          //                                                     .chipselect
	);

	wire         cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // cpu_peripheral_bridge_m0_agent:av_waitrequest -> cpu_peripheral_bridge_m0_translator:uav_waitrequest
	wire  [31:0] cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_readdata;      // cpu_peripheral_bridge_m0_agent:av_readdata -> cpu_peripheral_bridge_m0_translator:uav_readdata
	wire         cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // cpu_peripheral_bridge_m0_translator:uav_debugaccess -> cpu_peripheral_bridge_m0_agent:av_debugaccess
	wire   [8:0] cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_address;       // cpu_peripheral_bridge_m0_translator:uav_address -> cpu_peripheral_bridge_m0_agent:av_address
	wire         cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_read;          // cpu_peripheral_bridge_m0_translator:uav_read -> cpu_peripheral_bridge_m0_agent:av_read
	wire   [3:0] cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable;    // cpu_peripheral_bridge_m0_translator:uav_byteenable -> cpu_peripheral_bridge_m0_agent:av_byteenable
	wire         cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // cpu_peripheral_bridge_m0_agent:av_readdatavalid -> cpu_peripheral_bridge_m0_translator:uav_readdatavalid
	wire         cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_lock;          // cpu_peripheral_bridge_m0_translator:uav_lock -> cpu_peripheral_bridge_m0_agent:av_lock
	wire         cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_write;         // cpu_peripheral_bridge_m0_translator:uav_write -> cpu_peripheral_bridge_m0_agent:av_write
	wire  [31:0] cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_writedata;     // cpu_peripheral_bridge_m0_translator:uav_writedata -> cpu_peripheral_bridge_m0_agent:av_writedata
	wire   [2:0] cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount;    // cpu_peripheral_bridge_m0_translator:uav_burstcount -> cpu_peripheral_bridge_m0_agent:av_burstcount
	wire  [31:0] wifi_avalon_rs232_slave_agent_m0_readdata;                                   // WIFI_avalon_rs232_slave_translator:uav_readdata -> WIFI_avalon_rs232_slave_agent:m0_readdata
	wire         wifi_avalon_rs232_slave_agent_m0_waitrequest;                                // WIFI_avalon_rs232_slave_translator:uav_waitrequest -> WIFI_avalon_rs232_slave_agent:m0_waitrequest
	wire         wifi_avalon_rs232_slave_agent_m0_debugaccess;                                // WIFI_avalon_rs232_slave_agent:m0_debugaccess -> WIFI_avalon_rs232_slave_translator:uav_debugaccess
	wire   [8:0] wifi_avalon_rs232_slave_agent_m0_address;                                    // WIFI_avalon_rs232_slave_agent:m0_address -> WIFI_avalon_rs232_slave_translator:uav_address
	wire   [3:0] wifi_avalon_rs232_slave_agent_m0_byteenable;                                 // WIFI_avalon_rs232_slave_agent:m0_byteenable -> WIFI_avalon_rs232_slave_translator:uav_byteenable
	wire         wifi_avalon_rs232_slave_agent_m0_read;                                       // WIFI_avalon_rs232_slave_agent:m0_read -> WIFI_avalon_rs232_slave_translator:uav_read
	wire         wifi_avalon_rs232_slave_agent_m0_readdatavalid;                              // WIFI_avalon_rs232_slave_translator:uav_readdatavalid -> WIFI_avalon_rs232_slave_agent:m0_readdatavalid
	wire         wifi_avalon_rs232_slave_agent_m0_lock;                                       // WIFI_avalon_rs232_slave_agent:m0_lock -> WIFI_avalon_rs232_slave_translator:uav_lock
	wire  [31:0] wifi_avalon_rs232_slave_agent_m0_writedata;                                  // WIFI_avalon_rs232_slave_agent:m0_writedata -> WIFI_avalon_rs232_slave_translator:uav_writedata
	wire         wifi_avalon_rs232_slave_agent_m0_write;                                      // WIFI_avalon_rs232_slave_agent:m0_write -> WIFI_avalon_rs232_slave_translator:uav_write
	wire   [2:0] wifi_avalon_rs232_slave_agent_m0_burstcount;                                 // WIFI_avalon_rs232_slave_agent:m0_burstcount -> WIFI_avalon_rs232_slave_translator:uav_burstcount
	wire         wifi_avalon_rs232_slave_agent_rf_source_valid;                               // WIFI_avalon_rs232_slave_agent:rf_source_valid -> WIFI_avalon_rs232_slave_agent_rsp_fifo:in_valid
	wire  [83:0] wifi_avalon_rs232_slave_agent_rf_source_data;                                // WIFI_avalon_rs232_slave_agent:rf_source_data -> WIFI_avalon_rs232_slave_agent_rsp_fifo:in_data
	wire         wifi_avalon_rs232_slave_agent_rf_source_ready;                               // WIFI_avalon_rs232_slave_agent_rsp_fifo:in_ready -> WIFI_avalon_rs232_slave_agent:rf_source_ready
	wire         wifi_avalon_rs232_slave_agent_rf_source_startofpacket;                       // WIFI_avalon_rs232_slave_agent:rf_source_startofpacket -> WIFI_avalon_rs232_slave_agent_rsp_fifo:in_startofpacket
	wire         wifi_avalon_rs232_slave_agent_rf_source_endofpacket;                         // WIFI_avalon_rs232_slave_agent:rf_source_endofpacket -> WIFI_avalon_rs232_slave_agent_rsp_fifo:in_endofpacket
	wire         wifi_avalon_rs232_slave_agent_rsp_fifo_out_valid;                            // WIFI_avalon_rs232_slave_agent_rsp_fifo:out_valid -> WIFI_avalon_rs232_slave_agent:rf_sink_valid
	wire  [83:0] wifi_avalon_rs232_slave_agent_rsp_fifo_out_data;                             // WIFI_avalon_rs232_slave_agent_rsp_fifo:out_data -> WIFI_avalon_rs232_slave_agent:rf_sink_data
	wire         wifi_avalon_rs232_slave_agent_rsp_fifo_out_ready;                            // WIFI_avalon_rs232_slave_agent:rf_sink_ready -> WIFI_avalon_rs232_slave_agent_rsp_fifo:out_ready
	wire         wifi_avalon_rs232_slave_agent_rsp_fifo_out_startofpacket;                    // WIFI_avalon_rs232_slave_agent_rsp_fifo:out_startofpacket -> WIFI_avalon_rs232_slave_agent:rf_sink_startofpacket
	wire         wifi_avalon_rs232_slave_agent_rsp_fifo_out_endofpacket;                      // WIFI_avalon_rs232_slave_agent_rsp_fifo:out_endofpacket -> WIFI_avalon_rs232_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> WIFI_avalon_rs232_slave_agent:cp_valid
	wire  [82:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> WIFI_avalon_rs232_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                           // WIFI_avalon_rs232_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [6:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> WIFI_avalon_rs232_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> WIFI_avalon_rs232_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> WIFI_avalon_rs232_slave_agent:cp_endofpacket
	wire  [31:0] keys_s1_agent_m0_readdata;                                                   // KEYs_s1_translator:uav_readdata -> KEYs_s1_agent:m0_readdata
	wire         keys_s1_agent_m0_waitrequest;                                                // KEYs_s1_translator:uav_waitrequest -> KEYs_s1_agent:m0_waitrequest
	wire         keys_s1_agent_m0_debugaccess;                                                // KEYs_s1_agent:m0_debugaccess -> KEYs_s1_translator:uav_debugaccess
	wire   [8:0] keys_s1_agent_m0_address;                                                    // KEYs_s1_agent:m0_address -> KEYs_s1_translator:uav_address
	wire   [3:0] keys_s1_agent_m0_byteenable;                                                 // KEYs_s1_agent:m0_byteenable -> KEYs_s1_translator:uav_byteenable
	wire         keys_s1_agent_m0_read;                                                       // KEYs_s1_agent:m0_read -> KEYs_s1_translator:uav_read
	wire         keys_s1_agent_m0_readdatavalid;                                              // KEYs_s1_translator:uav_readdatavalid -> KEYs_s1_agent:m0_readdatavalid
	wire         keys_s1_agent_m0_lock;                                                       // KEYs_s1_agent:m0_lock -> KEYs_s1_translator:uav_lock
	wire  [31:0] keys_s1_agent_m0_writedata;                                                  // KEYs_s1_agent:m0_writedata -> KEYs_s1_translator:uav_writedata
	wire         keys_s1_agent_m0_write;                                                      // KEYs_s1_agent:m0_write -> KEYs_s1_translator:uav_write
	wire   [2:0] keys_s1_agent_m0_burstcount;                                                 // KEYs_s1_agent:m0_burstcount -> KEYs_s1_translator:uav_burstcount
	wire         keys_s1_agent_rf_source_valid;                                               // KEYs_s1_agent:rf_source_valid -> KEYs_s1_agent_rsp_fifo:in_valid
	wire  [83:0] keys_s1_agent_rf_source_data;                                                // KEYs_s1_agent:rf_source_data -> KEYs_s1_agent_rsp_fifo:in_data
	wire         keys_s1_agent_rf_source_ready;                                               // KEYs_s1_agent_rsp_fifo:in_ready -> KEYs_s1_agent:rf_source_ready
	wire         keys_s1_agent_rf_source_startofpacket;                                       // KEYs_s1_agent:rf_source_startofpacket -> KEYs_s1_agent_rsp_fifo:in_startofpacket
	wire         keys_s1_agent_rf_source_endofpacket;                                         // KEYs_s1_agent:rf_source_endofpacket -> KEYs_s1_agent_rsp_fifo:in_endofpacket
	wire         keys_s1_agent_rsp_fifo_out_valid;                                            // KEYs_s1_agent_rsp_fifo:out_valid -> KEYs_s1_agent:rf_sink_valid
	wire  [83:0] keys_s1_agent_rsp_fifo_out_data;                                             // KEYs_s1_agent_rsp_fifo:out_data -> KEYs_s1_agent:rf_sink_data
	wire         keys_s1_agent_rsp_fifo_out_ready;                                            // KEYs_s1_agent:rf_sink_ready -> KEYs_s1_agent_rsp_fifo:out_ready
	wire         keys_s1_agent_rsp_fifo_out_startofpacket;                                    // KEYs_s1_agent_rsp_fifo:out_startofpacket -> KEYs_s1_agent:rf_sink_startofpacket
	wire         keys_s1_agent_rsp_fifo_out_endofpacket;                                      // KEYs_s1_agent_rsp_fifo:out_endofpacket -> KEYs_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> KEYs_s1_agent:cp_valid
	wire  [82:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> KEYs_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                       // KEYs_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [6:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> KEYs_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> KEYs_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> KEYs_s1_agent:cp_endofpacket
	wire  [31:0] leds_s1_agent_m0_readdata;                                                   // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire         leds_s1_agent_m0_waitrequest;                                                // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire         leds_s1_agent_m0_debugaccess;                                                // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [8:0] leds_s1_agent_m0_address;                                                    // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire   [3:0] leds_s1_agent_m0_byteenable;                                                 // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire         leds_s1_agent_m0_read;                                                       // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire         leds_s1_agent_m0_readdatavalid;                                              // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire         leds_s1_agent_m0_lock;                                                       // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire  [31:0] leds_s1_agent_m0_writedata;                                                  // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire         leds_s1_agent_m0_write;                                                      // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire   [2:0] leds_s1_agent_m0_burstcount;                                                 // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire         leds_s1_agent_rf_source_valid;                                               // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [83:0] leds_s1_agent_rf_source_data;                                                // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire         leds_s1_agent_rf_source_ready;                                               // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire         leds_s1_agent_rf_source_startofpacket;                                       // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire         leds_s1_agent_rf_source_endofpacket;                                         // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire         leds_s1_agent_rsp_fifo_out_valid;                                            // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [83:0] leds_s1_agent_rsp_fifo_out_data;                                             // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire         leds_s1_agent_rsp_fifo_out_ready;                                            // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire         leds_s1_agent_rsp_fifo_out_startofpacket;                                    // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire         leds_s1_agent_rsp_fifo_out_endofpacket;                                      // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> LEDs_s1_agent:cp_valid
	wire  [82:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> LEDs_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                       // LEDs_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [6:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> LEDs_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire  [31:0] i2c_scl_s1_agent_m0_readdata;                                                // i2c_scl_s1_translator:uav_readdata -> i2c_scl_s1_agent:m0_readdata
	wire         i2c_scl_s1_agent_m0_waitrequest;                                             // i2c_scl_s1_translator:uav_waitrequest -> i2c_scl_s1_agent:m0_waitrequest
	wire         i2c_scl_s1_agent_m0_debugaccess;                                             // i2c_scl_s1_agent:m0_debugaccess -> i2c_scl_s1_translator:uav_debugaccess
	wire   [8:0] i2c_scl_s1_agent_m0_address;                                                 // i2c_scl_s1_agent:m0_address -> i2c_scl_s1_translator:uav_address
	wire   [3:0] i2c_scl_s1_agent_m0_byteenable;                                              // i2c_scl_s1_agent:m0_byteenable -> i2c_scl_s1_translator:uav_byteenable
	wire         i2c_scl_s1_agent_m0_read;                                                    // i2c_scl_s1_agent:m0_read -> i2c_scl_s1_translator:uav_read
	wire         i2c_scl_s1_agent_m0_readdatavalid;                                           // i2c_scl_s1_translator:uav_readdatavalid -> i2c_scl_s1_agent:m0_readdatavalid
	wire         i2c_scl_s1_agent_m0_lock;                                                    // i2c_scl_s1_agent:m0_lock -> i2c_scl_s1_translator:uav_lock
	wire  [31:0] i2c_scl_s1_agent_m0_writedata;                                               // i2c_scl_s1_agent:m0_writedata -> i2c_scl_s1_translator:uav_writedata
	wire         i2c_scl_s1_agent_m0_write;                                                   // i2c_scl_s1_agent:m0_write -> i2c_scl_s1_translator:uav_write
	wire   [2:0] i2c_scl_s1_agent_m0_burstcount;                                              // i2c_scl_s1_agent:m0_burstcount -> i2c_scl_s1_translator:uav_burstcount
	wire         i2c_scl_s1_agent_rf_source_valid;                                            // i2c_scl_s1_agent:rf_source_valid -> i2c_scl_s1_agent_rsp_fifo:in_valid
	wire  [83:0] i2c_scl_s1_agent_rf_source_data;                                             // i2c_scl_s1_agent:rf_source_data -> i2c_scl_s1_agent_rsp_fifo:in_data
	wire         i2c_scl_s1_agent_rf_source_ready;                                            // i2c_scl_s1_agent_rsp_fifo:in_ready -> i2c_scl_s1_agent:rf_source_ready
	wire         i2c_scl_s1_agent_rf_source_startofpacket;                                    // i2c_scl_s1_agent:rf_source_startofpacket -> i2c_scl_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_scl_s1_agent_rf_source_endofpacket;                                      // i2c_scl_s1_agent:rf_source_endofpacket -> i2c_scl_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_scl_s1_agent_rsp_fifo_out_valid;                                         // i2c_scl_s1_agent_rsp_fifo:out_valid -> i2c_scl_s1_agent:rf_sink_valid
	wire  [83:0] i2c_scl_s1_agent_rsp_fifo_out_data;                                          // i2c_scl_s1_agent_rsp_fifo:out_data -> i2c_scl_s1_agent:rf_sink_data
	wire         i2c_scl_s1_agent_rsp_fifo_out_ready;                                         // i2c_scl_s1_agent:rf_sink_ready -> i2c_scl_s1_agent_rsp_fifo:out_ready
	wire         i2c_scl_s1_agent_rsp_fifo_out_startofpacket;                                 // i2c_scl_s1_agent_rsp_fifo:out_startofpacket -> i2c_scl_s1_agent:rf_sink_startofpacket
	wire         i2c_scl_s1_agent_rsp_fifo_out_endofpacket;                                   // i2c_scl_s1_agent_rsp_fifo:out_endofpacket -> i2c_scl_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> i2c_scl_s1_agent:cp_valid
	wire  [82:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> i2c_scl_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                       // i2c_scl_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [6:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> i2c_scl_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> i2c_scl_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> i2c_scl_s1_agent:cp_endofpacket
	wire  [31:0] i2c_sda_s1_agent_m0_readdata;                                                // i2c_sda_s1_translator:uav_readdata -> i2c_sda_s1_agent:m0_readdata
	wire         i2c_sda_s1_agent_m0_waitrequest;                                             // i2c_sda_s1_translator:uav_waitrequest -> i2c_sda_s1_agent:m0_waitrequest
	wire         i2c_sda_s1_agent_m0_debugaccess;                                             // i2c_sda_s1_agent:m0_debugaccess -> i2c_sda_s1_translator:uav_debugaccess
	wire   [8:0] i2c_sda_s1_agent_m0_address;                                                 // i2c_sda_s1_agent:m0_address -> i2c_sda_s1_translator:uav_address
	wire   [3:0] i2c_sda_s1_agent_m0_byteenable;                                              // i2c_sda_s1_agent:m0_byteenable -> i2c_sda_s1_translator:uav_byteenable
	wire         i2c_sda_s1_agent_m0_read;                                                    // i2c_sda_s1_agent:m0_read -> i2c_sda_s1_translator:uav_read
	wire         i2c_sda_s1_agent_m0_readdatavalid;                                           // i2c_sda_s1_translator:uav_readdatavalid -> i2c_sda_s1_agent:m0_readdatavalid
	wire         i2c_sda_s1_agent_m0_lock;                                                    // i2c_sda_s1_agent:m0_lock -> i2c_sda_s1_translator:uav_lock
	wire  [31:0] i2c_sda_s1_agent_m0_writedata;                                               // i2c_sda_s1_agent:m0_writedata -> i2c_sda_s1_translator:uav_writedata
	wire         i2c_sda_s1_agent_m0_write;                                                   // i2c_sda_s1_agent:m0_write -> i2c_sda_s1_translator:uav_write
	wire   [2:0] i2c_sda_s1_agent_m0_burstcount;                                              // i2c_sda_s1_agent:m0_burstcount -> i2c_sda_s1_translator:uav_burstcount
	wire         i2c_sda_s1_agent_rf_source_valid;                                            // i2c_sda_s1_agent:rf_source_valid -> i2c_sda_s1_agent_rsp_fifo:in_valid
	wire  [83:0] i2c_sda_s1_agent_rf_source_data;                                             // i2c_sda_s1_agent:rf_source_data -> i2c_sda_s1_agent_rsp_fifo:in_data
	wire         i2c_sda_s1_agent_rf_source_ready;                                            // i2c_sda_s1_agent_rsp_fifo:in_ready -> i2c_sda_s1_agent:rf_source_ready
	wire         i2c_sda_s1_agent_rf_source_startofpacket;                                    // i2c_sda_s1_agent:rf_source_startofpacket -> i2c_sda_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_sda_s1_agent_rf_source_endofpacket;                                      // i2c_sda_s1_agent:rf_source_endofpacket -> i2c_sda_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_sda_s1_agent_rsp_fifo_out_valid;                                         // i2c_sda_s1_agent_rsp_fifo:out_valid -> i2c_sda_s1_agent:rf_sink_valid
	wire  [83:0] i2c_sda_s1_agent_rsp_fifo_out_data;                                          // i2c_sda_s1_agent_rsp_fifo:out_data -> i2c_sda_s1_agent:rf_sink_data
	wire         i2c_sda_s1_agent_rsp_fifo_out_ready;                                         // i2c_sda_s1_agent:rf_sink_ready -> i2c_sda_s1_agent_rsp_fifo:out_ready
	wire         i2c_sda_s1_agent_rsp_fifo_out_startofpacket;                                 // i2c_sda_s1_agent_rsp_fifo:out_startofpacket -> i2c_sda_s1_agent:rf_sink_startofpacket
	wire         i2c_sda_s1_agent_rsp_fifo_out_endofpacket;                                   // i2c_sda_s1_agent_rsp_fifo:out_endofpacket -> i2c_sda_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> i2c_sda_s1_agent:cp_valid
	wire  [82:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> i2c_sda_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                       // i2c_sda_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [6:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> i2c_sda_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> i2c_sda_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> i2c_sda_s1_agent:cp_endofpacket
	wire  [31:0] hex210_s1_agent_m0_readdata;                                                 // hex210_s1_translator:uav_readdata -> hex210_s1_agent:m0_readdata
	wire         hex210_s1_agent_m0_waitrequest;                                              // hex210_s1_translator:uav_waitrequest -> hex210_s1_agent:m0_waitrequest
	wire         hex210_s1_agent_m0_debugaccess;                                              // hex210_s1_agent:m0_debugaccess -> hex210_s1_translator:uav_debugaccess
	wire   [8:0] hex210_s1_agent_m0_address;                                                  // hex210_s1_agent:m0_address -> hex210_s1_translator:uav_address
	wire   [3:0] hex210_s1_agent_m0_byteenable;                                               // hex210_s1_agent:m0_byteenable -> hex210_s1_translator:uav_byteenable
	wire         hex210_s1_agent_m0_read;                                                     // hex210_s1_agent:m0_read -> hex210_s1_translator:uav_read
	wire         hex210_s1_agent_m0_readdatavalid;                                            // hex210_s1_translator:uav_readdatavalid -> hex210_s1_agent:m0_readdatavalid
	wire         hex210_s1_agent_m0_lock;                                                     // hex210_s1_agent:m0_lock -> hex210_s1_translator:uav_lock
	wire  [31:0] hex210_s1_agent_m0_writedata;                                                // hex210_s1_agent:m0_writedata -> hex210_s1_translator:uav_writedata
	wire         hex210_s1_agent_m0_write;                                                    // hex210_s1_agent:m0_write -> hex210_s1_translator:uav_write
	wire   [2:0] hex210_s1_agent_m0_burstcount;                                               // hex210_s1_agent:m0_burstcount -> hex210_s1_translator:uav_burstcount
	wire         hex210_s1_agent_rf_source_valid;                                             // hex210_s1_agent:rf_source_valid -> hex210_s1_agent_rsp_fifo:in_valid
	wire  [83:0] hex210_s1_agent_rf_source_data;                                              // hex210_s1_agent:rf_source_data -> hex210_s1_agent_rsp_fifo:in_data
	wire         hex210_s1_agent_rf_source_ready;                                             // hex210_s1_agent_rsp_fifo:in_ready -> hex210_s1_agent:rf_source_ready
	wire         hex210_s1_agent_rf_source_startofpacket;                                     // hex210_s1_agent:rf_source_startofpacket -> hex210_s1_agent_rsp_fifo:in_startofpacket
	wire         hex210_s1_agent_rf_source_endofpacket;                                       // hex210_s1_agent:rf_source_endofpacket -> hex210_s1_agent_rsp_fifo:in_endofpacket
	wire         hex210_s1_agent_rsp_fifo_out_valid;                                          // hex210_s1_agent_rsp_fifo:out_valid -> hex210_s1_agent:rf_sink_valid
	wire  [83:0] hex210_s1_agent_rsp_fifo_out_data;                                           // hex210_s1_agent_rsp_fifo:out_data -> hex210_s1_agent:rf_sink_data
	wire         hex210_s1_agent_rsp_fifo_out_ready;                                          // hex210_s1_agent:rf_sink_ready -> hex210_s1_agent_rsp_fifo:out_ready
	wire         hex210_s1_agent_rsp_fifo_out_startofpacket;                                  // hex210_s1_agent_rsp_fifo:out_startofpacket -> hex210_s1_agent:rf_sink_startofpacket
	wire         hex210_s1_agent_rsp_fifo_out_endofpacket;                                    // hex210_s1_agent_rsp_fifo:out_endofpacket -> hex210_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> hex210_s1_agent:cp_valid
	wire  [82:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> hex210_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                       // hex210_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [6:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> hex210_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> hex210_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> hex210_s1_agent:cp_endofpacket
	wire  [31:0] timer_0_s1_agent_m0_readdata;                                                // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire         timer_0_s1_agent_m0_waitrequest;                                             // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire         timer_0_s1_agent_m0_debugaccess;                                             // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [8:0] timer_0_s1_agent_m0_address;                                                 // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire   [3:0] timer_0_s1_agent_m0_byteenable;                                              // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire         timer_0_s1_agent_m0_read;                                                    // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire         timer_0_s1_agent_m0_readdatavalid;                                           // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire         timer_0_s1_agent_m0_lock;                                                    // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire  [31:0] timer_0_s1_agent_m0_writedata;                                               // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire         timer_0_s1_agent_m0_write;                                                   // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire   [2:0] timer_0_s1_agent_m0_burstcount;                                              // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire         timer_0_s1_agent_rf_source_valid;                                            // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [83:0] timer_0_s1_agent_rf_source_data;                                             // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire         timer_0_s1_agent_rf_source_ready;                                            // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire         timer_0_s1_agent_rf_source_startofpacket;                                    // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_0_s1_agent_rf_source_endofpacket;                                      // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_valid;                                         // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [83:0] timer_0_s1_agent_rsp_fifo_out_data;                                          // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire         timer_0_s1_agent_rsp_fifo_out_ready;                                         // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire         timer_0_s1_agent_rsp_fifo_out_startofpacket;                                 // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_endofpacket;                                   // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire         timer_0_s1_agent_rdata_fifo_src_valid;                                       // timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent_rdata_fifo:in_valid
	wire  [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                        // timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent_rdata_fifo:in_data
	wire         timer_0_s1_agent_rdata_fifo_src_ready;                                       // timer_0_s1_agent_rdata_fifo:in_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> timer_0_s1_agent:cp_valid
	wire  [82:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> timer_0_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                       // timer_0_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [6:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> timer_0_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire         cpu_peripheral_bridge_m0_agent_cp_valid;                                     // cpu_peripheral_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [82:0] cpu_peripheral_bridge_m0_agent_cp_data;                                      // cpu_peripheral_bridge_m0_agent:cp_data -> router:sink_data
	wire         cpu_peripheral_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> cpu_peripheral_bridge_m0_agent:cp_ready
	wire         cpu_peripheral_bridge_m0_agent_cp_startofpacket;                             // cpu_peripheral_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         cpu_peripheral_bridge_m0_agent_cp_endofpacket;                               // cpu_peripheral_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         wifi_avalon_rs232_slave_agent_rp_valid;                                      // WIFI_avalon_rs232_slave_agent:rp_valid -> router_001:sink_valid
	wire  [82:0] wifi_avalon_rs232_slave_agent_rp_data;                                       // WIFI_avalon_rs232_slave_agent:rp_data -> router_001:sink_data
	wire         wifi_avalon_rs232_slave_agent_rp_ready;                                      // router_001:sink_ready -> WIFI_avalon_rs232_slave_agent:rp_ready
	wire         wifi_avalon_rs232_slave_agent_rp_startofpacket;                              // WIFI_avalon_rs232_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         wifi_avalon_rs232_slave_agent_rp_endofpacket;                                // WIFI_avalon_rs232_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                        // router_001:src_valid -> rsp_demux:sink_valid
	wire  [82:0] router_001_src_data;                                                         // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                        // rsp_demux:sink_ready -> router_001:src_ready
	wire   [6:0] router_001_src_channel;                                                      // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         keys_s1_agent_rp_valid;                                                      // KEYs_s1_agent:rp_valid -> router_002:sink_valid
	wire  [82:0] keys_s1_agent_rp_data;                                                       // KEYs_s1_agent:rp_data -> router_002:sink_data
	wire         keys_s1_agent_rp_ready;                                                      // router_002:sink_ready -> KEYs_s1_agent:rp_ready
	wire         keys_s1_agent_rp_startofpacket;                                              // KEYs_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         keys_s1_agent_rp_endofpacket;                                                // KEYs_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                        // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [82:0] router_002_src_data;                                                         // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                        // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [6:0] router_002_src_channel;                                                      // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         leds_s1_agent_rp_valid;                                                      // LEDs_s1_agent:rp_valid -> router_003:sink_valid
	wire  [82:0] leds_s1_agent_rp_data;                                                       // LEDs_s1_agent:rp_data -> router_003:sink_data
	wire         leds_s1_agent_rp_ready;                                                      // router_003:sink_ready -> LEDs_s1_agent:rp_ready
	wire         leds_s1_agent_rp_startofpacket;                                              // LEDs_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         leds_s1_agent_rp_endofpacket;                                                // LEDs_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                        // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [82:0] router_003_src_data;                                                         // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                        // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [6:0] router_003_src_channel;                                                      // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         i2c_scl_s1_agent_rp_valid;                                                   // i2c_scl_s1_agent:rp_valid -> router_004:sink_valid
	wire  [82:0] i2c_scl_s1_agent_rp_data;                                                    // i2c_scl_s1_agent:rp_data -> router_004:sink_data
	wire         i2c_scl_s1_agent_rp_ready;                                                   // router_004:sink_ready -> i2c_scl_s1_agent:rp_ready
	wire         i2c_scl_s1_agent_rp_startofpacket;                                           // i2c_scl_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         i2c_scl_s1_agent_rp_endofpacket;                                             // i2c_scl_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                        // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [82:0] router_004_src_data;                                                         // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                        // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [6:0] router_004_src_channel;                                                      // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                                // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         i2c_sda_s1_agent_rp_valid;                                                   // i2c_sda_s1_agent:rp_valid -> router_005:sink_valid
	wire  [82:0] i2c_sda_s1_agent_rp_data;                                                    // i2c_sda_s1_agent:rp_data -> router_005:sink_data
	wire         i2c_sda_s1_agent_rp_ready;                                                   // router_005:sink_ready -> i2c_sda_s1_agent:rp_ready
	wire         i2c_sda_s1_agent_rp_startofpacket;                                           // i2c_sda_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         i2c_sda_s1_agent_rp_endofpacket;                                             // i2c_sda_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [82:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                        // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [6:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         hex210_s1_agent_rp_valid;                                                    // hex210_s1_agent:rp_valid -> router_006:sink_valid
	wire  [82:0] hex210_s1_agent_rp_data;                                                     // hex210_s1_agent:rp_data -> router_006:sink_data
	wire         hex210_s1_agent_rp_ready;                                                    // router_006:sink_ready -> hex210_s1_agent:rp_ready
	wire         hex210_s1_agent_rp_startofpacket;                                            // hex210_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         hex210_s1_agent_rp_endofpacket;                                              // hex210_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                        // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [82:0] router_006_src_data;                                                         // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                        // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [6:0] router_006_src_channel;                                                      // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                                // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         timer_0_s1_agent_rp_valid;                                                   // timer_0_s1_agent:rp_valid -> router_007:sink_valid
	wire  [82:0] timer_0_s1_agent_rp_data;                                                    // timer_0_s1_agent:rp_data -> router_007:sink_data
	wire         timer_0_s1_agent_rp_ready;                                                   // router_007:sink_ready -> timer_0_s1_agent:rp_ready
	wire         timer_0_s1_agent_rp_startofpacket;                                           // timer_0_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         timer_0_s1_agent_rp_endofpacket;                                             // timer_0_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                        // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [82:0] router_007_src_data;                                                         // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                                        // rsp_demux_006:sink_ready -> router_007:src_ready
	wire   [6:0] router_007_src_channel;                                                      // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                                // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         router_src_valid;                                                            // router:src_valid -> cpu_peripheral_bridge_m0_limiter:cmd_sink_valid
	wire  [82:0] router_src_data;                                                             // router:src_data -> cpu_peripheral_bridge_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                            // cpu_peripheral_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [6:0] router_src_channel;                                                          // router:src_channel -> cpu_peripheral_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                    // router:src_startofpacket -> cpu_peripheral_bridge_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                      // router:src_endofpacket -> cpu_peripheral_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [82:0] cpu_peripheral_bridge_m0_limiter_cmd_src_data;                               // cpu_peripheral_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         cpu_peripheral_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> cpu_peripheral_bridge_m0_limiter:cmd_src_ready
	wire   [6:0] cpu_peripheral_bridge_m0_limiter_cmd_src_channel;                            // cpu_peripheral_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         cpu_peripheral_bridge_m0_limiter_cmd_src_startofpacket;                      // cpu_peripheral_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         cpu_peripheral_bridge_m0_limiter_cmd_src_endofpacket;                        // cpu_peripheral_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> cpu_peripheral_bridge_m0_limiter:rsp_sink_valid
	wire  [82:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> cpu_peripheral_bridge_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                           // cpu_peripheral_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [6:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> cpu_peripheral_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> cpu_peripheral_bridge_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> cpu_peripheral_bridge_m0_limiter:rsp_sink_endofpacket
	wire         cpu_peripheral_bridge_m0_limiter_rsp_src_valid;                              // cpu_peripheral_bridge_m0_limiter:rsp_src_valid -> cpu_peripheral_bridge_m0_agent:rp_valid
	wire  [82:0] cpu_peripheral_bridge_m0_limiter_rsp_src_data;                               // cpu_peripheral_bridge_m0_limiter:rsp_src_data -> cpu_peripheral_bridge_m0_agent:rp_data
	wire         cpu_peripheral_bridge_m0_limiter_rsp_src_ready;                              // cpu_peripheral_bridge_m0_agent:rp_ready -> cpu_peripheral_bridge_m0_limiter:rsp_src_ready
	wire   [6:0] cpu_peripheral_bridge_m0_limiter_rsp_src_channel;                            // cpu_peripheral_bridge_m0_limiter:rsp_src_channel -> cpu_peripheral_bridge_m0_agent:rp_channel
	wire         cpu_peripheral_bridge_m0_limiter_rsp_src_startofpacket;                      // cpu_peripheral_bridge_m0_limiter:rsp_src_startofpacket -> cpu_peripheral_bridge_m0_agent:rp_startofpacket
	wire         cpu_peripheral_bridge_m0_limiter_rsp_src_endofpacket;                        // cpu_peripheral_bridge_m0_limiter:rsp_src_endofpacket -> cpu_peripheral_bridge_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [82:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [6:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [82:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [6:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [82:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [6:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [82:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                        // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [6:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [82:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [6:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [82:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                        // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [6:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [82:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [6:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [82:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [6:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [82:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                    // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [6:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [82:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                    // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [6:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [82:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                    // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [6:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [82:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                    // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [6:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         cmd_demux_src6_valid;                                                        // cmd_demux:src6_valid -> crosser:in_valid
	wire  [82:0] cmd_demux_src6_data;                                                         // cmd_demux:src6_data -> crosser:in_data
	wire         cmd_demux_src6_ready;                                                        // crosser:in_ready -> cmd_demux:src6_ready
	wire   [6:0] cmd_demux_src6_channel;                                                      // cmd_demux:src6_channel -> crosser:in_channel
	wire         cmd_demux_src6_startofpacket;                                                // cmd_demux:src6_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                  // cmd_demux:src6_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                           // crosser:out_valid -> cmd_mux_006:sink0_valid
	wire  [82:0] crosser_out_data;                                                            // crosser:out_data -> cmd_mux_006:sink0_data
	wire         crosser_out_ready;                                                           // cmd_mux_006:sink0_ready -> crosser:out_ready
	wire   [6:0] crosser_out_channel;                                                         // crosser:out_channel -> cmd_mux_006:sink0_channel
	wire         crosser_out_startofpacket;                                                   // crosser:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                     // crosser:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> crosser_001:in_valid
	wire  [82:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> crosser_001:in_data
	wire         rsp_demux_006_src0_ready;                                                    // crosser_001:in_ready -> rsp_demux_006:src0_ready
	wire   [6:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> crosser_001:in_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                       // crosser_001:out_valid -> rsp_mux:sink6_valid
	wire  [82:0] crosser_001_out_data;                                                        // crosser_001:out_data -> rsp_mux:sink6_data
	wire         crosser_001_out_ready;                                                       // rsp_mux:sink6_ready -> crosser_001:out_ready
	wire   [6:0] crosser_001_out_channel;                                                     // crosser_001:out_channel -> rsp_mux:sink6_channel
	wire         crosser_001_out_startofpacket;                                               // crosser_001:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire         crosser_001_out_endofpacket;                                                 // crosser_001:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire   [6:0] cpu_peripheral_bridge_m0_limiter_cmd_valid_data;                             // cpu_peripheral_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         wifi_avalon_rs232_slave_agent_rdata_fifo_src_valid;                          // WIFI_avalon_rs232_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] wifi_avalon_rs232_slave_agent_rdata_fifo_src_data;                           // WIFI_avalon_rs232_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         wifi_avalon_rs232_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter:in_0_ready -> WIFI_avalon_rs232_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> WIFI_avalon_rs232_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> WIFI_avalon_rs232_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                               // WIFI_avalon_rs232_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> WIFI_avalon_rs232_slave_agent:rdata_fifo_sink_error
	wire         keys_s1_agent_rdata_fifo_src_valid;                                          // KEYs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] keys_s1_agent_rdata_fifo_src_data;                                           // KEYs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         keys_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_001:in_0_ready -> KEYs_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> KEYs_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> KEYs_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                           // KEYs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> KEYs_s1_agent:rdata_fifo_sink_error
	wire         leds_s1_agent_rdata_fifo_src_valid;                                          // LEDs_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] leds_s1_agent_rdata_fifo_src_data;                                           // LEDs_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         leds_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_002:in_0_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                           // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire         i2c_scl_s1_agent_rdata_fifo_src_valid;                                       // i2c_scl_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] i2c_scl_s1_agent_rdata_fifo_src_data;                                        // i2c_scl_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         i2c_scl_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_003:in_0_ready -> i2c_scl_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                           // avalon_st_adapter_003:out_0_valid -> i2c_scl_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                            // avalon_st_adapter_003:out_0_data -> i2c_scl_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                           // i2c_scl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                           // avalon_st_adapter_003:out_0_error -> i2c_scl_s1_agent:rdata_fifo_sink_error
	wire         i2c_sda_s1_agent_rdata_fifo_src_valid;                                       // i2c_sda_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] i2c_sda_s1_agent_rdata_fifo_src_data;                                        // i2c_sda_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         i2c_sda_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_004:in_0_ready -> i2c_sda_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                           // avalon_st_adapter_004:out_0_valid -> i2c_sda_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                            // avalon_st_adapter_004:out_0_data -> i2c_sda_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                           // i2c_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                           // avalon_st_adapter_004:out_0_error -> i2c_sda_s1_agent:rdata_fifo_sink_error
	wire         hex210_s1_agent_rdata_fifo_src_valid;                                        // hex210_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] hex210_s1_agent_rdata_fifo_src_data;                                         // hex210_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         hex210_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_005:in_0_ready -> hex210_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                           // avalon_st_adapter_005:out_0_valid -> hex210_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                            // avalon_st_adapter_005:out_0_data -> hex210_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                           // hex210_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                           // avalon_st_adapter_005:out_0_error -> hex210_s1_agent:rdata_fifo_sink_error
	wire         timer_0_s1_agent_rdata_fifo_out_valid;                                       // timer_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] timer_0_s1_agent_rdata_fifo_out_data;                                        // timer_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire         timer_0_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_006:in_0_ready -> timer_0_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_006_out_0_valid;                                           // avalon_st_adapter_006:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                            // avalon_st_adapter_006:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                           // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                           // avalon_st_adapter_006:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (9),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (9),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_peripheral_bridge_m0_translator (
		.clk                    (pll_outclk2_clk),                                                             //                       clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_peripheral_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_peripheral_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_peripheral_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_peripheral_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (cpu_peripheral_bridge_m0_read),                                               //                          .read
		.av_readdata            (cpu_peripheral_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_peripheral_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_peripheral_bridge_m0_write),                                              //                          .write
		.av_writedata           (cpu_peripheral_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_peripheral_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) wifi_avalon_rs232_slave_translator (
		.clk                    (pll_outclk2_clk),                                            //                      clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (wifi_avalon_rs232_slave_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (wifi_avalon_rs232_slave_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (wifi_avalon_rs232_slave_agent_m0_read),                      //                         .read
		.uav_write              (wifi_avalon_rs232_slave_agent_m0_write),                     //                         .write
		.uav_waitrequest        (wifi_avalon_rs232_slave_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (wifi_avalon_rs232_slave_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (wifi_avalon_rs232_slave_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (wifi_avalon_rs232_slave_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (wifi_avalon_rs232_slave_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (wifi_avalon_rs232_slave_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (wifi_avalon_rs232_slave_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (WIFI_avalon_rs232_slave_address),                            //      avalon_anti_slave_0.address
		.av_write               (WIFI_avalon_rs232_slave_write),                              //                         .write
		.av_read                (WIFI_avalon_rs232_slave_read),                               //                         .read
		.av_readdata            (WIFI_avalon_rs232_slave_readdata),                           //                         .readdata
		.av_writedata           (WIFI_avalon_rs232_slave_writedata),                          //                         .writedata
		.av_byteenable          (WIFI_avalon_rs232_slave_byteenable),                         //                         .byteenable
		.av_chipselect          (WIFI_avalon_rs232_slave_chipselect),                         //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keys_s1_translator (
		.clk                    (pll_outclk2_clk),                                            //                      clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keys_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (keys_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (keys_s1_agent_m0_read),                                      //                         .read
		.uav_write              (keys_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (keys_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (keys_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (keys_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (keys_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (keys_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (keys_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (keys_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (KEYs_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (KEYs_s1_write),                                              //                         .write
		.av_readdata            (KEYs_s1_readdata),                                           //                         .readdata
		.av_writedata           (KEYs_s1_writedata),                                          //                         .writedata
		.av_chipselect          (KEYs_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (pll_outclk2_clk),                                            //                      clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                                      //                         .read
		.uav_write              (leds_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (LEDs_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                                              //                         .write
		.av_readdata            (LEDs_s1_readdata),                                           //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                                          //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_scl_s1_translator (
		.clk                    (pll_outclk2_clk),                                            //                      clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_scl_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_scl_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (i2c_scl_s1_agent_m0_read),                                   //                         .read
		.uav_write              (i2c_scl_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (i2c_scl_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (i2c_scl_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (i2c_scl_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (i2c_scl_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (i2c_scl_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (i2c_scl_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (i2c_scl_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (i2c_scl_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (i2c_scl_s1_write),                                           //                         .write
		.av_readdata            (i2c_scl_s1_readdata),                                        //                         .readdata
		.av_writedata           (i2c_scl_s1_writedata),                                       //                         .writedata
		.av_chipselect          (i2c_scl_s1_chipselect),                                      //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_sda_s1_translator (
		.clk                    (pll_outclk2_clk),                                            //                      clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_sda_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_sda_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (i2c_sda_s1_agent_m0_read),                                   //                         .read
		.uav_write              (i2c_sda_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (i2c_sda_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (i2c_sda_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (i2c_sda_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (i2c_sda_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (i2c_sda_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (i2c_sda_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (i2c_sda_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (i2c_sda_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (i2c_sda_s1_write),                                           //                         .write
		.av_readdata            (i2c_sda_s1_readdata),                                        //                         .readdata
		.av_writedata           (i2c_sda_s1_writedata),                                       //                         .writedata
		.av_chipselect          (i2c_sda_s1_chipselect),                                      //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex210_s1_translator (
		.clk                    (pll_outclk2_clk),                                            //                      clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex210_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (hex210_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (hex210_s1_agent_m0_read),                                    //                         .read
		.uav_write              (hex210_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (hex210_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (hex210_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (hex210_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (hex210_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (hex210_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (hex210_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (hex210_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (hex210_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (hex210_s1_write),                                            //                         .write
		.av_readdata            (hex210_s1_readdata),                                         //                         .readdata
		.av_writedata           (hex210_s1_writedata),                                        //                         .writedata
		.av_chipselect          (hex210_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (pll_outclk0_clk),                           //                      clk.clk
		.reset                  (timer_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (timer_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                          //                         .write
		.av_readdata            (timer_0_s1_readdata),                       //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                      //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_byteenable          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (77),
		.PKT_CACHE_L               (74),
		.PKT_THREAD_ID_H           (70),
		.PKT_THREAD_ID_L           (70),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (50),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_peripheral_bridge_m0_agent (
		.clk                   (pll_outclk2_clk),                                                             //       clk.clk
		.reset                 (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_peripheral_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_peripheral_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_peripheral_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_peripheral_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_peripheral_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_peripheral_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_peripheral_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_peripheral_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_peripheral_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_peripheral_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_peripheral_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) wifi_avalon_rs232_slave_agent (
		.clk                     (pll_outclk2_clk),                                            //             clk.clk
		.reset                   (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (wifi_avalon_rs232_slave_agent_m0_address),                   //              m0.address
		.m0_burstcount           (wifi_avalon_rs232_slave_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (wifi_avalon_rs232_slave_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (wifi_avalon_rs232_slave_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (wifi_avalon_rs232_slave_agent_m0_lock),                      //                .lock
		.m0_readdata             (wifi_avalon_rs232_slave_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (wifi_avalon_rs232_slave_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (wifi_avalon_rs232_slave_agent_m0_read),                      //                .read
		.m0_waitrequest          (wifi_avalon_rs232_slave_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (wifi_avalon_rs232_slave_agent_m0_writedata),                 //                .writedata
		.m0_write                (wifi_avalon_rs232_slave_agent_m0_write),                     //                .write
		.rp_endofpacket          (wifi_avalon_rs232_slave_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (wifi_avalon_rs232_slave_agent_rp_ready),                     //                .ready
		.rp_valid                (wifi_avalon_rs232_slave_agent_rp_valid),                     //                .valid
		.rp_data                 (wifi_avalon_rs232_slave_agent_rp_data),                      //                .data
		.rp_startofpacket        (wifi_avalon_rs232_slave_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                        //                .channel
		.rf_sink_ready           (wifi_avalon_rs232_slave_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (wifi_avalon_rs232_slave_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (wifi_avalon_rs232_slave_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (wifi_avalon_rs232_slave_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (wifi_avalon_rs232_slave_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (wifi_avalon_rs232_slave_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (wifi_avalon_rs232_slave_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (wifi_avalon_rs232_slave_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (wifi_avalon_rs232_slave_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (wifi_avalon_rs232_slave_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (wifi_avalon_rs232_slave_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wifi_avalon_rs232_slave_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (wifi_avalon_rs232_slave_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wifi_avalon_rs232_slave_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                            //       clk.clk
		.reset             (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (wifi_avalon_rs232_slave_agent_rf_source_data),               //        in.data
		.in_valid          (wifi_avalon_rs232_slave_agent_rf_source_valid),              //          .valid
		.in_ready          (wifi_avalon_rs232_slave_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (wifi_avalon_rs232_slave_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (wifi_avalon_rs232_slave_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (wifi_avalon_rs232_slave_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (wifi_avalon_rs232_slave_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (wifi_avalon_rs232_slave_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (wifi_avalon_rs232_slave_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (wifi_avalon_rs232_slave_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keys_s1_agent (
		.clk                     (pll_outclk2_clk),                                            //             clk.clk
		.reset                   (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keys_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (keys_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (keys_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (keys_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (keys_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (keys_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (keys_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (keys_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (keys_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (keys_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (keys_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (keys_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (keys_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (keys_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (keys_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (keys_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                    //                .channel
		.rf_sink_ready           (keys_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (keys_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (keys_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (keys_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (keys_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (keys_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (keys_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (keys_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (keys_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (keys_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (keys_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keys_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (keys_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keys_s1_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                            //       clk.clk
		.reset             (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keys_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (keys_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (keys_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (keys_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (keys_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (keys_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (keys_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (keys_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (keys_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (keys_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (pll_outclk2_clk),                                            //             clk.clk
		.reset                   (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                    //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                            //       clk.clk
		.reset             (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_scl_s1_agent (
		.clk                     (pll_outclk2_clk),                                            //             clk.clk
		.reset                   (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_scl_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (i2c_scl_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (i2c_scl_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (i2c_scl_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (i2c_scl_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (i2c_scl_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (i2c_scl_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (i2c_scl_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (i2c_scl_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (i2c_scl_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (i2c_scl_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (i2c_scl_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (i2c_scl_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (i2c_scl_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (i2c_scl_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (i2c_scl_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                    //                .channel
		.rf_sink_ready           (i2c_scl_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (i2c_scl_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (i2c_scl_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (i2c_scl_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (i2c_scl_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (i2c_scl_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (i2c_scl_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (i2c_scl_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (i2c_scl_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (i2c_scl_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_scl_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (i2c_scl_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                            //       clk.clk
		.reset             (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (i2c_scl_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (i2c_scl_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (i2c_scl_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (i2c_scl_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (i2c_scl_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (i2c_scl_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (i2c_scl_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_sda_s1_agent (
		.clk                     (pll_outclk2_clk),                                            //             clk.clk
		.reset                   (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_sda_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (i2c_sda_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (i2c_sda_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (i2c_sda_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (i2c_sda_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (i2c_sda_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (i2c_sda_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (i2c_sda_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (i2c_sda_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (i2c_sda_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (i2c_sda_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (i2c_sda_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (i2c_sda_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (i2c_sda_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (i2c_sda_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (i2c_sda_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                    //                .channel
		.rf_sink_ready           (i2c_sda_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (i2c_sda_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (i2c_sda_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (i2c_sda_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (i2c_sda_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (i2c_sda_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (i2c_sda_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (i2c_sda_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (i2c_sda_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (i2c_sda_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_sda_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (i2c_sda_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                            //       clk.clk
		.reset             (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (i2c_sda_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (i2c_sda_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (i2c_sda_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (i2c_sda_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (i2c_sda_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (i2c_sda_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (i2c_sda_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex210_s1_agent (
		.clk                     (pll_outclk2_clk),                                            //             clk.clk
		.reset                   (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex210_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (hex210_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (hex210_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (hex210_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (hex210_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (hex210_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (hex210_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (hex210_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (hex210_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (hex210_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (hex210_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (hex210_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (hex210_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (hex210_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (hex210_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (hex210_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                    //                .channel
		.rf_sink_ready           (hex210_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (hex210_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (hex210_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (hex210_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (hex210_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (hex210_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (hex210_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (hex210_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (hex210_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (hex210_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (hex210_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex210_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (hex210_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex210_s1_agent_rsp_fifo (
		.clk               (pll_outclk2_clk),                                            //       clk.clk
		.reset             (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex210_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (hex210_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (hex210_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (hex210_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (hex210_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (hex210_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (hex210_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (hex210_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (hex210_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (hex210_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (pll_outclk0_clk),                             //             clk.clk
		.reset                   (timer_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_006_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                     //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (pll_outclk0_clk),                             //       clk.clk
		.reset             (timer_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rdata_fifo (
		.clk               (pll_outclk0_clk),                           //       clk.clk
		.reset             (timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (timer_0_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (timer_0_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (timer_0_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (timer_0_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (timer_0_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	audio_nios_mm_interconnect_1_router router (
		.sink_ready         (cpu_peripheral_bridge_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (cpu_peripheral_bridge_m0_agent_cp_valid),                    //          .valid
		.sink_data          (cpu_peripheral_bridge_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (cpu_peripheral_bridge_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (cpu_peripheral_bridge_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                           //       src.ready
		.src_valid          (router_src_valid),                                           //          .valid
		.src_data           (router_src_data),                                            //          .data
		.src_channel        (router_src_channel),                                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                      //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (wifi_avalon_rs232_slave_agent_rp_ready),                     //      sink.ready
		.sink_valid         (wifi_avalon_rs232_slave_agent_rp_valid),                     //          .valid
		.sink_data          (wifi_avalon_rs232_slave_agent_rp_data),                      //          .data
		.sink_startofpacket (wifi_avalon_rs232_slave_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (wifi_avalon_rs232_slave_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //       src.ready
		.src_valid          (router_001_src_valid),                                       //          .valid
		.src_data           (router_001_src_data),                                        //          .data
		.src_channel        (router_001_src_channel),                                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (keys_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (keys_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (keys_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (keys_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (keys_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                       //       src.ready
		.src_valid          (router_002_src_valid),                                       //          .valid
		.src_data           (router_002_src_data),                                        //          .data
		.src_channel        (router_002_src_channel),                                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (leds_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (leds_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (i2c_scl_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (i2c_scl_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (i2c_scl_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (i2c_scl_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (i2c_scl_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (i2c_sda_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (i2c_sda_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (i2c_sda_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (i2c_sda_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (i2c_sda_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                       //       src.ready
		.src_valid          (router_005_src_valid),                                       //          .valid
		.src_data           (router_005_src_data),                                        //          .data
		.src_channel        (router_005_src_channel),                                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (hex210_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (hex210_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (hex210_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (hex210_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (hex210_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                       //       src.ready
		.src_valid          (router_006_src_valid),                                       //          .valid
		.src_data           (router_006_src_data),                                        //          .data
		.src_channel        (router_006_src_channel),                                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_outclk0_clk),                           //       clk.clk
		.reset              (timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                      //       src.ready
		.src_valid          (router_007_src_valid),                      //          .valid
		.src_data           (router_007_src_data),                       //          .data
		.src_channel        (router_007_src_channel),                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_peripheral_bridge_m0_limiter (
		.clk                    (pll_outclk2_clk),                                            //       clk.clk
		.reset                  (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                           //          .valid
		.cmd_sink_data          (router_src_data),                                            //          .data
		.cmd_sink_channel       (router_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (cpu_peripheral_bridge_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (cpu_peripheral_bridge_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (cpu_peripheral_bridge_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (cpu_peripheral_bridge_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (cpu_peripheral_bridge_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                          //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                        //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                           //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.rsp_src_ready          (cpu_peripheral_bridge_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (cpu_peripheral_bridge_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (cpu_peripheral_bridge_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (cpu_peripheral_bridge_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (cpu_peripheral_bridge_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (cpu_peripheral_bridge_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (cpu_peripheral_bridge_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	audio_nios_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (pll_outclk2_clk),                                            //        clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (cpu_peripheral_bridge_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (cpu_peripheral_bridge_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data          (cpu_peripheral_bridge_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket (cpu_peripheral_bridge_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (cpu_peripheral_bridge_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (cpu_peripheral_bridge_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                       //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //           .valid
		.src0_data          (cmd_demux_src0_data),                                        //           .data
		.src0_channel       (cmd_demux_src0_channel),                                     //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                 //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                       //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                       //           .valid
		.src1_data          (cmd_demux_src1_data),                                        //           .data
		.src1_channel       (cmd_demux_src1_channel),                                     //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                               //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                 //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                       //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                       //           .valid
		.src2_data          (cmd_demux_src2_data),                                        //           .data
		.src2_channel       (cmd_demux_src2_channel),                                     //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                               //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                 //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                       //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                       //           .valid
		.src3_data          (cmd_demux_src3_data),                                        //           .data
		.src3_channel       (cmd_demux_src3_channel),                                     //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                               //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                 //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                       //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                       //           .valid
		.src4_data          (cmd_demux_src4_data),                                        //           .data
		.src4_channel       (cmd_demux_src4_channel),                                     //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                               //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                 //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                       //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                       //           .valid
		.src5_data          (cmd_demux_src5_data),                                        //           .data
		.src5_channel       (cmd_demux_src5_channel),                                     //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                               //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                 //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                       //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                       //           .valid
		.src6_data          (cmd_demux_src6_data),                                        //           .data
		.src6_channel       (cmd_demux_src6_channel),                                     //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                               //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                                  //           .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //          .valid
		.src_data            (cmd_mux_src_data),                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src0_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src1_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                      //          .valid
		.src_data            (cmd_mux_002_src_data),                                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src2_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                      //          .valid
		.src_data            (cmd_mux_003_src_data),                                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src3_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                      //          .valid
		.src_data            (cmd_mux_004_src_data),                                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src4_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                      //          .valid
		.src_data            (cmd_mux_005_src_data),                                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                     //          .channel
		.sink0_data          (cmd_demux_src5_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (pll_outclk0_clk),                           //       clk.clk
		.reset               (timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                     //          .valid
		.src_data            (cmd_mux_006_src_data),                      //          .data
		.src_channel         (cmd_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (crosser_out_ready),                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                         //          .valid
		.sink0_channel       (crosser_out_channel),                       //          .channel
		.sink0_data          (crosser_out_data),                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                    //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                       //      sink.ready
		.sink_channel       (router_001_src_channel),                                     //          .channel
		.sink_data          (router_001_src_data),                                        //          .data
		.sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_001_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                  //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                       //      sink.ready
		.sink_channel       (router_002_src_channel),                                     //          .channel
		.sink_data          (router_002_src_data),                                        //          .data
		.sink_startofpacket (router_002_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_002_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                       //      sink.ready
		.sink_channel       (router_004_src_channel),                                     //          .channel
		.sink_data          (router_004_src_data),                                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                              //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                       //      sink.ready
		.sink_channel       (router_005_src_channel),                                     //          .channel
		.sink_data          (router_005_src_data),                                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                              //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (pll_outclk2_clk),                                            //       clk.clk
		.reset              (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                       //      sink.ready
		.sink_channel       (router_006_src_channel),                                     //          .channel
		.sink_data          (router_006_src_data),                                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                              //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_demux_006 rsp_demux_006 (
		.clk                (pll_outclk0_clk),                           //       clk.clk
		.reset              (timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                      //      sink.ready
		.sink_channel       (router_007_src_channel),                    //          .channel
		.sink_data          (router_007_src_data),                       //          .data
		.sink_startofpacket (router_007_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_007_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_006_src0_data),                   //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)             //          .endofpacket
	);

	audio_nios_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (pll_outclk2_clk),                                            //       clk.clk
		.reset               (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                 //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                   //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                    //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                             //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                   //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                   //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                 //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                    //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                             //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                   //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                   //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                 //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                    //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                           //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                             //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                   //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                   //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                 //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                    //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                           //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                             //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                   //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                   //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                 //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                    //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                           //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                             //          .endofpacket
		.sink6_ready         (crosser_001_out_ready),                                      //     sink6.ready
		.sink6_valid         (crosser_001_out_valid),                                      //          .valid
		.sink6_channel       (crosser_001_out_channel),                                    //          .channel
		.sink6_data          (crosser_001_out_data),                                       //          .data
		.sink6_startofpacket (crosser_001_out_startofpacket),                              //          .startofpacket
		.sink6_endofpacket   (crosser_001_out_endofpacket)                                 //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (83),
		.BITS_PER_SYMBOL     (83),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_outclk2_clk),                                            //        in_clk.clk
		.in_reset          (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_outclk0_clk),                                            //       out_clk.clk
		.out_reset         (timer_0_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                       //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                       //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                     //              .channel
		.in_data           (cmd_demux_src6_data),                                        //              .data
		.out_ready         (crosser_out_ready),                                          //           out.ready
		.out_valid         (crosser_out_valid),                                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                    //              .endofpacket
		.out_channel       (crosser_out_channel),                                        //              .channel
		.out_data          (crosser_out_data),                                           //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (83),
		.BITS_PER_SYMBOL     (83),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_outclk0_clk),                                            //        in_clk.clk
		.in_reset          (timer_0_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (pll_outclk2_clk),                                            //       out_clk.clk
		.out_reset         (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_006_src0_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                      //           out.ready
		.out_valid         (crosser_001_out_valid),                                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                    //              .channel
		.out_data          (crosser_001_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_outclk2_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (wifi_avalon_rs232_slave_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (wifi_avalon_rs232_slave_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (wifi_avalon_rs232_slave_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                               //         .error
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_outclk2_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (keys_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (keys_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (keys_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                           //         .error
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_outclk2_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                           //         .error
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_outclk2_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_scl_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (i2c_scl_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (i2c_scl_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                           //         .error
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_outclk2_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_sda_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (i2c_sda_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (i2c_sda_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                           //         .error
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_outclk2_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (cpu_peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex210_s1_agent_rdata_fifo_src_data),                        //     in_0.data
		.in_0_valid     (hex210_s1_agent_rdata_fifo_src_valid),                       //         .valid
		.in_0_ready     (hex210_s1_agent_rdata_fifo_src_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                           //         .error
	);

	audio_nios_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_outclk0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (timer_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)          //         .error
	);

endmodule
