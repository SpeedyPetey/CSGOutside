
DE1_SoC_Audio.elf:     file format elf32-littlenios2
DE1_SoC_Audio.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x050801c4

Program Header:
    LOAD off    0x00001000 vaddr 0x05080000 paddr 0x05080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05080020 paddr 0x05080020 align 2**12
         filesz 0x00014674 memsz 0x00014674 flags r-x
    LOAD off    0x00015694 vaddr 0x05094694 paddr 0x050961c4 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00017cf4 vaddr 0x05097cf4 paddr 0x05097cf4 align 2**12
         filesz 0x00000000 memsz 0x000001fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05080000  05080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  05080020  05080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013fdc  050801c4  050801c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004f4  050941a0  050941a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  05094694  050961c4  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001fc  05097cf4  05097cf4  00017cf4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  000171c4  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  05097ef0  05097ef0  000171c4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000171c4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001118  00000000  00000000  000171e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028117  00000000  00000000  00018300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a47d  00000000  00000000  00040417  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d812  00000000  00000000  0004a894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b38  00000000  00000000  000580a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004128  00000000  00000000  0005abe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019c33  00000000  00000000  0005ed08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007893c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ae0  00000000  00000000  000789a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e2de  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007e2e1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e2ed  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e2ee  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e2ef  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e2f3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e2f7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007e2fb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007e304  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007e30d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0007e316  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001d  00000000  00000000  0007e320  2**0
                  CONTENTS, READONLY
 30 .jdi          000058b1  00000000  00000000  0007e33d  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000ac83a  00000000  00000000  00083bee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05080000 l    d  .entry	00000000 .entry
05080020 l    d  .exceptions	00000000 .exceptions
050801c4 l    d  .text	00000000 .text
050941a0 l    d  .rodata	00000000 .rodata
05094694 l    d  .rwdata	00000000 .rwdata
05097cf4 l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
05097ef0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DE1_SoC_Audio_bsp//obj/HAL/src/crt0.o
0508020c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
05080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AUDIO.c
05097d94 l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
0508256c l     F .text	00000100 timer_isr
05097d14 l     O .bss	00000004 count.4550
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
05094380 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
05094694 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
050944da l     O .rodata	00000010 zeroes.4404
050896ac l     F .text	000000bc __sbprintf
050944ea l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
050898bc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0508b3ec l     F .text	00000008 __fp_unlock
0508b400 l     F .text	0000019c __sinit.part.1
0508b59c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
05094ad8 l     O .rwdata	00000020 lc_ctype_charset
05094ab8 l     O .rwdata	00000020 lc_message_charset
05094af8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
05094518 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0508ea8c l     F .text	000000fc __sprint_r.part.0
0509464c l     O .rodata	00000010 blanks.4348
0509463c l     O .rodata	00000010 zeroes.4349
05090018 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
05091560 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
05091680 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
050916ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0509195c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
05091a50 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
05091b3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
05091d24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
050961b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
05091fb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
050920fc l     F .text	00000038 alt_dev_reg
050950e0 l     O .rwdata	00001060 jtag_uart
05096140 l     O .rwdata	0000002c WIFI
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
050923fc l     F .text	00000210 altera_avalon_jtag_uart_irq
0509260c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
05092c4c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
050933c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
05093638 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
05093778 l     F .text	00000050 alt_get_errno
050937c8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
05087200 g     F .text	00000018 putchar
0508dfdc g     F .text	00000074 _mprec_log10
05080f48 g     F .text	00000100 I2C_Read
0508e0c8 g     F .text	0000008c __any_on
0509070c g     F .text	00000054 _isatty_r
05094524 g     O .rodata	00000028 __mprec_tinytens
05091c60 g     F .text	0000007c alt_main
05087370 g     F .text	00000090 strcpy
05087218 g     F .text	000000c0 _puts_r
05082ca4 g     F .text	00000118 readfromlua
05097df0 g     O .bss	00000100 alt_irq
050845ac g     F .text	00000014 fabs
05090760 g     F .text	00000060 _lseek_r
050961c4 g       *ABS*	00000000 __flash_rwdata_start
05085d50 g     F .text	00000088 .hidden __eqdf2
05097ef0 g       *ABS*	00000000 __alt_heap_start
05097d18 g     O .bss	00000004 pRecording
05080210 g     F .text	00000150 AUDIO_Init
050871bc g     F .text	0000003c printf
05090820 g     F .text	0000009c _wcrtomb_r
05080420 g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
0508e94c g     F .text	0000005c __sseek
0508b73c g     F .text	00000010 __sinit
050900d4 g     F .text	00000140 __swbuf_r
0508c204 g     F .text	0000007c _setlocale_r
0508b5a4 g     F .text	00000068 __sfmoreglue
05091d00 g     F .text	00000024 __malloc_unlock
05092f7c g     F .text	00000090 alt_up_rs232_read_fd
0508ced4 g     F .text	0000015c memmove
05097d1c g     O .bss	00000004 buf_sample_size
0508b724 g     F .text	00000018 _cleanup
05080c5c g     F .text	000000c4 aduio_RegWrite
05080e40 g     F .text	00000030 AUDIO_FifoClear
0508d158 g     F .text	000000a8 _Balloc
05085dd8 g     F .text	000000dc .hidden __gtdf2
05093b90 g     F .text	00000024 altera_nios2_gen2_irq_init
0508717c g     F .text	00000010 __errno
05080de8 g     F .text	00000058 AUDIO_AdcFifoGetData
050812a4 g     F .text	00000130 i2c_write
05080000 g     F .entry	0000001c __reset
05080020 g       *ABS*	00000000 __flash_exceptions_start
050906b0 g     F .text	0000005c _fstat_r
05097de4 g     O .bss	0000000c totaldata
05097d78 g     O .bss	00000004 errno
0508e8c8 g     F .text	00000008 __seofread
05097d0c g     O .bss	00000004 datalen
05097d84 g     O .bss	00000004 alt_argv
0509e16c g       *ABS*	00000000 _gp
05091f84 g     F .text	00000030 usleep
05097d20 g     O .bss	00000004 PlayLen
05097d24 g     O .bss	00000004 beeppPlaying
05094f60 g     O .rwdata	00000180 alt_fd_list
050871f8 g     F .text	00000008 _putchar_r
05093574 g     F .text	00000090 alt_find_dev
0508cd8c g     F .text	00000148 memcpy
05097d28 g     O .bss	00000004 pBuf
0508b3f4 g     F .text	0000000c _cleanup_r
0508703c g     F .text	000000dc .hidden __floatsidf
050936fc g     F .text	0000007c alt_io_redirect
05085eb4 g     F .text	000000f4 .hidden __ltdf2
050941a0 g       *ABS*	00000000 __DTOR_END__
05092f08 g     F .text	00000074 alt_up_rs232_read_data
050872d8 g     F .text	00000014 puts
050845dc g     F .text	00000074 __fpclassifyd
0508df38 g     F .text	000000a4 __ratio
0508fffc g     F .text	0000001c __vfiprintf_internal
05082404 g     F .text	000000d4 init_audio
0509280c g     F .text	0000021c altera_avalon_jtag_uart_read
0508718c g     F .text	00000030 _printf_r
05084b00 g     F .text	00000064 .hidden __udivsi3
050919ac g     F .text	000000a4 isatty
05080b44 g     F .text	0000008c AUDIO_EnableByPass
05097d08 g     O .bss	00000004 readabledata
05094574 g     O .rodata	000000c8 __mprec_tens
05097d04 g     O .bss	00000004 startclip
0508c280 g     F .text	0000000c __locale_charset
05097cfc g     O .bss	00000004 defusing
05093d7c g     F .text	00000090 alt_icache_flush
05081048 g     F .text	00000158 I2C_MultipleRead
05097d74 g     O .bss	00000004 __malloc_top_pad
05097d10 g     O .bss	00000004 beepstartclip
05080994 g     F .text	000000d8 AUDIO_SetLineInVol
05097d2c g     O .bss	00000004 beepcliplength
0509618c g     O .rwdata	00000004 __mb_cur_max
0508c2b0 g     F .text	0000000c _localeconv_r
0508d564 g     F .text	0000003c __i2b
0508bbc0 g     F .text	000004bc __sfvwrite_r
0508e820 g     F .text	00000054 _sbrk_r
050907c0 g     F .text	00000060 _read_r
050961ac g     O .rwdata	00000004 alt_max_fd
05092e84 g     F .text	00000044 alt_up_rs232_check_parity
050903a4 g     F .text	000000f0 _fclose_r
0508b3bc g     F .text	00000030 fflush
05080548 g     F .text	000000e0 AUDIO_DacEnableZeroCross
05097d70 g     O .bss	00000004 __malloc_max_sbrked_mem
050917ac g     F .text	000001b0 alt_irq_register
05084bbc g     F .text	000008ac .hidden __adddf3
0508dce0 g     F .text	0000010c __b2d
05090f80 g     F .text	00000538 .hidden __umoddi3
05091b8c g     F .text	000000d4 lseek
05096180 g     O .rwdata	00000004 __fdlib_version
05096184 g     O .rwdata	00000004 _global_impure_ptr
0508e2bc g     F .text	00000564 _realloc_r
05097ef0 g       *ABS*	00000000 __bss_end
05093a88 g     F .text	00000108 alt_tick
05090a08 g     F .text	00000578 .hidden __udivdi3
0508266c g     F .text	00000234 display_number
0509060c g     F .text	00000024 _fputwc_r
0509454c g     O .rodata	00000028 __mprec_bigtens
0508d348 g     F .text	00000104 __s2b
050914b8 g     F .text	000000a8 .hidden __floatunsidf
050803a8 g     F .text	00000078 AUDIO_MicBoost
0508da20 g     F .text	00000060 __mcmp
0508b75c g     F .text	00000018 __fp_lock_all
05080e70 g     F .text	000000d8 I2C_Write
05097cf4 g     O .bss	00000004 state
050939ec g     F .text	0000009c alt_alarm_stop
05097d7c g     O .bss	00000004 alt_irq_active
050800ec g     F .exceptions	000000d8 alt_irq_handler
05094f38 g     O .rwdata	00000028 alt_dev_null
05084664 g     F .text	000001ec rint
050811a0 g     F .text	0000008c i2c_start
05093378 g     F .text	00000048 alt_dcache_flush_all
0508d44c g     F .text	00000068 __hi0bits
05086fbc g     F .text	00000080 .hidden __fixdfsi
05097d30 g     O .bss	00000004 pPlaying
050961c4 g       *ABS*	00000000 __ram_rwdata_end
050961a4 g     O .rwdata	00000008 alt_dev_list
05092004 g     F .text	000000f8 write
0508e154 g     F .text	000000a0 _putc_r
05094694 g       *ABS*	00000000 __ram_rodata_end
050916fc g     F .text	000000b0 fstat
0509300c g     F .text	00000094 alt_up_rs232_write_fd
05085eb4 g     F .text	000000f4 .hidden __ledf2
050872ec g     F .text	00000084 strcat
0508d798 g     F .text	00000140 __pow5mult
0508eba0 g     F .text	0000145c ___vfiprintf_internal_r
05097d68 g     O .bss	00000004 __nlocale_changed
05084b64 g     F .text	00000058 .hidden __umodsi3
05080bd0 g     F .text	0000008c AUDIO_EnableSiteTone
05097ef0 g       *ABS*	00000000 end
05092340 g     F .text	000000bc altera_avalon_jtag_uart_init
050941a0 g       *ABS*	00000000 __CTOR_LIST__
050ce200 g       *ABS*	00000000 __alt_stack_pointer
05092cc8 g     F .text	00000084 alt_avalon_timer_sc_init
05087118 g     F .text	00000064 .hidden __clzsi2
05092a28 g     F .text	00000224 altera_avalon_jtag_uart_write
0508b74c g     F .text	00000004 __sfp_lock_acquire
0508cca8 g     F .text	000000e4 memchr
05087498 g     F .text	000021f8 ___vfprintf_internal_r
05082520 g     F .text	0000004c init_timer_interrupt
0508b8b0 g     F .text	00000310 _free_r
05097d00 g     O .bss	00000004 cliplength
0508c28c g     F .text	00000010 __locale_mb_cur_max
05093fec g     F .text	00000180 __call_exitprocs
05097d64 g     O .bss	00000004 __mlocale_changed
05096190 g     O .rwdata	00000004 __malloc_sbrk_base
050801c4 g     F .text	0000004c _start
05097d8c g     O .bss	00000004 _alt_tick_rate
0509617c g     O .rwdata	00000004 countdown
05097d34 g     O .bss	00000002 ch_right
0508d8d8 g     F .text	00000148 __lshift
05097d90 g     O .bss	00000004 _alt_nticks
05091d74 g     F .text	000000fc read
0509216c g     F .text	00000070 alt_sys_init
05097d38 g     O .bss	00000004 beepdata
05082a98 g     F .text	000000dc sendConnect
05093ed4 g     F .text	00000118 __register_exitproc
05080628 g     F .text	0000008c AUDIO_DacEnableSoftMute
05082b74 g     F .text	00000130 sendmsg
05092e48 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0508d5a0 g     F .text	000001f8 __multiply
05083280 g     F .text	000010a4 __ieee754_pow
050926b4 g     F .text	00000068 altera_avalon_jtag_uart_close
05082dbc g     F .text	000004c4 pow
05094694 g       *ABS*	00000000 __ram_rwdata_start
050941a0 g       *ABS*	00000000 __ram_rodata_start
05097dbc g     O .bss	00000028 __malloc_current_mallinfo
0508ddec g     F .text	0000014c __d2b
050921dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
05093cc8 g     F .text	000000b4 alt_get_fd
05093220 g     F .text	00000158 alt_busy_sleep
0509028c g     F .text	00000054 _close_r
05093e58 g     F .text	0000007c memcmp
0509229c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
05097ef0 g       *ABS*	00000000 __alt_stack_base
050922ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05089768 g     F .text	00000154 __swsetup_r
050824d8 g     F .text	00000048 init
05085468 g     F .text	000008e8 .hidden __divdf3
0508b60c g     F .text	00000118 __sfp
0508e050 g     F .text	00000078 __copybits
05080498 g     F .text	000000b0 AUDIO_DacDeemphasisControl
05094b30 g     O .rwdata	00000408 __malloc_av_
0508b758 g     F .text	00000004 __sinit_lock_release
0508122c g     F .text	00000078 i2c_stop
05085fa8 g     F .text	00000718 .hidden __muldf3
0508e874 g     F .text	00000054 __sread
05092da8 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
05093bb4 g     F .text	00000114 alt_find_file
05093410 g     F .text	000000a4 alt_dev_llist_insert
05091cdc g     F .text	00000024 __malloc_lock
05091ed4 g     F .text	000000b0 sbrk
05080820 g     F .text	00000090 AUDIO_SetInputSource
0508b360 g     F .text	0000005c _fflush_r
050902e0 g     F .text	000000c4 _calloc_r
05097d3c g     O .bss	00000001 parity_error
05080360 g     F .text	00000048 AUDIO_InterfaceActive
05082964 g     F .text	00000088 plantled
05097cf4 g       *ABS*	00000000 __bss_start
05097d40 g     O .bss	00000004 data
0508d030 g     F .text	00000128 memset
0509616c g     O .rwdata	00000004 numberOfInterrupts
0508152c g     F .text	000009ac main
05097d88 g     O .bss	00000004 alt_envp
05097d6c g     O .bss	00000004 __malloc_max_total_mem
0509223c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
050813d4 g     F .text	00000158 i2c_read
05090214 g     F .text	00000018 __swbuf
050829ec g     F .text	000000ac defuseled
0508e9a8 g     F .text	00000008 __sclose
05084650 g     F .text	00000008 matherr
050ce200 g       *ABS*	00000000 __alt_heap_limit
05090494 g     F .text	00000014 fclose
05089abc g     F .text	00001688 _dtoa_r
0508c49c g     F .text	0000080c _malloc_r
0509097c g     F .text	00000030 __ascii_wctomb
050821f8 g     F .text	0000020c play_audio
050961b0 g     O .rwdata	00000004 alt_errno
0508c07c g     F .text	000000c4 _fwalk
0508e1f4 g     F .text	000000c8 putc
05084a08 g     F .text	00000084 .hidden __divsi3
0508b78c g     F .text	00000124 _malloc_trim_r
050941a0 g       *ABS*	00000000 __CTOR_END__
050845c0 g     F .text	0000001c finite
05080740 g     F .text	000000e0 AUDIO_LineInMute
0508e9b0 g     F .text	000000dc strcmp
050806b4 g     F .text	0000008c AUDIO_MicMute
050941a0 g       *ABS*	00000000 __flash_rodata_start
050941a0 g       *ABS*	00000000 __DTOR_LIST__
050930a0 g     F .text	00000040 alt_up_rs232_open_dev
050849ec g     F .text	0000001c copysign
05085d50 g     F .text	00000088 .hidden __nedf2
05092134 g     F .text	00000038 alt_irq_init
05091e70 g     F .text	00000064 alt_release_fd
05097d44 g     O .bss	00000004 statemsg
05094390 g     O .rodata	00000100 .hidden __clz_tab
05097d60 g     O .bss	00000004 _PathLocale
05093e0c g     F .text	00000014 atexit
0509022c g     F .text	00000060 _write_r
0508c2bc g     F .text	00000018 setlocale
05097d48 g     O .bss	00000001 readdata
05096188 g     O .rwdata	00000004 _impure_ptr
05097d80 g     O .bss	00000004 alt_argc
0508b144 g     F .text	0000021c __sflush_r
05084850 g     F .text	0000019c scalbn
05097d4c g     O .bss	00000004 RecordLen
05093514 g     F .text	00000060 _do_dtors
0508c2a8 g     F .text	00000008 __locale_cjk_lang
05097d50 g     O .bss	00000004 rs232_dev
05080dac g     F .text	0000003c AUDIO_AdcFifoNotEmpty
05080020 g       .exceptions	00000000 alt_irq_entry
0508dc7c g     F .text	00000064 __ulp
05097cf8 g     O .bss	00000004 planting
0508b774 g     F .text	00000018 __fp_unlock_all
05080d5c g     F .text	00000050 AUDIO_DacFifoSetData
0509619c g     O .rwdata	00000008 alt_fs_list
05096178 g     O .rwdata	00000004 offset
05092d4c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
05092ec8 g     F .text	00000040 alt_up_rs232_write_data
05097d54 g     O .bss	00000004 try_cnt
05084658 g     F .text	0000000c nan
05080020 g       *ABS*	00000000 __ram_exceptions_start
050808b0 g     F .text	000000e4 AUDIO_SetSampleRate
0508c2d4 g     F .text	0000000c localeconv
05084324 g     F .text	00000288 __ieee754_sqrt
05080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
05097d58 g     O .bss	00000004 beepPlayLen
050961c4 g       *ABS*	00000000 _edata
05097ef0 g       *ABS*	00000000 _end
05080a6c g     F .text	000000d8 AUDIO_SetLineOutVol
050904a8 g     F .text	00000164 __fputwc
050801c4 g       *ABS*	00000000 __ram_exceptions_end
0509271c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
05096174 g     O .rwdata	00000004 onesec
0508e8d0 g     F .text	0000007c __swrite
05096194 g     O .rwdata	00000004 __malloc_trim_threshold
0508c29c g     F .text	0000000c __locale_msgcharset
05093e20 g     F .text	00000038 exit
0508c140 g     F .text	000000c4 _fwalk_reent
0508da80 g     F .text	000001fc __mdiff
05084a8c g     F .text	00000074 .hidden __modsi3
050ce200 g       *ABS*	00000000 __alt_data_end
05080020 g     F .exceptions	00000000 alt_exception
0508b750 g     F .text	00000004 __sfp_lock_release
05097d5c g     O .bss	00000002 ch_left
050828a0 g     F .text	000000c4 convert_to_seg
00000000 g       *ABS*	00000000 __alt_mem_sdram
0509416c g     F .text	00000034 _exit
050930e0 g     F .text	00000140 alt_alarm_start
0508c2e0 g     F .text	000001bc __smakebuf_r
05087400 g     F .text	00000098 strlen
05093894 g     F .text	00000158 open
05080d20 g     F .text	0000003c AUDIO_DacFifoNotFull
05085dd8 g     F .text	000000dc .hidden __gedf2
05096198 g     O .rwdata	00000004 __wctomb
0508eb88 g     F .text	00000018 __sprint_r
05093604 g     F .text	00000034 alt_icache_flush_all
050961b4 g     O .rwdata	00000004 alt_priority_mask
05081ed8 g     F .text	00000320 choose_audio
05096170 g     O .rwdata	00000004 ticking
05089690 g     F .text	0000001c __vfprintf_internal
050909ac g     F .text	0000005c _wctomb_r
050866c0 g     F .text	000008fc .hidden __subdf3
0508d4b4 g     F .text	000000b0 __lo0bits
050961bc g     O .rwdata	00000008 alt_alarm_list
050934b4 g     F .text	00000060 _do_ctors
05092e08 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
050908bc g     F .text	000000c0 wcrtomb
050915b0 g     F .text	000000d0 close
05091ab8 g     F .text	00000084 alt_load
05090630 g     F .text	00000080 fputwc
0508b754 g     F .text	00000004 __sinit_lock_acquire
0508d228 g     F .text	00000120 __multadd
0508d200 g     F .text	00000028 _Bfree



Disassembly of section .entry:

05080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 508000c:	00bffd16 	blt	zero,r2,5080004 <__alt_data_end+0xfffb1e04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5080010:	00414234 	movhi	at,1288
    ori r1, r1, %lo(_start)
 5080014:	08407114 	ori	at,at,452
    jmp r1
 5080018:	0800683a 	jmp	at
 508001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

05080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 508002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 508003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 508004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 508005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 508006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 508007c:	10000326 	beq	r2,zero,508008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5080080:	20000226 	beq	r4,zero,508008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5080084:	50800ec0 	call	50800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5080088:	00000306 	br	5080098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 508008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5080090:	e8bfff17 	ldw	r2,-4(ea)

05080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 5080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 5080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 508009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50800e8:	ef80083a 	eret

050800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50800ec:	defff904 	addi	sp,sp,-28
 50800f0:	dfc00615 	stw	ra,24(sp)
 50800f4:	df000515 	stw	fp,20(sp)
 50800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 50800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5080100:	0005313a 	rdctl	r2,ipending
 5080104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5080108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 508010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5080110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5080114:	00800044 	movi	r2,1
 5080118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 508011c:	e0fffb17 	ldw	r3,-20(fp)
 5080120:	e0bffc17 	ldw	r2,-16(fp)
 5080124:	1884703a 	and	r2,r3,r2
 5080128:	10001526 	beq	r2,zero,5080180 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 508012c:	00814274 	movhi	r2,1289
 5080130:	109f7c04 	addi	r2,r2,32240
 5080134:	e0fffd17 	ldw	r3,-12(fp)
 5080138:	180690fa 	slli	r3,r3,3
 508013c:	10c5883a 	add	r2,r2,r3
 5080140:	10c00017 	ldw	r3,0(r2)
 5080144:	00814274 	movhi	r2,1289
 5080148:	109f7c04 	addi	r2,r2,32240
 508014c:	e13ffd17 	ldw	r4,-12(fp)
 5080150:	200890fa 	slli	r4,r4,3
 5080154:	1105883a 	add	r2,r2,r4
 5080158:	10800104 	addi	r2,r2,4
 508015c:	10800017 	ldw	r2,0(r2)
 5080160:	e17ffd17 	ldw	r5,-12(fp)
 5080164:	1009883a 	mov	r4,r2
 5080168:	183ee83a 	callr	r3
#endif
        break;
 508016c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5080170:	0005313a 	rdctl	r2,ipending
 5080174:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5080178:	e0bfff17 	ldw	r2,-4(fp)
 508017c:	00000706 	br	508019c <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 5080180:	e0bffc17 	ldw	r2,-16(fp)
 5080184:	1085883a 	add	r2,r2,r2
 5080188:	e0bffc15 	stw	r2,-16(fp)
      i++;
 508018c:	e0bffd17 	ldw	r2,-12(fp)
 5080190:	10800044 	addi	r2,r2,1
 5080194:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 5080198:	003fe006 	br	508011c <__alt_data_end+0xfffb1f1c>

    active = alt_irq_pending ();
 508019c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 50801a0:	e0bffb17 	ldw	r2,-20(fp)
 50801a4:	103fda1e 	bne	r2,zero,5080110 <__alt_data_end+0xfffb1f10>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50801a8:	0001883a 	nop
}
 50801ac:	0001883a 	nop
 50801b0:	e037883a 	mov	sp,fp
 50801b4:	dfc00117 	ldw	ra,4(sp)
 50801b8:	df000017 	ldw	fp,0(sp)
 50801bc:	dec00204 	addi	sp,sp,8
 50801c0:	f800283a 	ret

Disassembly of section .text:

050801c4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 50801c4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 50801c8:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 50801cc:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 50801d0:	00bffd16 	blt	zero,r2,50801c8 <__alt_data_end+0xfffb1fc8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 50801d4:	06c14334 	movhi	sp,1292
    ori sp, sp, %lo(__alt_stack_pointer)
 50801d8:	def88014 	ori	sp,sp,57856
    movhi gp, %hi(_gp)
 50801dc:	06814274 	movhi	gp,1289
    ori gp, gp, %lo(_gp)
 50801e0:	d6b85b14 	ori	gp,gp,57708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 50801e4:	00814274 	movhi	r2,1289
    ori r2, r2, %lo(__bss_start)
 50801e8:	109f3d14 	ori	r2,r2,31988

    movhi r3, %hi(__bss_end)
 50801ec:	00c14274 	movhi	r3,1289
    ori r3, r3, %lo(__bss_end)
 50801f0:	18dfbc14 	ori	r3,r3,32496

    beq r2, r3, 1f
 50801f4:	10c00326 	beq	r2,r3,5080204 <_start+0x40>

0:
    stw zero, (r2)
 50801f8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 50801fc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5080200:	10fffd36 	bltu	r2,r3,50801f8 <__alt_data_end+0xfffb1ff8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5080204:	5091ab80 	call	5091ab8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5080208:	5091c600 	call	5091c60 <alt_main>

0508020c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 508020c:	003fff06 	br	508020c <__alt_data_end+0xfffb200c>

05080210 <AUDIO_Init>:

/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void){
 5080210:	defffd04 	addi	sp,sp,-12
 5080214:	dfc00215 	stw	ra,8(sp)
 5080218:	df000115 	stw	fp,4(sp)
 508021c:	df000104 	addi	fp,sp,4
   bool bSuccess = TRUE;
 5080220:	00800044 	movi	r2,1
 5080224:	e0bfff15 	stw	r2,-4(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));

    if (bSuccess)
 5080228:	e0bfff17 	ldw	r2,-4(fp)
 508022c:	10000426 	beq	r2,zero,5080240 <AUDIO_Init+0x30>
        bSuccess = aduio_RegWrite(15, 0x0000);  // reset
 5080230:	000b883a 	mov	r5,zero
 5080234:	010003c4 	movi	r4,15
 5080238:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508023c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080240:	e0bfff17 	ldw	r2,-4(fp)
 5080244:	10000426 	beq	r2,zero,5080258 <AUDIO_Init+0x48>
        bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
 5080248:	000b883a 	mov	r5,zero
 508024c:	01000244 	movi	r4,9
 5080250:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080254:	e0bfff15 	stw	r2,-4(fp)
       
    //usleep(20*1000);    
    if (bSuccess)
 5080258:	e0bfff17 	ldw	r2,-4(fp)
 508025c:	10000426 	beq	r2,zero,5080270 <AUDIO_Init+0x60>
        bSuccess = aduio_RegWrite(0, 0x0017);  // Left Line In: set left line in volume
 5080260:	014005c4 	movi	r5,23
 5080264:	0009883a 	mov	r4,zero
 5080268:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508026c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080270:	e0bfff17 	ldw	r2,-4(fp)
 5080274:	10000426 	beq	r2,zero,5080288 <AUDIO_Init+0x78>
        bSuccess = aduio_RegWrite(1, 0x0017);  // Right Line In: set right line in volume
 5080278:	014005c4 	movi	r5,23
 508027c:	01000044 	movi	r4,1
 5080280:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080284:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080288:	e0bfff17 	ldw	r2,-4(fp)
 508028c:	10000426 	beq	r2,zero,50802a0 <AUDIO_Init+0x90>
        bSuccess = aduio_RegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
 5080290:	014016c4 	movi	r5,91
 5080294:	01000084 	movi	r4,2
 5080298:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508029c:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 50802a0:	e0bfff17 	ldw	r2,-4(fp)
 50802a4:	10000426 	beq	r2,zero,50802b8 <AUDIO_Init+0xa8>
        bSuccess = aduio_RegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
 50802a8:	014016c4 	movi	r5,91
 50802ac:	010000c4 	movi	r4,3
 50802b0:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50802b4:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)      
 50802b8:	e0bfff17 	ldw	r2,-4(fp)
 50802bc:	10000426 	beq	r2,zero,50802d0 <AUDIO_Init+0xc0>
        bSuccess = aduio_RegWrite(4, 0x0015);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac         
 50802c0:	01400544 	movi	r5,21
 50802c4:	01000104 	movi	r4,4
 50802c8:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50802cc:	e0bfff15 	stw	r2,-4(fp)
                
    if (bSuccess)
 50802d0:	e0bfff17 	ldw	r2,-4(fp)
 50802d4:	10000426 	beq	r2,zero,50802e8 <AUDIO_Init+0xd8>
        bSuccess = aduio_RegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute         
 50802d8:	000b883a 	mov	r5,zero
 50802dc:	01000144 	movi	r4,5
 50802e0:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50802e4:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
 50802e8:	e0bfff17 	ldw	r2,-4(fp)
 50802ec:	10000426 	beq	r2,zero,5080300 <AUDIO_Init+0xf0>
        bSuccess = aduio_RegWrite(6, 0);  // power down control: power on all         
 50802f0:	000b883a 	mov	r5,zero
 50802f4:	01000184 	movi	r4,6
 50802f8:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50802fc:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
 5080300:	e0bfff17 	ldw	r2,-4(fp)
 5080304:	10000426 	beq	r2,zero,5080318 <AUDIO_Init+0x108>
        bSuccess = aduio_RegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode         
 5080308:	01401084 	movi	r5,66
 508030c:	010001c4 	movi	r4,7
 5080310:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080314:	e0bfff15 	stw	r2,-4(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

    if (bSuccess)
 5080318:	e0bfff17 	ldw	r2,-4(fp)
 508031c:	10000426 	beq	r2,zero,5080330 <AUDIO_Init+0x120>
        bSuccess = aduio_RegWrite(8, 0x0002);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
 5080320:	01400084 	movi	r5,2
 5080324:	01000204 	movi	r4,8
 5080328:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508032c:	e0bfff15 	stw	r2,-4(fp)


    if (bSuccess)
 5080330:	e0bfff17 	ldw	r2,-4(fp)
 5080334:	10000426 	beq	r2,zero,5080348 <AUDIO_Init+0x138>
        bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
 5080338:	01400044 	movi	r5,1
 508033c:	01000244 	movi	r4,9
 5080340:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080344:	e0bfff15 	stw	r2,-4(fp)
        
        
         
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));        
    
    return bSuccess;        
 5080348:	e0bfff17 	ldw	r2,-4(fp)
         
}
 508034c:	e037883a 	mov	sp,fp
 5080350:	dfc00117 	ldw	ra,4(sp)
 5080354:	df000017 	ldw	fp,0(sp)
 5080358:	dec00204 	addi	sp,sp,8
 508035c:	f800283a 	ret

05080360 <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive){
 5080360:	defffc04 	addi	sp,sp,-16
 5080364:	dfc00315 	stw	ra,12(sp)
 5080368:	df000215 	stw	fp,8(sp)
 508036c:	df000204 	addi	fp,sp,8
 5080370:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    bSuccess = aduio_RegWrite(9, bActive?0x0001:0x0000); 
 5080374:	e0bfff17 	ldw	r2,-4(fp)
 5080378:	1004c03a 	cmpne	r2,r2,zero
 508037c:	10803fcc 	andi	r2,r2,255
 5080380:	100b883a 	mov	r5,r2
 5080384:	01000244 	movi	r4,9
 5080388:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508038c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 5080390:	e0bffe17 	ldw	r2,-8(fp)
}
 5080394:	e037883a 	mov	sp,fp
 5080398:	dfc00117 	ldw	ra,4(sp)
 508039c:	df000017 	ldw	fp,0(sp)
 50803a0:	dec00204 	addi	sp,sp,8
 50803a4:	f800283a 	ret

050803a8 <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost){
 50803a8:	defffb04 	addi	sp,sp,-20
 50803ac:	dfc00415 	stw	ra,16(sp)
 50803b0:	df000315 	stw	fp,12(sp)
 50803b4:	df000304 	addi	fp,sp,12
 50803b8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[4];
 50803bc:	00814274 	movhi	r2,1289
 50803c0:	109f6504 	addi	r2,r2,32148
 50803c4:	1080020b 	ldhu	r2,8(r2)
 50803c8:	e0bffd0d 	sth	r2,-12(fp)
    if (bBoost)
 50803cc:	e0bfff17 	ldw	r2,-4(fp)
 50803d0:	10000426 	beq	r2,zero,50803e4 <AUDIO_MicBoost+0x3c>
        control |= 0x0001;
 50803d4:	e0bffd0b 	ldhu	r2,-12(fp)
 50803d8:	10800054 	ori	r2,r2,1
 50803dc:	e0bffd0d 	sth	r2,-12(fp)
 50803e0:	00000406 	br	50803f4 <AUDIO_MicBoost+0x4c>
    else        
        control &= 0xFFFE;
 50803e4:	e0fffd0b 	ldhu	r3,-12(fp)
 50803e8:	00bfff84 	movi	r2,-2
 50803ec:	1884703a 	and	r2,r3,r2
 50803f0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 50803f4:	e0bffd0b 	ldhu	r2,-12(fp)
 50803f8:	100b883a 	mov	r5,r2
 50803fc:	01000104 	movi	r4,4
 5080400:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080404:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 5080408:	e0bffe17 	ldw	r2,-8(fp)
}
 508040c:	e037883a 	mov	sp,fp
 5080410:	dfc00117 	ldw	ra,4(sp)
 5080414:	df000017 	ldw	fp,0(sp)
 5080418:	dec00204 	addi	sp,sp,8
 508041c:	f800283a 	ret

05080420 <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable){
 5080420:	defffb04 	addi	sp,sp,-20
 5080424:	dfc00415 	stw	ra,16(sp)
 5080428:	df000315 	stw	fp,12(sp)
 508042c:	df000304 	addi	fp,sp,12
 5080430:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 5080434:	00814274 	movhi	r2,1289
 5080438:	109f6504 	addi	r2,r2,32148
 508043c:	1080028b 	ldhu	r2,10(r2)
 5080440:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 5080444:	e0bfff17 	ldw	r2,-4(fp)
 5080448:	10000526 	beq	r2,zero,5080460 <AUDIO_AdcEnableHighPassFilter+0x40>
        control &= 0xFFFE;
 508044c:	e0fffd0b 	ldhu	r3,-12(fp)
 5080450:	00bfff84 	movi	r2,-2
 5080454:	1884703a 	and	r2,r3,r2
 5080458:	e0bffd0d 	sth	r2,-12(fp)
 508045c:	00000306 	br	508046c <AUDIO_AdcEnableHighPassFilter+0x4c>
    else        
        control |= 0x0001;
 5080460:	e0bffd0b 	ldhu	r2,-12(fp)
 5080464:	10800054 	ori	r2,r2,1
 5080468:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 508046c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080470:	100b883a 	mov	r5,r2
 5080474:	01000144 	movi	r4,5
 5080478:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508047c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;    
 5080480:	e0bffe17 	ldw	r2,-8(fp)
}
 5080484:	e037883a 	mov	sp,fp
 5080488:	dfc00117 	ldw	ra,4(sp)
 508048c:	df000017 	ldw	fp,0(sp)
 5080490:	dec00204 	addi	sp,sp,8
 5080494:	f800283a 	ret

05080498 <AUDIO_DacDeemphasisControl>:



bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type){
 5080498:	defffb04 	addi	sp,sp,-20
 508049c:	dfc00415 	stw	ra,16(sp)
 50804a0:	df000315 	stw	fp,12(sp)
 50804a4:	df000304 	addi	fp,sp,12
 50804a8:	2005883a 	mov	r2,r4
 50804ac:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 50804b0:	00814274 	movhi	r2,1289
 50804b4:	109f6504 	addi	r2,r2,32148
 50804b8:	1080028b 	ldhu	r2,10(r2)
 50804bc:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFF9;
 50804c0:	e0fffd0b 	ldhu	r3,-12(fp)
 50804c4:	00bffe44 	movi	r2,-7
 50804c8:	1884703a 	and	r2,r3,r2
 50804cc:	e0bffd0d 	sth	r2,-12(fp)
    switch(deemphasis_type){
 50804d0:	e0bfff03 	ldbu	r2,-4(fp)
 50804d4:	10c000a0 	cmpeqi	r3,r2,2
 50804d8:	1800081e 	bne	r3,zero,50804fc <AUDIO_DacDeemphasisControl+0x64>
 50804dc:	10c000e0 	cmpeqi	r3,r2,3
 50804e0:	18000a1e 	bne	r3,zero,508050c <AUDIO_DacDeemphasisControl+0x74>
 50804e4:	10800060 	cmpeqi	r2,r2,1
 50804e8:	10000c26 	beq	r2,zero,508051c <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_48K: control |= ((0x03) << 1); break;
 50804ec:	e0bffd0b 	ldhu	r2,-12(fp)
 50804f0:	10800194 	ori	r2,r2,6
 50804f4:	e0bffd0d 	sth	r2,-12(fp)
 50804f8:	00000806 	br	508051c <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_44K1: control |= ((0x02) << 1); break;
 50804fc:	e0bffd0b 	ldhu	r2,-12(fp)
 5080500:	10800114 	ori	r2,r2,4
 5080504:	e0bffd0d 	sth	r2,-12(fp)
 5080508:	00000406 	br	508051c <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_32K: control |= ((0x01) << 1); break;
 508050c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080510:	10800094 	ori	r2,r2,2
 5080514:	e0bffd0d 	sth	r2,-12(fp)
 5080518:	0001883a 	nop
    }
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 508051c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080520:	100b883a 	mov	r5,r2
 5080524:	01000144 	movi	r4,5
 5080528:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508052c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 5080530:	e0bffe17 	ldw	r2,-8(fp)
}
 5080534:	e037883a 	mov	sp,fp
 5080538:	dfc00117 	ldw	ra,4(sp)
 508053c:	df000017 	ldw	fp,0(sp)
 5080540:	dec00204 	addi	sp,sp,8
 5080544:	f800283a 	ret

05080548 <AUDIO_DacEnableZeroCross>:

bool AUDIO_DacEnableZeroCross(bool bEnable){
 5080548:	defffa04 	addi	sp,sp,-24
 508054c:	dfc00515 	stw	ra,20(sp)
 5080550:	df000415 	stw	fp,16(sp)
 5080554:	df000404 	addi	fp,sp,16
 5080558:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[2];
 508055c:	00814274 	movhi	r2,1289
 5080560:	109f6504 	addi	r2,r2,32148
 5080564:	1080010b 	ldhu	r2,4(r2)
 5080568:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[3];
 508056c:	00814274 	movhi	r2,1289
 5080570:	109f6504 	addi	r2,r2,32148
 5080574:	1080018b 	ldhu	r2,6(r2)
 5080578:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
 508057c:	00802004 	movi	r2,128
 5080580:	e0bffe0d 	sth	r2,-8(fp)
    if (bEnable){
 5080584:	e0bfff17 	ldw	r2,-4(fp)
 5080588:	10000926 	beq	r2,zero,50805b0 <AUDIO_DacEnableZeroCross+0x68>
        control_l |= mask;
 508058c:	e0fffd0b 	ldhu	r3,-12(fp)
 5080590:	e0bffe0b 	ldhu	r2,-8(fp)
 5080594:	1884b03a 	or	r2,r3,r2
 5080598:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 508059c:	e0fffd8b 	ldhu	r3,-10(fp)
 50805a0:	e0bffe0b 	ldhu	r2,-8(fp)
 50805a4:	1884b03a 	or	r2,r3,r2
 50805a8:	e0bffd8d 	sth	r2,-10(fp)
 50805ac:	00000c06 	br	50805e0 <AUDIO_DacEnableZeroCross+0x98>
    }else{        
        control_l &= ~mask;
 50805b0:	e0bffe0b 	ldhu	r2,-8(fp)
 50805b4:	0084303a 	nor	r2,zero,r2
 50805b8:	1007883a 	mov	r3,r2
 50805bc:	e0bffd0b 	ldhu	r2,-12(fp)
 50805c0:	1884703a 	and	r2,r3,r2
 50805c4:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 50805c8:	e0bffe0b 	ldhu	r2,-8(fp)
 50805cc:	0084303a 	nor	r2,zero,r2
 50805d0:	1007883a 	mov	r3,r2
 50805d4:	e0bffd8b 	ldhu	r2,-10(fp)
 50805d8:	1884703a 	and	r2,r3,r2
 50805dc:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(2, control_l);  // Left Line In: set left line in volume
 50805e0:	e0bffd0b 	ldhu	r2,-12(fp)
 50805e4:	100b883a 	mov	r5,r2
 50805e8:	01000084 	movi	r4,2
 50805ec:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50805f0:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
 50805f4:	e0bffc17 	ldw	r2,-16(fp)
 50805f8:	10000526 	beq	r2,zero,5080610 <AUDIO_DacEnableZeroCross+0xc8>
        bSuccess = aduio_RegWrite(3, control_r);  // Left Line In: set left line in volume
 50805fc:	e0bffd8b 	ldhu	r2,-10(fp)
 5080600:	100b883a 	mov	r5,r2
 5080604:	010000c4 	movi	r4,3
 5080608:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 508060c:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;      
 5080610:	e0bffc17 	ldw	r2,-16(fp)
}
 5080614:	e037883a 	mov	sp,fp
 5080618:	dfc00117 	ldw	ra,4(sp)
 508061c:	df000017 	ldw	fp,0(sp)
 5080620:	dec00204 	addi	sp,sp,8
 5080624:	f800283a 	ret

05080628 <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable){
 5080628:	defffb04 	addi	sp,sp,-20
 508062c:	dfc00415 	stw	ra,16(sp)
 5080630:	df000315 	stw	fp,12(sp)
 5080634:	df000304 	addi	fp,sp,12
 5080638:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[5];
 508063c:	00814274 	movhi	r2,1289
 5080640:	109f6504 	addi	r2,r2,32148
 5080644:	1080028b 	ldhu	r2,10(r2)
 5080648:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
 508064c:	00800204 	movi	r2,8
 5080650:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080654:	e0bfff17 	ldw	r2,-4(fp)
 5080658:	10000526 	beq	r2,zero,5080670 <AUDIO_DacEnableSoftMute+0x48>
        control |= mask;
 508065c:	e0fffd0b 	ldhu	r3,-12(fp)
 5080660:	e0bffd8b 	ldhu	r2,-10(fp)
 5080664:	1884b03a 	or	r2,r3,r2
 5080668:	e0bffd0d 	sth	r2,-12(fp)
 508066c:	00000606 	br	5080688 <AUDIO_DacEnableSoftMute+0x60>
    else        
        control &= ~mask;
 5080670:	e0bffd8b 	ldhu	r2,-10(fp)
 5080674:	0084303a 	nor	r2,zero,r2
 5080678:	1007883a 	mov	r3,r2
 508067c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080680:	1884703a 	and	r2,r3,r2
 5080684:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 5080688:	e0bffd0b 	ldhu	r2,-12(fp)
 508068c:	100b883a 	mov	r5,r2
 5080690:	01000144 	movi	r4,5
 5080694:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080698:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 508069c:	e0bffe17 	ldw	r2,-8(fp)
}
 50806a0:	e037883a 	mov	sp,fp
 50806a4:	dfc00117 	ldw	ra,4(sp)
 50806a8:	df000017 	ldw	fp,0(sp)
 50806ac:	dec00204 	addi	sp,sp,8
 50806b0:	f800283a 	ret

050806b4 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute){
 50806b4:	defffb04 	addi	sp,sp,-20
 50806b8:	dfc00415 	stw	ra,16(sp)
 50806bc:	df000315 	stw	fp,12(sp)
 50806c0:	df000304 	addi	fp,sp,12
 50806c4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 50806c8:	00814274 	movhi	r2,1289
 50806cc:	109f6504 	addi	r2,r2,32148
 50806d0:	1080020b 	ldhu	r2,8(r2)
 50806d4:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 1;
 50806d8:	00800084 	movi	r2,2
 50806dc:	e0bffd8d 	sth	r2,-10(fp)
    if (bMute)
 50806e0:	e0bfff17 	ldw	r2,-4(fp)
 50806e4:	10000526 	beq	r2,zero,50806fc <AUDIO_MicMute+0x48>
        control |= mask;
 50806e8:	e0fffd0b 	ldhu	r3,-12(fp)
 50806ec:	e0bffd8b 	ldhu	r2,-10(fp)
 50806f0:	1884b03a 	or	r2,r3,r2
 50806f4:	e0bffd0d 	sth	r2,-12(fp)
 50806f8:	00000606 	br	5080714 <AUDIO_MicMute+0x60>
    else        
        control &= ~mask;
 50806fc:	e0bffd8b 	ldhu	r2,-10(fp)
 5080700:	0084303a 	nor	r2,zero,r2
 5080704:	1007883a 	mov	r3,r2
 5080708:	e0bffd0b 	ldhu	r2,-12(fp)
 508070c:	1884703a 	and	r2,r3,r2
 5080710:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 5080714:	e0bffd0b 	ldhu	r2,-12(fp)
 5080718:	100b883a 	mov	r5,r2
 508071c:	01000104 	movi	r4,4
 5080720:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080724:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 5080728:	e0bffe17 	ldw	r2,-8(fp)
}
 508072c:	e037883a 	mov	sp,fp
 5080730:	dfc00117 	ldw	ra,4(sp)
 5080734:	df000017 	ldw	fp,0(sp)
 5080738:	dec00204 	addi	sp,sp,8
 508073c:	f800283a 	ret

05080740 <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute){
 5080740:	defffa04 	addi	sp,sp,-24
 5080744:	dfc00515 	stw	ra,20(sp)
 5080748:	df000415 	stw	fp,16(sp)
 508074c:	df000404 	addi	fp,sp,16
 5080750:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[0];
 5080754:	00814274 	movhi	r2,1289
 5080758:	109f6504 	addi	r2,r2,32148
 508075c:	1080000b 	ldhu	r2,0(r2)
 5080760:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[1];
 5080764:	00814274 	movhi	r2,1289
 5080768:	109f6504 	addi	r2,r2,32148
 508076c:	1080008b 	ldhu	r2,2(r2)
 5080770:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
 5080774:	00802004 	movi	r2,128
 5080778:	e0bffe0d 	sth	r2,-8(fp)
    if (bMute){
 508077c:	e0bfff17 	ldw	r2,-4(fp)
 5080780:	10000926 	beq	r2,zero,50807a8 <AUDIO_LineInMute+0x68>
        control_l |= mask;
 5080784:	e0fffd0b 	ldhu	r3,-12(fp)
 5080788:	e0bffe0b 	ldhu	r2,-8(fp)
 508078c:	1884b03a 	or	r2,r3,r2
 5080790:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 5080794:	e0fffd8b 	ldhu	r3,-10(fp)
 5080798:	e0bffe0b 	ldhu	r2,-8(fp)
 508079c:	1884b03a 	or	r2,r3,r2
 50807a0:	e0bffd8d 	sth	r2,-10(fp)
 50807a4:	00000c06 	br	50807d8 <AUDIO_LineInMute+0x98>
    }else{        
        control_l &= ~mask;
 50807a8:	e0bffe0b 	ldhu	r2,-8(fp)
 50807ac:	0084303a 	nor	r2,zero,r2
 50807b0:	1007883a 	mov	r3,r2
 50807b4:	e0bffd0b 	ldhu	r2,-12(fp)
 50807b8:	1884703a 	and	r2,r3,r2
 50807bc:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 50807c0:	e0bffe0b 	ldhu	r2,-8(fp)
 50807c4:	0084303a 	nor	r2,zero,r2
 50807c8:	1007883a 	mov	r3,r2
 50807cc:	e0bffd8b 	ldhu	r2,-10(fp)
 50807d0:	1884703a 	and	r2,r3,r2
 50807d4:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(0, control_l);  // Left Line In: set left line in volume
 50807d8:	e0bffd0b 	ldhu	r2,-12(fp)
 50807dc:	100b883a 	mov	r5,r2
 50807e0:	0009883a 	mov	r4,zero
 50807e4:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50807e8:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
 50807ec:	e0bffc17 	ldw	r2,-16(fp)
 50807f0:	10000526 	beq	r2,zero,5080808 <AUDIO_LineInMute+0xc8>
        bSuccess = aduio_RegWrite(1, control_r);  // Left Line In: set left line in volume
 50807f4:	e0bffd8b 	ldhu	r2,-10(fp)
 50807f8:	100b883a 	mov	r5,r2
 50807fc:	01000044 	movi	r4,1
 5080800:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080804:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;        
 5080808:	e0bffc17 	ldw	r2,-16(fp)
}
 508080c:	e037883a 	mov	sp,fp
 5080810:	dfc00117 	ldw	ra,4(sp)
 5080814:	df000017 	ldw	fp,0(sp)
 5080818:	dec00204 	addi	sp,sp,8
 508081c:	f800283a 	ret

05080820 <AUDIO_SetInputSource>:



bool AUDIO_SetInputSource(alt_u8 InputSource){
 5080820:	defffb04 	addi	sp,sp,-20
 5080824:	dfc00415 	stw	ra,16(sp)
 5080828:	df000315 	stw	fp,12(sp)
 508082c:	df000304 	addi	fp,sp,12
 5080830:	2005883a 	mov	r2,r4
 5080834:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080838:	00814274 	movhi	r2,1289
 508083c:	109f6504 	addi	r2,r2,32148
 5080840:	1080020b 	ldhu	r2,8(r2)
 5080844:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 2;
 5080848:	00800104 	movi	r2,4
 508084c:	e0bffd8d 	sth	r2,-10(fp)
    if (InputSource == SOURCE_MIC)
 5080850:	e0bfff03 	ldbu	r2,-4(fp)
 5080854:	1000051e 	bne	r2,zero,508086c <AUDIO_SetInputSource+0x4c>
        control |= mask;
 5080858:	e0fffd0b 	ldhu	r3,-12(fp)
 508085c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080860:	1884b03a 	or	r2,r3,r2
 5080864:	e0bffd0d 	sth	r2,-12(fp)
 5080868:	00000606 	br	5080884 <AUDIO_SetInputSource+0x64>
    else        
        control &= ~mask;
 508086c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080870:	0084303a 	nor	r2,zero,r2
 5080874:	1007883a 	mov	r3,r2
 5080878:	e0bffd0b 	ldhu	r2,-12(fp)
 508087c:	1884703a 	and	r2,r3,r2
 5080880:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 5080884:	e0bffd0b 	ldhu	r2,-12(fp)
 5080888:	100b883a 	mov	r5,r2
 508088c:	01000104 	movi	r4,4
 5080890:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080894:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 5080898:	e0bffe17 	ldw	r2,-8(fp)
}
 508089c:	e037883a 	mov	sp,fp
 50808a0:	dfc00117 	ldw	ra,4(sp)
 50808a4:	df000017 	ldw	fp,0(sp)
 50808a8:	dec00204 	addi	sp,sp,8
 50808ac:	f800283a 	ret

050808b0 <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate){
 50808b0:	defffb04 	addi	sp,sp,-20
 50808b4:	dfc00415 	stw	ra,16(sp)
 50808b8:	df000315 	stw	fp,12(sp)
 50808bc:	df000304 	addi	fp,sp,12
 50808c0:	2005883a 	mov	r2,r4
 50808c4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = 0;
 50808c8:	e03ffd0d 	sth	zero,-12(fp)

    switch(SampleRate){
 50808cc:	e0bfff03 	ldbu	r2,-4(fp)
 50808d0:	10c001e8 	cmpgeui	r3,r2,7
 50808d4:	1800211e 	bne	r3,zero,508095c <AUDIO_SetSampleRate+0xac>
 50808d8:	100690ba 	slli	r3,r2,2
 50808dc:	00814234 	movhi	r2,1288
 50808e0:	10823c04 	addi	r2,r2,2288
 50808e4:	1885883a 	add	r2,r3,r2
 50808e8:	10800017 	ldw	r2,0(r2)
 50808ec:	1000683a 	jmp	r2
 50808f0:	0508090c 	andi	r20,zero,8228
 50808f4:	05080914 	movui	r20,8228
 50808f8:	05080920 	cmpeqi	r20,zero,8228
 50808fc:	0508092c 	andhi	r20,zero,8228
 5080900:	05080938 	rdprs	r20,zero,8228
 5080904:	05080944 	movi	r20,8229
 5080908:	05080950 	cmplti	r20,zero,8229
         // MCLK = 18.432
        case RATE_ADC48K_DAC48K: control = (0x0) << 2; break;
 508090c:	e03ffd0d 	sth	zero,-12(fp)
 5080910:	00001206 	br	508095c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC48K_DAC8K: control = (0x1) << 2; break;
 5080914:	00800104 	movi	r2,4
 5080918:	e0bffd0d 	sth	r2,-12(fp)
 508091c:	00000f06 	br	508095c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC8K_DAC48K: control = (0x2) << 2; break;
 5080920:	00800204 	movi	r2,8
 5080924:	e0bffd0d 	sth	r2,-12(fp)
 5080928:	00000c06 	br	508095c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC8K_DAC8K: control = (0x3) << 2; break;
 508092c:	00800304 	movi	r2,12
 5080930:	e0bffd0d 	sth	r2,-12(fp)
 5080934:	00000906 	br	508095c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC32K_DAC32K: control = (0x6) << 2; break;
 5080938:	00800604 	movi	r2,24
 508093c:	e0bffd0d 	sth	r2,-12(fp)
 5080940:	00000606 	br	508095c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC96K_DAC96K: control = (0x7) << 2; break;
 5080944:	00800704 	movi	r2,28
 5080948:	e0bffd0d 	sth	r2,-12(fp)
 508094c:	00000306 	br	508095c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC44K1_DAC44K1: control = (0x8) << 2; break;
 5080950:	00800804 	movi	r2,32
 5080954:	e0bffd0d 	sth	r2,-12(fp)
 5080958:	0001883a 	nop
        // MCLK = 11.2896
      //  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
      //  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
    }
    control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
 508095c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080960:	10800094 	ori	r2,r2,2
 5080964:	e0bffd0d 	sth	r2,-12(fp)
        
    bSuccess = aduio_RegWrite(8, control);  // Left Line In: set left line in volume
 5080968:	e0bffd0b 	ldhu	r2,-12(fp)
 508096c:	100b883a 	mov	r5,r2
 5080970:	01000204 	movi	r4,8
 5080974:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080978:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 508097c:	e0bffe17 	ldw	r2,-8(fp)
}
 5080980:	e037883a 	mov	sp,fp
 5080984:	dfc00117 	ldw	ra,4(sp)
 5080988:	df000017 	ldw	fp,0(sp)
 508098c:	dec00204 	addi	sp,sp,8
 5080990:	f800283a 	ret

05080994 <AUDIO_SetLineInVol>:





bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol){
 5080994:	defffa04 	addi	sp,sp,-24
 5080998:	dfc00515 	stw	ra,20(sp)
 508099c:	df000415 	stw	fp,16(sp)
 50809a0:	df000404 	addi	fp,sp,16
 50809a4:	2007883a 	mov	r3,r4
 50809a8:	2805883a 	mov	r2,r5
 50809ac:	e0fffe0d 	sth	r3,-8(fp)
 50809b0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    
    // left
    control = reg_file[0];
 50809b4:	00814274 	movhi	r2,1289
 50809b8:	109f6504 	addi	r2,r2,32148
 50809bc:	1080000b 	ldhu	r2,0(r2)
 50809c0:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFE0;
 50809c4:	e0fffd0b 	ldhu	r3,-12(fp)
 50809c8:	00bff804 	movi	r2,-32
 50809cc:	1884703a 	and	r2,r3,r2
 50809d0:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x1F;
 50809d4:	e0bffe0b 	ldhu	r2,-8(fp)
 50809d8:	108007cc 	andi	r2,r2,31
 50809dc:	1007883a 	mov	r3,r2
 50809e0:	e0bffd0b 	ldhu	r2,-12(fp)
 50809e4:	1885883a 	add	r2,r3,r2
 50809e8:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(0, control);
 50809ec:	e0bffd0b 	ldhu	r2,-12(fp)
 50809f0:	100b883a 	mov	r5,r2
 50809f4:	0009883a 	mov	r4,zero
 50809f8:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 50809fc:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
 5080a00:	e0bffc17 	ldw	r2,-16(fp)
 5080a04:	10001326 	beq	r2,zero,5080a54 <AUDIO_SetLineInVol+0xc0>
        // right
        control = reg_file[1];
 5080a08:	00814274 	movhi	r2,1289
 5080a0c:	109f6504 	addi	r2,r2,32148
 5080a10:	1080008b 	ldhu	r2,2(r2)
 5080a14:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFFE0;
 5080a18:	e0fffd0b 	ldhu	r3,-12(fp)
 5080a1c:	00bff804 	movi	r2,-32
 5080a20:	1884703a 	and	r2,r3,r2
 5080a24:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x1F;
 5080a28:	e0bfff0b 	ldhu	r2,-4(fp)
 5080a2c:	108007cc 	andi	r2,r2,31
 5080a30:	1007883a 	mov	r3,r2
 5080a34:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a38:	1885883a 	add	r2,r3,r2
 5080a3c:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(1, control);        
 5080a40:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a44:	100b883a 	mov	r5,r2
 5080a48:	01000044 	movi	r4,1
 5080a4c:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080a50:	e0bffc15 	stw	r2,-16(fp)
    }
    
    //AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));        
    return bSuccess;
 5080a54:	e0bffc17 	ldw	r2,-16(fp)
}
 5080a58:	e037883a 	mov	sp,fp
 5080a5c:	dfc00117 	ldw	ra,4(sp)
 5080a60:	df000017 	ldw	fp,0(sp)
 5080a64:	dec00204 	addi	sp,sp,8
 5080a68:	f800283a 	ret

05080a6c <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol){
 5080a6c:	defffa04 	addi	sp,sp,-24
 5080a70:	dfc00515 	stw	ra,20(sp)
 5080a74:	df000415 	stw	fp,16(sp)
 5080a78:	df000404 	addi	fp,sp,16
 5080a7c:	2007883a 	mov	r3,r4
 5080a80:	2805883a 	mov	r2,r5
 5080a84:	e0fffe0d 	sth	r3,-8(fp)
 5080a88:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;

 
    // left
    control = reg_file[2];
 5080a8c:	00814274 	movhi	r2,1289
 5080a90:	109f6504 	addi	r2,r2,32148
 5080a94:	1080010b 	ldhu	r2,4(r2)
 5080a98:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFF80;
 5080a9c:	e0fffd0b 	ldhu	r3,-12(fp)
 5080aa0:	00bfe004 	movi	r2,-128
 5080aa4:	1884703a 	and	r2,r3,r2
 5080aa8:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x7F;
 5080aac:	e0bffe0b 	ldhu	r2,-8(fp)
 5080ab0:	10801fcc 	andi	r2,r2,127
 5080ab4:	1007883a 	mov	r3,r2
 5080ab8:	e0bffd0b 	ldhu	r2,-12(fp)
 5080abc:	1885883a 	add	r2,r3,r2
 5080ac0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(2, control);
 5080ac4:	e0bffd0b 	ldhu	r2,-12(fp)
 5080ac8:	100b883a 	mov	r5,r2
 5080acc:	01000084 	movi	r4,2
 5080ad0:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080ad4:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
 5080ad8:	e0bffc17 	ldw	r2,-16(fp)
 5080adc:	10001326 	beq	r2,zero,5080b2c <AUDIO_SetLineOutVol+0xc0>
        // right
        control = reg_file[3];
 5080ae0:	00814274 	movhi	r2,1289
 5080ae4:	109f6504 	addi	r2,r2,32148
 5080ae8:	1080018b 	ldhu	r2,6(r2)
 5080aec:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFF80;
 5080af0:	e0fffd0b 	ldhu	r3,-12(fp)
 5080af4:	00bfe004 	movi	r2,-128
 5080af8:	1884703a 	and	r2,r3,r2
 5080afc:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x7F;
 5080b00:	e0bfff0b 	ldhu	r2,-4(fp)
 5080b04:	10801fcc 	andi	r2,r2,127
 5080b08:	1007883a 	mov	r3,r2
 5080b0c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b10:	1885883a 	add	r2,r3,r2
 5080b14:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(3, control);        
 5080b18:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b1c:	100b883a 	mov	r5,r2
 5080b20:	010000c4 	movi	r4,3
 5080b24:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080b28:	e0bffc15 	stw	r2,-16(fp)
    }    
    
    //AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
    
    return bSuccess;
 5080b2c:	e0bffc17 	ldw	r2,-16(fp)
}
 5080b30:	e037883a 	mov	sp,fp
 5080b34:	dfc00117 	ldw	ra,4(sp)
 5080b38:	df000017 	ldw	fp,0(sp)
 5080b3c:	dec00204 	addi	sp,sp,8
 5080b40:	f800283a 	ret

05080b44 <AUDIO_EnableByPass>:


bool AUDIO_EnableByPass(bool bEnable){
 5080b44:	defffb04 	addi	sp,sp,-20
 5080b48:	dfc00415 	stw	ra,16(sp)
 5080b4c:	df000315 	stw	fp,12(sp)
 5080b50:	df000304 	addi	fp,sp,12
 5080b54:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080b58:	00814274 	movhi	r2,1289
 5080b5c:	109f6504 	addi	r2,r2,32148
 5080b60:	1080020b 	ldhu	r2,8(r2)
 5080b64:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
 5080b68:	00800204 	movi	r2,8
 5080b6c:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080b70:	e0bfff17 	ldw	r2,-4(fp)
 5080b74:	10000526 	beq	r2,zero,5080b8c <AUDIO_EnableByPass+0x48>
        control |= mask;
 5080b78:	e0fffd0b 	ldhu	r3,-12(fp)
 5080b7c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080b80:	1884b03a 	or	r2,r3,r2
 5080b84:	e0bffd0d 	sth	r2,-12(fp)
 5080b88:	00000606 	br	5080ba4 <AUDIO_EnableByPass+0x60>
    else        
        control &= ~mask;
 5080b8c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080b90:	0084303a 	nor	r2,zero,r2
 5080b94:	1007883a 	mov	r3,r2
 5080b98:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b9c:	1884703a 	and	r2,r3,r2
 5080ba0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
 5080ba4:	e0bffd0b 	ldhu	r2,-12(fp)
 5080ba8:	100b883a 	mov	r5,r2
 5080bac:	01000104 	movi	r4,4
 5080bb0:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080bb4:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;  	
 5080bb8:	e0bffe17 	ldw	r2,-8(fp)
}
 5080bbc:	e037883a 	mov	sp,fp
 5080bc0:	dfc00117 	ldw	ra,4(sp)
 5080bc4:	df000017 	ldw	fp,0(sp)
 5080bc8:	dec00204 	addi	sp,sp,8
 5080bcc:	f800283a 	ret

05080bd0 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable){
 5080bd0:	defffb04 	addi	sp,sp,-20
 5080bd4:	dfc00415 	stw	ra,16(sp)
 5080bd8:	df000315 	stw	fp,12(sp)
 5080bdc:	df000304 	addi	fp,sp,12
 5080be0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080be4:	00814274 	movhi	r2,1289
 5080be8:	109f6504 	addi	r2,r2,32148
 5080bec:	1080020b 	ldhu	r2,8(r2)
 5080bf0:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 5;
 5080bf4:	00800804 	movi	r2,32
 5080bf8:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080bfc:	e0bfff17 	ldw	r2,-4(fp)
 5080c00:	10000526 	beq	r2,zero,5080c18 <AUDIO_EnableSiteTone+0x48>
        control |= mask;
 5080c04:	e0fffd0b 	ldhu	r3,-12(fp)
 5080c08:	e0bffd8b 	ldhu	r2,-10(fp)
 5080c0c:	1884b03a 	or	r2,r3,r2
 5080c10:	e0bffd0d 	sth	r2,-12(fp)
 5080c14:	00000606 	br	5080c30 <AUDIO_EnableSiteTone+0x60>
    else        
        control &= ~mask;
 5080c18:	e0bffd8b 	ldhu	r2,-10(fp)
 5080c1c:	0084303a 	nor	r2,zero,r2
 5080c20:	1007883a 	mov	r3,r2
 5080c24:	e0bffd0b 	ldhu	r2,-12(fp)
 5080c28:	1884703a 	and	r2,r3,r2
 5080c2c:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
 5080c30:	e0bffd0b 	ldhu	r2,-12(fp)
 5080c34:	100b883a 	mov	r5,r2
 5080c38:	01000104 	movi	r4,4
 5080c3c:	5080c5c0 	call	5080c5c <aduio_RegWrite>
 5080c40:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 5080c44:	e0bffe17 	ldw	r2,-8(fp)
}
 5080c48:	e037883a 	mov	sp,fp
 5080c4c:	dfc00117 	ldw	ra,4(sp)
 5080c50:	df000017 	ldw	fp,0(sp)
 5080c54:	dec00204 	addi	sp,sp,8
 5080c58:	f800283a 	ret

05080c5c <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16){
 5080c5c:	defff904 	addi	sp,sp,-28
 5080c60:	dfc00615 	stw	ra,24(sp)
 5080c64:	df000515 	stw	fp,20(sp)
 5080c68:	df000504 	addi	fp,sp,20
 5080c6c:	2007883a 	mov	r3,r4
 5080c70:	2805883a 	mov	r2,r5
 5080c74:	e0fffe05 	stb	r3,-8(fp)
 5080c78:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 data, control;
    if (reg_index <= 10)
 5080c7c:	e0bffe03 	ldbu	r2,-8(fp)
 5080c80:	108002e8 	cmpgeui	r2,r2,11
 5080c84:	1000071e 	bne	r2,zero,5080ca4 <aduio_RegWrite+0x48>
        reg_file[reg_index] = data16;
 5080c88:	e0fffe03 	ldbu	r3,-8(fp)
 5080c8c:	00814274 	movhi	r2,1289
 5080c90:	109f6504 	addi	r2,r2,32148
 5080c94:	18c7883a 	add	r3,r3,r3
 5080c98:	10c5883a 	add	r2,r2,r3
 5080c9c:	e0ffff0b 	ldhu	r3,-4(fp)
 5080ca0:	10c0000d 	sth	r3,0(r2)
    data = data16 & 0xFF;
 5080ca4:	e0bfff0b 	ldhu	r2,-4(fp)
 5080ca8:	e0bffc05 	stb	r2,-16(fp)
    control = (reg_index << 1) & 0xFE;
 5080cac:	e0bffe03 	ldbu	r2,-8(fp)
 5080cb0:	1085883a 	add	r2,r2,r2
 5080cb4:	e0bffc45 	stb	r2,-15(fp)
    control |= ((data16 >> 8) & 0x01);
 5080cb8:	e0bfff0b 	ldhu	r2,-4(fp)
 5080cbc:	1004d23a 	srli	r2,r2,8
 5080cc0:	1080004c 	andi	r2,r2,1
 5080cc4:	1007883a 	mov	r3,r2
 5080cc8:	e0bffc43 	ldbu	r2,-15(fp)
 5080ccc:	1884b03a 	or	r2,r3,r2
 5080cd0:	e0bffc45 	stb	r2,-15(fp)
    //AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
    bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
 5080cd4:	e0fffc43 	ldbu	r3,-15(fp)
 5080cd8:	e0bffc03 	ldbu	r2,-16(fp)
 5080cdc:	d8800015 	stw	r2,0(sp)
 5080ce0:	180f883a 	mov	r7,r3
 5080ce4:	01800d04 	movi	r6,52
 5080ce8:	01410034 	movhi	r5,1024
 5080cec:	29401004 	addi	r5,r5,64
 5080cf0:	01010034 	movhi	r4,1024
 5080cf4:	21001404 	addi	r4,r4,80
 5080cf8:	5080e700 	call	5080e70 <I2C_Write>
 5080cfc:	e0bffd15 	stw	r2,-12(fp)
    if (!bSuccess) 
        AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
    usleep(50*1000);  // wait audio chip read        
 5080d00:	0130d414 	movui	r4,50000
 5080d04:	5091f840 	call	5091f84 <usleep>
    return bSuccess;        
 5080d08:	e0bffd17 	ldw	r2,-12(fp)
}
 5080d0c:	e037883a 	mov	sp,fp
 5080d10:	dfc00117 	ldw	ra,4(sp)
 5080d14:	df000017 	ldw	fp,0(sp)
 5080d18:	dec00204 	addi	sp,sp,8
 5080d1c:	f800283a 	ret

05080d20 <AUDIO_DacFifoNotFull>:

/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Recor ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void){
 5080d20:	defffe04 	addi	sp,sp,-8
 5080d24:	df000115 	stw	fp,4(sp)
 5080d28:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_DAC_FULL()?FALSE:TRUE;
 5080d2c:	00814434 	movhi	r2,1296
 5080d30:	10840d04 	addi	r2,r2,4148
 5080d34:	10800037 	ldwio	r2,0(r2)
 5080d38:	1080004c 	andi	r2,r2,1
 5080d3c:	1005003a 	cmpeq	r2,r2,zero
 5080d40:	10803fcc 	andi	r2,r2,255
 5080d44:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 5080d48:	e0bfff17 	ldw	r2,-4(fp)
}
 5080d4c:	e037883a 	mov	sp,fp
 5080d50:	df000017 	ldw	fp,0(sp)
 5080d54:	dec00104 	addi	sp,sp,4
 5080d58:	f800283a 	ret

05080d5c <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right){
 5080d5c:	defffd04 	addi	sp,sp,-12
 5080d60:	df000215 	stw	fp,8(sp)
 5080d64:	df000204 	addi	fp,sp,8
 5080d68:	2007883a 	mov	r3,r4
 5080d6c:	2805883a 	mov	r2,r5
 5080d70:	e0fffe0d 	sth	r3,-8(fp)
 5080d74:	e0bfff0d 	sth	r2,-4(fp)
    AUDIO_DAC_WRITE_L(ch_left);
 5080d78:	e0fffe0f 	ldh	r3,-8(fp)
 5080d7c:	00814434 	movhi	r2,1296
 5080d80:	10840804 	addi	r2,r2,4128
 5080d84:	10c00035 	stwio	r3,0(r2)
    AUDIO_DAC_WRITE_R(ch_right);
 5080d88:	e0ffff0f 	ldh	r3,-4(fp)
 5080d8c:	00814434 	movhi	r2,1296
 5080d90:	10840904 	addi	r2,r2,4132
 5080d94:	10c00035 	stwio	r3,0(r2)
}
 5080d98:	0001883a 	nop
 5080d9c:	e037883a 	mov	sp,fp
 5080da0:	df000017 	ldw	fp,0(sp)
 5080da4:	dec00104 	addi	sp,sp,4
 5080da8:	f800283a 	ret

05080dac <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void){
 5080dac:	defffe04 	addi	sp,sp,-8
 5080db0:	df000115 	stw	fp,4(sp)
 5080db4:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_ADC_EMPTY()?FALSE:TRUE;
 5080db8:	00814434 	movhi	r2,1296
 5080dbc:	10840d04 	addi	r2,r2,4148
 5080dc0:	10800037 	ldwio	r2,0(r2)
 5080dc4:	1080008c 	andi	r2,r2,2
 5080dc8:	1005003a 	cmpeq	r2,r2,zero
 5080dcc:	10803fcc 	andi	r2,r2,255
 5080dd0:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 5080dd4:	e0bfff17 	ldw	r2,-4(fp)
}
 5080dd8:	e037883a 	mov	sp,fp
 5080ddc:	df000017 	ldw	fp,0(sp)
 5080de0:	dec00104 	addi	sp,sp,4
 5080de4:	f800283a 	ret

05080de8 <AUDIO_AdcFifoGetData>:


// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right){
 5080de8:	defffd04 	addi	sp,sp,-12
 5080dec:	df000215 	stw	fp,8(sp)
 5080df0:	df000204 	addi	fp,sp,8
 5080df4:	e13ffe15 	stw	r4,-8(fp)
 5080df8:	e17fff15 	stw	r5,-4(fp)
    *pch_left = AUDIO_ADC_READ_L();
 5080dfc:	00814434 	movhi	r2,1296
 5080e00:	10840a04 	addi	r2,r2,4136
 5080e04:	10800037 	ldwio	r2,0(r2)
 5080e08:	1007883a 	mov	r3,r2
 5080e0c:	e0bffe17 	ldw	r2,-8(fp)
 5080e10:	10c0000d 	sth	r3,0(r2)
    *pch_right = AUDIO_ADC_READ_R();
 5080e14:	00814434 	movhi	r2,1296
 5080e18:	10840b04 	addi	r2,r2,4140
 5080e1c:	10800037 	ldwio	r2,0(r2)
 5080e20:	1007883a 	mov	r3,r2
 5080e24:	e0bfff17 	ldw	r2,-4(fp)
 5080e28:	10c0000d 	sth	r3,0(r2)
    
}
 5080e2c:	0001883a 	nop
 5080e30:	e037883a 	mov	sp,fp
 5080e34:	df000017 	ldw	fp,0(sp)
 5080e38:	dec00104 	addi	sp,sp,4
 5080e3c:	f800283a 	ret

05080e40 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void){
 5080e40:	deffff04 	addi	sp,sp,-4
 5080e44:	df000015 	stw	fp,0(sp)
 5080e48:	d839883a 	mov	fp,sp
    AUDIO_FIFO_CLEAR();
 5080e4c:	00c00044 	movi	r3,1
 5080e50:	00814434 	movhi	r2,1296
 5080e54:	10840c04 	addi	r2,r2,4144
 5080e58:	10c00035 	stwio	r3,0(r2)
}
 5080e5c:	0001883a 	nop
 5080e60:	e037883a 	mov	sp,fp
 5080e64:	df000017 	ldw	fp,0(sp)
 5080e68:	dec00104 	addi	sp,sp,4
 5080e6c:	f800283a 	ret

05080e70 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 5080e70:	defff804 	addi	sp,sp,-32
 5080e74:	dfc00715 	stw	ra,28(sp)
 5080e78:	df000615 	stw	fp,24(sp)
 5080e7c:	df000604 	addi	fp,sp,24
 5080e80:	e13ffb15 	stw	r4,-20(fp)
 5080e84:	e17ffc15 	stw	r5,-16(fp)
 5080e88:	3009883a 	mov	r4,r6
 5080e8c:	3807883a 	mov	r3,r7
 5080e90:	e0800217 	ldw	r2,8(fp)
 5080e94:	e13ffd05 	stb	r4,-12(fp)
 5080e98:	e0fffe05 	stb	r3,-8(fp)
 5080e9c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 5080ea0:	00800044 	movi	r2,1
 5080ea4:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5080ea8:	e17ffc17 	ldw	r5,-16(fp)
 5080eac:	e13ffb17 	ldw	r4,-20(fp)
 5080eb0:	50811a00 	call	50811a0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 5080eb4:	e0bffd03 	ldbu	r2,-12(fp)
 5080eb8:	10803fcc 	andi	r2,r2,255
 5080ebc:	100d883a 	mov	r6,r2
 5080ec0:	e17ffc17 	ldw	r5,-16(fp)
 5080ec4:	e13ffb17 	ldw	r4,-20(fp)
 5080ec8:	50812a40 	call	50812a4 <i2c_write>
 5080ecc:	1000011e 	bne	r2,zero,5080ed4 <I2C_Write+0x64>
        bSuccess = FALSE;
 5080ed0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 5080ed4:	e0bffa17 	ldw	r2,-24(fp)
 5080ed8:	10000726 	beq	r2,zero,5080ef8 <I2C_Write+0x88>
 5080edc:	e0bffe03 	ldbu	r2,-8(fp)
 5080ee0:	100d883a 	mov	r6,r2
 5080ee4:	e17ffc17 	ldw	r5,-16(fp)
 5080ee8:	e13ffb17 	ldw	r4,-20(fp)
 5080eec:	50812a40 	call	50812a4 <i2c_write>
 5080ef0:	1000011e 	bne	r2,zero,5080ef8 <I2C_Write+0x88>
        bSuccess = FALSE;
 5080ef4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 5080ef8:	e0bffa17 	ldw	r2,-24(fp)
 5080efc:	10000726 	beq	r2,zero,5080f1c <I2C_Write+0xac>
 5080f00:	e0bfff03 	ldbu	r2,-4(fp)
 5080f04:	100d883a 	mov	r6,r2
 5080f08:	e17ffc17 	ldw	r5,-16(fp)
 5080f0c:	e13ffb17 	ldw	r4,-20(fp)
 5080f10:	50812a40 	call	50812a4 <i2c_write>
 5080f14:	1000011e 	bne	r2,zero,5080f1c <I2C_Write+0xac>
        bSuccess = FALSE;
 5080f18:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 5080f1c:	e17ffc17 	ldw	r5,-16(fp)
 5080f20:	e13ffb17 	ldw	r4,-20(fp)
 5080f24:	508122c0 	call	508122c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 5080f28:	0106d604 	movi	r4,7000
 5080f2c:	5091f840 	call	5091f84 <usleep>
    
    return bSuccess;
 5080f30:	e0bffa17 	ldw	r2,-24(fp)

    
}
 5080f34:	e037883a 	mov	sp,fp
 5080f38:	dfc00117 	ldw	ra,4(sp)
 5080f3c:	df000017 	ldw	fp,0(sp)
 5080f40:	dec00204 	addi	sp,sp,8
 5080f44:	f800283a 	ret

05080f48 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 5080f48:	defff904 	addi	sp,sp,-28
 5080f4c:	dfc00615 	stw	ra,24(sp)
 5080f50:	df000515 	stw	fp,20(sp)
 5080f54:	df000504 	addi	fp,sp,20
 5080f58:	e13ffc15 	stw	r4,-16(fp)
 5080f5c:	e17ffd15 	stw	r5,-12(fp)
 5080f60:	3007883a 	mov	r3,r6
 5080f64:	3805883a 	mov	r2,r7
 5080f68:	e0fffe05 	stb	r3,-8(fp)
 5080f6c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 5080f70:	00800044 	movi	r2,1
 5080f74:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5080f78:	e17ffd17 	ldw	r5,-12(fp)
 5080f7c:	e13ffc17 	ldw	r4,-16(fp)
 5080f80:	50811a00 	call	50811a0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 5080f84:	e0bffe03 	ldbu	r2,-8(fp)
 5080f88:	10803fcc 	andi	r2,r2,255
 5080f8c:	100d883a 	mov	r6,r2
 5080f90:	e17ffd17 	ldw	r5,-12(fp)
 5080f94:	e13ffc17 	ldw	r4,-16(fp)
 5080f98:	50812a40 	call	50812a4 <i2c_write>
 5080f9c:	1000011e 	bne	r2,zero,5080fa4 <I2C_Read+0x5c>
        bSuccess = FALSE;
 5080fa0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 5080fa4:	e0bffb17 	ldw	r2,-20(fp)
 5080fa8:	10000726 	beq	r2,zero,5080fc8 <I2C_Read+0x80>
 5080fac:	e0bfff03 	ldbu	r2,-4(fp)
 5080fb0:	100d883a 	mov	r6,r2
 5080fb4:	e17ffd17 	ldw	r5,-12(fp)
 5080fb8:	e13ffc17 	ldw	r4,-16(fp)
 5080fbc:	50812a40 	call	50812a4 <i2c_write>
 5080fc0:	1000011e 	bne	r2,zero,5080fc8 <I2C_Read+0x80>
        bSuccess = FALSE;
 5080fc4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 5080fc8:	e17ffd17 	ldw	r5,-12(fp)
 5080fcc:	e13ffc17 	ldw	r4,-16(fp)
 5080fd0:	50811a00 	call	50811a0 <i2c_start>
    DeviceAddr |= 1; // Read
 5080fd4:	e0bffe03 	ldbu	r2,-8(fp)
 5080fd8:	10800054 	ori	r2,r2,1
 5080fdc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 5080fe0:	e0bffb17 	ldw	r2,-20(fp)
 5080fe4:	10000826 	beq	r2,zero,5081008 <I2C_Read+0xc0>
 5080fe8:	e0bffe03 	ldbu	r2,-8(fp)
 5080fec:	10803fcc 	andi	r2,r2,255
 5080ff0:	100d883a 	mov	r6,r2
 5080ff4:	e17ffd17 	ldw	r5,-12(fp)
 5080ff8:	e13ffc17 	ldw	r4,-16(fp)
 5080ffc:	50812a40 	call	50812a4 <i2c_write>
 5081000:	1000011e 	bne	r2,zero,5081008 <I2C_Read+0xc0>
        bSuccess = FALSE;
 5081004:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 5081008:	e0bffb17 	ldw	r2,-20(fp)
 508100c:	10000526 	beq	r2,zero,5081024 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 5081010:	000f883a 	mov	r7,zero
 5081014:	e1800217 	ldw	r6,8(fp)
 5081018:	e17ffd17 	ldw	r5,-12(fp)
 508101c:	e13ffc17 	ldw	r4,-16(fp)
 5081020:	50813d40 	call	50813d4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 5081024:	e17ffd17 	ldw	r5,-12(fp)
 5081028:	e13ffc17 	ldw	r4,-16(fp)
 508102c:	508122c0 	call	508122c <i2c_stop>
    
    return bSuccess;
 5081030:	e0bffb17 	ldw	r2,-20(fp)
}
 5081034:	e037883a 	mov	sp,fp
 5081038:	dfc00117 	ldw	ra,4(sp)
 508103c:	df000017 	ldw	fp,0(sp)
 5081040:	dec00204 	addi	sp,sp,8
 5081044:	f800283a 	ret

05081048 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
 5081048:	defff604 	addi	sp,sp,-40
 508104c:	dfc00915 	stw	ra,36(sp)
 5081050:	df000815 	stw	fp,32(sp)
 5081054:	df000804 	addi	fp,sp,32
 5081058:	e13ffb15 	stw	r4,-20(fp)
 508105c:	e17ffc15 	stw	r5,-16(fp)
 5081060:	3007883a 	mov	r3,r6
 5081064:	e1fffe15 	stw	r7,-8(fp)
 5081068:	e0800217 	ldw	r2,8(fp)
 508106c:	e0fffd05 	stb	r3,-12(fp)
 5081070:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 5081074:	00800044 	movi	r2,1
 5081078:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
 508107c:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5081080:	e17ffc17 	ldw	r5,-16(fp)
 5081084:	e13ffb17 	ldw	r4,-20(fp)
 5081088:	50811a00 	call	50811a0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 508108c:	e0bffd03 	ldbu	r2,-12(fp)
 5081090:	10803fcc 	andi	r2,r2,255
 5081094:	100d883a 	mov	r6,r2
 5081098:	e17ffc17 	ldw	r5,-16(fp)
 508109c:	e13ffb17 	ldw	r4,-20(fp)
 50810a0:	50812a40 	call	50812a4 <i2c_write>
 50810a4:	1000011e 	bne	r2,zero,50810ac <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
 50810a8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 50810ac:	e0bff917 	ldw	r2,-28(fp)
 50810b0:	10000726 	beq	r2,zero,50810d0 <I2C_MultipleRead+0x88>
 50810b4:	e0bffa03 	ldbu	r2,-24(fp)
 50810b8:	100d883a 	mov	r6,r2
 50810bc:	e17ffc17 	ldw	r5,-16(fp)
 50810c0:	e13ffb17 	ldw	r4,-20(fp)
 50810c4:	50812a40 	call	50812a4 <i2c_write>
 50810c8:	1000011e 	bne	r2,zero,50810d0 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
 50810cc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 50810d0:	e0bff917 	ldw	r2,-28(fp)
 50810d4:	10000326 	beq	r2,zero,50810e4 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
 50810d8:	e17ffc17 	ldw	r5,-16(fp)
 50810dc:	e13ffb17 	ldw	r4,-20(fp)
 50810e0:	50811a00 	call	50811a0 <i2c_start>
    DeviceAddr |= 1; // Read
 50810e4:	e0bffd03 	ldbu	r2,-12(fp)
 50810e8:	10800054 	ori	r2,r2,1
 50810ec:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 50810f0:	e0bff917 	ldw	r2,-28(fp)
 50810f4:	10000826 	beq	r2,zero,5081118 <I2C_MultipleRead+0xd0>
 50810f8:	e0bffd03 	ldbu	r2,-12(fp)
 50810fc:	10803fcc 	andi	r2,r2,255
 5081100:	100d883a 	mov	r6,r2
 5081104:	e17ffc17 	ldw	r5,-16(fp)
 5081108:	e13ffb17 	ldw	r4,-20(fp)
 508110c:	50812a40 	call	50812a4 <i2c_write>
 5081110:	1000011e 	bne	r2,zero,5081118 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
 5081114:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 5081118:	e0bff917 	ldw	r2,-28(fp)
 508111c:	10001726 	beq	r2,zero,508117c <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
 5081120:	e03ff815 	stw	zero,-32(fp)
 5081124:	00001006 	br	5081168 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 5081128:	e0bff817 	ldw	r2,-32(fp)
 508112c:	e0fffe17 	ldw	r3,-8(fp)
 5081130:	1889883a 	add	r4,r3,r2
 5081134:	e0bfff0b 	ldhu	r2,-4(fp)
 5081138:	10ffffc4 	addi	r3,r2,-1
 508113c:	e0bff817 	ldw	r2,-32(fp)
 5081140:	1884c03a 	cmpne	r2,r3,r2
 5081144:	10803fcc 	andi	r2,r2,255
 5081148:	100f883a 	mov	r7,r2
 508114c:	200d883a 	mov	r6,r4
 5081150:	e17ffc17 	ldw	r5,-16(fp)
 5081154:	e13ffb17 	ldw	r4,-20(fp)
 5081158:	50813d40 	call	50813d4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 508115c:	e0bff817 	ldw	r2,-32(fp)
 5081160:	10800044 	addi	r2,r2,1
 5081164:	e0bff815 	stw	r2,-32(fp)
 5081168:	e0bfff0b 	ldhu	r2,-4(fp)
 508116c:	e0fff817 	ldw	r3,-32(fp)
 5081170:	1880020e 	bge	r3,r2,508117c <I2C_MultipleRead+0x134>
 5081174:	e0bff917 	ldw	r2,-28(fp)
 5081178:	103feb1e 	bne	r2,zero,5081128 <__alt_data_end+0xfffb2f28>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 508117c:	e17ffc17 	ldw	r5,-16(fp)
 5081180:	e13ffb17 	ldw	r4,-20(fp)
 5081184:	508122c0 	call	508122c <i2c_stop>
    
    return bSuccess;    
 5081188:	e0bff917 	ldw	r2,-28(fp)
    
}
 508118c:	e037883a 	mov	sp,fp
 5081190:	dfc00117 	ldw	ra,4(sp)
 5081194:	df000017 	ldw	fp,0(sp)
 5081198:	dec00204 	addi	sp,sp,8
 508119c:	f800283a 	ret

050811a0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 50811a0:	defffc04 	addi	sp,sp,-16
 50811a4:	dfc00315 	stw	ra,12(sp)
 50811a8:	df000215 	stw	fp,8(sp)
 50811ac:	df000204 	addi	fp,sp,8
 50811b0:	e13ffe15 	stw	r4,-8(fp)
 50811b4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 50811b8:	e0bfff17 	ldw	r2,-4(fp)
 50811bc:	10800104 	addi	r2,r2,4
 50811c0:	1007883a 	mov	r3,r2
 50811c4:	00800044 	movi	r2,1
 50811c8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
 50811cc:	e0bfff17 	ldw	r2,-4(fp)
 50811d0:	00c00044 	movi	r3,1
 50811d4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 50811d8:	e0bffe17 	ldw	r2,-8(fp)
 50811dc:	00c00044 	movi	r3,1
 50811e0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 50811e4:	01000044 	movi	r4,1
 50811e8:	5091f840 	call	5091f84 <usleep>
     
    SDA_LOW(data_base); // data low
 50811ec:	e0bfff17 	ldw	r2,-4(fp)
 50811f0:	0007883a 	mov	r3,zero
 50811f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 50811f8:	01000044 	movi	r4,1
 50811fc:	5091f840 	call	5091f84 <usleep>
    SCL_LOW(clk_base); // clock low
 5081200:	e0bffe17 	ldw	r2,-8(fp)
 5081204:	0007883a 	mov	r3,zero
 5081208:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 508120c:	01000044 	movi	r4,1
 5081210:	5091f840 	call	5091f84 <usleep>
}
 5081214:	0001883a 	nop
 5081218:	e037883a 	mov	sp,fp
 508121c:	dfc00117 	ldw	ra,4(sp)
 5081220:	df000017 	ldw	fp,0(sp)
 5081224:	dec00204 	addi	sp,sp,8
 5081228:	f800283a 	ret

0508122c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 508122c:	defffc04 	addi	sp,sp,-16
 5081230:	dfc00315 	stw	ra,12(sp)
 5081234:	df000215 	stw	fp,8(sp)
 5081238:	df000204 	addi	fp,sp,8
 508123c:	e13ffe15 	stw	r4,-8(fp)
 5081240:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 5081244:	e0bfff17 	ldw	r2,-4(fp)
 5081248:	10800104 	addi	r2,r2,4
 508124c:	1007883a 	mov	r3,r2
 5081250:	00800044 	movi	r2,1
 5081254:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 5081258:	e0bfff17 	ldw	r2,-4(fp)
 508125c:	0007883a 	mov	r3,zero
 5081260:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 5081264:	e0bffe17 	ldw	r2,-8(fp)
 5081268:	00c00044 	movi	r3,1
 508126c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 5081270:	01000044 	movi	r4,1
 5081274:	5091f840 	call	5091f84 <usleep>
    SDA_HIGH(data_base); // data high
 5081278:	e0bfff17 	ldw	r2,-4(fp)
 508127c:	00c00044 	movi	r3,1
 5081280:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 5081284:	01000044 	movi	r4,1
 5081288:	5091f840 	call	5091f84 <usleep>
}
 508128c:	0001883a 	nop
 5081290:	e037883a 	mov	sp,fp
 5081294:	dfc00117 	ldw	ra,4(sp)
 5081298:	df000017 	ldw	fp,0(sp)
 508129c:	dec00204 	addi	sp,sp,8
 50812a0:	f800283a 	ret

050812a4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 50812a4:	defff804 	addi	sp,sp,-32
 50812a8:	dfc00715 	stw	ra,28(sp)
 50812ac:	df000615 	stw	fp,24(sp)
 50812b0:	df000604 	addi	fp,sp,24
 50812b4:	e13ffd15 	stw	r4,-12(fp)
 50812b8:	e17ffe15 	stw	r5,-8(fp)
 50812bc:	3005883a 	mov	r2,r6
 50812c0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 50812c4:	00bfe004 	movi	r2,-128
 50812c8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 50812cc:	e0bffe17 	ldw	r2,-8(fp)
 50812d0:	10800104 	addi	r2,r2,4
 50812d4:	1007883a 	mov	r3,r2
 50812d8:	00800044 	movi	r2,1
 50812dc:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 50812e0:	e03ffb15 	stw	zero,-20(fp)
 50812e4:	00001f06 	br	5081364 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 50812e8:	e0bffd17 	ldw	r2,-12(fp)
 50812ec:	0007883a 	mov	r3,zero
 50812f0:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 50812f4:	e0ffff03 	ldbu	r3,-4(fp)
 50812f8:	e0bffa03 	ldbu	r2,-24(fp)
 50812fc:	1884703a 	and	r2,r3,r2
 5081300:	10803fcc 	andi	r2,r2,255
 5081304:	10000426 	beq	r2,zero,5081318 <i2c_write+0x74>
            SDA_HIGH(data_base);
 5081308:	e0bffe17 	ldw	r2,-8(fp)
 508130c:	00c00044 	movi	r3,1
 5081310:	10c00035 	stwio	r3,0(r2)
 5081314:	00000306 	br	5081324 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 5081318:	e0bffe17 	ldw	r2,-8(fp)
 508131c:	0007883a 	mov	r3,zero
 5081320:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 5081324:	e0bffa03 	ldbu	r2,-24(fp)
 5081328:	1004d07a 	srli	r2,r2,1
 508132c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 5081330:	e0bffd17 	ldw	r2,-12(fp)
 5081334:	00c00044 	movi	r3,1
 5081338:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 508133c:	01000044 	movi	r4,1
 5081340:	5091f840 	call	5091f84 <usleep>
        SCL_LOW(clk_base);
 5081344:	e0bffd17 	ldw	r2,-12(fp)
 5081348:	0007883a 	mov	r3,zero
 508134c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081350:	01000044 	movi	r4,1
 5081354:	5091f840 	call	5091f84 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 5081358:	e0bffb17 	ldw	r2,-20(fp)
 508135c:	10800044 	addi	r2,r2,1
 5081360:	e0bffb15 	stw	r2,-20(fp)
 5081364:	e0bffb17 	ldw	r2,-20(fp)
 5081368:	10800210 	cmplti	r2,r2,8
 508136c:	103fde1e 	bne	r2,zero,50812e8 <__alt_data_end+0xfffb30e8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 5081370:	e0bffe17 	ldw	r2,-8(fp)
 5081374:	10800104 	addi	r2,r2,4
 5081378:	0007883a 	mov	r3,zero
 508137c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 5081380:	e0bffd17 	ldw	r2,-12(fp)
 5081384:	00c00044 	movi	r3,1
 5081388:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 508138c:	01000044 	movi	r4,1
 5081390:	5091f840 	call	5091f84 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 5081394:	e0bffe17 	ldw	r2,-8(fp)
 5081398:	10800037 	ldwio	r2,0(r2)
 508139c:	1005003a 	cmpeq	r2,r2,zero
 50813a0:	10803fcc 	andi	r2,r2,255
 50813a4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 50813a8:	e0bffd17 	ldw	r2,-12(fp)
 50813ac:	0007883a 	mov	r3,zero
 50813b0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 50813b4:	01000044 	movi	r4,1
 50813b8:	5091f840 	call	5091f84 <usleep>
    return bAck;
 50813bc:	e0bffc17 	ldw	r2,-16(fp)
}    
 50813c0:	e037883a 	mov	sp,fp
 50813c4:	dfc00117 	ldw	ra,4(sp)
 50813c8:	df000017 	ldw	fp,0(sp)
 50813cc:	dec00204 	addi	sp,sp,8
 50813d0:	f800283a 	ret

050813d4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 50813d4:	defff804 	addi	sp,sp,-32
 50813d8:	dfc00715 	stw	ra,28(sp)
 50813dc:	df000615 	stw	fp,24(sp)
 50813e0:	df000604 	addi	fp,sp,24
 50813e4:	e13ffc15 	stw	r4,-16(fp)
 50813e8:	e17ffd15 	stw	r5,-12(fp)
 50813ec:	e1bffe15 	stw	r6,-8(fp)
 50813f0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 50813f4:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 50813f8:	e0bffd17 	ldw	r2,-12(fp)
 50813fc:	10800104 	addi	r2,r2,4
 5081400:	0007883a 	mov	r3,zero
 5081404:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 5081408:	e0bffc17 	ldw	r2,-16(fp)
 508140c:	0007883a 	mov	r3,zero
 5081410:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 5081414:	01000044 	movi	r4,1
 5081418:	5091f840 	call	5091f84 <usleep>

    for(i=0;i<8;i++){
 508141c:	e03ffb15 	stw	zero,-20(fp)
 5081420:	00001606 	br	508147c <i2c_read+0xa8>
        Data <<= 1;
 5081424:	e0bffa03 	ldbu	r2,-24(fp)
 5081428:	1085883a 	add	r2,r2,r2
 508142c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 5081430:	e0bffc17 	ldw	r2,-16(fp)
 5081434:	00c00044 	movi	r3,1
 5081438:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 508143c:	01000044 	movi	r4,1
 5081440:	5091f840 	call	5091f84 <usleep>
        if (SDA_READ(data_base))  // read data   
 5081444:	e0bffd17 	ldw	r2,-12(fp)
 5081448:	10800037 	ldwio	r2,0(r2)
 508144c:	10000326 	beq	r2,zero,508145c <i2c_read+0x88>
            Data |= 0x01;
 5081450:	e0bffa03 	ldbu	r2,-24(fp)
 5081454:	10800054 	ori	r2,r2,1
 5081458:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 508145c:	e0bffc17 	ldw	r2,-16(fp)
 5081460:	0007883a 	mov	r3,zero
 5081464:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081468:	01000044 	movi	r4,1
 508146c:	5091f840 	call	5091f84 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 5081470:	e0bffb17 	ldw	r2,-20(fp)
 5081474:	10800044 	addi	r2,r2,1
 5081478:	e0bffb15 	stw	r2,-20(fp)
 508147c:	e0bffb17 	ldw	r2,-20(fp)
 5081480:	10800210 	cmplti	r2,r2,8
 5081484:	103fe71e 	bne	r2,zero,5081424 <__alt_data_end+0xfffb3224>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 5081488:	e0bffc17 	ldw	r2,-16(fp)
 508148c:	0007883a 	mov	r3,zero
 5081490:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 5081494:	e0bffd17 	ldw	r2,-12(fp)
 5081498:	10800104 	addi	r2,r2,4
 508149c:	1007883a 	mov	r3,r2
 50814a0:	00800044 	movi	r2,1
 50814a4:	18800035 	stwio	r2,0(r3)
    if (bAck)
 50814a8:	e0bfff17 	ldw	r2,-4(fp)
 50814ac:	10000426 	beq	r2,zero,50814c0 <i2c_read+0xec>
        SDA_LOW(data_base);
 50814b0:	e0bffd17 	ldw	r2,-12(fp)
 50814b4:	0007883a 	mov	r3,zero
 50814b8:	10c00035 	stwio	r3,0(r2)
 50814bc:	00000306 	br	50814cc <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 50814c0:	e0bffd17 	ldw	r2,-12(fp)
 50814c4:	00c00044 	movi	r3,1
 50814c8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 50814cc:	e0bffc17 	ldw	r2,-16(fp)
 50814d0:	00c00044 	movi	r3,1
 50814d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 50814d8:	01000044 	movi	r4,1
 50814dc:	5091f840 	call	5091f84 <usleep>
    SCL_LOW(clk_base); // clock low
 50814e0:	e0bffc17 	ldw	r2,-16(fp)
 50814e4:	0007883a 	mov	r3,zero
 50814e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 50814ec:	01000044 	movi	r4,1
 50814f0:	5091f840 	call	5091f84 <usleep>
    SDA_LOW(data_base);  // data low
 50814f4:	e0bffd17 	ldw	r2,-12(fp)
 50814f8:	0007883a 	mov	r3,zero
 50814fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 5081500:	01000044 	movi	r4,1
 5081504:	5091f840 	call	5091f84 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 5081508:	e0bffe17 	ldw	r2,-8(fp)
 508150c:	e0fffa03 	ldbu	r3,-24(fp)
 5081510:	10c00005 	stb	r3,0(r2)
}
 5081514:	0001883a 	nop
 5081518:	e037883a 	mov	sp,fp
 508151c:	dfc00117 	ldw	ra,4(sp)
 5081520:	df000017 	ldw	fp,0(sp)
 5081524:	dec00204 	addi	sp,sp,8
 5081528:	f800283a 	ret

0508152c <main>:
alt_u32 beepPlayLen;
int beepcliplength;
alt_u32 beepdata;
int beepstartclip=0;

int main(){
 508152c:	defff704 	addi	sp,sp,-36
 5081530:	dfc00815 	stw	ra,32(sp)
 5081534:	df000715 	stw	fp,28(sp)
 5081538:	df000704 	addi	fp,sp,28
    printf("Hello from Nios II!\n");
 508153c:	01014274 	movhi	r4,1289
 5081540:	21106804 	addi	r4,r4,16800
 5081544:	50872d80 	call	50872d8 <puts>
    // Enable the timer
    init_timer_interrupt();
 5081548:	50825200 	call	5082520 <init_timer_interrupt>
    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x0);
 508154c:	0007883a 	mov	r3,zero
 5081550:	00810034 	movhi	r2,1024
 5081554:	10801804 	addi	r2,r2,96
 5081558:	10c00035 	stwio	r3,0(r2)
    display_number(countdown);
 508155c:	d0a00417 	ldw	r2,-32752(gp)
 5081560:	1009883a 	mov	r4,r2
 5081564:	508266c0 	call	508266c <display_number>

    //Set up wifi
    rs232_dev = alt_up_rs232_open_dev(WIFI_NAME);
 5081568:	01014274 	movhi	r4,1289
 508156c:	21106d04 	addi	r4,r4,16820
 5081570:	50930a00 	call	50930a0 <alt_up_rs232_open_dev>
 5081574:	1007883a 	mov	r3,r2
 5081578:	00814274 	movhi	r2,1289
 508157c:	109f5404 	addi	r2,r2,32080
 5081580:	10c00015 	stw	r3,0(r2)
    if (rs232_dev == NULL)
 5081584:	00814274 	movhi	r2,1289
 5081588:	109f5404 	addi	r2,r2,32080
 508158c:	10800017 	ldw	r2,0(r2)
 5081590:	1000041e 	bne	r2,zero,50815a4 <main+0x78>
        printf("Error: could not open RS232 UART\n");
 5081594:	01014274 	movhi	r4,1289
 5081598:	21107004 	addi	r4,r4,16832
 508159c:	50872d80 	call	50872d8 <puts>
 50815a0:	00000306 	br	50815b0 <main+0x84>
    else
        printf("Opened RS232 UART device\n");
 50815a4:	01014274 	movhi	r4,1289
 50815a8:	21107904 	addi	r4,r4,16868
 50815ac:	50872d80 	call	50872d8 <puts>
    sendConnect();
 50815b0:	5082a980 	call	5082a98 <sendConnect>

    
    if (!init())
 50815b4:	50824d80 	call	50824d8 <init>
 50815b8:	1000021e 	bne	r2,zero,50815c4 <main+0x98>
        return 0;
 50815bc:	0005883a 	mov	r2,zero
 50815c0:	00024006 	br	5081ec4 <main+0x998>
        
    
#ifdef USE_SDRAM_FOR_DATA
    pBuf = (alt_u32 *)SDRAM_BASE;
 50815c4:	00814274 	movhi	r2,1289
 50815c8:	109f4a04 	addi	r2,r2,32040
 50815cc:	10000015 	stw	zero,0(r2)
    buf_sample_size = SDRAM_SPAN/sizeof(alt_u32);
 50815d0:	00814274 	movhi	r2,1289
 50815d4:	109f4704 	addi	r2,r2,32028
 50815d8:	00c04034 	movhi	r3,256
 50815dc:	10c00015 	stw	r3,0(r2)
#endif    
    printf("ready\n");
 50815e0:	01014274 	movhi	r4,1289
 50815e4:	21108004 	addi	r4,r4,16896
 50815e8:	50872d80 	call	50872d8 <puts>
    
    
    // test
    RecordLen = buf_sample_size;
 50815ec:	00814274 	movhi	r2,1289
 50815f0:	109f4704 	addi	r2,r2,32028
 50815f4:	10c00017 	ldw	r3,0(r2)
 50815f8:	00814274 	movhi	r2,1289
 50815fc:	109f5304 	addi	r2,r2,32076
 5081600:	10c00015 	stw	r3,0(r2)
    printf("Press key1 to start recording audio or wait for signal from server\n");
 5081604:	01014274 	movhi	r4,1289
 5081608:	21108204 	addi	r4,r4,16904
 508160c:	50872d80 	call	50872d8 <puts>
    
    while (1){
        readfromlua();
 5081610:	5082ca40 	call	5082ca4 <readfromlua>
	    switch (state){
 5081614:	d0a6e217 	ldw	r2,-25720(gp)
 5081618:	10c002a8 	cmpgeui	r3,r2,10
 508161c:	1802231e 	bne	r3,zero,5081eac <main+0x980>
 5081620:	100690ba 	slli	r3,r2,2
 5081624:	00814234 	movhi	r2,1288
 5081628:	10858e04 	addi	r2,r2,5688
 508162c:	1885883a 	add	r2,r3,r2
 5081630:	10800017 	ldw	r2,0(r2)
 5081634:	1000683a 	jmp	r2
 5081638:	05081660 	cmpeqi	r20,zero,8281
 508163c:	050817a8 	cmpgeui	r20,zero,8286
 5081640:	05081eac 	andhi	r20,zero,8314
 5081644:	0508191c 	xori	r20,zero,8292
 5081648:	050819f4 	movhi	r20,8295
 508164c:	05081ab8 	rdprs	r20,zero,8298
 5081650:	05081bd4 	movui	r20,8303
 5081654:	05081d68 	cmpgeui	r20,zero,8309
 5081658:	05081ea4 	muli	r20,zero,8314
 508165c:	05081eac 	andhi	r20,zero,8314
            case ST_STANDY:
                if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) == 13){
 5081660:	00810034 	movhi	r2,1024
 5081664:	10801c04 	addi	r2,r2,112
 5081668:	10800037 	ldwio	r2,0(r2)
 508166c:	10800358 	cmpnei	r2,r2,13
 5081670:	1000151e 	bne	r2,zero,50816c8 <main+0x19c>
                    AUDIO_FifoClear();
 5081674:	5080e400 	call	5080e40 <AUDIO_FifoClear>
                    init_audio(LINEIN_RECORD);
 5081678:	0009883a 	mov	r4,zero
 508167c:	50824040 	call	5082404 <init_audio>
                    AUDIO_FifoClear();
 5081680:	5080e400 	call	5080e40 <AUDIO_FifoClear>
                    state = ST_RECODING;
 5081684:	00800044 	movi	r2,1
 5081688:	d0a6e215 	stw	r2,-25720(gp)
                    printf("Recording audio\n");
 508168c:	01014274 	movhi	r4,1289
 5081690:	21109304 	addi	r4,r4,16972
 5081694:	50872d80 	call	50872d8 <puts>
                    printf("Press key1 to stop recording audio\n");
 5081698:	01014274 	movhi	r4,1289
 508169c:	21109704 	addi	r4,r4,16988
 50816a0:	50872d80 	call	50872d8 <puts>
                    pRecording = pBuf;
 50816a4:	00814274 	movhi	r2,1289
 50816a8:	109f4a04 	addi	r2,r2,32040
 50816ac:	10c00017 	ldw	r3,0(r2)
 50816b0:	00814274 	movhi	r2,1289
 50816b4:	109f4604 	addi	r2,r2,32024
 50816b8:	10c00015 	stw	r3,0(r2)
                    RecordLen = 0;
 50816bc:	00814274 	movhi	r2,1289
 50816c0:	109f5304 	addi	r2,r2,32076
 50816c4:	10000015 	stw	zero,0(r2)
                }
                if (datalen >= 2){
 50816c8:	d0a6e817 	ldw	r2,-25696(gp)
 50816cc:	10800090 	cmplti	r2,r2,2
 50816d0:	1001f81e 	bne	r2,zero,5081eb4 <main+0x988>
                    char str2[] = "at";
 50816d4:	009d1844 	movi	r2,29793
 50816d8:	e0bffe0d 	sth	r2,-8(fp)
 50816dc:	e03ffe85 	stb	zero,-6(fp)
                    int equal = 1;
 50816e0:	00800044 	movi	r2,1
 50816e4:	e0bff915 	stw	r2,-28(fp)
                    for(int j =0; j<datalen; j++){
 50816e8:	e03ffa15 	stw	zero,-24(fp)
 50816ec:	00001506 	br	5081744 <main+0x218>
                    	if (totaldata[j] != str2[j]){
 50816f0:	00814274 	movhi	r2,1289
 50816f4:	109f7904 	addi	r2,r2,32228
 50816f8:	e0fffa17 	ldw	r3,-24(fp)
 50816fc:	10c5883a 	add	r2,r2,r3
 5081700:	11000003 	ldbu	r4,0(r2)
 5081704:	e0fffe04 	addi	r3,fp,-8
 5081708:	e0bffa17 	ldw	r2,-24(fp)
 508170c:	1885883a 	add	r2,r3,r2
 5081710:	10800003 	ldbu	r2,0(r2)
 5081714:	20c03fcc 	andi	r3,r4,255
 5081718:	18c0201c 	xori	r3,r3,128
 508171c:	18ffe004 	addi	r3,r3,-128
 5081720:	10803fcc 	andi	r2,r2,255
 5081724:	1080201c 	xori	r2,r2,128
 5081728:	10bfe004 	addi	r2,r2,-128
 508172c:	18800226 	beq	r3,r2,5081738 <main+0x20c>
                    		equal=0;
 5081730:	e03ff915 	stw	zero,-28(fp)
                    		break;
 5081734:	00000606 	br	5081750 <main+0x224>
                    RecordLen = 0;
                }
                if (datalen >= 2){
                    char str2[] = "at";
                    int equal = 1;
                    for(int j =0; j<datalen; j++){
 5081738:	e0bffa17 	ldw	r2,-24(fp)
 508173c:	10800044 	addi	r2,r2,1
 5081740:	e0bffa15 	stw	r2,-24(fp)
 5081744:	d0a6e817 	ldw	r2,-25696(gp)
 5081748:	e0fffa17 	ldw	r3,-24(fp)
 508174c:	18bfe816 	blt	r3,r2,50816f0 <__alt_data_end+0xfffb34f0>
                    	if (totaldata[j] != str2[j]){
                    		equal=0;
                    		break;
                    	}
                    }
                    if (equal){
 5081750:	e0bff917 	ldw	r2,-28(fp)
 5081754:	1001d726 	beq	r2,zero,5081eb4 <main+0x988>
                    	printf("Game Start\n");
 5081758:	01014274 	movhi	r4,1289
 508175c:	2110a004 	addi	r4,r4,17024
 5081760:	50872d80 	call	50872d8 <puts>
                        statemsg = "Game Start";
 5081764:	00814274 	movhi	r2,1289
 5081768:	109f5104 	addi	r2,r2,32068
 508176c:	00c14274 	movhi	r3,1289
 5081770:	18d0a004 	addi	r3,r3,17024
 5081774:	10c00015 	stw	r3,0(r2)
                        sendmsg(statemsg);
 5081778:	00814274 	movhi	r2,1289
 508177c:	109f5104 	addi	r2,r2,32068
 5081780:	10800017 	ldw	r2,0(r2)
 5081784:	1009883a 	mov	r4,r2
 5081788:	5082b740 	call	5082b74 <sendmsg>
                        AUDIO_FifoClear();
 508178c:	5080e400 	call	5080e40 <AUDIO_FifoClear>
                        init_audio(LINEOUT_PLAY);
 5081790:	01000044 	movi	r4,1
 5081794:	50824040 	call	5082404 <init_audio>
                        AUDIO_FifoClear();
 5081798:	5080e400 	call	5080e40 <AUDIO_FifoClear>
                    	state = ST_ATTACK;
 508179c:	00800104 	movi	r2,4
 50817a0:	d0a6e215 	stw	r2,-25720(gp)
                    }
                }
                break;
 50817a4:	0001c306 	br	5081eb4 <main+0x988>
            case ST_RECODING:
                if ((IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) == 13) || (RecordLen >= buf_sample_size)){
 50817a8:	00810034 	movhi	r2,1024
 50817ac:	10801c04 	addi	r2,r2,112
 50817b0:	10800037 	ldwio	r2,0(r2)
 50817b4:	10800360 	cmpeqi	r2,r2,13
 50817b8:	1000071e 	bne	r2,zero,50817d8 <main+0x2ac>
 50817bc:	00814274 	movhi	r2,1289
 50817c0:	109f5304 	addi	r2,r2,32076
 50817c4:	10c00017 	ldw	r3,0(r2)
 50817c8:	00814274 	movhi	r2,1289
 50817cc:	109f4704 	addi	r2,r2,32028
 50817d0:	10800017 	ldw	r2,0(r2)
 50817d4:	18800a36 	bltu	r3,r2,5081800 <main+0x2d4>
                    // stop record
                    printf("Recording stopped\n");
 50817d8:	01014274 	movhi	r4,1289
 50817dc:	2110a304 	addi	r4,r4,17036
 50817e0:	50872d80 	call	50872d8 <puts>
                    state = ST_WAITING;
 50817e4:	008000c4 	movi	r2,3
 50817e8:	d0a6e215 	stw	r2,-25720(gp)
                    AUDIO_FifoClear();
 50817ec:	5080e400 	call	5080e40 <AUDIO_FifoClear>
                    init_audio(LINEOUT_PLAY);
 50817f0:	01000044 	movi	r4,1
 50817f4:	50824040 	call	5082404 <init_audio>
                    AUDIO_FifoClear();
 50817f8:	5080e400 	call	5080e40 <AUDIO_FifoClear>
                        *pRecording++ = data;
                        RecordLen++;
                        i++;
                    }
                }     
                break;
 50817fc:	0001b006 	br	5081ec0 <main+0x994>
                    AUDIO_FifoClear();
                    init_audio(LINEOUT_PLAY);
                    AUDIO_FifoClear();
                }else{
                    // continue recoding
                    int i = 0;
 5081800:	e03ffb15 	stw	zero,-20(fp)
                    while ((i < RECORD_BLOCK_SIZE)){
 5081804:	00004106 	br	508190c <main+0x3e0>
                        
                        try_cnt = 0;
 5081808:	00814274 	movhi	r2,1289
 508180c:	109f5504 	addi	r2,r2,32084
 5081810:	10000015 	stw	zero,0(r2)
                        while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
 5081814:	00000c06 	br	5081848 <main+0x31c>
                            try_cnt++;    
 5081818:	00814274 	movhi	r2,1289
 508181c:	109f5504 	addi	r2,r2,32084
 5081820:	10800017 	ldw	r2,0(r2)
 5081824:	10c00044 	addi	r3,r2,1
 5081828:	00814274 	movhi	r2,1289
 508182c:	109f5504 	addi	r2,r2,32084
 5081830:	10c00015 	stw	r3,0(r2)
                            if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) == 13){
 5081834:	00810034 	movhi	r2,1024
 5081838:	10801c04 	addi	r2,r2,112
 508183c:	10800037 	ldwio	r2,0(r2)
 5081840:	10800358 	cmpnei	r2,r2,13
 5081844:	10000826 	beq	r2,zero,5081868 <main+0x33c>
                    // continue recoding
                    int i = 0;
                    while ((i < RECORD_BLOCK_SIZE)){
                        
                        try_cnt = 0;
                        while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
 5081848:	5080dac0 	call	5080dac <AUDIO_AdcFifoNotEmpty>
 508184c:	1000071e 	bne	r2,zero,508186c <main+0x340>
 5081850:	00814274 	movhi	r2,1289
 5081854:	109f5504 	addi	r2,r2,32084
 5081858:	10800017 	ldw	r2,0(r2)
 508185c:	10810030 	cmpltui	r2,r2,1024
 5081860:	103fed1e 	bne	r2,zero,5081818 <__alt_data_end+0xfffb3618>
 5081864:	00000106 	br	508186c <main+0x340>
                            try_cnt++;    
                            if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) == 13){
                                break;
 5081868:	0001883a 	nop
                            }
                        }     
                        AUDIO_AdcFifoGetData(&ch_left, &ch_right);
 508186c:	01414274 	movhi	r5,1289
 5081870:	295f4d04 	addi	r5,r5,32052
 5081874:	01014274 	movhi	r4,1289
 5081878:	211f5704 	addi	r4,r4,32092
 508187c:	5080de80 	call	5080de8 <AUDIO_AdcFifoGetData>
                        data = (ch_left << 16) | ch_right;
 5081880:	00814274 	movhi	r2,1289
 5081884:	109f5704 	addi	r2,r2,32092
 5081888:	1080000b 	ldhu	r2,0(r2)
 508188c:	10bfffcc 	andi	r2,r2,65535
 5081890:	1006943a 	slli	r3,r2,16
 5081894:	00814274 	movhi	r2,1289
 5081898:	109f4d04 	addi	r2,r2,32052
 508189c:	1080000b 	ldhu	r2,0(r2)
 50818a0:	10bfffcc 	andi	r2,r2,65535
 50818a4:	1884b03a 	or	r2,r3,r2
 50818a8:	1007883a 	mov	r3,r2
 50818ac:	00814274 	movhi	r2,1289
 50818b0:	109f5004 	addi	r2,r2,32064
 50818b4:	10c00015 	stw	r3,0(r2)
                        *pRecording++ = data;
 50818b8:	00814274 	movhi	r2,1289
 50818bc:	109f4604 	addi	r2,r2,32024
 50818c0:	10c00017 	ldw	r3,0(r2)
 50818c4:	19000104 	addi	r4,r3,4
 50818c8:	00814274 	movhi	r2,1289
 50818cc:	109f4604 	addi	r2,r2,32024
 50818d0:	11000015 	stw	r4,0(r2)
 50818d4:	00814274 	movhi	r2,1289
 50818d8:	109f5004 	addi	r2,r2,32064
 50818dc:	10800017 	ldw	r2,0(r2)
 50818e0:	18800015 	stw	r2,0(r3)
                        RecordLen++;
 50818e4:	00814274 	movhi	r2,1289
 50818e8:	109f5304 	addi	r2,r2,32076
 50818ec:	10800017 	ldw	r2,0(r2)
 50818f0:	10c00044 	addi	r3,r2,1
 50818f4:	00814274 	movhi	r2,1289
 50818f8:	109f5304 	addi	r2,r2,32076
 50818fc:	10c00015 	stw	r3,0(r2)
                        i++;
 5081900:	e0bffb17 	ldw	r2,-20(fp)
 5081904:	10800044 	addi	r2,r2,1
 5081908:	e0bffb15 	stw	r2,-20(fp)
                    init_audio(LINEOUT_PLAY);
                    AUDIO_FifoClear();
                }else{
                    // continue recoding
                    int i = 0;
                    while ((i < RECORD_BLOCK_SIZE)){
 508190c:	e0bffb17 	ldw	r2,-20(fp)
 5081910:	10803e90 	cmplti	r2,r2,250
 5081914:	103fbc1e 	bne	r2,zero,5081808 <__alt_data_end+0xfffb3608>
                        *pRecording++ = data;
                        RecordLen++;
                        i++;
                    }
                }     
                break;
 5081918:	00016906 	br	5081ec0 <main+0x994>

            case ST_WAITING:
                if (datalen >= 2){
 508191c:	d0a6e817 	ldw	r2,-25696(gp)
 5081920:	10800090 	cmplti	r2,r2,2
 5081924:	1001651e 	bne	r2,zero,5081ebc <main+0x990>
                    char str2[] = "at";
 5081928:	00801844 	movi	r2,97
 508192c:	e0bffec5 	stb	r2,-5(fp)
 5081930:	00801d04 	movi	r2,116
 5081934:	e0bfff05 	stb	r2,-4(fp)
 5081938:	e03fff45 	stb	zero,-3(fp)
                    int equal = 1;
 508193c:	00800044 	movi	r2,1
 5081940:	e0bffc15 	stw	r2,-16(fp)
                    for(int j =0; j<datalen; j++){
 5081944:	e03ffd15 	stw	zero,-12(fp)
 5081948:	00001506 	br	50819a0 <main+0x474>
                    	if (totaldata[j] != str2[j]){
 508194c:	00814274 	movhi	r2,1289
 5081950:	109f7904 	addi	r2,r2,32228
 5081954:	e0fffd17 	ldw	r3,-12(fp)
 5081958:	10c5883a 	add	r2,r2,r3
 508195c:	11000003 	ldbu	r4,0(r2)
 5081960:	e0fffec4 	addi	r3,fp,-5
 5081964:	e0bffd17 	ldw	r2,-12(fp)
 5081968:	1885883a 	add	r2,r3,r2
 508196c:	10800003 	ldbu	r2,0(r2)
 5081970:	20c03fcc 	andi	r3,r4,255
 5081974:	18c0201c 	xori	r3,r3,128
 5081978:	18ffe004 	addi	r3,r3,-128
 508197c:	10803fcc 	andi	r2,r2,255
 5081980:	1080201c 	xori	r2,r2,128
 5081984:	10bfe004 	addi	r2,r2,-128
 5081988:	18800226 	beq	r3,r2,5081994 <main+0x468>
                    		equal=0;
 508198c:	e03ffc15 	stw	zero,-16(fp)
                    		break;
 5081990:	00000606 	br	50819ac <main+0x480>

            case ST_WAITING:
                if (datalen >= 2){
                    char str2[] = "at";
                    int equal = 1;
                    for(int j =0; j<datalen; j++){
 5081994:	e0bffd17 	ldw	r2,-12(fp)
 5081998:	10800044 	addi	r2,r2,1
 508199c:	e0bffd15 	stw	r2,-12(fp)
 50819a0:	d0a6e817 	ldw	r2,-25696(gp)
 50819a4:	e0fffd17 	ldw	r3,-12(fp)
 50819a8:	18bfe816 	blt	r3,r2,508194c <__alt_data_end+0xfffb374c>
                    	if (totaldata[j] != str2[j]){
                    		equal=0;
                    		break;
                    	}
                    }
                    if (equal){
 50819ac:	e0bffc17 	ldw	r2,-16(fp)
 50819b0:	10014226 	beq	r2,zero,5081ebc <main+0x990>
                    	printf("Game Start\n");
 50819b4:	01014274 	movhi	r4,1289
 50819b8:	2110a004 	addi	r4,r4,17024
 50819bc:	50872d80 	call	50872d8 <puts>
                        statemsg = "Game Start";
 50819c0:	00814274 	movhi	r2,1289
 50819c4:	109f5104 	addi	r2,r2,32068
 50819c8:	00c14274 	movhi	r3,1289
 50819cc:	18d0a004 	addi	r3,r3,17024
 50819d0:	10c00015 	stw	r3,0(r2)
                        sendmsg(statemsg);
 50819d4:	00814274 	movhi	r2,1289
 50819d8:	109f5104 	addi	r2,r2,32068
 50819dc:	10800017 	ldw	r2,0(r2)
 50819e0:	1009883a 	mov	r4,r2
 50819e4:	5082b740 	call	5082b74 <sendmsg>
                    	state = ST_ATTACK;
 50819e8:	00800104 	movi	r2,4
 50819ec:	d0a6e215 	stw	r2,-25720(gp)
                    }
                }
                break;
 50819f0:	00013206 	br	5081ebc <main+0x990>
            case ST_ATTACK:
                planting=0;
 50819f4:	d026e315 	stw	zero,-25716(gp)
            	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x00);
 50819f8:	0007883a 	mov	r3,zero
 50819fc:	00810034 	movhi	r2,1024
 5081a00:	10801804 	addi	r2,r2,96
 5081a04:	10c00035 	stwio	r3,0(r2)
            	if (countdown <= 0){
 5081a08:	d0a00417 	ldw	r2,-32752(gp)
 5081a0c:	00801016 	blt	zero,r2,5081a50 <main+0x524>
            		 printf("Time Expired\n");
 5081a10:	01014274 	movhi	r4,1289
 5081a14:	2110a804 	addi	r4,r4,17056
 5081a18:	50872d80 	call	50872d8 <puts>
            		 state = ST_GAMEOVER;
 5081a1c:	00800204 	movi	r2,8
 5081a20:	d0a6e215 	stw	r2,-25720(gp)
            		 statemsg = "Time expired";
 5081a24:	00814274 	movhi	r2,1289
 5081a28:	109f5104 	addi	r2,r2,32068
 5081a2c:	00c14274 	movhi	r3,1289
 5081a30:	18d0ac04 	addi	r3,r3,17072
 5081a34:	10c00015 	stw	r3,0(r2)
            		 sendmsg(statemsg);
 5081a38:	00814274 	movhi	r2,1289
 5081a3c:	109f5104 	addi	r2,r2,32068
 5081a40:	10800017 	ldw	r2,0(r2)
 5081a44:	1009883a 	mov	r4,r2
 5081a48:	5082b740 	call	5082b74 <sendmsg>
 5081a4c:	00001606 	br	5081aa8 <main+0x57c>
            	}
                else if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) == 7){
 5081a50:	00810034 	movhi	r2,1024
 5081a54:	10801c04 	addi	r2,r2,112
 5081a58:	10800037 	ldwio	r2,0(r2)
 5081a5c:	108001d8 	cmpnei	r2,r2,7
 5081a60:	1000111e 	bne	r2,zero,5081aa8 <main+0x57c>
                    printf("Planting...\n");
 5081a64:	01014274 	movhi	r4,1289
 5081a68:	2110b004 	addi	r4,r4,17088
 5081a6c:	50872d80 	call	50872d8 <puts>
                    state = ST_PLANTING;
 5081a70:	00800144 	movi	r2,5
 5081a74:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "planting";
 5081a78:	00814274 	movhi	r2,1289
 5081a7c:	109f5104 	addi	r2,r2,32068
 5081a80:	00c14274 	movhi	r3,1289
 5081a84:	18d0b304 	addi	r3,r3,17100
 5081a88:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081a8c:	00814274 	movhi	r2,1289
 5081a90:	109f5104 	addi	r2,r2,32068
 5081a94:	10800017 	ldw	r2,0(r2)
 5081a98:	1009883a 	mov	r4,r2
 5081a9c:	5082b740 	call	5082b74 <sendmsg>
                    choose_audio(ST_PLANTING);
 5081aa0:	01000144 	movi	r4,5
 5081aa4:	5081ed80 	call	5081ed8 <choose_audio>
                }
                display_number(countdown);
 5081aa8:	d0a00417 	ldw	r2,-32752(gp)
 5081aac:	1009883a 	mov	r4,r2
 5081ab0:	508266c0 	call	508266c <display_number>
                break;
 5081ab4:	00010206 	br	5081ec0 <main+0x994>
            case ST_PLANTING:
                play_audio();
 5081ab8:	50821f80 	call	50821f8 <play_audio>
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, plantled(planting));
 5081abc:	d0a6e317 	ldw	r2,-25716(gp)
 5081ac0:	1009883a 	mov	r4,r2
 5081ac4:	50829640 	call	5082964 <plantled>
 5081ac8:	1007883a 	mov	r3,r2
 5081acc:	00810034 	movhi	r2,1024
 5081ad0:	10801804 	addi	r2,r2,96
 5081ad4:	10c00035 	stwio	r3,0(r2)
                if (countdown <= 0){
 5081ad8:	d0a00417 	ldw	r2,-32752(gp)
 5081adc:	00801016 	blt	zero,r2,5081b20 <main+0x5f4>
            		 printf("Time Expired\n");
 5081ae0:	01014274 	movhi	r4,1289
 5081ae4:	2110a804 	addi	r4,r4,17056
 5081ae8:	50872d80 	call	50872d8 <puts>
            		 state = ST_GAMEOVER;
 5081aec:	00800204 	movi	r2,8
 5081af0:	d0a6e215 	stw	r2,-25720(gp)
            		 statemsg = "Time expired";
 5081af4:	00814274 	movhi	r2,1289
 5081af8:	109f5104 	addi	r2,r2,32068
 5081afc:	00c14274 	movhi	r3,1289
 5081b00:	18d0ac04 	addi	r3,r3,17072
 5081b04:	10c00015 	stw	r3,0(r2)
            		 sendmsg(statemsg);
 5081b08:	00814274 	movhi	r2,1289
 5081b0c:	109f5104 	addi	r2,r2,32068
 5081b10:	10800017 	ldw	r2,0(r2)
 5081b14:	1009883a 	mov	r4,r2
 5081b18:	5082b740 	call	5082b74 <sendmsg>
 5081b1c:	00002906 	br	5081bc4 <main+0x698>
            	}
                else if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) != 7){
 5081b20:	00810034 	movhi	r2,1024
 5081b24:	10801c04 	addi	r2,r2,112
 5081b28:	10800037 	ldwio	r2,0(r2)
 5081b2c:	108001e0 	cmpeqi	r2,r2,7
 5081b30:	1000101e 	bne	r2,zero,5081b74 <main+0x648>
                    printf("Got off\n");
 5081b34:	01014274 	movhi	r4,1289
 5081b38:	2110b604 	addi	r4,r4,17112
 5081b3c:	50872d80 	call	50872d8 <puts>
                    state = ST_ATTACK;
 5081b40:	00800104 	movi	r2,4
 5081b44:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "pgotoff";
 5081b48:	00814274 	movhi	r2,1289
 5081b4c:	109f5104 	addi	r2,r2,32068
 5081b50:	00c14274 	movhi	r3,1289
 5081b54:	18d0b804 	addi	r3,r3,17120
 5081b58:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081b5c:	00814274 	movhi	r2,1289
 5081b60:	109f5104 	addi	r2,r2,32068
 5081b64:	10800017 	ldw	r2,0(r2)
 5081b68:	1009883a 	mov	r4,r2
 5081b6c:	5082b740 	call	5082b74 <sendmsg>
 5081b70:	00001406 	br	5081bc4 <main+0x698>
                } else if (planting >= 4){
 5081b74:	d0a6e317 	ldw	r2,-25716(gp)
 5081b78:	10800110 	cmplti	r2,r2,4
 5081b7c:	1000111e 	bne	r2,zero,5081bc4 <main+0x698>
                    printf("Planted\n");
 5081b80:	01014274 	movhi	r4,1289
 5081b84:	2110ba04 	addi	r4,r4,17128
 5081b88:	50872d80 	call	50872d8 <puts>
                    state = ST_PLANTED;
 5081b8c:	00800184 	movi	r2,6
 5081b90:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "planted";
 5081b94:	00814274 	movhi	r2,1289
 5081b98:	109f5104 	addi	r2,r2,32068
 5081b9c:	00c14274 	movhi	r3,1289
 5081ba0:	18d0bc04 	addi	r3,r3,17136
 5081ba4:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081ba8:	00814274 	movhi	r2,1289
 5081bac:	109f5104 	addi	r2,r2,32068
 5081bb0:	10800017 	ldw	r2,0(r2)
 5081bb4:	1009883a 	mov	r4,r2
 5081bb8:	5082b740 	call	5082b74 <sendmsg>
                    choose_audio(ST_PLANTED);
 5081bbc:	01000184 	movi	r4,6
 5081bc0:	5081ed80 	call	5081ed8 <choose_audio>
                }
                display_number(countdown);
 5081bc4:	d0a00417 	ldw	r2,-32752(gp)
 5081bc8:	1009883a 	mov	r4,r2
 5081bcc:	508266c0 	call	508266c <display_number>
                break;
 5081bd0:	0000bb06 	br	5081ec0 <main+0x994>
            case ST_PLANTED:
                defusing=0;
 5081bd4:	d026e415 	stw	zero,-25712(gp)
                play_audio();
 5081bd8:	50821f80 	call	50821f8 <play_audio>
            IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, ticking%2==0 ? 0x2aa : 0x155);
 5081bdc:	d0a00117 	ldw	r2,-32764(gp)
 5081be0:	1080004c 	andi	r2,r2,1
 5081be4:	1000021e 	bne	r2,zero,5081bf0 <main+0x6c4>
 5081be8:	00c0aa84 	movi	r3,682
 5081bec:	00000106 	br	5081bf4 <main+0x6c8>
 5081bf0:	00c05544 	movi	r3,341
 5081bf4:	00810034 	movhi	r2,1024
 5081bf8:	10801804 	addi	r2,r2,96
 5081bfc:	10c00035 	stwio	r3,0(r2)
                if (ticking <= 0){
 5081c00:	d0a00117 	ldw	r2,-32764(gp)
 5081c04:	00801616 	blt	zero,r2,5081c60 <main+0x734>
                    printf("Exploded!");
 5081c08:	01014274 	movhi	r4,1289
 5081c0c:	2110be04 	addi	r4,r4,17144
 5081c10:	50871bc0 	call	50871bc <printf>
                    state = ST_GAMEOVER;
 5081c14:	00800204 	movi	r2,8
 5081c18:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "exploded";
 5081c1c:	00814274 	movhi	r2,1289
 5081c20:	109f5104 	addi	r2,r2,32068
 5081c24:	00c14274 	movhi	r3,1289
 5081c28:	18d0c104 	addi	r3,r3,17156
 5081c2c:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081c30:	00814274 	movhi	r2,1289
 5081c34:	109f5104 	addi	r2,r2,32068
 5081c38:	10800017 	ldw	r2,0(r2)
 5081c3c:	1009883a 	mov	r4,r2
 5081c40:	5082b740 	call	5082b74 <sendmsg>
                    choose_audio(ST_GAMEOVER);
 5081c44:	01000204 	movi	r4,8
 5081c48:	5081ed80 	call	5081ed8 <choose_audio>
                    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x3ff);
 5081c4c:	00c0ffc4 	movi	r3,1023
 5081c50:	00810034 	movhi	r2,1024
 5081c54:	10801804 	addi	r2,r2,96
 5081c58:	10c00035 	stwio	r3,0(r2)
 5081c5c:	00003e06 	br	5081d58 <main+0x82c>
                }
                else if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) == 11){
 5081c60:	00810034 	movhi	r2,1024
 5081c64:	10801c04 	addi	r2,r2,112
 5081c68:	10800037 	ldwio	r2,0(r2)
 5081c6c:	108002d8 	cmpnei	r2,r2,11
 5081c70:	1000391e 	bne	r2,zero,5081d58 <main+0x82c>
                    printf("Defusing...\n");
 5081c74:	01014274 	movhi	r4,1289
 5081c78:	2110c404 	addi	r4,r4,17168
 5081c7c:	50872d80 	call	50872d8 <puts>
                    state = ST_DEFUSING;
 5081c80:	008001c4 	movi	r2,7
 5081c84:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "defusing";
 5081c88:	00814274 	movhi	r2,1289
 5081c8c:	109f5104 	addi	r2,r2,32068
 5081c90:	00c14274 	movhi	r3,1289
 5081c94:	18d0c704 	addi	r3,r3,17180
 5081c98:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081c9c:	00814274 	movhi	r2,1289
 5081ca0:	109f5104 	addi	r2,r2,32068
 5081ca4:	10800017 	ldw	r2,0(r2)
 5081ca8:	1009883a 	mov	r4,r2
 5081cac:	5082b740 	call	5082b74 <sendmsg>
                    //choose_audio(ST_DEFUSING);
                    beeppPlaying = pBuf + 5*onesec;// + offset;
 5081cb0:	00814274 	movhi	r2,1289
 5081cb4:	109f4a04 	addi	r2,r2,32040
 5081cb8:	10800017 	ldw	r2,0(r2)
 5081cbc:	d0e00217 	ldw	r3,-32760(gp)
 5081cc0:	18c00524 	muli	r3,r3,20
 5081cc4:	10c7883a 	add	r3,r2,r3
 5081cc8:	00814274 	movhi	r2,1289
 5081ccc:	109f4904 	addi	r2,r2,32036
 5081cd0:	10c00015 	stw	r3,0(r2)
                    beepPlayLen = 5*onesec;// + offset;
 5081cd4:	d0a00217 	ldw	r2,-32760(gp)
 5081cd8:	10800164 	muli	r2,r2,5
 5081cdc:	1007883a 	mov	r3,r2
 5081ce0:	00814274 	movhi	r2,1289
 5081ce4:	109f5604 	addi	r2,r2,32088
 5081ce8:	10c00015 	stw	r3,0(r2)
                    beepcliplength = onesec*0.55;
 5081cec:	d0a00217 	ldw	r2,-32760(gp)
 5081cf0:	1009883a 	mov	r4,r2
 5081cf4:	508703c0 	call	508703c <__floatsidf>
 5081cf8:	1011883a 	mov	r8,r2
 5081cfc:	1813883a 	mov	r9,r3
 5081d00:	01a666b4 	movhi	r6,39322
 5081d04:	31a66684 	addi	r6,r6,-26214
 5081d08:	01cff8b4 	movhi	r7,16354
 5081d0c:	39e66644 	addi	r7,r7,-26215
 5081d10:	4009883a 	mov	r4,r8
 5081d14:	480b883a 	mov	r5,r9
 5081d18:	5085fa80 	call	5085fa8 <__muldf3>
 5081d1c:	1009883a 	mov	r4,r2
 5081d20:	180b883a 	mov	r5,r3
 5081d24:	2005883a 	mov	r2,r4
 5081d28:	2807883a 	mov	r3,r5
 5081d2c:	1009883a 	mov	r4,r2
 5081d30:	180b883a 	mov	r5,r3
 5081d34:	5086fbc0 	call	5086fbc <__fixdfsi>
 5081d38:	1007883a 	mov	r3,r2
 5081d3c:	00814274 	movhi	r2,1289
 5081d40:	109f4b04 	addi	r2,r2,32044
 5081d44:	10c00015 	stw	r3,0(r2)
                    beepstartclip = beepPlayLen;
 5081d48:	00814274 	movhi	r2,1289
 5081d4c:	109f5604 	addi	r2,r2,32088
 5081d50:	10800017 	ldw	r2,0(r2)
 5081d54:	d0a6e915 	stw	r2,-25692(gp)
                }
                display_number(ticking);
 5081d58:	d0a00117 	ldw	r2,-32764(gp)
 5081d5c:	1009883a 	mov	r4,r2
 5081d60:	508266c0 	call	508266c <display_number>
                break;
 5081d64:	00005606 	br	5081ec0 <main+0x994>
            case ST_DEFUSING:
                play_audio();
 5081d68:	50821f80 	call	50821f8 <play_audio>
                IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, defuseled(defusing));
 5081d6c:	d0a6e417 	ldw	r2,-25712(gp)
 5081d70:	1009883a 	mov	r4,r2
 5081d74:	50829ec0 	call	50829ec <defuseled>
 5081d78:	1007883a 	mov	r3,r2
 5081d7c:	00810034 	movhi	r2,1024
 5081d80:	10801804 	addi	r2,r2,96
 5081d84:	10c00035 	stwio	r3,0(r2)
                if (ticking <= 0){
 5081d88:	d0a00117 	ldw	r2,-32764(gp)
 5081d8c:	00801616 	blt	zero,r2,5081de8 <main+0x8bc>
                    printf("Exploded!");
 5081d90:	01014274 	movhi	r4,1289
 5081d94:	2110be04 	addi	r4,r4,17144
 5081d98:	50871bc0 	call	50871bc <printf>
                    state = ST_GAMEOVER;
 5081d9c:	00800204 	movi	r2,8
 5081da0:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "exploded";
 5081da4:	00814274 	movhi	r2,1289
 5081da8:	109f5104 	addi	r2,r2,32068
 5081dac:	00c14274 	movhi	r3,1289
 5081db0:	18d0c104 	addi	r3,r3,17156
 5081db4:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081db8:	00814274 	movhi	r2,1289
 5081dbc:	109f5104 	addi	r2,r2,32068
 5081dc0:	10800017 	ldw	r2,0(r2)
 5081dc4:	1009883a 	mov	r4,r2
 5081dc8:	5082b740 	call	5082b74 <sendmsg>
                    choose_audio(ST_GAMEOVER);
 5081dcc:	01000204 	movi	r4,8
 5081dd0:	5081ed80 	call	5081ed8 <choose_audio>
                    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x3ff);
 5081dd4:	00c0ffc4 	movi	r3,1023
 5081dd8:	00810034 	movhi	r2,1024
 5081ddc:	10801804 	addi	r2,r2,96
 5081de0:	10c00035 	stwio	r3,0(r2)
 5081de4:	00002b06 	br	5081e94 <main+0x968>
                }
                else if (IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE) != 11){
 5081de8:	00810034 	movhi	r2,1024
 5081dec:	10801c04 	addi	r2,r2,112
 5081df0:	10800037 	ldwio	r2,0(r2)
 5081df4:	108002e0 	cmpeqi	r2,r2,11
 5081df8:	1000101e 	bne	r2,zero,5081e3c <main+0x910>
                    printf("Got off\n");
 5081dfc:	01014274 	movhi	r4,1289
 5081e00:	2110b604 	addi	r4,r4,17112
 5081e04:	50872d80 	call	50872d8 <puts>
                    state = ST_PLANTED;
 5081e08:	00800184 	movi	r2,6
 5081e0c:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "dgotoff";
 5081e10:	00814274 	movhi	r2,1289
 5081e14:	109f5104 	addi	r2,r2,32068
 5081e18:	00c14274 	movhi	r3,1289
 5081e1c:	18d0ca04 	addi	r3,r3,17192
 5081e20:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081e24:	00814274 	movhi	r2,1289
 5081e28:	109f5104 	addi	r2,r2,32068
 5081e2c:	10800017 	ldw	r2,0(r2)
 5081e30:	1009883a 	mov	r4,r2
 5081e34:	5082b740 	call	5082b74 <sendmsg>
 5081e38:	00001606 	br	5081e94 <main+0x968>

                } else if (defusing >= 7){
 5081e3c:	d0a6e417 	ldw	r2,-25712(gp)
 5081e40:	108001d0 	cmplti	r2,r2,7
 5081e44:	1000131e 	bne	r2,zero,5081e94 <main+0x968>
                    printf("Defused\n");
 5081e48:	01014274 	movhi	r4,1289
 5081e4c:	2110cc04 	addi	r4,r4,17200
 5081e50:	50872d80 	call	50872d8 <puts>
                    state = ST_DEFUSED;
 5081e54:	00800244 	movi	r2,9
 5081e58:	d0a6e215 	stw	r2,-25720(gp)
                    statemsg = "defused";
 5081e5c:	00814274 	movhi	r2,1289
 5081e60:	109f5104 	addi	r2,r2,32068
 5081e64:	00c14274 	movhi	r3,1289
 5081e68:	18d0ce04 	addi	r3,r3,17208
 5081e6c:	10c00015 	stw	r3,0(r2)
                    sendmsg(statemsg);
 5081e70:	00814274 	movhi	r2,1289
 5081e74:	109f5104 	addi	r2,r2,32068
 5081e78:	10800017 	ldw	r2,0(r2)
 5081e7c:	1009883a 	mov	r4,r2
 5081e80:	5082b740 	call	5082b74 <sendmsg>
                    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0x0);
 5081e84:	0007883a 	mov	r3,zero
 5081e88:	00810034 	movhi	r2,1024
 5081e8c:	10801804 	addi	r2,r2,96
 5081e90:	10c00035 	stwio	r3,0(r2)
                }
                display_number(ticking);
 5081e94:	d0a00117 	ldw	r2,-32764(gp)
 5081e98:	1009883a 	mov	r4,r2
 5081e9c:	508266c0 	call	508266c <display_number>
                break;
 5081ea0:	00000706 	br	5081ec0 <main+0x994>
            case ST_GAMEOVER:
                play_audio();
 5081ea4:	50821f80 	call	50821f8 <play_audio>
                break;
 5081ea8:	00000506 	br	5081ec0 <main+0x994>
            case ST_DEFUSED:
                break;
            default:
                break;
 5081eac:	0001883a 	nop
 5081eb0:	003dd706 	br	5081610 <__alt_data_end+0xfffb3410>
                        init_audio(LINEOUT_PLAY);
                        AUDIO_FifoClear();
                    	state = ST_ATTACK;
                    }
                }
                break;
 5081eb4:	0001883a 	nop
 5081eb8:	003dd506 	br	5081610 <__alt_data_end+0xfffb3410>
                        statemsg = "Game Start";
                        sendmsg(statemsg);
                    	state = ST_ATTACK;
                    }
                }
                break;
 5081ebc:	0001883a 	nop
            case ST_DEFUSED:
                break;
            default:
                break;
        }
    };
 5081ec0:	003dd306 	br	5081610 <__alt_data_end+0xfffb3410>
    return 0;
}
 5081ec4:	e037883a 	mov	sp,fp
 5081ec8:	dfc00117 	ldw	ra,4(sp)
 5081ecc:	df000017 	ldw	fp,0(sp)
 5081ed0:	dec00204 	addi	sp,sp,8
 5081ed4:	f800283a 	ret

05081ed8 <choose_audio>:

void choose_audio(STATE state){
 5081ed8:	defffd04 	addi	sp,sp,-12
 5081edc:	dfc00215 	stw	ra,8(sp)
 5081ee0:	df000115 	stw	fp,4(sp)
 5081ee4:	df000104 	addi	fp,sp,4
 5081ee8:	e13fff15 	stw	r4,-4(fp)
   
    switch (state){
 5081eec:	e0bfff17 	ldw	r2,-4(fp)
 5081ef0:	10c001a0 	cmpeqi	r3,r2,6
 5081ef4:	18002c1e 	bne	r3,zero,5081fa8 <choose_audio+0xd0>
 5081ef8:	10c001e8 	cmpgeui	r3,r2,7
 5081efc:	1800031e 	bne	r3,zero,5081f0c <choose_audio+0x34>
 5081f00:	10800160 	cmpeqi	r2,r2,5
 5081f04:	1000061e 	bne	r2,zero,5081f20 <choose_audio+0x48>
 5081f08:	0000a606 	br	50821a4 <choose_audio+0x2cc>
 5081f0c:	10c001e0 	cmpeqi	r3,r2,7
 5081f10:	1800501e 	bne	r3,zero,5082054 <choose_audio+0x17c>
 5081f14:	10800220 	cmpeqi	r2,r2,8
 5081f18:	1000791e 	bne	r2,zero,5082100 <choose_audio+0x228>
 5081f1c:	0000a106 	br	50821a4 <choose_audio+0x2cc>
        case ST_PLANTING:
            pPlaying = pBuf + offset;
 5081f20:	00814274 	movhi	r2,1289
 5081f24:	109f4a04 	addi	r2,r2,32040
 5081f28:	10c00017 	ldw	r3,0(r2)
 5081f2c:	d0a00317 	ldw	r2,-32756(gp)
 5081f30:	1085883a 	add	r2,r2,r2
 5081f34:	1085883a 	add	r2,r2,r2
 5081f38:	1887883a 	add	r3,r3,r2
 5081f3c:	00814274 	movhi	r2,1289
 5081f40:	109f4c04 	addi	r2,r2,32048
 5081f44:	10c00015 	stw	r3,0(r2)
            PlayLen = 0 + offset;
 5081f48:	d0a00317 	ldw	r2,-32756(gp)
 5081f4c:	1007883a 	mov	r3,r2
 5081f50:	00814274 	movhi	r2,1289
 5081f54:	109f4804 	addi	r2,r2,32032
 5081f58:	10c00015 	stw	r3,0(r2)
            cliplength = onesec*3.75;
 5081f5c:	d0a00217 	ldw	r2,-32760(gp)
 5081f60:	1009883a 	mov	r4,r2
 5081f64:	508703c0 	call	508703c <__floatsidf>
 5081f68:	1011883a 	mov	r8,r2
 5081f6c:	1813883a 	mov	r9,r3
 5081f70:	000d883a 	mov	r6,zero
 5081f74:	01d003b4 	movhi	r7,16398
 5081f78:	4009883a 	mov	r4,r8
 5081f7c:	480b883a 	mov	r5,r9
 5081f80:	5085fa80 	call	5085fa8 <__muldf3>
 5081f84:	1009883a 	mov	r4,r2
 5081f88:	180b883a 	mov	r5,r3
 5081f8c:	2005883a 	mov	r2,r4
 5081f90:	2807883a 	mov	r3,r5
 5081f94:	1009883a 	mov	r4,r2
 5081f98:	180b883a 	mov	r5,r3
 5081f9c:	5086fbc0 	call	5086fbc <__fixdfsi>
 5081fa0:	d0a6e515 	stw	r2,-25708(gp)
            break;
 5081fa4:	00008a06 	br	50821d0 <choose_audio+0x2f8>
        case ST_PLANTED:
            pPlaying = pBuf + 7*onesec + offset; //1000000 == plus 10 seconds
 5081fa8:	00814274 	movhi	r2,1289
 5081fac:	109f4a04 	addi	r2,r2,32040
 5081fb0:	10c00017 	ldw	r3,0(r2)
 5081fb4:	d0a00217 	ldw	r2,-32760(gp)
 5081fb8:	108001e4 	muli	r2,r2,7
 5081fbc:	1009883a 	mov	r4,r2
 5081fc0:	d0a00317 	ldw	r2,-32756(gp)
 5081fc4:	2085883a 	add	r2,r4,r2
 5081fc8:	1085883a 	add	r2,r2,r2
 5081fcc:	1085883a 	add	r2,r2,r2
 5081fd0:	1887883a 	add	r3,r3,r2
 5081fd4:	00814274 	movhi	r2,1289
 5081fd8:	109f4c04 	addi	r2,r2,32048
 5081fdc:	10c00015 	stw	r3,0(r2)
            PlayLen = 7*onesec + offset;
 5081fe0:	d0a00217 	ldw	r2,-32760(gp)
 5081fe4:	10c001e4 	muli	r3,r2,7
 5081fe8:	d0a00317 	ldw	r2,-32756(gp)
 5081fec:	1885883a 	add	r2,r3,r2
 5081ff0:	1007883a 	mov	r3,r2
 5081ff4:	00814274 	movhi	r2,1289
 5081ff8:	109f4804 	addi	r2,r2,32032
 5081ffc:	10c00015 	stw	r3,0(r2)
            cliplength = onesec*45.2;
 5082000:	d0a00217 	ldw	r2,-32760(gp)
 5082004:	1009883a 	mov	r4,r2
 5082008:	508703c0 	call	508703c <__floatsidf>
 508200c:	1011883a 	mov	r8,r2
 5082010:	1813883a 	mov	r9,r3
 5082014:	01a666b4 	movhi	r6,39322
 5082018:	31a66684 	addi	r6,r6,-26214
 508201c:	01d011f4 	movhi	r7,16455
 5082020:	39e66644 	addi	r7,r7,-26215
 5082024:	4009883a 	mov	r4,r8
 5082028:	480b883a 	mov	r5,r9
 508202c:	5085fa80 	call	5085fa8 <__muldf3>
 5082030:	1009883a 	mov	r4,r2
 5082034:	180b883a 	mov	r5,r3
 5082038:	2005883a 	mov	r2,r4
 508203c:	2807883a 	mov	r3,r5
 5082040:	1009883a 	mov	r4,r2
 5082044:	180b883a 	mov	r5,r3
 5082048:	5086fbc0 	call	5086fbc <__fixdfsi>
 508204c:	d0a6e515 	stw	r2,-25708(gp)
            break;
 5082050:	00005f06 	br	50821d0 <choose_audio+0x2f8>
        case ST_DEFUSING:
            pPlaying = pBuf + 5*onesec + offset;
 5082054:	00814274 	movhi	r2,1289
 5082058:	109f4a04 	addi	r2,r2,32040
 508205c:	10c00017 	ldw	r3,0(r2)
 5082060:	d0a00217 	ldw	r2,-32760(gp)
 5082064:	10800164 	muli	r2,r2,5
 5082068:	1009883a 	mov	r4,r2
 508206c:	d0a00317 	ldw	r2,-32756(gp)
 5082070:	2085883a 	add	r2,r4,r2
 5082074:	1085883a 	add	r2,r2,r2
 5082078:	1085883a 	add	r2,r2,r2
 508207c:	1887883a 	add	r3,r3,r2
 5082080:	00814274 	movhi	r2,1289
 5082084:	109f4c04 	addi	r2,r2,32048
 5082088:	10c00015 	stw	r3,0(r2)
            PlayLen = 5*onesec + offset;
 508208c:	d0a00217 	ldw	r2,-32760(gp)
 5082090:	10c00164 	muli	r3,r2,5
 5082094:	d0a00317 	ldw	r2,-32756(gp)
 5082098:	1885883a 	add	r2,r3,r2
 508209c:	1007883a 	mov	r3,r2
 50820a0:	00814274 	movhi	r2,1289
 50820a4:	109f4804 	addi	r2,r2,32032
 50820a8:	10c00015 	stw	r3,0(r2)
            cliplength = onesec*0.55;
 50820ac:	d0a00217 	ldw	r2,-32760(gp)
 50820b0:	1009883a 	mov	r4,r2
 50820b4:	508703c0 	call	508703c <__floatsidf>
 50820b8:	1011883a 	mov	r8,r2
 50820bc:	1813883a 	mov	r9,r3
 50820c0:	01a666b4 	movhi	r6,39322
 50820c4:	31a66684 	addi	r6,r6,-26214
 50820c8:	01cff8b4 	movhi	r7,16354
 50820cc:	39e66644 	addi	r7,r7,-26215
 50820d0:	4009883a 	mov	r4,r8
 50820d4:	480b883a 	mov	r5,r9
 50820d8:	5085fa80 	call	5085fa8 <__muldf3>
 50820dc:	1009883a 	mov	r4,r2
 50820e0:	180b883a 	mov	r5,r3
 50820e4:	2005883a 	mov	r2,r4
 50820e8:	2807883a 	mov	r3,r5
 50820ec:	1009883a 	mov	r4,r2
 50820f0:	180b883a 	mov	r5,r3
 50820f4:	5086fbc0 	call	5086fbc <__fixdfsi>
 50820f8:	d0a6e515 	stw	r2,-25708(gp)
            break;
 50820fc:	00003406 	br	50821d0 <choose_audio+0x2f8>
        case ST_GAMEOVER:
            pPlaying = pBuf + 54*onesec + offset;
 5082100:	00814274 	movhi	r2,1289
 5082104:	109f4a04 	addi	r2,r2,32040
 5082108:	10c00017 	ldw	r3,0(r2)
 508210c:	d0a00217 	ldw	r2,-32760(gp)
 5082110:	10800da4 	muli	r2,r2,54
 5082114:	1009883a 	mov	r4,r2
 5082118:	d0a00317 	ldw	r2,-32756(gp)
 508211c:	2085883a 	add	r2,r4,r2
 5082120:	1085883a 	add	r2,r2,r2
 5082124:	1085883a 	add	r2,r2,r2
 5082128:	1887883a 	add	r3,r3,r2
 508212c:	00814274 	movhi	r2,1289
 5082130:	109f4c04 	addi	r2,r2,32048
 5082134:	10c00015 	stw	r3,0(r2)
            PlayLen = 54*onesec + offset;
 5082138:	d0a00217 	ldw	r2,-32760(gp)
 508213c:	10c00da4 	muli	r3,r2,54
 5082140:	d0a00317 	ldw	r2,-32756(gp)
 5082144:	1885883a 	add	r2,r3,r2
 5082148:	1007883a 	mov	r3,r2
 508214c:	00814274 	movhi	r2,1289
 5082150:	109f4804 	addi	r2,r2,32032
 5082154:	10c00015 	stw	r3,0(r2)
            cliplength = onesec*4.50;
 5082158:	d0a00217 	ldw	r2,-32760(gp)
 508215c:	1009883a 	mov	r4,r2
 5082160:	508703c0 	call	508703c <__floatsidf>
 5082164:	1011883a 	mov	r8,r2
 5082168:	1813883a 	mov	r9,r3
 508216c:	000d883a 	mov	r6,zero
 5082170:	01d004b4 	movhi	r7,16402
 5082174:	4009883a 	mov	r4,r8
 5082178:	480b883a 	mov	r5,r9
 508217c:	5085fa80 	call	5085fa8 <__muldf3>
 5082180:	1009883a 	mov	r4,r2
 5082184:	180b883a 	mov	r5,r3
 5082188:	2005883a 	mov	r2,r4
 508218c:	2807883a 	mov	r3,r5
 5082190:	1009883a 	mov	r4,r2
 5082194:	180b883a 	mov	r5,r3
 5082198:	5086fbc0 	call	5086fbc <__fixdfsi>
 508219c:	d0a6e515 	stw	r2,-25708(gp)
            break;
 50821a0:	00000b06 	br	50821d0 <choose_audio+0x2f8>
        //     pPlaying = pBuf + 60*onesec + offset;
        //     PlayLen = 60*onesec + offset;
        //     cliplength = onesec*3.20;
        //     break;
        default:
            pPlaying = pBuf;
 50821a4:	00814274 	movhi	r2,1289
 50821a8:	109f4a04 	addi	r2,r2,32040
 50821ac:	10c00017 	ldw	r3,0(r2)
 50821b0:	00814274 	movhi	r2,1289
 50821b4:	109f4c04 	addi	r2,r2,32048
 50821b8:	10c00015 	stw	r3,0(r2)
            PlayLen = 0;
 50821bc:	00814274 	movhi	r2,1289
 50821c0:	109f4804 	addi	r2,r2,32032
 50821c4:	10000015 	stw	zero,0(r2)
            cliplength = 0;
 50821c8:	d026e515 	stw	zero,-25708(gp)
            break;
 50821cc:	0001883a 	nop
    }
    startclip = PlayLen;
 50821d0:	00814274 	movhi	r2,1289
 50821d4:	109f4804 	addi	r2,r2,32032
 50821d8:	10800017 	ldw	r2,0(r2)
 50821dc:	d0a6e615 	stw	r2,-25704(gp)
}
 50821e0:	0001883a 	nop
 50821e4:	e037883a 	mov	sp,fp
 50821e8:	dfc00117 	ldw	ra,4(sp)
 50821ec:	df000017 	ldw	fp,0(sp)
 50821f0:	dec00204 	addi	sp,sp,8
 50821f4:	f800283a 	ret

050821f8 <play_audio>:



void play_audio(){
 50821f8:	defffd04 	addi	sp,sp,-12
 50821fc:	dfc00215 	stw	ra,8(sp)
 5082200:	df000115 	stw	fp,4(sp)
 5082204:	df000104 	addi	fp,sp,4
    if ((PlayLen-startclip) < cliplength){
 5082208:	00814274 	movhi	r2,1289
 508220c:	109f4804 	addi	r2,r2,32032
 5082210:	10800017 	ldw	r2,0(r2)
 5082214:	d0e6e617 	ldw	r3,-25704(gp)
 5082218:	10c5c83a 	sub	r2,r2,r3
 508221c:	d0e6e517 	ldw	r3,-25708(gp)
 5082220:	10c0722e 	bgeu	r2,r3,50823ec <play_audio+0x1f4>
        // continue playing
        int i = 0;
 5082224:	e03fff15 	stw	zero,-4(fp)
        while ((i < PLAY_BLOCK_SIZE)){
 5082228:	00006d06 	br	50823e0 <play_audio+0x1e8>
            try_cnt = 0;                
 508222c:	00814274 	movhi	r2,1289
 5082230:	109f5504 	addi	r2,r2,32084
 5082234:	10000015 	stw	zero,0(r2)
            while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
 5082238:	00000706 	br	5082258 <play_audio+0x60>
                try_cnt++;
 508223c:	00814274 	movhi	r2,1289
 5082240:	109f5504 	addi	r2,r2,32084
 5082244:	10800017 	ldw	r2,0(r2)
 5082248:	10c00044 	addi	r3,r2,1
 508224c:	00814274 	movhi	r2,1289
 5082250:	109f5504 	addi	r2,r2,32084
 5082254:	10c00015 	stw	r3,0(r2)
    if ((PlayLen-startclip) < cliplength){
        // continue playing
        int i = 0;
        while ((i < PLAY_BLOCK_SIZE)){
            try_cnt = 0;                
            while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
 5082258:	5080d200 	call	5080d20 <AUDIO_DacFifoNotFull>
 508225c:	1000051e 	bne	r2,zero,5082274 <play_audio+0x7c>
 5082260:	00814274 	movhi	r2,1289
 5082264:	109f5504 	addi	r2,r2,32084
 5082268:	10800017 	ldw	r2,0(r2)
 508226c:	10810030 	cmpltui	r2,r2,1024
 5082270:	103ff21e 	bne	r2,zero,508223c <__alt_data_end+0xfffb403c>
                try_cnt++;
            }    
            data = *pPlaying++;
 5082274:	00814274 	movhi	r2,1289
 5082278:	109f4c04 	addi	r2,r2,32048
 508227c:	10c00017 	ldw	r3,0(r2)
 5082280:	19000104 	addi	r4,r3,4
 5082284:	00814274 	movhi	r2,1289
 5082288:	109f4c04 	addi	r2,r2,32048
 508228c:	11000015 	stw	r4,0(r2)
 5082290:	18c00017 	ldw	r3,0(r3)
 5082294:	00814274 	movhi	r2,1289
 5082298:	109f5004 	addi	r2,r2,32064
 508229c:	10c00015 	stw	r3,0(r2)
            if (state == ST_DEFUSING){
 50822a0:	d0a6e217 	ldw	r2,-25720(gp)
 50822a4:	108001d8 	cmpnei	r2,r2,7
 50822a8:	1000251e 	bne	r2,zero,5082340 <play_audio+0x148>
                if ((beepPlayLen-beepstartclip) < beepcliplength){
 50822ac:	00814274 	movhi	r2,1289
 50822b0:	109f5604 	addi	r2,r2,32088
 50822b4:	10800017 	ldw	r2,0(r2)
 50822b8:	d0e6e917 	ldw	r3,-25692(gp)
 50822bc:	10c7c83a 	sub	r3,r2,r3
 50822c0:	00814274 	movhi	r2,1289
 50822c4:	109f4b04 	addi	r2,r2,32044
 50822c8:	10800017 	ldw	r2,0(r2)
 50822cc:	18801c2e 	bgeu	r3,r2,5082340 <play_audio+0x148>
                    beepdata = *beeppPlaying++;
 50822d0:	00814274 	movhi	r2,1289
 50822d4:	109f4904 	addi	r2,r2,32036
 50822d8:	10c00017 	ldw	r3,0(r2)
 50822dc:	19000104 	addi	r4,r3,4
 50822e0:	00814274 	movhi	r2,1289
 50822e4:	109f4904 	addi	r2,r2,32036
 50822e8:	11000015 	stw	r4,0(r2)
 50822ec:	18c00017 	ldw	r3,0(r3)
 50822f0:	00814274 	movhi	r2,1289
 50822f4:	109f4e04 	addi	r2,r2,32056
 50822f8:	10c00015 	stw	r3,0(r2)
                    data = data + beepdata;
 50822fc:	00814274 	movhi	r2,1289
 5082300:	109f5004 	addi	r2,r2,32064
 5082304:	10c00017 	ldw	r3,0(r2)
 5082308:	00814274 	movhi	r2,1289
 508230c:	109f4e04 	addi	r2,r2,32056
 5082310:	10800017 	ldw	r2,0(r2)
 5082314:	1887883a 	add	r3,r3,r2
 5082318:	00814274 	movhi	r2,1289
 508231c:	109f5004 	addi	r2,r2,32064
 5082320:	10c00015 	stw	r3,0(r2)
                    beepPlayLen++;
 5082324:	00814274 	movhi	r2,1289
 5082328:	109f5604 	addi	r2,r2,32088
 508232c:	10800017 	ldw	r2,0(r2)
 5082330:	10c00044 	addi	r3,r2,1
 5082334:	00814274 	movhi	r2,1289
 5082338:	109f5604 	addi	r2,r2,32088
 508233c:	10c00015 	stw	r3,0(r2)
                }
            }
            //data = 0;
            ch_left = data >> 16;
 5082340:	00814274 	movhi	r2,1289
 5082344:	109f5004 	addi	r2,r2,32064
 5082348:	10800017 	ldw	r2,0(r2)
 508234c:	1004d43a 	srli	r2,r2,16
 5082350:	1007883a 	mov	r3,r2
 5082354:	00814274 	movhi	r2,1289
 5082358:	109f5704 	addi	r2,r2,32092
 508235c:	10c0000d 	sth	r3,0(r2)
            ch_right = data & 0xFFFF;
 5082360:	00814274 	movhi	r2,1289
 5082364:	109f5004 	addi	r2,r2,32064
 5082368:	10800017 	ldw	r2,0(r2)
 508236c:	1007883a 	mov	r3,r2
 5082370:	00814274 	movhi	r2,1289
 5082374:	109f4d04 	addi	r2,r2,32052
 5082378:	10c0000d 	sth	r3,0(r2)
            AUDIO_DacFifoSetData(ch_left, ch_right);  
 508237c:	00814274 	movhi	r2,1289
 5082380:	109f5704 	addi	r2,r2,32092
 5082384:	1080000b 	ldhu	r2,0(r2)
 5082388:	10ffffcc 	andi	r3,r2,65535
 508238c:	18e0001c 	xori	r3,r3,32768
 5082390:	18e00004 	addi	r3,r3,-32768
 5082394:	00814274 	movhi	r2,1289
 5082398:	109f4d04 	addi	r2,r2,32052
 508239c:	1080000b 	ldhu	r2,0(r2)
 50823a0:	10bfffcc 	andi	r2,r2,65535
 50823a4:	10a0001c 	xori	r2,r2,32768
 50823a8:	10a00004 	addi	r2,r2,-32768
 50823ac:	100b883a 	mov	r5,r2
 50823b0:	1809883a 	mov	r4,r3
 50823b4:	5080d5c0 	call	5080d5c <AUDIO_DacFifoSetData>
            i++;
 50823b8:	e0bfff17 	ldw	r2,-4(fp)
 50823bc:	10800044 	addi	r2,r2,1
 50823c0:	e0bfff15 	stw	r2,-4(fp)
            PlayLen++;
 50823c4:	00814274 	movhi	r2,1289
 50823c8:	109f4804 	addi	r2,r2,32032
 50823cc:	10800017 	ldw	r2,0(r2)
 50823d0:	10c00044 	addi	r3,r2,1
 50823d4:	00814274 	movhi	r2,1289
 50823d8:	109f4804 	addi	r2,r2,32032
 50823dc:	10c00015 	stw	r3,0(r2)

void play_audio(){
    if ((PlayLen-startclip) < cliplength){
        // continue playing
        int i = 0;
        while ((i < PLAY_BLOCK_SIZE)){
 50823e0:	e0bfff17 	ldw	r2,-4(fp)
 50823e4:	10803e90 	cmplti	r2,r2,250
 50823e8:	103f901e 	bne	r2,zero,508222c <__alt_data_end+0xfffb402c>
            i++;
            PlayLen++;
            //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
        }  
    }
}
 50823ec:	0001883a 	nop
 50823f0:	e037883a 	mov	sp,fp
 50823f4:	dfc00117 	ldw	ra,4(sp)
 50823f8:	df000017 	ldw	fp,0(sp)
 50823fc:	dec00204 	addi	sp,sp,8
 5082400:	f800283a 	ret

05082404 <init_audio>:

bool init_audio(AUDIO_FUNC audio_func){
 5082404:	defffc04 	addi	sp,sp,-16
 5082408:	dfc00315 	stw	ra,12(sp)
 508240c:	df000215 	stw	fp,8(sp)
 5082410:	df000204 	addi	fp,sp,8
 5082414:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
 5082418:	00800044 	movi	r2,1
 508241c:	e0bffe15 	stw	r2,-8(fp)
    AUDIO_InterfaceActive(FALSE);
 5082420:	0009883a 	mov	r4,zero
 5082424:	50803600 	call	5080360 <AUDIO_InterfaceActive>
    if (audio_func == LINEIN_RECORD){
 5082428:	e0bfff17 	ldw	r2,-4(fp)
 508242c:	10000e1e 	bne	r2,zero,5082468 <init_audio+0x64>
        AUDIO_SetInputSource(SOURCE_LINEIN);
 5082430:	01000044 	movi	r4,1
 5082434:	50808200 	call	5080820 <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
 5082438:	01000044 	movi	r4,1
 508243c:	50806280 	call	5080628 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
 5082440:	0009883a 	mov	r4,zero
 5082444:	50804200 	call	5080420 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(TRUE);
 5082448:	01000044 	movi	r4,1
 508244c:	50806b40 	call	50806b4 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
 5082450:	0009883a 	mov	r4,zero
 5082454:	50807400 	call	5080740 <AUDIO_LineInMute>
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
 5082458:	014005c4 	movi	r5,23
 508245c:	010005c4 	movi	r4,23
 5082460:	50809940 	call	5080994 <AUDIO_SetLineInVol>
 5082464:	00001206 	br	50824b0 <init_audio+0xac>
    }else if (audio_func == LINEOUT_PLAY){
 5082468:	e0bfff17 	ldw	r2,-4(fp)
 508246c:	10800058 	cmpnei	r2,r2,1
 5082470:	10000f1e 	bne	r2,zero,50824b0 <init_audio+0xac>
        AUDIO_DacEnableSoftMute(TRUE);
 5082474:	01000044 	movi	r4,1
 5082478:	50806280 	call	5080628 <AUDIO_DacEnableSoftMute>
        AUDIO_MicBoost(FALSE);   
 508247c:	0009883a 	mov	r4,zero
 5082480:	50803a80 	call	50803a8 <AUDIO_MicBoost>
        AUDIO_MicMute(TRUE);
 5082484:	01000044 	movi	r4,1
 5082488:	50806b40 	call	50806b4 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
 508248c:	0009883a 	mov	r4,zero
 5082490:	50807400 	call	5080740 <AUDIO_LineInMute>
        AUDIO_DacEnableSoftMute(FALSE);
 5082494:	0009883a 	mov	r4,zero
 5082498:	50806280 	call	5080628 <AUDIO_DacEnableSoftMute>
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
 508249c:	01401e44 	movi	r5,121
 50824a0:	01001e44 	movi	r4,121
 50824a4:	5080a6c0 	call	5080a6c <AUDIO_SetLineOutVol>
        AUDIO_DacEnableSoftMute(FALSE);
 50824a8:	0009883a 	mov	r4,zero
 50824ac:	50806280 	call	5080628 <AUDIO_DacEnableSoftMute>
    }
    AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
 50824b0:	01000144 	movi	r4,5
 50824b4:	50808b00 	call	50808b0 <AUDIO_SetSampleRate>
    AUDIO_InterfaceActive(TRUE);
 50824b8:	01000044 	movi	r4,1
 50824bc:	50803600 	call	5080360 <AUDIO_InterfaceActive>
    return bSuccess;             
 50824c0:	e0bffe17 	ldw	r2,-8(fp)
}
 50824c4:	e037883a 	mov	sp,fp
 50824c8:	dfc00117 	ldw	ra,4(sp)
 50824cc:	df000017 	ldw	fp,0(sp)
 50824d0:	dec00204 	addi	sp,sp,8
 50824d4:	f800283a 	ret

050824d8 <init>:

bool init(void){
 50824d8:	defffd04 	addi	sp,sp,-12
 50824dc:	dfc00215 	stw	ra,8(sp)
 50824e0:	df000115 	stw	fp,4(sp)
 50824e4:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
 50824e8:	00800044 	movi	r2,1
 50824ec:	e0bfff15 	stw	r2,-4(fp)
    // prepare    
    if (!AUDIO_Init()){
 50824f0:	50802100 	call	5080210 <AUDIO_Init>
 50824f4:	1000041e 	bne	r2,zero,5082508 <init+0x30>
        printf("Audio Init Error\n");
 50824f8:	01014274 	movhi	r4,1289
 50824fc:	2110d004 	addi	r4,r4,17216
 5082500:	50872d80 	call	50872d8 <puts>
        bSuccess = FALSE;
 5082504:	e03fff15 	stw	zero,-4(fp)
    }
    return bSuccess;
 5082508:	e0bfff17 	ldw	r2,-4(fp)
}
 508250c:	e037883a 	mov	sp,fp
 5082510:	dfc00117 	ldw	ra,4(sp)
 5082514:	df000017 	ldw	fp,0(sp)
 5082518:	dec00204 	addi	sp,sp,8
 508251c:	f800283a 	ret

05082520 <init_timer_interrupt>:

void init_timer_interrupt( void ){
 5082520:	defffe04 	addi	sp,sp,-8
 5082524:	dfc00115 	stw	ra,4(sp)
 5082528:	df000015 	stw	fp,0(sp)
 508252c:	d839883a 	mov	fp,sp
	// Register the ISR with HAL
	alt_irq_register(TIMER_0_IRQ, NULL, (void *)timer_isr);
 5082530:	01814234 	movhi	r6,1288
 5082534:	31895b04 	addi	r6,r6,9580
 5082538:	000b883a 	mov	r5,zero
 508253c:	010000c4 	movi	r4,3
 5082540:	50917ac0 	call	50917ac <alt_irq_register>
	// Start the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
 5082544:	00c001c4 	movi	r3,7
 5082548:	00810034 	movhi	r2,1024
 508254c:	10800104 	addi	r2,r2,4
 5082550:	10c00035 	stwio	r3,0(r2)
			                                   | ALTERA_AVALON_TIMER_CONTROL_START_MSK
											   | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
 5082554:	0001883a 	nop
 5082558:	e037883a 	mov	sp,fp
 508255c:	dfc00117 	ldw	ra,4(sp)
 5082560:	df000017 	ldw	fp,0(sp)
 5082564:	dec00204 	addi	sp,sp,8
 5082568:	f800283a 	ret

0508256c <timer_isr>:

static void timer_isr( void * context, alt_u32 id ){
 508256c:	defffc04 	addi	sp,sp,-16
 5082570:	dfc00315 	stw	ra,12(sp)
 5082574:	df000215 	stw	fp,8(sp)
 5082578:	df000204 	addi	fp,sp,8
 508257c:	e13ffe15 	stw	r4,-8(fp)
 5082580:	e17fff15 	stw	r5,-4(fp)
	static int count = 0;
	// Clear the interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 5082584:	0007883a 	mov	r3,zero
 5082588:	00810034 	movhi	r2,1024
 508258c:	10c00035 	stwio	r3,0(r2)
	count++;
 5082590:	d0a6ea17 	ldw	r2,-25688(gp)
 5082594:	10800044 	addi	r2,r2,1
 5082598:	d0a6ea15 	stw	r2,-25688(gp)
	if (count % numberOfInterrupts == 0){
 508259c:	d0a6ea17 	ldw	r2,-25688(gp)
 50825a0:	d0e00017 	ldw	r3,-32768(gp)
 50825a4:	180b883a 	mov	r5,r3
 50825a8:	1009883a 	mov	r4,r2
 50825ac:	5084a8c0 	call	5084a8c <__modsi3>
 50825b0:	1000281e 	bne	r2,zero,5082654 <timer_isr+0xe8>
		if (state == ST_ATTACK){
 50825b4:	d0a6e217 	ldw	r2,-25720(gp)
 50825b8:	10800118 	cmpnei	r2,r2,4
 50825bc:	1000041e 	bne	r2,zero,50825d0 <timer_isr+0x64>
			countdown--;
 50825c0:	d0a00417 	ldw	r2,-32752(gp)
 50825c4:	10bfffc4 	addi	r2,r2,-1
 50825c8:	d0a00415 	stw	r2,-32752(gp)
			ticking--;
			defusing++;
			display_number(ticking);
		}
	}
}
 50825cc:	00002106 	br	5082654 <timer_isr+0xe8>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
	count++;
	if (count % numberOfInterrupts == 0){
		if (state == ST_ATTACK){
			countdown--;
		} else if (state == ST_PLANTING){
 50825d0:	d0a6e217 	ldw	r2,-25720(gp)
 50825d4:	10800158 	cmpnei	r2,r2,5
 50825d8:	1000071e 	bne	r2,zero,50825f8 <timer_isr+0x8c>
			countdown--;
 50825dc:	d0a00417 	ldw	r2,-32752(gp)
 50825e0:	10bfffc4 	addi	r2,r2,-1
 50825e4:	d0a00415 	stw	r2,-32752(gp)
			planting++;
 50825e8:	d0a6e317 	ldw	r2,-25716(gp)
 50825ec:	10800044 	addi	r2,r2,1
 50825f0:	d0a6e315 	stw	r2,-25716(gp)
			ticking--;
			defusing++;
			display_number(ticking);
		}
	}
}
 50825f4:	00001706 	br	5082654 <timer_isr+0xe8>
		if (state == ST_ATTACK){
			countdown--;
		} else if (state == ST_PLANTING){
			countdown--;
			planting++;
		} else if (state == ST_PLANTED){
 50825f8:	d0a6e217 	ldw	r2,-25720(gp)
 50825fc:	10800198 	cmpnei	r2,r2,6
 5082600:	1000081e 	bne	r2,zero,5082624 <timer_isr+0xb8>
			ticking--;
 5082604:	d0a00117 	ldw	r2,-32764(gp)
 5082608:	10bfffc4 	addi	r2,r2,-1
 508260c:	d0a00115 	stw	r2,-32764(gp)
			display_number(ticking);
 5082610:	d0a00117 	ldw	r2,-32764(gp)
 5082614:	1009883a 	mov	r4,r2
 5082618:	508266c0 	call	508266c <display_number>
			defusing = 0;
 508261c:	d026e415 	stw	zero,-25712(gp)
			ticking--;
			defusing++;
			display_number(ticking);
		}
	}
}
 5082620:	00000c06 	br	5082654 <timer_isr+0xe8>
			planting++;
		} else if (state == ST_PLANTED){
			ticking--;
			display_number(ticking);
			defusing = 0;
		} else if (state == ST_DEFUSING){
 5082624:	d0a6e217 	ldw	r2,-25720(gp)
 5082628:	108001d8 	cmpnei	r2,r2,7
 508262c:	1000091e 	bne	r2,zero,5082654 <timer_isr+0xe8>
			ticking--;
 5082630:	d0a00117 	ldw	r2,-32764(gp)
 5082634:	10bfffc4 	addi	r2,r2,-1
 5082638:	d0a00115 	stw	r2,-32764(gp)
			defusing++;
 508263c:	d0a6e417 	ldw	r2,-25712(gp)
 5082640:	10800044 	addi	r2,r2,1
 5082644:	d0a6e415 	stw	r2,-25712(gp)
			display_number(ticking);
 5082648:	d0a00117 	ldw	r2,-32764(gp)
 508264c:	1009883a 	mov	r4,r2
 5082650:	508266c0 	call	508266c <display_number>
		}
	}
}
 5082654:	0001883a 	nop
 5082658:	e037883a 	mov	sp,fp
 508265c:	dfc00117 	ldw	ra,4(sp)
 5082660:	df000017 	ldw	fp,0(sp)
 5082664:	dec00204 	addi	sp,sp,8
 5082668:	f800283a 	ret

0508266c <display_number>:

void display_number(int number){
 508266c:	defff204 	addi	sp,sp,-56
 5082670:	dfc00d15 	stw	ra,52(sp)
 5082674:	df000c15 	stw	fp,48(sp)
 5082678:	dc400b15 	stw	r17,44(sp)
 508267c:	dc000a15 	stw	r16,40(sp)
 5082680:	df000c04 	addi	fp,sp,48
 5082684:	e13ffd15 	stw	r4,-12(fp)
	int ognumber = number;
 5082688:	e0bffd17 	ldw	r2,-12(fp)
 508268c:	e0bff615 	stw	r2,-40(fp)
	int numbers[6];
	number = number%1000000;
 5082690:	e0bffd17 	ldw	r2,-12(fp)
 5082694:	014003f4 	movhi	r5,15
 5082698:	29509004 	addi	r5,r5,16960
 508269c:	1009883a 	mov	r4,r2
 50826a0:	5084a8c0 	call	5084a8c <__modsi3>
 50826a4:	e0bffd15 	stw	r2,-12(fp)
	for (int i = 0; i<6; i++){
 50826a8:	e03ff415 	stw	zero,-48(fp)
 50826ac:	00004206 	br	50827b8 <display_number+0x14c>
		numbers[i] = convert_to_seg(number/(pow(10,(5-i))));
 50826b0:	e13ffd17 	ldw	r4,-12(fp)
 50826b4:	508703c0 	call	508703c <__floatsidf>
 50826b8:	1021883a 	mov	r16,r2
 50826bc:	1823883a 	mov	r17,r3
 50826c0:	00c00144 	movi	r3,5
 50826c4:	e0bff417 	ldw	r2,-48(fp)
 50826c8:	1885c83a 	sub	r2,r3,r2
 50826cc:	1009883a 	mov	r4,r2
 50826d0:	508703c0 	call	508703c <__floatsidf>
 50826d4:	1009883a 	mov	r4,r2
 50826d8:	180b883a 	mov	r5,r3
 50826dc:	200d883a 	mov	r6,r4
 50826e0:	280f883a 	mov	r7,r5
 50826e4:	0009883a 	mov	r4,zero
 50826e8:	01500934 	movhi	r5,16420
 50826ec:	5082dbc0 	call	5082dbc <pow>
 50826f0:	1009883a 	mov	r4,r2
 50826f4:	180b883a 	mov	r5,r3
 50826f8:	200d883a 	mov	r6,r4
 50826fc:	280f883a 	mov	r7,r5
 5082700:	8009883a 	mov	r4,r16
 5082704:	880b883a 	mov	r5,r17
 5082708:	50854680 	call	5085468 <__divdf3>
 508270c:	1009883a 	mov	r4,r2
 5082710:	180b883a 	mov	r5,r3
 5082714:	2005883a 	mov	r2,r4
 5082718:	2807883a 	mov	r3,r5
 508271c:	1009883a 	mov	r4,r2
 5082720:	180b883a 	mov	r5,r3
 5082724:	5086fbc0 	call	5086fbc <__fixdfsi>
 5082728:	1009883a 	mov	r4,r2
 508272c:	50828a00 	call	50828a0 <convert_to_seg>
 5082730:	1007883a 	mov	r3,r2
 5082734:	e0bff417 	ldw	r2,-48(fp)
 5082738:	1085883a 	add	r2,r2,r2
 508273c:	1085883a 	add	r2,r2,r2
 5082740:	e13ff404 	addi	r4,fp,-48
 5082744:	2085883a 	add	r2,r4,r2
 5082748:	10800304 	addi	r2,r2,12
 508274c:	10c00015 	stw	r3,0(r2)
		number = number%(int)(pow(10,(5-i)));
 5082750:	00c00144 	movi	r3,5
 5082754:	e0bff417 	ldw	r2,-48(fp)
 5082758:	1885c83a 	sub	r2,r3,r2
 508275c:	1009883a 	mov	r4,r2
 5082760:	508703c0 	call	508703c <__floatsidf>
 5082764:	1009883a 	mov	r4,r2
 5082768:	180b883a 	mov	r5,r3
 508276c:	200d883a 	mov	r6,r4
 5082770:	280f883a 	mov	r7,r5
 5082774:	0009883a 	mov	r4,zero
 5082778:	01500934 	movhi	r5,16420
 508277c:	5082dbc0 	call	5082dbc <pow>
 5082780:	100b883a 	mov	r5,r2
 5082784:	180d883a 	mov	r6,r3
 5082788:	2809883a 	mov	r4,r5
 508278c:	300b883a 	mov	r5,r6
 5082790:	5086fbc0 	call	5086fbc <__fixdfsi>
 5082794:	1007883a 	mov	r3,r2
 5082798:	e0bffd17 	ldw	r2,-12(fp)
 508279c:	180b883a 	mov	r5,r3
 50827a0:	1009883a 	mov	r4,r2
 50827a4:	5084a8c0 	call	5084a8c <__modsi3>
 50827a8:	e0bffd15 	stw	r2,-12(fp)

void display_number(int number){
	int ognumber = number;
	int numbers[6];
	number = number%1000000;
	for (int i = 0; i<6; i++){
 50827ac:	e0bff417 	ldw	r2,-48(fp)
 50827b0:	10800044 	addi	r2,r2,1
 50827b4:	e0bff415 	stw	r2,-48(fp)
 50827b8:	e0bff417 	ldw	r2,-48(fp)
 50827bc:	10800190 	cmplti	r2,r2,6
 50827c0:	103fbb1e 	bne	r2,zero,50826b0 <__alt_data_end+0xfffb44b0>
		numbers[i] = convert_to_seg(number/(pow(10,(5-i))));
		number = number%(int)(pow(10,(5-i)));
	}
	if (ognumber<1000){
 50827c4:	e0bff617 	ldw	r2,-40(fp)
 50827c8:	1080fa08 	cmpgei	r2,r2,1000
 50827cc:	1000061e 	bne	r2,zero,50827e8 <display_number+0x17c>
		numbers[0] = 0x7F;
 50827d0:	00801fc4 	movi	r2,127
 50827d4:	e0bff715 	stw	r2,-36(fp)
		numbers[1] = 0x7F;
 50827d8:	00801fc4 	movi	r2,127
 50827dc:	e0bff815 	stw	r2,-32(fp)
		numbers[2] = 0x7F;
 50827e0:	00801fc4 	movi	r2,127
 50827e4:	e0bff915 	stw	r2,-28(fp)
	}
	if (ognumber<100){
 50827e8:	e0bff617 	ldw	r2,-40(fp)
 50827ec:	10801908 	cmpgei	r2,r2,100
 50827f0:	1000021e 	bne	r2,zero,50827fc <display_number+0x190>
		numbers[3] = 0x7F;
 50827f4:	00801fc4 	movi	r2,127
 50827f8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (ognumber<10){
 50827fc:	e0bff617 	ldw	r2,-40(fp)
 5082800:	10800288 	cmpgei	r2,r2,10
 5082804:	1000021e 	bne	r2,zero,5082810 <display_number+0x1a4>
		numbers[4] = 0x7f;
 5082808:	00801fc4 	movi	r2,127
 508280c:	e0bffb15 	stw	r2,-20(fp)
	}
	if (ognumber == 0){
 5082810:	e0bff617 	ldw	r2,-40(fp)
 5082814:	1000101e 	bne	r2,zero,5082858 <display_number+0x1ec>
		for(int i = 0; i<6; i++){
 5082818:	e03ff515 	stw	zero,-44(fp)
 508281c:	00000b06 	br	508284c <display_number+0x1e0>
			numbers[i] = 0x3F;
 5082820:	e0bff517 	ldw	r2,-44(fp)
 5082824:	1085883a 	add	r2,r2,r2
 5082828:	1085883a 	add	r2,r2,r2
 508282c:	e0fff404 	addi	r3,fp,-48
 5082830:	1885883a 	add	r2,r3,r2
 5082834:	10800304 	addi	r2,r2,12
 5082838:	00c00fc4 	movi	r3,63
 508283c:	10c00015 	stw	r3,0(r2)
	}
	if (ognumber<10){
		numbers[4] = 0x7f;
	}
	if (ognumber == 0){
		for(int i = 0; i<6; i++){
 5082840:	e0bff517 	ldw	r2,-44(fp)
 5082844:	10800044 	addi	r2,r2,1
 5082848:	e0bff515 	stw	r2,-44(fp)
 508284c:	e0bff517 	ldw	r2,-44(fp)
 5082850:	10800190 	cmplti	r2,r2,6
 5082854:	103ff21e 	bne	r2,zero,5082820 <__alt_data_end+0xfffb4620>
			numbers[i] = 0x3F;
		}
	}
	IOWR_ALTERA_AVALON_PIO_DATA(HEX210_BASE, (numbers[3]<<14) | (numbers[4]<<7) | numbers[5]);
 5082858:	e0bffa17 	ldw	r2,-24(fp)
 508285c:	100693ba 	slli	r3,r2,14
 5082860:	e0bffb17 	ldw	r2,-20(fp)
 5082864:	100491fa 	slli	r2,r2,7
 5082868:	1886b03a 	or	r3,r3,r2
 508286c:	e0bffc17 	ldw	r2,-16(fp)
 5082870:	1886b03a 	or	r3,r3,r2
 5082874:	00810034 	movhi	r2,1024
 5082878:	10800c04 	addi	r2,r2,48
 508287c:	10c00035 	stwio	r3,0(r2)
	//IOWR_ALTERA_AVALON_PIO_DATA(HEX543_BASE, (numbers[0]<<14) | (numbers[1]<<7) | numbers[2]);
}
 5082880:	0001883a 	nop
 5082884:	e6fffe04 	addi	sp,fp,-8
 5082888:	dfc00317 	ldw	ra,12(sp)
 508288c:	df000217 	ldw	fp,8(sp)
 5082890:	dc400117 	ldw	r17,4(sp)
 5082894:	dc000017 	ldw	r16,0(sp)
 5082898:	dec00404 	addi	sp,sp,16
 508289c:	f800283a 	ret

050828a0 <convert_to_seg>:

int convert_to_seg(int number){
 50828a0:	defffe04 	addi	sp,sp,-8
 50828a4:	df000115 	stw	fp,4(sp)
 50828a8:	df000104 	addi	fp,sp,4
 50828ac:	e13fff15 	stw	r4,-4(fp)
	switch (number){
 50828b0:	e0bfff17 	ldw	r2,-4(fp)
 50828b4:	108002a8 	cmpgeui	r2,r2,10
 50828b8:	1000251e 	bne	r2,zero,5082950 <convert_to_seg+0xb0>
 50828bc:	e0bfff17 	ldw	r2,-4(fp)
 50828c0:	100690ba 	slli	r3,r2,2
 50828c4:	00814234 	movhi	r2,1288
 50828c8:	108a3604 	addi	r2,r2,10456
 50828cc:	1885883a 	add	r2,r3,r2
 50828d0:	10800017 	ldw	r2,0(r2)
 50828d4:	1000683a 	jmp	r2
 50828d8:	05082900 	call	508290 <__alt_mem_sdram+0x508290>
 50828dc:	05082908 	cmpgei	r20,zero,8356
 50828e0:	05082910 	cmplti	r20,zero,8356
 50828e4:	05082918 	cmpnei	r20,zero,8356
 50828e8:	05082920 	cmpeqi	r20,zero,8356
 50828ec:	05082928 	cmpgeui	r20,zero,8356
 50828f0:	05082930 	cmpltui	r20,zero,8356
 50828f4:	05082938 	rdprs	r20,zero,8356
 50828f8:	05082940 	call	508294 <__alt_mem_sdram+0x508294>
 50828fc:	05082948 	cmpgei	r20,zero,8357
		case 0:
			return 0x40;
 5082900:	00801004 	movi	r2,64
 5082904:	00001306 	br	5082954 <convert_to_seg+0xb4>
		case 1:
			return 0x79;
 5082908:	00801e44 	movi	r2,121
 508290c:	00001106 	br	5082954 <convert_to_seg+0xb4>
		case 2:
			return 0x24;
 5082910:	00800904 	movi	r2,36
 5082914:	00000f06 	br	5082954 <convert_to_seg+0xb4>
		case 3:
			return 0x30;
 5082918:	00800c04 	movi	r2,48
 508291c:	00000d06 	br	5082954 <convert_to_seg+0xb4>
		case 4:
			return 0x19;
 5082920:	00800644 	movi	r2,25
 5082924:	00000b06 	br	5082954 <convert_to_seg+0xb4>
		case 5:
			return 0x12;
 5082928:	00800484 	movi	r2,18
 508292c:	00000906 	br	5082954 <convert_to_seg+0xb4>
		case 6:
			return 0x02;
 5082930:	00800084 	movi	r2,2
 5082934:	00000706 	br	5082954 <convert_to_seg+0xb4>
		case 7:
			return 0x78;
 5082938:	00801e04 	movi	r2,120
 508293c:	00000506 	br	5082954 <convert_to_seg+0xb4>
		case 8:
			return 0x00;
 5082940:	0005883a 	mov	r2,zero
 5082944:	00000306 	br	5082954 <convert_to_seg+0xb4>
		case 9:
			return 0x10;
 5082948:	00800404 	movi	r2,16
 508294c:	00000106 	br	5082954 <convert_to_seg+0xb4>
        default:
            return 0x00;
 5082950:	0005883a 	mov	r2,zero
	}
}
 5082954:	e037883a 	mov	sp,fp
 5082958:	df000017 	ldw	fp,0(sp)
 508295c:	dec00104 	addi	sp,sp,4
 5082960:	f800283a 	ret

05082964 <plantled>:

int plantled(int number){
 5082964:	defffe04 	addi	sp,sp,-8
 5082968:	df000115 	stw	fp,4(sp)
 508296c:	df000104 	addi	fp,sp,4
 5082970:	e13fff15 	stw	r4,-4(fp)
	switch (number){
 5082974:	e0bfff17 	ldw	r2,-4(fp)
 5082978:	10800168 	cmpgeui	r2,r2,5
 508297c:	1000161e 	bne	r2,zero,50829d8 <plantled+0x74>
 5082980:	e0bfff17 	ldw	r2,-4(fp)
 5082984:	100690ba 	slli	r3,r2,2
 5082988:	00814234 	movhi	r2,1288
 508298c:	108a6704 	addi	r2,r2,10652
 5082990:	1885883a 	add	r2,r3,r2
 5082994:	10800017 	ldw	r2,0(r2)
 5082998:	1000683a 	jmp	r2
 508299c:	050829b0 	cmpltui	r20,zero,8358
 50829a0:	050829b8 	rdprs	r20,zero,8358
 50829a4:	050829c0 	call	50829c <__alt_mem_sdram+0x50829c>
 50829a8:	050829c8 	cmpgei	r20,zero,8359
 50829ac:	050829d0 	cmplti	r20,zero,8359
		case 0:
			return 0x03;
 50829b0:	008000c4 	movi	r2,3
 50829b4:	00000906 	br	50829dc <plantled+0x78>
		case 1:
			return 0xF;
 50829b8:	008003c4 	movi	r2,15
 50829bc:	00000706 	br	50829dc <plantled+0x78>
		case 2:
			return 0x3F;
 50829c0:	00800fc4 	movi	r2,63
 50829c4:	00000506 	br	50829dc <plantled+0x78>
		case 3:
			return 0xFF;
 50829c8:	00803fc4 	movi	r2,255
 50829cc:	00000306 	br	50829dc <plantled+0x78>
		case 4:
			return 0x3FF;
 50829d0:	0080ffc4 	movi	r2,1023
 50829d4:	00000106 	br	50829dc <plantled+0x78>
        default:
            return 0x00;
 50829d8:	0005883a 	mov	r2,zero
	}
}
 50829dc:	e037883a 	mov	sp,fp
 50829e0:	df000017 	ldw	fp,0(sp)
 50829e4:	dec00104 	addi	sp,sp,4
 50829e8:	f800283a 	ret

050829ec <defuseled>:
int defuseled(int number){
 50829ec:	defffe04 	addi	sp,sp,-8
 50829f0:	df000115 	stw	fp,4(sp)
 50829f4:	df000104 	addi	fp,sp,4
 50829f8:	e13fff15 	stw	r4,-4(fp)
	switch (number){
 50829fc:	e0bfff17 	ldw	r2,-4(fp)
 5082a00:	10800228 	cmpgeui	r2,r2,8
 5082a04:	10001f1e 	bne	r2,zero,5082a84 <defuseled+0x98>
 5082a08:	e0bfff17 	ldw	r2,-4(fp)
 5082a0c:	100690ba 	slli	r3,r2,2
 5082a10:	00814234 	movhi	r2,1288
 5082a14:	108a8904 	addi	r2,r2,10788
 5082a18:	1885883a 	add	r2,r3,r2
 5082a1c:	10800017 	ldw	r2,0(r2)
 5082a20:	1000683a 	jmp	r2
 5082a24:	05082a44 	movi	r20,8361
 5082a28:	05082a4c 	andi	r20,zero,8361
 5082a2c:	05082a54 	movui	r20,8361
 5082a30:	05082a5c 	xori	r20,zero,8361
 5082a34:	05082a64 	muli	r20,zero,8361
 5082a38:	05082a6c 	andhi	r20,zero,8361
 5082a3c:	05082a74 	movhi	r20,8361
 5082a40:	05082a7c 	xorhi	r20,zero,8361
		case 0:
			return 0x01;
 5082a44:	00800044 	movi	r2,1
 5082a48:	00000f06 	br	5082a88 <defuseled+0x9c>
		case 1:
			return 0x03;
 5082a4c:	008000c4 	movi	r2,3
 5082a50:	00000d06 	br	5082a88 <defuseled+0x9c>
		case 2:
			return 0x07;
 5082a54:	008001c4 	movi	r2,7
 5082a58:	00000b06 	br	5082a88 <defuseled+0x9c>
		case 3:
			return 0x1F;
 5082a5c:	008007c4 	movi	r2,31
 5082a60:	00000906 	br	5082a88 <defuseled+0x9c>
		case 4:
			return 0x7F;
 5082a64:	00801fc4 	movi	r2,127
 5082a68:	00000706 	br	5082a88 <defuseled+0x9c>
		case 5:
			return 0xFF;
 5082a6c:	00803fc4 	movi	r2,255
 5082a70:	00000506 	br	5082a88 <defuseled+0x9c>
		case 6:
			return 0x1FF;
 5082a74:	00807fc4 	movi	r2,511
 5082a78:	00000306 	br	5082a88 <defuseled+0x9c>
		case 7:
			return 0x3FF;
 5082a7c:	0080ffc4 	movi	r2,1023
 5082a80:	00000106 	br	5082a88 <defuseled+0x9c>
        default:
            return 0x00;
 5082a84:	0005883a 	mov	r2,zero
	}
}
 5082a88:	e037883a 	mov	sp,fp
 5082a8c:	df000017 	ldw	fp,0(sp)
 5082a90:	dec00104 	addi	sp,sp,4
 5082a94:	f800283a 	ret

05082a98 <sendConnect>:


void sendConnect(){
 5082a98:	defff804 	addi	sp,sp,-32
 5082a9c:	dfc00715 	stw	ra,28(sp)
 5082aa0:	df000615 	stw	fp,24(sp)
 5082aa4:	df000604 	addi	fp,sp,24
	char wrapper[20] = "connect()\r\n";
 5082aa8:	009b9bb4 	movhi	r2,28270
 5082aac:	109bd8c4 	addi	r2,r2,28515
 5082ab0:	e0bffb15 	stw	r2,-20(fp)
 5082ab4:	008a1d34 	movhi	r2,10356
 5082ab8:	1098d944 	addi	r2,r2,25445
 5082abc:	e0bffc15 	stw	r2,-16(fp)
 5082ac0:	008002b4 	movhi	r2,10
 5082ac4:	10834a44 	addi	r2,r2,3369
 5082ac8:	e0bffd15 	stw	r2,-12(fp)
 5082acc:	e03ffe15 	stw	zero,-8(fp)
 5082ad0:	e03fff15 	stw	zero,-4(fp)
	printf("Sent connect command\n");
 5082ad4:	01014274 	movhi	r4,1289
 5082ad8:	2110d504 	addi	r4,r4,17236
 5082adc:	50872d80 	call	50872d8 <puts>
	alt_up_rs232_enable_read_interrupt(rs232_dev);
 5082ae0:	00814274 	movhi	r2,1289
 5082ae4:	109f5404 	addi	r2,r2,32080
 5082ae8:	10800017 	ldw	r2,0(r2)
 5082aec:	1009883a 	mov	r4,r2
 5082af0:	5092d4c0 	call	5092d4c <alt_up_rs232_enable_read_interrupt>
	int i;
	for (i = 0; i < strlen(wrapper); i++) {
 5082af4:	e03ffa15 	stw	zero,-24(fp)
 5082af8:	00000d06 	br	5082b30 <sendConnect+0x98>
		alt_up_rs232_write_data(rs232_dev, wrapper[i]);
 5082afc:	00814274 	movhi	r2,1289
 5082b00:	109f5404 	addi	r2,r2,32080
 5082b04:	11000017 	ldw	r4,0(r2)
 5082b08:	e0fffb04 	addi	r3,fp,-20
 5082b0c:	e0bffa17 	ldw	r2,-24(fp)
 5082b10:	1885883a 	add	r2,r3,r2
 5082b14:	10800003 	ldbu	r2,0(r2)
 5082b18:	10803fcc 	andi	r2,r2,255
 5082b1c:	100b883a 	mov	r5,r2
 5082b20:	5092ec80 	call	5092ec8 <alt_up_rs232_write_data>
void sendConnect(){
	char wrapper[20] = "connect()\r\n";
	printf("Sent connect command\n");
	alt_up_rs232_enable_read_interrupt(rs232_dev);
	int i;
	for (i = 0; i < strlen(wrapper); i++) {
 5082b24:	e0bffa17 	ldw	r2,-24(fp)
 5082b28:	10800044 	addi	r2,r2,1
 5082b2c:	e0bffa15 	stw	r2,-24(fp)
 5082b30:	e0bffb04 	addi	r2,fp,-20
 5082b34:	1009883a 	mov	r4,r2
 5082b38:	50874000 	call	5087400 <strlen>
 5082b3c:	1007883a 	mov	r3,r2
 5082b40:	e0bffa17 	ldw	r2,-24(fp)
 5082b44:	10ffed36 	bltu	r2,r3,5082afc <__alt_data_end+0xfffb48fc>
		alt_up_rs232_write_data(rs232_dev, wrapper[i]);

	}
	alt_up_rs232_disable_read_interrupt(rs232_dev);
 5082b48:	00814274 	movhi	r2,1289
 5082b4c:	109f5404 	addi	r2,r2,32080
 5082b50:	10800017 	ldw	r2,0(r2)
 5082b54:	1009883a 	mov	r4,r2
 5082b58:	5092da80 	call	5092da8 <alt_up_rs232_disable_read_interrupt>
}
 5082b5c:	0001883a 	nop
 5082b60:	e037883a 	mov	sp,fp
 5082b64:	dfc00117 	ldw	ra,4(sp)
 5082b68:	df000017 	ldw	fp,0(sp)
 5082b6c:	dec00204 	addi	sp,sp,8
 5082b70:	f800283a 	ret

05082b74 <sendmsg>:

void sendmsg(char* msg) {
 5082b74:	deffe304 	addi	sp,sp,-116
 5082b78:	dfc01c15 	stw	ra,112(sp)
 5082b7c:	df001b15 	stw	fp,108(sp)
 5082b80:	df001b04 	addi	fp,sp,108
 5082b84:	e13fff15 	stw	r4,-4(fp)
    char wrapper[100];
    strcpy(wrapper, "sendServer('");
 5082b88:	e0bfe604 	addi	r2,fp,-104
 5082b8c:	00d91bb4 	movhi	r3,25710
 5082b90:	18d95cc4 	addi	r3,r3,25971
 5082b94:	10c00015 	stw	r3,0(r2)
 5082b98:	00dd9cb4 	movhi	r3,30322
 5082b9c:	18d954c4 	addi	r3,r3,25939
 5082ba0:	10c00115 	stw	r3,4(r2)
 5082ba4:	00c9ca34 	movhi	r3,10024
 5082ba8:	18dc9944 	addi	r3,r3,29285
 5082bac:	10c00215 	stw	r3,8(r2)
 5082bb0:	10000305 	stb	zero,12(r2)
    strcat(wrapper, msg);
 5082bb4:	e0bfe604 	addi	r2,fp,-104
 5082bb8:	e17fff17 	ldw	r5,-4(fp)
 5082bbc:	1009883a 	mov	r4,r2
 5082bc0:	50872ec0 	call	50872ec <strcat>
    strcat(wrapper, "')\r\n");
 5082bc4:	e0bfe604 	addi	r2,fp,-104
 5082bc8:	1009883a 	mov	r4,r2
 5082bcc:	50874000 	call	5087400 <strlen>
 5082bd0:	1007883a 	mov	r3,r2
 5082bd4:	e0bfe604 	addi	r2,fp,-104
 5082bd8:	10c5883a 	add	r2,r2,r3
 5082bdc:	00c009c4 	movi	r3,39
 5082be0:	10c00005 	stb	r3,0(r2)
 5082be4:	00c00a44 	movi	r3,41
 5082be8:	10c00045 	stb	r3,1(r2)
 5082bec:	00c00344 	movi	r3,13
 5082bf0:	10c00085 	stb	r3,2(r2)
 5082bf4:	00c00284 	movi	r3,10
 5082bf8:	10c000c5 	stb	r3,3(r2)
 5082bfc:	10000105 	stb	zero,4(r2)
    printf("Sending: %s\n", msg);
 5082c00:	e17fff17 	ldw	r5,-4(fp)
 5082c04:	01014274 	movhi	r4,1289
 5082c08:	2110db04 	addi	r4,r4,17260
 5082c0c:	50871bc0 	call	50871bc <printf>
    alt_up_rs232_enable_read_interrupt(rs232_dev);
 5082c10:	00814274 	movhi	r2,1289
 5082c14:	109f5404 	addi	r2,r2,32080
 5082c18:	10800017 	ldw	r2,0(r2)
 5082c1c:	1009883a 	mov	r4,r2
 5082c20:	5092d4c0 	call	5092d4c <alt_up_rs232_enable_read_interrupt>
    int i;
    for (i = 0; i < strlen(wrapper); i++) {
 5082c24:	e03fe515 	stw	zero,-108(fp)
 5082c28:	00000d06 	br	5082c60 <sendmsg+0xec>
        alt_up_rs232_write_data(rs232_dev, wrapper[i]);
 5082c2c:	00814274 	movhi	r2,1289
 5082c30:	109f5404 	addi	r2,r2,32080
 5082c34:	11000017 	ldw	r4,0(r2)
 5082c38:	e0ffe604 	addi	r3,fp,-104
 5082c3c:	e0bfe517 	ldw	r2,-108(fp)
 5082c40:	1885883a 	add	r2,r3,r2
 5082c44:	10800003 	ldbu	r2,0(r2)
 5082c48:	10803fcc 	andi	r2,r2,255
 5082c4c:	100b883a 	mov	r5,r2
 5082c50:	5092ec80 	call	5092ec8 <alt_up_rs232_write_data>
    strcat(wrapper, msg);
    strcat(wrapper, "')\r\n");
    printf("Sending: %s\n", msg);
    alt_up_rs232_enable_read_interrupt(rs232_dev);
    int i;
    for (i = 0; i < strlen(wrapper); i++) {
 5082c54:	e0bfe517 	ldw	r2,-108(fp)
 5082c58:	10800044 	addi	r2,r2,1
 5082c5c:	e0bfe515 	stw	r2,-108(fp)
 5082c60:	e0bfe604 	addi	r2,fp,-104
 5082c64:	1009883a 	mov	r4,r2
 5082c68:	50874000 	call	5087400 <strlen>
 5082c6c:	1007883a 	mov	r3,r2
 5082c70:	e0bfe517 	ldw	r2,-108(fp)
 5082c74:	10ffed36 	bltu	r2,r3,5082c2c <__alt_data_end+0xfffb4a2c>
        alt_up_rs232_write_data(rs232_dev, wrapper[i]);

    }
    alt_up_rs232_disable_read_interrupt(rs232_dev);
 5082c78:	00814274 	movhi	r2,1289
 5082c7c:	109f5404 	addi	r2,r2,32080
 5082c80:	10800017 	ldw	r2,0(r2)
 5082c84:	1009883a 	mov	r4,r2
 5082c88:	5092da80 	call	5092da8 <alt_up_rs232_disable_read_interrupt>
    //read();

}
 5082c8c:	0001883a 	nop
 5082c90:	e037883a 	mov	sp,fp
 5082c94:	dfc00117 	ldw	ra,4(sp)
 5082c98:	df000017 	ldw	fp,0(sp)
 5082c9c:	dec00204 	addi	sp,sp,8
 5082ca0:	f800283a 	ret

05082ca4 <readfromlua>:

void readfromlua(){
 5082ca4:	defffe04 	addi	sp,sp,-8
 5082ca8:	dfc00115 	stw	ra,4(sp)
 5082cac:	df000015 	stw	fp,0(sp)
 5082cb0:	d839883a 	mov	fp,sp
	if (alt_up_rs232_get_used_space_in_read_FIFO(rs232_dev) > 0) {
 5082cb4:	00814274 	movhi	r2,1289
 5082cb8:	109f5404 	addi	r2,r2,32080
 5082cbc:	10800017 	ldw	r2,0(r2)
 5082cc0:	1009883a 	mov	r4,r2
 5082cc4:	5092e080 	call	5092e08 <alt_up_rs232_get_used_space_in_read_FIFO>
 5082cc8:	10003626 	beq	r2,zero,5082da4 <readfromlua+0x100>
		alt_up_rs232_read_data(rs232_dev, &readdata, &parity_error);
 5082ccc:	00814274 	movhi	r2,1289
 5082cd0:	109f5404 	addi	r2,r2,32080
 5082cd4:	10800017 	ldw	r2,0(r2)
 5082cd8:	01814274 	movhi	r6,1289
 5082cdc:	319f4f04 	addi	r6,r6,32060
 5082ce0:	01414274 	movhi	r5,1289
 5082ce4:	295f5204 	addi	r5,r5,32072
 5082ce8:	1009883a 	mov	r4,r2
 5082cec:	5092f080 	call	5092f08 <alt_up_rs232_read_data>


        printf("%c", readdata);
 5082cf0:	00814274 	movhi	r2,1289
 5082cf4:	109f5204 	addi	r2,r2,32072
 5082cf8:	10800003 	ldbu	r2,0(r2)
 5082cfc:	10803fcc 	andi	r2,r2,255
 5082d00:	1080201c 	xori	r2,r2,128
 5082d04:	10bfe004 	addi	r2,r2,-128
 5082d08:	1009883a 	mov	r4,r2
 5082d0c:	50872000 	call	5087200 <putchar>
		if (readdata == '>'){
 5082d10:	00814274 	movhi	r2,1289
 5082d14:	109f5204 	addi	r2,r2,32072
 5082d18:	10800003 	ldbu	r2,0(r2)
 5082d1c:	10803fcc 	andi	r2,r2,255
 5082d20:	1080201c 	xori	r2,r2,128
 5082d24:	10bfe004 	addi	r2,r2,-128
 5082d28:	10800f98 	cmpnei	r2,r2,62
 5082d2c:	1000011e 	bne	r2,zero,5082d34 <readfromlua+0x90>
			readabledata = 0;
 5082d30:	d026e715 	stw	zero,-25700(gp)
		}
		if (readabledata){
 5082d34:	d0a6e717 	ldw	r2,-25700(gp)
 5082d38:	10000b26 	beq	r2,zero,5082d68 <readfromlua+0xc4>
			totaldata[datalen] = readdata;
 5082d3c:	d126e817 	ldw	r4,-25696(gp)
 5082d40:	00814274 	movhi	r2,1289
 5082d44:	109f5204 	addi	r2,r2,32072
 5082d48:	10c00003 	ldbu	r3,0(r2)
 5082d4c:	00814274 	movhi	r2,1289
 5082d50:	109f7904 	addi	r2,r2,32228
 5082d54:	1105883a 	add	r2,r2,r4
 5082d58:	10c00005 	stb	r3,0(r2)
			datalen++;
 5082d5c:	d0a6e817 	ldw	r2,-25696(gp)
 5082d60:	10800044 	addi	r2,r2,1
 5082d64:	d0a6e815 	stw	r2,-25696(gp)
			//printf("%c",readdata);
		}
		if (datalen == 2){
 5082d68:	d0a6e817 	ldw	r2,-25696(gp)
 5082d6c:	10800098 	cmpnei	r2,r2,2
 5082d70:	1000011e 	bne	r2,zero,5082d78 <readfromlua+0xd4>
			readabledata = 0;
 5082d74:	d026e715 	stw	zero,-25700(gp)
		}

		if (readdata == '<'){
 5082d78:	00814274 	movhi	r2,1289
 5082d7c:	109f5204 	addi	r2,r2,32072
 5082d80:	10800003 	ldbu	r2,0(r2)
 5082d84:	10803fcc 	andi	r2,r2,255
 5082d88:	1080201c 	xori	r2,r2,128
 5082d8c:	10bfe004 	addi	r2,r2,-128
 5082d90:	10800f18 	cmpnei	r2,r2,60
 5082d94:	1000031e 	bne	r2,zero,5082da4 <readfromlua+0x100>
			datalen=0;
 5082d98:	d026e815 	stw	zero,-25696(gp)
			readabledata = 1;
 5082d9c:	00800044 	movi	r2,1
 5082da0:	d0a6e715 	stw	r2,-25700(gp)
		}
	}
}
 5082da4:	0001883a 	nop
 5082da8:	e037883a 	mov	sp,fp
 5082dac:	dfc00117 	ldw	ra,4(sp)
 5082db0:	df000017 	ldw	fp,0(sp)
 5082db4:	dec00204 	addi	sp,sp,8
 5082db8:	f800283a 	ret

05082dbc <pow>:
 5082dbc:	deffee04 	addi	sp,sp,-72
 5082dc0:	dc800b15 	stw	r18,44(sp)
 5082dc4:	04814274 	movhi	r18,1289
 5082dc8:	ddc01015 	stw	r23,64(sp)
 5082dcc:	dd800f15 	stw	r22,60(sp)
 5082dd0:	dd400e15 	stw	r21,56(sp)
 5082dd4:	dd000d15 	stw	r20,52(sp)
 5082dd8:	dcc00c15 	stw	r19,48(sp)
 5082ddc:	dc400a15 	stw	r17,40(sp)
 5082de0:	dc000915 	stw	r16,36(sp)
 5082de4:	dfc01115 	stw	ra,68(sp)
 5082de8:	94986004 	addi	r18,r18,24960
 5082dec:	202f883a 	mov	r23,r4
 5082df0:	282d883a 	mov	r22,r5
 5082df4:	302b883a 	mov	r21,r6
 5082df8:	3829883a 	mov	r20,r7
 5082dfc:	50832800 	call	5083280 <__ieee754_pow>
 5082e00:	1023883a 	mov	r17,r2
 5082e04:	90800017 	ldw	r2,0(r18)
 5082e08:	04ffffc4 	movi	r19,-1
 5082e0c:	1821883a 	mov	r16,r3
 5082e10:	14c00426 	beq	r2,r19,5082e24 <pow+0x68>
 5082e14:	a809883a 	mov	r4,r21
 5082e18:	a00b883a 	mov	r5,r20
 5082e1c:	50845dc0 	call	50845dc <__fpclassifyd>
 5082e20:	10000d1e 	bne	r2,zero,5082e58 <pow+0x9c>
 5082e24:	8805883a 	mov	r2,r17
 5082e28:	8007883a 	mov	r3,r16
 5082e2c:	dfc01117 	ldw	ra,68(sp)
 5082e30:	ddc01017 	ldw	r23,64(sp)
 5082e34:	dd800f17 	ldw	r22,60(sp)
 5082e38:	dd400e17 	ldw	r21,56(sp)
 5082e3c:	dd000d17 	ldw	r20,52(sp)
 5082e40:	dcc00c17 	ldw	r19,48(sp)
 5082e44:	dc800b17 	ldw	r18,44(sp)
 5082e48:	dc400a17 	ldw	r17,40(sp)
 5082e4c:	dc000917 	ldw	r16,36(sp)
 5082e50:	dec01204 	addi	sp,sp,72
 5082e54:	f800283a 	ret
 5082e58:	b809883a 	mov	r4,r23
 5082e5c:	b00b883a 	mov	r5,r22
 5082e60:	50845dc0 	call	50845dc <__fpclassifyd>
 5082e64:	000d883a 	mov	r6,zero
 5082e68:	000f883a 	mov	r7,zero
 5082e6c:	1000201e 	bne	r2,zero,5082ef0 <pow+0x134>
 5082e70:	a809883a 	mov	r4,r21
 5082e74:	a00b883a 	mov	r5,r20
 5082e78:	5085d500 	call	5085d50 <__eqdf2>
 5082e7c:	103fe91e 	bne	r2,zero,5082e24 <__alt_data_end+0xfffb4c24>
 5082e80:	01000044 	movi	r4,1
 5082e84:	d9000015 	stw	r4,0(sp)
 5082e88:	90800017 	ldw	r2,0(r18)
 5082e8c:	01014274 	movhi	r4,1289
 5082e90:	00cffc34 	movhi	r3,16368
 5082e94:	2110df04 	addi	r4,r4,17276
 5082e98:	d9000115 	stw	r4,4(sp)
 5082e9c:	d8000815 	stw	zero,32(sp)
 5082ea0:	ddc00215 	stw	r23,8(sp)
 5082ea4:	dd800315 	stw	r22,12(sp)
 5082ea8:	dd400415 	stw	r21,16(sp)
 5082eac:	dd000515 	stw	r20,20(sp)
 5082eb0:	d8000615 	stw	zero,24(sp)
 5082eb4:	d8c00715 	stw	r3,28(sp)
 5082eb8:	14c02826 	beq	r2,r19,5082f5c <pow+0x1a0>
 5082ebc:	01000084 	movi	r4,2
 5082ec0:	11002626 	beq	r2,r4,5082f5c <pow+0x1a0>
 5082ec4:	d809883a 	mov	r4,sp
 5082ec8:	50846500 	call	5084650 <matherr>
 5082ecc:	10006b26 	beq	r2,zero,508307c <pow+0x2c0>
 5082ed0:	d8800817 	ldw	r2,32(sp)
 5082ed4:	10000326 	beq	r2,zero,5082ee4 <pow+0x128>
 5082ed8:	508717c0 	call	508717c <__errno>
 5082edc:	d8c00817 	ldw	r3,32(sp)
 5082ee0:	10c00015 	stw	r3,0(r2)
 5082ee4:	d8800617 	ldw	r2,24(sp)
 5082ee8:	d8c00717 	ldw	r3,28(sp)
 5082eec:	003fcf06 	br	5082e2c <__alt_data_end+0xfffb4c2c>
 5082ef0:	b809883a 	mov	r4,r23
 5082ef4:	b00b883a 	mov	r5,r22
 5082ef8:	5085d500 	call	5085d50 <__eqdf2>
 5082efc:	1000191e 	bne	r2,zero,5082f64 <pow+0x1a8>
 5082f00:	000d883a 	mov	r6,zero
 5082f04:	000f883a 	mov	r7,zero
 5082f08:	a809883a 	mov	r4,r21
 5082f0c:	a00b883a 	mov	r5,r20
 5082f10:	5085d500 	call	5085d50 <__eqdf2>
 5082f14:	10003a1e 	bne	r2,zero,5083000 <pow+0x244>
 5082f18:	00c00044 	movi	r3,1
 5082f1c:	d8c00015 	stw	r3,0(sp)
 5082f20:	90800017 	ldw	r2,0(r18)
 5082f24:	00c14274 	movhi	r3,1289
 5082f28:	18d0df04 	addi	r3,r3,17276
 5082f2c:	d8c00115 	stw	r3,4(sp)
 5082f30:	d8000815 	stw	zero,32(sp)
 5082f34:	ddc00215 	stw	r23,8(sp)
 5082f38:	dd800315 	stw	r22,12(sp)
 5082f3c:	dd400415 	stw	r21,16(sp)
 5082f40:	dd000515 	stw	r20,20(sp)
 5082f44:	d8000615 	stw	zero,24(sp)
 5082f48:	d8000715 	stw	zero,28(sp)
 5082f4c:	103fdd26 	beq	r2,zero,5082ec4 <__alt_data_end+0xfffb4cc4>
 5082f50:	0005883a 	mov	r2,zero
 5082f54:	00cffc34 	movhi	r3,16368
 5082f58:	003fb406 	br	5082e2c <__alt_data_end+0xfffb4c2c>
 5082f5c:	0005883a 	mov	r2,zero
 5082f60:	003fb206 	br	5082e2c <__alt_data_end+0xfffb4c2c>
 5082f64:	8809883a 	mov	r4,r17
 5082f68:	800b883a 	mov	r5,r16
 5082f6c:	50845c00 	call	50845c0 <finite>
 5082f70:	10004626 	beq	r2,zero,508308c <pow+0x2d0>
 5082f74:	000d883a 	mov	r6,zero
 5082f78:	000f883a 	mov	r7,zero
 5082f7c:	8809883a 	mov	r4,r17
 5082f80:	800b883a 	mov	r5,r16
 5082f84:	5085d500 	call	5085d50 <__eqdf2>
 5082f88:	103fa61e 	bne	r2,zero,5082e24 <__alt_data_end+0xfffb4c24>
 5082f8c:	b809883a 	mov	r4,r23
 5082f90:	b00b883a 	mov	r5,r22
 5082f94:	50845c00 	call	50845c0 <finite>
 5082f98:	103fa226 	beq	r2,zero,5082e24 <__alt_data_end+0xfffb4c24>
 5082f9c:	a809883a 	mov	r4,r21
 5082fa0:	a00b883a 	mov	r5,r20
 5082fa4:	50845c00 	call	50845c0 <finite>
 5082fa8:	103f9e26 	beq	r2,zero,5082e24 <__alt_data_end+0xfffb4c24>
 5082fac:	00800104 	movi	r2,4
 5082fb0:	d8800015 	stw	r2,0(sp)
 5082fb4:	90c00017 	ldw	r3,0(r18)
 5082fb8:	00814274 	movhi	r2,1289
 5082fbc:	1090df04 	addi	r2,r2,17276
 5082fc0:	d8800115 	stw	r2,4(sp)
 5082fc4:	d8000815 	stw	zero,32(sp)
 5082fc8:	ddc00215 	stw	r23,8(sp)
 5082fcc:	dd800315 	stw	r22,12(sp)
 5082fd0:	dd400415 	stw	r21,16(sp)
 5082fd4:	dd000515 	stw	r20,20(sp)
 5082fd8:	d8000615 	stw	zero,24(sp)
 5082fdc:	d8000715 	stw	zero,28(sp)
 5082fe0:	00800084 	movi	r2,2
 5082fe4:	18804726 	beq	r3,r2,5083104 <pow+0x348>
 5082fe8:	d809883a 	mov	r4,sp
 5082fec:	50846500 	call	5084650 <matherr>
 5082ff0:	10004426 	beq	r2,zero,5083104 <pow+0x348>
 5082ff4:	d8800817 	ldw	r2,32(sp)
 5082ff8:	103fba26 	beq	r2,zero,5082ee4 <__alt_data_end+0xfffb4ce4>
 5082ffc:	003fb606 	br	5082ed8 <__alt_data_end+0xfffb4cd8>
 5083000:	a809883a 	mov	r4,r21
 5083004:	a00b883a 	mov	r5,r20
 5083008:	50845c00 	call	50845c0 <finite>
 508300c:	103f8526 	beq	r2,zero,5082e24 <__alt_data_end+0xfffb4c24>
 5083010:	000d883a 	mov	r6,zero
 5083014:	000f883a 	mov	r7,zero
 5083018:	a809883a 	mov	r4,r21
 508301c:	a00b883a 	mov	r5,r20
 5083020:	5085eb40 	call	5085eb4 <__ledf2>
 5083024:	103f7f0e 	bge	r2,zero,5082e24 <__alt_data_end+0xfffb4c24>
 5083028:	00c00044 	movi	r3,1
 508302c:	d8c00015 	stw	r3,0(sp)
 5083030:	90800017 	ldw	r2,0(r18)
 5083034:	00c14274 	movhi	r3,1289
 5083038:	18d0df04 	addi	r3,r3,17276
 508303c:	d8c00115 	stw	r3,4(sp)
 5083040:	d8000815 	stw	zero,32(sp)
 5083044:	ddc00215 	stw	r23,8(sp)
 5083048:	dd800315 	stw	r22,12(sp)
 508304c:	dd400415 	stw	r21,16(sp)
 5083050:	dd000515 	stw	r20,20(sp)
 5083054:	d8000615 	stw	zero,24(sp)
 5083058:	10002526 	beq	r2,zero,50830f0 <pow+0x334>
 508305c:	00fffc34 	movhi	r3,65520
 5083060:	d8c00715 	stw	r3,28(sp)
 5083064:	00c00084 	movi	r3,2
 5083068:	10c0221e 	bne	r2,r3,50830f4 <pow+0x338>
 508306c:	508717c0 	call	508717c <__errno>
 5083070:	00c00844 	movi	r3,33
 5083074:	10c00015 	stw	r3,0(r2)
 5083078:	003fde06 	br	5082ff4 <__alt_data_end+0xfffb4df4>
 508307c:	508717c0 	call	508717c <__errno>
 5083080:	00c00844 	movi	r3,33
 5083084:	10c00015 	stw	r3,0(r2)
 5083088:	003f9106 	br	5082ed0 <__alt_data_end+0xfffb4cd0>
 508308c:	b809883a 	mov	r4,r23
 5083090:	b00b883a 	mov	r5,r22
 5083094:	50845c00 	call	50845c0 <finite>
 5083098:	103fb626 	beq	r2,zero,5082f74 <__alt_data_end+0xfffb4d74>
 508309c:	a809883a 	mov	r4,r21
 50830a0:	a00b883a 	mov	r5,r20
 50830a4:	50845c00 	call	50845c0 <finite>
 50830a8:	103fb226 	beq	r2,zero,5082f74 <__alt_data_end+0xfffb4d74>
 50830ac:	8809883a 	mov	r4,r17
 50830b0:	800b883a 	mov	r5,r16
 50830b4:	50845dc0 	call	50845dc <__fpclassifyd>
 50830b8:	1000161e 	bne	r2,zero,5083114 <pow+0x358>
 50830bc:	00800044 	movi	r2,1
 50830c0:	d8800015 	stw	r2,0(sp)
 50830c4:	94000017 	ldw	r16,0(r18)
 50830c8:	00814274 	movhi	r2,1289
 50830cc:	1090df04 	addi	r2,r2,17276
 50830d0:	d8800115 	stw	r2,4(sp)
 50830d4:	d8000815 	stw	zero,32(sp)
 50830d8:	ddc00215 	stw	r23,8(sp)
 50830dc:	dd800315 	stw	r22,12(sp)
 50830e0:	dd400415 	stw	r21,16(sp)
 50830e4:	dd000515 	stw	r20,20(sp)
 50830e8:	8000281e 	bne	r16,zero,508318c <pow+0x3d0>
 50830ec:	d8000615 	stw	zero,24(sp)
 50830f0:	d8000715 	stw	zero,28(sp)
 50830f4:	d809883a 	mov	r4,sp
 50830f8:	50846500 	call	5084650 <matherr>
 50830fc:	103fbd1e 	bne	r2,zero,5082ff4 <__alt_data_end+0xfffb4df4>
 5083100:	003fda06 	br	508306c <__alt_data_end+0xfffb4e6c>
 5083104:	508717c0 	call	508717c <__errno>
 5083108:	00c00884 	movi	r3,34
 508310c:	10c00015 	stw	r3,0(r2)
 5083110:	003fb806 	br	5082ff4 <__alt_data_end+0xfffb4df4>
 5083114:	00c000c4 	movi	r3,3
 5083118:	d8c00015 	stw	r3,0(sp)
 508311c:	90800017 	ldw	r2,0(r18)
 5083120:	00c14274 	movhi	r3,1289
 5083124:	18d0df04 	addi	r3,r3,17276
 5083128:	d8c00115 	stw	r3,4(sp)
 508312c:	d8000815 	stw	zero,32(sp)
 5083130:	ddc00215 	stw	r23,8(sp)
 5083134:	dd800315 	stw	r22,12(sp)
 5083138:	dd400415 	stw	r21,16(sp)
 508313c:	dd000515 	stw	r20,20(sp)
 5083140:	000d883a 	mov	r6,zero
 5083144:	000f883a 	mov	r7,zero
 5083148:	b809883a 	mov	r4,r23
 508314c:	b00b883a 	mov	r5,r22
 5083150:	1000181e 	bne	r2,zero,50831b4 <pow+0x3f8>
 5083154:	00b80034 	movhi	r2,57344
 5083158:	d8800615 	stw	r2,24(sp)
 508315c:	0091fc34 	movhi	r2,18416
 5083160:	10bfffc4 	addi	r2,r2,-1
 5083164:	d8800715 	stw	r2,28(sp)
 5083168:	5085eb40 	call	5085eb4 <__ledf2>
 508316c:	10001a16 	blt	r2,zero,50831d8 <pow+0x41c>
 5083170:	d809883a 	mov	r4,sp
 5083174:	50846500 	call	5084650 <matherr>
 5083178:	103f551e 	bne	r2,zero,5082ed0 <__alt_data_end+0xfffb4cd0>
 508317c:	508717c0 	call	508717c <__errno>
 5083180:	00c00884 	movi	r3,34
 5083184:	10c00015 	stw	r3,0(r2)
 5083188:	003f5106 	br	5082ed0 <__alt_data_end+0xfffb4cd0>
 508318c:	000d883a 	mov	r6,zero
 5083190:	000f883a 	mov	r7,zero
 5083194:	0009883a 	mov	r4,zero
 5083198:	000b883a 	mov	r5,zero
 508319c:	50854680 	call	5085468 <__divdf3>
 50831a0:	d8800615 	stw	r2,24(sp)
 50831a4:	d8c00715 	stw	r3,28(sp)
 50831a8:	00800084 	movi	r2,2
 50831ac:	80bfaf26 	beq	r16,r2,508306c <__alt_data_end+0xfffb4e6c>
 50831b0:	003fd006 	br	50830f4 <__alt_data_end+0xfffb4ef4>
 50831b4:	009ffc34 	movhi	r2,32752
 50831b8:	d8000615 	stw	zero,24(sp)
 50831bc:	d8800715 	stw	r2,28(sp)
 50831c0:	5085eb40 	call	5085eb4 <__ledf2>
 50831c4:	10001a16 	blt	r2,zero,5083230 <pow+0x474>
 50831c8:	90c00017 	ldw	r3,0(r18)
 50831cc:	00800084 	movi	r2,2
 50831d0:	18bfe71e 	bne	r3,r2,5083170 <__alt_data_end+0xfffb4f70>
 50831d4:	003fe906 	br	508317c <__alt_data_end+0xfffb4f7c>
 50831d8:	000d883a 	mov	r6,zero
 50831dc:	01cff834 	movhi	r7,16352
 50831e0:	a809883a 	mov	r4,r21
 50831e4:	a00b883a 	mov	r5,r20
 50831e8:	5085fa80 	call	5085fa8 <__muldf3>
 50831ec:	1009883a 	mov	r4,r2
 50831f0:	180b883a 	mov	r5,r3
 50831f4:	1023883a 	mov	r17,r2
 50831f8:	1821883a 	mov	r16,r3
 50831fc:	50846640 	call	5084664 <rint>
 5083200:	100d883a 	mov	r6,r2
 5083204:	180f883a 	mov	r7,r3
 5083208:	8809883a 	mov	r4,r17
 508320c:	800b883a 	mov	r5,r16
 5083210:	5085d500 	call	5085d50 <__eqdf2>
 5083214:	103fec26 	beq	r2,zero,50831c8 <__alt_data_end+0xfffb4fc8>
 5083218:	00b80034 	movhi	r2,57344
 508321c:	d8800615 	stw	r2,24(sp)
 5083220:	00b1fc34 	movhi	r2,51184
 5083224:	10bfffc4 	addi	r2,r2,-1
 5083228:	d8800715 	stw	r2,28(sp)
 508322c:	003fe606 	br	50831c8 <__alt_data_end+0xfffb4fc8>
 5083230:	000d883a 	mov	r6,zero
 5083234:	01cff834 	movhi	r7,16352
 5083238:	a809883a 	mov	r4,r21
 508323c:	a00b883a 	mov	r5,r20
 5083240:	5085fa80 	call	5085fa8 <__muldf3>
 5083244:	1009883a 	mov	r4,r2
 5083248:	180b883a 	mov	r5,r3
 508324c:	1023883a 	mov	r17,r2
 5083250:	1821883a 	mov	r16,r3
 5083254:	50846640 	call	5084664 <rint>
 5083258:	100d883a 	mov	r6,r2
 508325c:	180f883a 	mov	r7,r3
 5083260:	8809883a 	mov	r4,r17
 5083264:	800b883a 	mov	r5,r16
 5083268:	5085d500 	call	5085d50 <__eqdf2>
 508326c:	103fd626 	beq	r2,zero,50831c8 <__alt_data_end+0xfffb4fc8>
 5083270:	00bffc34 	movhi	r2,65520
 5083274:	d8000615 	stw	zero,24(sp)
 5083278:	d8800715 	stw	r2,28(sp)
 508327c:	003fd206 	br	50831c8 <__alt_data_end+0xfffb4fc8>

05083280 <__ieee754_pow>:
 5083280:	00a00034 	movhi	r2,32768
 5083284:	deffea04 	addi	sp,sp,-88
 5083288:	10bfffc4 	addi	r2,r2,-1
 508328c:	dc800e15 	stw	r18,56(sp)
 5083290:	38a4703a 	and	r18,r7,r2
 5083294:	dfc01515 	stw	ra,84(sp)
 5083298:	df001415 	stw	fp,80(sp)
 508329c:	ddc01315 	stw	r23,76(sp)
 50832a0:	dd801215 	stw	r22,72(sp)
 50832a4:	dd401115 	stw	r21,68(sp)
 50832a8:	dd001015 	stw	r20,64(sp)
 50832ac:	dcc00f15 	stw	r19,60(sp)
 50832b0:	dc400d15 	stw	r17,52(sp)
 50832b4:	dc000c15 	stw	r16,48(sp)
 50832b8:	9186b03a 	or	r3,r18,r6
 50832bc:	18002a26 	beq	r3,zero,5083368 <__ieee754_pow+0xe8>
 50832c0:	28a2703a 	and	r17,r5,r2
 50832c4:	009ffc34 	movhi	r2,32752
 50832c8:	14402316 	blt	r2,r17,5083358 <__ieee754_pow+0xd8>
 50832cc:	88802126 	beq	r17,r2,5083354 <__ieee754_pow+0xd4>
 50832d0:	14802116 	blt	r2,r18,5083358 <__ieee754_pow+0xd8>
 50832d4:	009ffc34 	movhi	r2,32752
 50832d8:	90807326 	beq	r18,r2,50834a8 <__ieee754_pow+0x228>
 50832dc:	2827883a 	mov	r19,r5
 50832e0:	2021883a 	mov	r16,r4
 50832e4:	302d883a 	mov	r22,r6
 50832e8:	3839883a 	mov	fp,r7
 50832ec:	28007016 	blt	r5,zero,50834b0 <__ieee754_pow+0x230>
 50832f0:	002b883a 	mov	r21,zero
 50832f4:	b0003a1e 	bne	r22,zero,50833e0 <__ieee754_pow+0x160>
 50832f8:	009ffc34 	movhi	r2,32752
 50832fc:	90807f26 	beq	r18,r2,50834fc <__ieee754_pow+0x27c>
 5083300:	008ffc34 	movhi	r2,16368
 5083304:	90805426 	beq	r18,r2,5083458 <__ieee754_pow+0x1d8>
 5083308:	00900034 	movhi	r2,16384
 508330c:	e0833b26 	beq	fp,r2,5083ffc <__ieee754_pow+0xd7c>
 5083310:	008ff834 	movhi	r2,16352
 5083314:	e080321e 	bne	fp,r2,50833e0 <__ieee754_pow+0x160>
 5083318:	98003116 	blt	r19,zero,50833e0 <__ieee754_pow+0x160>
 508331c:	8009883a 	mov	r4,r16
 5083320:	980b883a 	mov	r5,r19
 5083324:	dfc01517 	ldw	ra,84(sp)
 5083328:	df001417 	ldw	fp,80(sp)
 508332c:	ddc01317 	ldw	r23,76(sp)
 5083330:	dd801217 	ldw	r22,72(sp)
 5083334:	dd401117 	ldw	r21,68(sp)
 5083338:	dd001017 	ldw	r20,64(sp)
 508333c:	dcc00f17 	ldw	r19,60(sp)
 5083340:	dc800e17 	ldw	r18,56(sp)
 5083344:	dc400d17 	ldw	r17,52(sp)
 5083348:	dc000c17 	ldw	r16,48(sp)
 508334c:	dec01604 	addi	sp,sp,88
 5083350:	50843241 	jmpi	5084324 <__ieee754_sqrt>
 5083354:	20001226 	beq	r4,zero,50833a0 <__ieee754_pow+0x120>
 5083358:	00b00434 	movhi	r2,49168
 508335c:	8885883a 	add	r2,r17,r2
 5083360:	1108b03a 	or	r4,r2,r4
 5083364:	20000f1e 	bne	r4,zero,50833a4 <__ieee754_pow+0x124>
 5083368:	0005883a 	mov	r2,zero
 508336c:	00cffc34 	movhi	r3,16368
 5083370:	dfc01517 	ldw	ra,84(sp)
 5083374:	df001417 	ldw	fp,80(sp)
 5083378:	ddc01317 	ldw	r23,76(sp)
 508337c:	dd801217 	ldw	r22,72(sp)
 5083380:	dd401117 	ldw	r21,68(sp)
 5083384:	dd001017 	ldw	r20,64(sp)
 5083388:	dcc00f17 	ldw	r19,60(sp)
 508338c:	dc800e17 	ldw	r18,56(sp)
 5083390:	dc400d17 	ldw	r17,52(sp)
 5083394:	dc000c17 	ldw	r16,48(sp)
 5083398:	dec01604 	addi	sp,sp,88
 508339c:	f800283a 	ret
 50833a0:	8cbfcc0e 	bge	r17,r18,50832d4 <__alt_data_end+0xfffb50d4>
 50833a4:	01014274 	movhi	r4,1289
 50833a8:	21112e04 	addi	r4,r4,17592
 50833ac:	dfc01517 	ldw	ra,84(sp)
 50833b0:	df001417 	ldw	fp,80(sp)
 50833b4:	ddc01317 	ldw	r23,76(sp)
 50833b8:	dd801217 	ldw	r22,72(sp)
 50833bc:	dd401117 	ldw	r21,68(sp)
 50833c0:	dd001017 	ldw	r20,64(sp)
 50833c4:	dcc00f17 	ldw	r19,60(sp)
 50833c8:	dc800e17 	ldw	r18,56(sp)
 50833cc:	dc400d17 	ldw	r17,52(sp)
 50833d0:	dc000c17 	ldw	r16,48(sp)
 50833d4:	dec01604 	addi	sp,sp,88
 50833d8:	50846581 	jmpi	5084658 <nan>
 50833dc:	002b883a 	mov	r21,zero
 50833e0:	8009883a 	mov	r4,r16
 50833e4:	980b883a 	mov	r5,r19
 50833e8:	50845ac0 	call	50845ac <fabs>
 50833ec:	102f883a 	mov	r23,r2
 50833f0:	80000f26 	beq	r16,zero,5083430 <__ieee754_pow+0x1b0>
 50833f4:	9816d7fa 	srli	r11,r19,31
 50833f8:	5affffc4 	addi	r11,r11,-1
 50833fc:	aac4b03a 	or	r2,r21,r11
 5083400:	10004b26 	beq	r2,zero,5083530 <__ieee754_pow+0x2b0>
 5083404:	00907834 	movhi	r2,16864
 5083408:	1480540e 	bge	r2,r18,508355c <__ieee754_pow+0x2dc>
 508340c:	0090fc34 	movhi	r2,17392
 5083410:	14832d0e 	bge	r2,r18,50840c8 <__ieee754_pow+0xe48>
 5083414:	008ffc34 	movhi	r2,16368
 5083418:	10bfffc4 	addi	r2,r2,-1
 508341c:	14401916 	blt	r2,r17,5083484 <__ieee754_pow+0x204>
 5083420:	e0001916 	blt	fp,zero,5083488 <__ieee754_pow+0x208>
 5083424:	0005883a 	mov	r2,zero
 5083428:	0007883a 	mov	r3,zero
 508342c:	003fd006 	br	5083370 <__alt_data_end+0xfffb5170>
 5083430:	88000526 	beq	r17,zero,5083448 <__ieee754_pow+0x1c8>
 5083434:	00900034 	movhi	r2,16384
 5083438:	10bfffc4 	addi	r2,r2,-1
 508343c:	9884703a 	and	r2,r19,r2
 5083440:	010ffc34 	movhi	r4,16368
 5083444:	113feb1e 	bne	r2,r4,50833f4 <__alt_data_end+0xfffb51f4>
 5083448:	e0000716 	blt	fp,zero,5083468 <__ieee754_pow+0x1e8>
 508344c:	9802e216 	blt	r19,zero,5083fd8 <__ieee754_pow+0xd58>
 5083450:	b805883a 	mov	r2,r23
 5083454:	003fc606 	br	5083370 <__alt_data_end+0xfffb5170>
 5083458:	e0037516 	blt	fp,zero,5084230 <__ieee754_pow+0xfb0>
 508345c:	8005883a 	mov	r2,r16
 5083460:	9807883a 	mov	r3,r19
 5083464:	003fc206 	br	5083370 <__alt_data_end+0xfffb5170>
 5083468:	b80d883a 	mov	r6,r23
 508346c:	180f883a 	mov	r7,r3
 5083470:	0009883a 	mov	r4,zero
 5083474:	014ffc34 	movhi	r5,16368
 5083478:	50854680 	call	5085468 <__divdf3>
 508347c:	102f883a 	mov	r23,r2
 5083480:	003ff206 	br	508344c <__alt_data_end+0xfffb524c>
 5083484:	073fe70e 	bge	zero,fp,5083424 <__alt_data_end+0xfffb5224>
 5083488:	01a20034 	movhi	r6,34816
 508348c:	01df8e34 	movhi	r7,32312
 5083490:	319d6704 	addi	r6,r6,30108
 5083494:	39f90f04 	addi	r7,r7,-7108
 5083498:	3009883a 	mov	r4,r6
 508349c:	380b883a 	mov	r5,r7
 50834a0:	5085fa80 	call	5085fa8 <__muldf3>
 50834a4:	003fb206 	br	5083370 <__alt_data_end+0xfffb5170>
 50834a8:	303f8c26 	beq	r6,zero,50832dc <__alt_data_end+0xfffb50dc>
 50834ac:	003faa06 	br	5083358 <__alt_data_end+0xfffb5158>
 50834b0:	0090d034 	movhi	r2,17216
 50834b4:	10bfffc4 	addi	r2,r2,-1
 50834b8:	14801b16 	blt	r2,r18,5083528 <__ieee754_pow+0x2a8>
 50834bc:	008ffc34 	movhi	r2,16368
 50834c0:	10bfffc4 	addi	r2,r2,-1
 50834c4:	14bf8a0e 	bge	r2,r18,50832f0 <__alt_data_end+0xfffb50f0>
 50834c8:	9005d53a 	srai	r2,r18,20
 50834cc:	00c00504 	movi	r3,20
 50834d0:	10bf0044 	addi	r2,r2,-1023
 50834d4:	18836b0e 	bge	r3,r2,5084284 <__ieee754_pow+0x1004>
 50834d8:	00c00d04 	movi	r3,52
 50834dc:	1885c83a 	sub	r2,r3,r2
 50834e0:	3086d83a 	srl	r3,r6,r2
 50834e4:	1884983a 	sll	r2,r3,r2
 50834e8:	30bf811e 	bne	r6,r2,50832f0 <__alt_data_end+0xfffb50f0>
 50834ec:	18c0004c 	andi	r3,r3,1
 50834f0:	02800084 	movi	r10,2
 50834f4:	50ebc83a 	sub	r21,r10,r3
 50834f8:	003f7e06 	br	50832f4 <__alt_data_end+0xfffb50f4>
 50834fc:	01300434 	movhi	r4,49168
 5083500:	8909883a 	add	r4,r17,r4
 5083504:	2408b03a 	or	r4,r4,r16
 5083508:	203f9726 	beq	r4,zero,5083368 <__alt_data_end+0xfffb5168>
 508350c:	008ffc34 	movhi	r2,16368
 5083510:	10bfffc4 	addi	r2,r2,-1
 5083514:	1442e60e 	bge	r2,r17,50840b0 <__ieee754_pow+0xe30>
 5083518:	e03fc216 	blt	fp,zero,5083424 <__alt_data_end+0xfffb5224>
 508351c:	0005883a 	mov	r2,zero
 5083520:	e007883a 	mov	r3,fp
 5083524:	003f9206 	br	5083370 <__alt_data_end+0xfffb5170>
 5083528:	05400084 	movi	r21,2
 508352c:	003f7106 	br	50832f4 <__alt_data_end+0xfffb50f4>
 5083530:	800d883a 	mov	r6,r16
 5083534:	980f883a 	mov	r7,r19
 5083538:	3009883a 	mov	r4,r6
 508353c:	380b883a 	mov	r5,r7
 5083540:	50866c00 	call	50866c0 <__subdf3>
 5083544:	100d883a 	mov	r6,r2
 5083548:	180f883a 	mov	r7,r3
 508354c:	1009883a 	mov	r4,r2
 5083550:	180b883a 	mov	r5,r3
 5083554:	50854680 	call	5085468 <__divdf3>
 5083558:	003f8506 	br	5083370 <__alt_data_end+0xfffb5170>
 508355c:	00800434 	movhi	r2,16
 5083560:	10bfffc4 	addi	r2,r2,-1
 5083564:	1442d616 	blt	r2,r17,50840c0 <__ieee754_pow+0xe40>
 5083568:	b809883a 	mov	r4,r23
 508356c:	000d883a 	mov	r6,zero
 5083570:	01d0d034 	movhi	r7,17216
 5083574:	180b883a 	mov	r5,r3
 5083578:	dac00b15 	stw	r11,44(sp)
 508357c:	5085fa80 	call	5085fa8 <__muldf3>
 5083580:	dac00b17 	ldw	r11,44(sp)
 5083584:	102f883a 	mov	r23,r2
 5083588:	1823883a 	mov	r17,r3
 508358c:	033ff2c4 	movi	r12,-53
 5083590:	8807d53a 	srai	r3,r17,20
 5083594:	00800434 	movhi	r2,16
 5083598:	10bfffc4 	addi	r2,r2,-1
 508359c:	18ff0044 	addi	r3,r3,-1023
 50835a0:	1b19883a 	add	r12,r3,r12
 50835a4:	00c00134 	movhi	r3,4
 50835a8:	8884703a 	and	r2,r17,r2
 50835ac:	18e62384 	addi	r3,r3,-26482
 50835b0:	150ffc34 	orhi	r20,r2,16368
 50835b4:	1880060e 	bge	r3,r2,50835d0 <__ieee754_pow+0x350>
 50835b8:	00c00334 	movhi	r3,12
 50835bc:	18ed9e44 	addi	r3,r3,-18823
 50835c0:	18833f0e 	bge	r3,r2,50842c0 <__ieee754_pow+0x1040>
 50835c4:	00bffc34 	movhi	r2,65520
 50835c8:	63000044 	addi	r12,r12,1
 50835cc:	a0a9883a 	add	r20,r20,r2
 50835d0:	0027883a 	mov	r19,zero
 50835d4:	d8000215 	stw	zero,8(sp)
 50835d8:	0013883a 	mov	r9,zero
 50835dc:	0011883a 	mov	r8,zero
 50835e0:	0015883a 	mov	r10,zero
 50835e4:	048ffc34 	movhi	r18,16368
 50835e8:	900f883a 	mov	r7,r18
 50835ec:	b809883a 	mov	r4,r23
 50835f0:	a00b883a 	mov	r5,r20
 50835f4:	000d883a 	mov	r6,zero
 50835f8:	da000a15 	stw	r8,40(sp)
 50835fc:	da400815 	stw	r9,32(sp)
 5083600:	dac00b15 	stw	r11,44(sp)
 5083604:	db000915 	stw	r12,36(sp)
 5083608:	da800515 	stw	r10,20(sp)
 508360c:	50866c00 	call	50866c0 <__subdf3>
 5083610:	b809883a 	mov	r4,r23
 5083614:	a00b883a 	mov	r5,r20
 5083618:	900f883a 	mov	r7,r18
 508361c:	000d883a 	mov	r6,zero
 5083620:	d8800015 	stw	r2,0(sp)
 5083624:	d8c00115 	stw	r3,4(sp)
 5083628:	5084bbc0 	call	5084bbc <__adddf3>
 508362c:	100d883a 	mov	r6,r2
 5083630:	180f883a 	mov	r7,r3
 5083634:	0009883a 	mov	r4,zero
 5083638:	014ffc34 	movhi	r5,16368
 508363c:	50854680 	call	5085468 <__divdf3>
 5083640:	d9000017 	ldw	r4,0(sp)
 5083644:	d9400117 	ldw	r5,4(sp)
 5083648:	100d883a 	mov	r6,r2
 508364c:	180f883a 	mov	r7,r3
 5083650:	d8c00715 	stw	r3,28(sp)
 5083654:	d8800615 	stw	r2,24(sp)
 5083658:	5085fa80 	call	5085fa8 <__muldf3>
 508365c:	1023883a 	mov	r17,r2
 5083660:	a005d07a 	srai	r2,r20,1
 5083664:	da800517 	ldw	r10,20(sp)
 5083668:	1821883a 	mov	r16,r3
 508366c:	10c80034 	orhi	r3,r2,8192
 5083670:	00800234 	movhi	r2,8
 5083674:	1885883a 	add	r2,r3,r2
 5083678:	1295883a 	add	r10,r2,r10
 508367c:	500f883a 	mov	r7,r10
 5083680:	800b883a 	mov	r5,r16
 5083684:	000d883a 	mov	r6,zero
 5083688:	0009883a 	mov	r4,zero
 508368c:	da800515 	stw	r10,20(sp)
 5083690:	5085fa80 	call	5085fa8 <__muldf3>
 5083694:	d9000017 	ldw	r4,0(sp)
 5083698:	d9400117 	ldw	r5,4(sp)
 508369c:	100d883a 	mov	r6,r2
 50836a0:	180f883a 	mov	r7,r3
 50836a4:	50866c00 	call	50866c0 <__subdf3>
 50836a8:	da800517 	ldw	r10,20(sp)
 50836ac:	900f883a 	mov	r7,r18
 50836b0:	000d883a 	mov	r6,zero
 50836b4:	500b883a 	mov	r5,r10
 50836b8:	0009883a 	mov	r4,zero
 50836bc:	d8800015 	stw	r2,0(sp)
 50836c0:	d8c00515 	stw	r3,20(sp)
 50836c4:	50866c00 	call	50866c0 <__subdf3>
 50836c8:	b809883a 	mov	r4,r23
 50836cc:	a00b883a 	mov	r5,r20
 50836d0:	100d883a 	mov	r6,r2
 50836d4:	180f883a 	mov	r7,r3
 50836d8:	50866c00 	call	50866c0 <__subdf3>
 50836dc:	800f883a 	mov	r7,r16
 50836e0:	000d883a 	mov	r6,zero
 50836e4:	1009883a 	mov	r4,r2
 50836e8:	180b883a 	mov	r5,r3
 50836ec:	5085fa80 	call	5085fa8 <__muldf3>
 50836f0:	db400517 	ldw	r13,20(sp)
 50836f4:	d9000017 	ldw	r4,0(sp)
 50836f8:	100d883a 	mov	r6,r2
 50836fc:	680b883a 	mov	r5,r13
 5083700:	180f883a 	mov	r7,r3
 5083704:	50866c00 	call	50866c0 <__subdf3>
 5083708:	dbc00617 	ldw	r15,24(sp)
 508370c:	db800717 	ldw	r14,28(sp)
 5083710:	1009883a 	mov	r4,r2
 5083714:	780d883a 	mov	r6,r15
 5083718:	700f883a 	mov	r7,r14
 508371c:	180b883a 	mov	r5,r3
 5083720:	5085fa80 	call	5085fa8 <__muldf3>
 5083724:	880d883a 	mov	r6,r17
 5083728:	800f883a 	mov	r7,r16
 508372c:	8809883a 	mov	r4,r17
 5083730:	800b883a 	mov	r5,r16
 5083734:	d8800015 	stw	r2,0(sp)
 5083738:	d8c00115 	stw	r3,4(sp)
 508373c:	5085fa80 	call	5085fa8 <__muldf3>
 5083740:	01929174 	movhi	r6,19013
 5083744:	01cff2b4 	movhi	r7,16330
 5083748:	3193bbc4 	addi	r6,r6,20207
 508374c:	39df8a04 	addi	r7,r7,32296
 5083750:	1009883a 	mov	r4,r2
 5083754:	180b883a 	mov	r5,r3
 5083758:	102f883a 	mov	r23,r2
 508375c:	1829883a 	mov	r20,r3
 5083760:	5085fa80 	call	5085fa8 <__muldf3>
 5083764:	01a4f2b4 	movhi	r6,37834
 5083768:	01cff3b4 	movhi	r7,16334
 508376c:	31b6d944 	addi	r6,r6,-9371
 5083770:	39e19284 	addi	r7,r7,-31158
 5083774:	1009883a 	mov	r4,r2
 5083778:	180b883a 	mov	r5,r3
 508377c:	5084bbc0 	call	5084bbc <__adddf3>
 5083780:	b80d883a 	mov	r6,r23
 5083784:	a00f883a 	mov	r7,r20
 5083788:	1009883a 	mov	r4,r2
 508378c:	180b883a 	mov	r5,r3
 5083790:	5085fa80 	call	5085fa8 <__muldf3>
 5083794:	01aa4774 	movhi	r6,43293
 5083798:	01cff474 	movhi	r7,16337
 508379c:	31904044 	addi	r6,r6,16641
 50837a0:	39dd1804 	addi	r7,r7,29792
 50837a4:	1009883a 	mov	r4,r2
 50837a8:	180b883a 	mov	r5,r3
 50837ac:	5084bbc0 	call	5084bbc <__adddf3>
 50837b0:	b80d883a 	mov	r6,r23
 50837b4:	a00f883a 	mov	r7,r20
 50837b8:	1009883a 	mov	r4,r2
 50837bc:	180b883a 	mov	r5,r3
 50837c0:	5085fa80 	call	5085fa8 <__muldf3>
 50837c4:	019463f4 	movhi	r6,20879
 50837c8:	01cff574 	movhi	r7,16341
 50837cc:	31899344 	addi	r6,r6,9805
 50837d0:	39d55544 	addi	r7,r7,21845
 50837d4:	1009883a 	mov	r4,r2
 50837d8:	180b883a 	mov	r5,r3
 50837dc:	5084bbc0 	call	5084bbc <__adddf3>
 50837e0:	b80d883a 	mov	r6,r23
 50837e4:	a00f883a 	mov	r7,r20
 50837e8:	1009883a 	mov	r4,r2
 50837ec:	180b883a 	mov	r5,r3
 50837f0:	5085fa80 	call	5085fa8 <__muldf3>
 50837f4:	01b6dc34 	movhi	r6,56176
 50837f8:	01cff6f4 	movhi	r7,16347
 50837fc:	31aaffc4 	addi	r6,r6,-21505
 5083800:	39db6d84 	addi	r7,r7,28086
 5083804:	1009883a 	mov	r4,r2
 5083808:	180b883a 	mov	r5,r3
 508380c:	5084bbc0 	call	5084bbc <__adddf3>
 5083810:	b80d883a 	mov	r6,r23
 5083814:	a00f883a 	mov	r7,r20
 5083818:	1009883a 	mov	r4,r2
 508381c:	180b883a 	mov	r5,r3
 5083820:	5085fa80 	call	5085fa8 <__muldf3>
 5083824:	018cccf4 	movhi	r6,13107
 5083828:	01cff8f4 	movhi	r7,16355
 508382c:	318cc0c4 	addi	r6,r6,13059
 5083830:	39ccccc4 	addi	r7,r7,13107
 5083834:	1009883a 	mov	r4,r2
 5083838:	180b883a 	mov	r5,r3
 508383c:	5084bbc0 	call	5084bbc <__adddf3>
 5083840:	b80d883a 	mov	r6,r23
 5083844:	a00f883a 	mov	r7,r20
 5083848:	b809883a 	mov	r4,r23
 508384c:	a00b883a 	mov	r5,r20
 5083850:	1825883a 	mov	r18,r3
 5083854:	d8800515 	stw	r2,20(sp)
 5083858:	5085fa80 	call	5085fa8 <__muldf3>
 508385c:	db400517 	ldw	r13,20(sp)
 5083860:	900b883a 	mov	r5,r18
 5083864:	100d883a 	mov	r6,r2
 5083868:	6809883a 	mov	r4,r13
 508386c:	180f883a 	mov	r7,r3
 5083870:	5085fa80 	call	5085fa8 <__muldf3>
 5083874:	800f883a 	mov	r7,r16
 5083878:	8809883a 	mov	r4,r17
 508387c:	800b883a 	mov	r5,r16
 5083880:	000d883a 	mov	r6,zero
 5083884:	102f883a 	mov	r23,r2
 5083888:	1829883a 	mov	r20,r3
 508388c:	5084bbc0 	call	5084bbc <__adddf3>
 5083890:	d9800017 	ldw	r6,0(sp)
 5083894:	d9c00117 	ldw	r7,4(sp)
 5083898:	1009883a 	mov	r4,r2
 508389c:	180b883a 	mov	r5,r3
 50838a0:	5085fa80 	call	5085fa8 <__muldf3>
 50838a4:	b80d883a 	mov	r6,r23
 50838a8:	a00f883a 	mov	r7,r20
 50838ac:	1009883a 	mov	r4,r2
 50838b0:	180b883a 	mov	r5,r3
 50838b4:	5084bbc0 	call	5084bbc <__adddf3>
 50838b8:	800f883a 	mov	r7,r16
 50838bc:	800b883a 	mov	r5,r16
 50838c0:	000d883a 	mov	r6,zero
 50838c4:	0009883a 	mov	r4,zero
 50838c8:	1025883a 	mov	r18,r2
 50838cc:	182f883a 	mov	r23,r3
 50838d0:	5085fa80 	call	5085fa8 <__muldf3>
 50838d4:	000d883a 	mov	r6,zero
 50838d8:	01d00234 	movhi	r7,16392
 50838dc:	1009883a 	mov	r4,r2
 50838e0:	180b883a 	mov	r5,r3
 50838e4:	d8c00715 	stw	r3,28(sp)
 50838e8:	d8800615 	stw	r2,24(sp)
 50838ec:	5084bbc0 	call	5084bbc <__adddf3>
 50838f0:	900d883a 	mov	r6,r18
 50838f4:	b80f883a 	mov	r7,r23
 50838f8:	1009883a 	mov	r4,r2
 50838fc:	180b883a 	mov	r5,r3
 5083900:	5084bbc0 	call	5084bbc <__adddf3>
 5083904:	800b883a 	mov	r5,r16
 5083908:	000d883a 	mov	r6,zero
 508390c:	180f883a 	mov	r7,r3
 5083910:	0009883a 	mov	r4,zero
 5083914:	1829883a 	mov	r20,r3
 5083918:	5085fa80 	call	5085fa8 <__muldf3>
 508391c:	a00b883a 	mov	r5,r20
 5083920:	000d883a 	mov	r6,zero
 5083924:	01d00234 	movhi	r7,16392
 5083928:	0009883a 	mov	r4,zero
 508392c:	d8800315 	stw	r2,12(sp)
 5083930:	d8c00415 	stw	r3,16(sp)
 5083934:	50866c00 	call	50866c0 <__subdf3>
 5083938:	dbc00617 	ldw	r15,24(sp)
 508393c:	db800717 	ldw	r14,28(sp)
 5083940:	1009883a 	mov	r4,r2
 5083944:	780d883a 	mov	r6,r15
 5083948:	700f883a 	mov	r7,r14
 508394c:	180b883a 	mov	r5,r3
 5083950:	50866c00 	call	50866c0 <__subdf3>
 5083954:	9009883a 	mov	r4,r18
 5083958:	b80b883a 	mov	r5,r23
 508395c:	100d883a 	mov	r6,r2
 5083960:	180f883a 	mov	r7,r3
 5083964:	50866c00 	call	50866c0 <__subdf3>
 5083968:	880d883a 	mov	r6,r17
 508396c:	800f883a 	mov	r7,r16
 5083970:	1009883a 	mov	r4,r2
 5083974:	180b883a 	mov	r5,r3
 5083978:	5085fa80 	call	5085fa8 <__muldf3>
 508397c:	d9000017 	ldw	r4,0(sp)
 5083980:	d9400117 	ldw	r5,4(sp)
 5083984:	a00f883a 	mov	r7,r20
 5083988:	000d883a 	mov	r6,zero
 508398c:	1023883a 	mov	r17,r2
 5083990:	1821883a 	mov	r16,r3
 5083994:	5085fa80 	call	5085fa8 <__muldf3>
 5083998:	8809883a 	mov	r4,r17
 508399c:	800b883a 	mov	r5,r16
 50839a0:	100d883a 	mov	r6,r2
 50839a4:	180f883a 	mov	r7,r3
 50839a8:	5084bbc0 	call	5084bbc <__adddf3>
 50839ac:	d9000317 	ldw	r4,12(sp)
 50839b0:	d9400417 	ldw	r5,16(sp)
 50839b4:	100d883a 	mov	r6,r2
 50839b8:	180f883a 	mov	r7,r3
 50839bc:	102f883a 	mov	r23,r2
 50839c0:	1823883a 	mov	r17,r3
 50839c4:	5084bbc0 	call	5084bbc <__adddf3>
 50839c8:	01cffbf4 	movhi	r7,16367
 50839cc:	39f1c244 	addi	r7,r7,-14583
 50839d0:	0009883a 	mov	r4,zero
 50839d4:	180b883a 	mov	r5,r3
 50839d8:	01b80034 	movhi	r6,57344
 50839dc:	1821883a 	mov	r16,r3
 50839e0:	5085fa80 	call	5085fa8 <__muldf3>
 50839e4:	d9800317 	ldw	r6,12(sp)
 50839e8:	d9c00417 	ldw	r7,16(sp)
 50839ec:	800b883a 	mov	r5,r16
 50839f0:	0009883a 	mov	r4,zero
 50839f4:	1825883a 	mov	r18,r3
 50839f8:	d8800015 	stw	r2,0(sp)
 50839fc:	50866c00 	call	50866c0 <__subdf3>
 5083a00:	b809883a 	mov	r4,r23
 5083a04:	880b883a 	mov	r5,r17
 5083a08:	100d883a 	mov	r6,r2
 5083a0c:	180f883a 	mov	r7,r3
 5083a10:	50866c00 	call	50866c0 <__subdf3>
 5083a14:	01b70eb4 	movhi	r6,56378
 5083a18:	01cffbf4 	movhi	r7,16367
 5083a1c:	3180ff44 	addi	r6,r6,1021
 5083a20:	39f1c244 	addi	r7,r7,-14583
 5083a24:	1009883a 	mov	r4,r2
 5083a28:	180b883a 	mov	r5,r3
 5083a2c:	5085fa80 	call	5085fa8 <__muldf3>
 5083a30:	018516f4 	movhi	r6,5211
 5083a34:	01ef8fb4 	movhi	r7,48702
 5083a38:	800b883a 	mov	r5,r16
 5083a3c:	31807d44 	addi	r6,r6,501
 5083a40:	39cbf804 	addi	r7,r7,12256
 5083a44:	0009883a 	mov	r4,zero
 5083a48:	1029883a 	mov	r20,r2
 5083a4c:	1823883a 	mov	r17,r3
 5083a50:	5085fa80 	call	5085fa8 <__muldf3>
 5083a54:	a009883a 	mov	r4,r20
 5083a58:	880b883a 	mov	r5,r17
 5083a5c:	100d883a 	mov	r6,r2
 5083a60:	180f883a 	mov	r7,r3
 5083a64:	5084bbc0 	call	5084bbc <__adddf3>
 5083a68:	da400817 	ldw	r9,32(sp)
 5083a6c:	da000a17 	ldw	r8,40(sp)
 5083a70:	180b883a 	mov	r5,r3
 5083a74:	480d883a 	mov	r6,r9
 5083a78:	400f883a 	mov	r7,r8
 5083a7c:	1009883a 	mov	r4,r2
 5083a80:	5084bbc0 	call	5084bbc <__adddf3>
 5083a84:	db000917 	ldw	r12,36(sp)
 5083a88:	1029883a 	mov	r20,r2
 5083a8c:	1823883a 	mov	r17,r3
 5083a90:	6009883a 	mov	r4,r12
 5083a94:	508703c0 	call	508703c <__floatsidf>
 5083a98:	d9000017 	ldw	r4,0(sp)
 5083a9c:	a00d883a 	mov	r6,r20
 5083aa0:	880f883a 	mov	r7,r17
 5083aa4:	900b883a 	mov	r5,r18
 5083aa8:	182f883a 	mov	r23,r3
 5083aac:	d8800115 	stw	r2,4(sp)
 5083ab0:	5084bbc0 	call	5084bbc <__adddf3>
 5083ab4:	d9c00217 	ldw	r7,8(sp)
 5083ab8:	980d883a 	mov	r6,r19
 5083abc:	1009883a 	mov	r4,r2
 5083ac0:	180b883a 	mov	r5,r3
 5083ac4:	5084bbc0 	call	5084bbc <__adddf3>
 5083ac8:	d9800117 	ldw	r6,4(sp)
 5083acc:	b80f883a 	mov	r7,r23
 5083ad0:	1009883a 	mov	r4,r2
 5083ad4:	180b883a 	mov	r5,r3
 5083ad8:	5084bbc0 	call	5084bbc <__adddf3>
 5083adc:	d9800117 	ldw	r6,4(sp)
 5083ae0:	b80f883a 	mov	r7,r23
 5083ae4:	0009883a 	mov	r4,zero
 5083ae8:	180b883a 	mov	r5,r3
 5083aec:	1821883a 	mov	r16,r3
 5083af0:	50866c00 	call	50866c0 <__subdf3>
 5083af4:	d9c00217 	ldw	r7,8(sp)
 5083af8:	980d883a 	mov	r6,r19
 5083afc:	1009883a 	mov	r4,r2
 5083b00:	180b883a 	mov	r5,r3
 5083b04:	50866c00 	call	50866c0 <__subdf3>
 5083b08:	d9800017 	ldw	r6,0(sp)
 5083b0c:	900f883a 	mov	r7,r18
 5083b10:	1009883a 	mov	r4,r2
 5083b14:	180b883a 	mov	r5,r3
 5083b18:	50866c00 	call	50866c0 <__subdf3>
 5083b1c:	880b883a 	mov	r5,r17
 5083b20:	100d883a 	mov	r6,r2
 5083b24:	180f883a 	mov	r7,r3
 5083b28:	a009883a 	mov	r4,r20
 5083b2c:	50866c00 	call	50866c0 <__subdf3>
 5083b30:	dac00b17 	ldw	r11,44(sp)
 5083b34:	aabfffc4 	addi	r10,r21,-1
 5083b38:	1025883a 	mov	r18,r2
 5083b3c:	52d6b03a 	or	r11,r10,r11
 5083b40:	1823883a 	mov	r17,r3
 5083b44:	58015826 	beq	r11,zero,50840a8 <__ieee754_pow+0xe28>
 5083b48:	04cffc34 	movhi	r19,16368
 5083b4c:	b009883a 	mov	r4,r22
 5083b50:	000d883a 	mov	r6,zero
 5083b54:	e00f883a 	mov	r7,fp
 5083b58:	e00b883a 	mov	r5,fp
 5083b5c:	50866c00 	call	50866c0 <__subdf3>
 5083b60:	800f883a 	mov	r7,r16
 5083b64:	000d883a 	mov	r6,zero
 5083b68:	1009883a 	mov	r4,r2
 5083b6c:	180b883a 	mov	r5,r3
 5083b70:	5085fa80 	call	5085fa8 <__muldf3>
 5083b74:	b00d883a 	mov	r6,r22
 5083b78:	9009883a 	mov	r4,r18
 5083b7c:	880b883a 	mov	r5,r17
 5083b80:	e00f883a 	mov	r7,fp
 5083b84:	1829883a 	mov	r20,r3
 5083b88:	102b883a 	mov	r21,r2
 5083b8c:	5085fa80 	call	5085fa8 <__muldf3>
 5083b90:	a00b883a 	mov	r5,r20
 5083b94:	100d883a 	mov	r6,r2
 5083b98:	180f883a 	mov	r7,r3
 5083b9c:	a809883a 	mov	r4,r21
 5083ba0:	5084bbc0 	call	5084bbc <__adddf3>
 5083ba4:	800b883a 	mov	r5,r16
 5083ba8:	000d883a 	mov	r6,zero
 5083bac:	e00f883a 	mov	r7,fp
 5083bb0:	0009883a 	mov	r4,zero
 5083bb4:	102d883a 	mov	r22,r2
 5083bb8:	1829883a 	mov	r20,r3
 5083bbc:	5085fa80 	call	5085fa8 <__muldf3>
 5083bc0:	100d883a 	mov	r6,r2
 5083bc4:	180f883a 	mov	r7,r3
 5083bc8:	b009883a 	mov	r4,r22
 5083bcc:	a00b883a 	mov	r5,r20
 5083bd0:	1025883a 	mov	r18,r2
 5083bd4:	1823883a 	mov	r17,r3
 5083bd8:	5084bbc0 	call	5084bbc <__adddf3>
 5083bdc:	102f883a 	mov	r23,r2
 5083be0:	00902434 	movhi	r2,16528
 5083be4:	10bfffc4 	addi	r2,r2,-1
 5083be8:	1821883a 	mov	r16,r3
 5083bec:	9013883a 	mov	r9,r18
 5083bf0:	8811883a 	mov	r8,r17
 5083bf4:	10c1070e 	bge	r2,r3,5084014 <__ieee754_pow+0xd94>
 5083bf8:	00afdc34 	movhi	r2,49008
 5083bfc:	1885883a 	add	r2,r3,r2
 5083c00:	15c4b03a 	or	r2,r2,r23
 5083c04:	1001901e 	bne	r2,zero,5084248 <__ieee754_pow+0xfc8>
 5083c08:	01994b34 	movhi	r6,25900
 5083c0c:	01cf25f4 	movhi	r7,15511
 5083c10:	31a0bf84 	addi	r6,r6,-32002
 5083c14:	39c551c4 	addi	r7,r7,5447
 5083c18:	b009883a 	mov	r4,r22
 5083c1c:	a00b883a 	mov	r5,r20
 5083c20:	5084bbc0 	call	5084bbc <__adddf3>
 5083c24:	900d883a 	mov	r6,r18
 5083c28:	880f883a 	mov	r7,r17
 5083c2c:	b809883a 	mov	r4,r23
 5083c30:	800b883a 	mov	r5,r16
 5083c34:	1039883a 	mov	fp,r2
 5083c38:	182b883a 	mov	r21,r3
 5083c3c:	50866c00 	call	50866c0 <__subdf3>
 5083c40:	100d883a 	mov	r6,r2
 5083c44:	180f883a 	mov	r7,r3
 5083c48:	e009883a 	mov	r4,fp
 5083c4c:	a80b883a 	mov	r5,r21
 5083c50:	5085dd80 	call	5085dd8 <__gedf2>
 5083c54:	00817c16 	blt	zero,r2,5084248 <__ieee754_pow+0xfc8>
 5083c58:	802b883a 	mov	r21,r16
 5083c5c:	a805d53a 	srai	r2,r21,20
 5083c60:	00c00434 	movhi	r3,16
 5083c64:	01000434 	movhi	r4,16
 5083c68:	10bf0084 	addi	r2,r2,-1022
 5083c6c:	1885d83a 	sra	r2,r3,r2
 5083c70:	213fffc4 	addi	r4,r4,-1
 5083c74:	1405883a 	add	r2,r2,r16
 5083c78:	1006907a 	slli	r3,r2,1
 5083c7c:	112a703a 	and	r21,r2,r4
 5083c80:	ad400434 	orhi	r21,r21,16
 5083c84:	1806d57a 	srli	r3,r3,21
 5083c88:	18ff0044 	addi	r3,r3,-1023
 5083c8c:	20cfd83a 	sra	r7,r4,r3
 5083c90:	01000504 	movi	r4,20
 5083c94:	20c7c83a 	sub	r3,r4,r3
 5083c98:	a8c7d83a 	sra	r3,r21,r3
 5083c9c:	01ce303a 	nor	r7,zero,r7
 5083ca0:	388e703a 	and	r7,r7,r2
 5083ca4:	d8c00015 	stw	r3,0(sp)
 5083ca8:	80019016 	blt	r16,zero,50842ec <__ieee754_pow+0x106c>
 5083cac:	000d883a 	mov	r6,zero
 5083cb0:	9009883a 	mov	r4,r18
 5083cb4:	880b883a 	mov	r5,r17
 5083cb8:	50866c00 	call	50866c0 <__subdf3>
 5083cbc:	100d883a 	mov	r6,r2
 5083cc0:	180f883a 	mov	r7,r3
 5083cc4:	b009883a 	mov	r4,r22
 5083cc8:	a00b883a 	mov	r5,r20
 5083ccc:	d8c00a15 	stw	r3,40(sp)
 5083cd0:	d8800815 	stw	r2,32(sp)
 5083cd4:	5084bbc0 	call	5084bbc <__adddf3>
 5083cd8:	d8800017 	ldw	r2,0(sp)
 5083cdc:	da000a17 	ldw	r8,40(sp)
 5083ce0:	da400817 	ldw	r9,32(sp)
 5083ce4:	1004953a 	slli	r2,r2,20
 5083ce8:	1821883a 	mov	r16,r3
 5083cec:	d8800215 	stw	r2,8(sp)
 5083cf0:	01cff9b4 	movhi	r7,16358
 5083cf4:	800b883a 	mov	r5,r16
 5083cf8:	39cb90c4 	addi	r7,r7,11843
 5083cfc:	0009883a 	mov	r4,zero
 5083d00:	000d883a 	mov	r6,zero
 5083d04:	da000a15 	stw	r8,40(sp)
 5083d08:	da400815 	stw	r9,32(sp)
 5083d0c:	5085fa80 	call	5085fa8 <__muldf3>
 5083d10:	da400817 	ldw	r9,32(sp)
 5083d14:	da000a17 	ldw	r8,40(sp)
 5083d18:	800b883a 	mov	r5,r16
 5083d1c:	480d883a 	mov	r6,r9
 5083d20:	400f883a 	mov	r7,r8
 5083d24:	0009883a 	mov	r4,zero
 5083d28:	1039883a 	mov	fp,r2
 5083d2c:	182f883a 	mov	r23,r3
 5083d30:	50866c00 	call	50866c0 <__subdf3>
 5083d34:	b009883a 	mov	r4,r22
 5083d38:	a00b883a 	mov	r5,r20
 5083d3c:	100d883a 	mov	r6,r2
 5083d40:	180f883a 	mov	r7,r3
 5083d44:	50866c00 	call	50866c0 <__subdf3>
 5083d48:	01bfbeb4 	movhi	r6,65274
 5083d4c:	01cff9b4 	movhi	r7,16358
 5083d50:	318e7bc4 	addi	r6,r6,14831
 5083d54:	39cb9084 	addi	r7,r7,11842
 5083d58:	1009883a 	mov	r4,r2
 5083d5c:	180b883a 	mov	r5,r3
 5083d60:	5085fa80 	call	5085fa8 <__muldf3>
 5083d64:	01832a34 	movhi	r6,3240
 5083d68:	01ef8834 	movhi	r7,48672
 5083d6c:	800b883a 	mov	r5,r16
 5083d70:	319b0e44 	addi	r6,r6,27705
 5083d74:	39d71844 	addi	r7,r7,23649
 5083d78:	0009883a 	mov	r4,zero
 5083d7c:	1029883a 	mov	r20,r2
 5083d80:	1823883a 	mov	r17,r3
 5083d84:	5085fa80 	call	5085fa8 <__muldf3>
 5083d88:	a009883a 	mov	r4,r20
 5083d8c:	880b883a 	mov	r5,r17
 5083d90:	100d883a 	mov	r6,r2
 5083d94:	180f883a 	mov	r7,r3
 5083d98:	5084bbc0 	call	5084bbc <__adddf3>
 5083d9c:	e009883a 	mov	r4,fp
 5083da0:	b80b883a 	mov	r5,r23
 5083da4:	100d883a 	mov	r6,r2
 5083da8:	180f883a 	mov	r7,r3
 5083dac:	102d883a 	mov	r22,r2
 5083db0:	1829883a 	mov	r20,r3
 5083db4:	5084bbc0 	call	5084bbc <__adddf3>
 5083db8:	e00d883a 	mov	r6,fp
 5083dbc:	b80f883a 	mov	r7,r23
 5083dc0:	1009883a 	mov	r4,r2
 5083dc4:	180b883a 	mov	r5,r3
 5083dc8:	1023883a 	mov	r17,r2
 5083dcc:	1821883a 	mov	r16,r3
 5083dd0:	50866c00 	call	50866c0 <__subdf3>
 5083dd4:	b009883a 	mov	r4,r22
 5083dd8:	a00b883a 	mov	r5,r20
 5083ddc:	100d883a 	mov	r6,r2
 5083de0:	180f883a 	mov	r7,r3
 5083de4:	50866c00 	call	50866c0 <__subdf3>
 5083de8:	880d883a 	mov	r6,r17
 5083dec:	800f883a 	mov	r7,r16
 5083df0:	8809883a 	mov	r4,r17
 5083df4:	800b883a 	mov	r5,r16
 5083df8:	1039883a 	mov	fp,r2
 5083dfc:	182f883a 	mov	r23,r3
 5083e00:	5085fa80 	call	5085fa8 <__muldf3>
 5083e04:	019caff4 	movhi	r6,29375
 5083e08:	01cf99b4 	movhi	r7,15974
 5083e0c:	31a93404 	addi	r6,r6,-23344
 5083e10:	39cdda44 	addi	r7,r7,14185
 5083e14:	1009883a 	mov	r4,r2
 5083e18:	180b883a 	mov	r5,r3
 5083e1c:	102d883a 	mov	r22,r2
 5083e20:	1829883a 	mov	r20,r3
 5083e24:	5085fa80 	call	5085fa8 <__muldf3>
 5083e28:	01b174b4 	movhi	r6,50642
 5083e2c:	01cfaf34 	movhi	r7,16060
 5083e30:	319afc44 	addi	r6,r6,27633
 5083e34:	39ef5044 	addi	r7,r7,-17087
 5083e38:	1009883a 	mov	r4,r2
 5083e3c:	180b883a 	mov	r5,r3
 5083e40:	50866c00 	call	50866c0 <__subdf3>
 5083e44:	b00d883a 	mov	r6,r22
 5083e48:	a00f883a 	mov	r7,r20
 5083e4c:	1009883a 	mov	r4,r2
 5083e50:	180b883a 	mov	r5,r3
 5083e54:	5085fa80 	call	5085fa8 <__muldf3>
 5083e58:	01abc9b4 	movhi	r6,44838
 5083e5c:	01cfc474 	movhi	r7,16145
 5083e60:	31b78b04 	addi	r6,r6,-8660
 5083e64:	39d59a84 	addi	r7,r7,22122
 5083e68:	1009883a 	mov	r4,r2
 5083e6c:	180b883a 	mov	r5,r3
 5083e70:	5084bbc0 	call	5084bbc <__adddf3>
 5083e74:	b00d883a 	mov	r6,r22
 5083e78:	a00f883a 	mov	r7,r20
 5083e7c:	1009883a 	mov	r4,r2
 5083e80:	180b883a 	mov	r5,r3
 5083e84:	5085fa80 	call	5085fa8 <__muldf3>
 5083e88:	0185aff4 	movhi	r6,5823
 5083e8c:	01cfd9f4 	movhi	r7,16231
 5083e90:	31af64c4 	addi	r6,r6,-17005
 5083e94:	39f05b04 	addi	r7,r7,-16020
 5083e98:	1009883a 	mov	r4,r2
 5083e9c:	180b883a 	mov	r5,r3
 5083ea0:	50866c00 	call	50866c0 <__subdf3>
 5083ea4:	b00d883a 	mov	r6,r22
 5083ea8:	a00f883a 	mov	r7,r20
 5083eac:	1009883a 	mov	r4,r2
 5083eb0:	180b883a 	mov	r5,r3
 5083eb4:	5085fa80 	call	5085fa8 <__muldf3>
 5083eb8:	01955574 	movhi	r6,21845
 5083ebc:	01cff174 	movhi	r7,16325
 5083ec0:	31954f84 	addi	r6,r6,21822
 5083ec4:	39d55544 	addi	r7,r7,21845
 5083ec8:	1009883a 	mov	r4,r2
 5083ecc:	180b883a 	mov	r5,r3
 5083ed0:	5084bbc0 	call	5084bbc <__adddf3>
 5083ed4:	b00d883a 	mov	r6,r22
 5083ed8:	a00f883a 	mov	r7,r20
 5083edc:	1009883a 	mov	r4,r2
 5083ee0:	180b883a 	mov	r5,r3
 5083ee4:	5085fa80 	call	5085fa8 <__muldf3>
 5083ee8:	100d883a 	mov	r6,r2
 5083eec:	180f883a 	mov	r7,r3
 5083ef0:	8809883a 	mov	r4,r17
 5083ef4:	800b883a 	mov	r5,r16
 5083ef8:	50866c00 	call	50866c0 <__subdf3>
 5083efc:	100d883a 	mov	r6,r2
 5083f00:	180f883a 	mov	r7,r3
 5083f04:	8809883a 	mov	r4,r17
 5083f08:	800b883a 	mov	r5,r16
 5083f0c:	102d883a 	mov	r22,r2
 5083f10:	1829883a 	mov	r20,r3
 5083f14:	5085fa80 	call	5085fa8 <__muldf3>
 5083f18:	b009883a 	mov	r4,r22
 5083f1c:	a00b883a 	mov	r5,r20
 5083f20:	000d883a 	mov	r6,zero
 5083f24:	01d00034 	movhi	r7,16384
 5083f28:	1025883a 	mov	r18,r2
 5083f2c:	182b883a 	mov	r21,r3
 5083f30:	50866c00 	call	50866c0 <__subdf3>
 5083f34:	100d883a 	mov	r6,r2
 5083f38:	180f883a 	mov	r7,r3
 5083f3c:	9009883a 	mov	r4,r18
 5083f40:	a80b883a 	mov	r5,r21
 5083f44:	50854680 	call	5085468 <__divdf3>
 5083f48:	e00d883a 	mov	r6,fp
 5083f4c:	b80f883a 	mov	r7,r23
 5083f50:	8809883a 	mov	r4,r17
 5083f54:	800b883a 	mov	r5,r16
 5083f58:	102d883a 	mov	r22,r2
 5083f5c:	1829883a 	mov	r20,r3
 5083f60:	5085fa80 	call	5085fa8 <__muldf3>
 5083f64:	e00d883a 	mov	r6,fp
 5083f68:	b80f883a 	mov	r7,r23
 5083f6c:	1009883a 	mov	r4,r2
 5083f70:	180b883a 	mov	r5,r3
 5083f74:	5084bbc0 	call	5084bbc <__adddf3>
 5083f78:	100d883a 	mov	r6,r2
 5083f7c:	180f883a 	mov	r7,r3
 5083f80:	b009883a 	mov	r4,r22
 5083f84:	a00b883a 	mov	r5,r20
 5083f88:	50866c00 	call	50866c0 <__subdf3>
 5083f8c:	880d883a 	mov	r6,r17
 5083f90:	800f883a 	mov	r7,r16
 5083f94:	1009883a 	mov	r4,r2
 5083f98:	180b883a 	mov	r5,r3
 5083f9c:	50866c00 	call	50866c0 <__subdf3>
 5083fa0:	0009883a 	mov	r4,zero
 5083fa4:	014ffc34 	movhi	r5,16368
 5083fa8:	100d883a 	mov	r6,r2
 5083fac:	180f883a 	mov	r7,r3
 5083fb0:	50866c00 	call	50866c0 <__subdf3>
 5083fb4:	d9000217 	ldw	r4,8(sp)
 5083fb8:	190b883a 	add	r5,r3,r4
 5083fbc:	2809d53a 	srai	r4,r5,20
 5083fc0:	0100cd0e 	bge	zero,r4,50842f8 <__ieee754_pow+0x1078>
 5083fc4:	1009883a 	mov	r4,r2
 5083fc8:	000d883a 	mov	r6,zero
 5083fcc:	980f883a 	mov	r7,r19
 5083fd0:	5085fa80 	call	5085fa8 <__muldf3>
 5083fd4:	003ce606 	br	5083370 <__alt_data_end+0xfffb5170>
 5083fd8:	00b00434 	movhi	r2,49168
 5083fdc:	8885883a 	add	r2,r17,r2
 5083fe0:	1544b03a 	or	r2,r2,r21
 5083fe4:	1000b326 	beq	r2,zero,50842b4 <__ieee754_pow+0x1034>
 5083fe8:	00800044 	movi	r2,1
 5083fec:	a8bd181e 	bne	r21,r2,5083450 <__alt_data_end+0xfffb5250>
 5083ff0:	18e0003c 	xorhi	r3,r3,32768
 5083ff4:	b805883a 	mov	r2,r23
 5083ff8:	003cdd06 	br	5083370 <__alt_data_end+0xfffb5170>
 5083ffc:	800d883a 	mov	r6,r16
 5084000:	980f883a 	mov	r7,r19
 5084004:	8009883a 	mov	r4,r16
 5084008:	980b883a 	mov	r5,r19
 508400c:	5085fa80 	call	5085fa8 <__muldf3>
 5084010:	003cd706 	br	5083370 <__alt_data_end+0xfffb5170>
 5084014:	05600034 	movhi	r21,32768
 5084018:	ad7fffc4 	addi	r21,r21,-1
 508401c:	00902474 	movhi	r2,16529
 5084020:	1d6a703a 	and	r21,r3,r21
 5084024:	10b2ffc4 	addi	r2,r2,-13313
 5084028:	15409d0e 	bge	r2,r21,50842a0 <__ieee754_pow+0x1020>
 508402c:	008fdbf4 	movhi	r2,16239
 5084030:	108d0004 	addi	r2,r2,13312
 5084034:	1885883a 	add	r2,r3,r2
 5084038:	15c4b03a 	or	r2,r2,r23
 508403c:	10000b1e 	bne	r2,zero,508406c <__ieee754_pow+0xdec>
 5084040:	900d883a 	mov	r6,r18
 5084044:	880f883a 	mov	r7,r17
 5084048:	b809883a 	mov	r4,r23
 508404c:	180b883a 	mov	r5,r3
 5084050:	50866c00 	call	50866c0 <__subdf3>
 5084054:	100d883a 	mov	r6,r2
 5084058:	180f883a 	mov	r7,r3
 508405c:	b009883a 	mov	r4,r22
 5084060:	a00b883a 	mov	r5,r20
 5084064:	5085eb40 	call	5085eb4 <__ledf2>
 5084068:	00befc16 	blt	zero,r2,5083c5c <__alt_data_end+0xfffb5a5c>
 508406c:	01b0be74 	movhi	r6,49913
 5084070:	01c06974 	movhi	r7,421
 5084074:	980b883a 	mov	r5,r19
 5084078:	31bcd644 	addi	r6,r6,-3239
 508407c:	39db87c4 	addi	r7,r7,28191
 5084080:	0009883a 	mov	r4,zero
 5084084:	5085fa80 	call	5085fa8 <__muldf3>
 5084088:	01b0be74 	movhi	r6,49913
 508408c:	01c06974 	movhi	r7,421
 5084090:	31bcd644 	addi	r6,r6,-3239
 5084094:	39db87c4 	addi	r7,r7,28191
 5084098:	1009883a 	mov	r4,r2
 508409c:	180b883a 	mov	r5,r3
 50840a0:	5085fa80 	call	5085fa8 <__muldf3>
 50840a4:	003cb206 	br	5083370 <__alt_data_end+0xfffb5170>
 50840a8:	04effc34 	movhi	r19,49136
 50840ac:	003ea706 	br	5083b4c <__alt_data_end+0xfffb594c>
 50840b0:	e03cdc0e 	bge	fp,zero,5083424 <__alt_data_end+0xfffb5224>
 50840b4:	0005883a 	mov	r2,zero
 50840b8:	e0e0003c 	xorhi	r3,fp,32768
 50840bc:	003cac06 	br	5083370 <__alt_data_end+0xfffb5170>
 50840c0:	0019883a 	mov	r12,zero
 50840c4:	003d3206 	br	5083590 <__alt_data_end+0xfffb5390>
 50840c8:	008ffc34 	movhi	r2,16368
 50840cc:	10bfff84 	addi	r2,r2,-2
 50840d0:	147cd30e 	bge	r2,r17,5083420 <__alt_data_end+0xfffb5220>
 50840d4:	01cffc34 	movhi	r7,16368
 50840d8:	3c7cea16 	blt	r7,r17,5083484 <__alt_data_end+0xfffb5284>
 50840dc:	b809883a 	mov	r4,r23
 50840e0:	000d883a 	mov	r6,zero
 50840e4:	180b883a 	mov	r5,r3
 50840e8:	dac00b15 	stw	r11,44(sp)
 50840ec:	50866c00 	call	50866c0 <__subdf3>
 50840f0:	01cffdf4 	movhi	r7,16375
 50840f4:	39c551c4 	addi	r7,r7,5447
 50840f8:	01980034 	movhi	r6,24576
 50840fc:	1009883a 	mov	r4,r2
 5084100:	180b883a 	mov	r5,r3
 5084104:	1023883a 	mov	r17,r2
 5084108:	1821883a 	mov	r16,r3
 508410c:	5085fa80 	call	5085fa8 <__muldf3>
 5084110:	01be17b4 	movhi	r6,63582
 5084114:	01cf9574 	movhi	r7,15957
 5084118:	8809883a 	mov	r4,r17
 508411c:	800b883a 	mov	r5,r16
 5084120:	31b7d104 	addi	r6,r6,-8380
 5084124:	39eb82c4 	addi	r7,r7,-20981
 5084128:	1027883a 	mov	r19,r2
 508412c:	1825883a 	mov	r18,r3
 5084130:	5085fa80 	call	5085fa8 <__muldf3>
 5084134:	8809883a 	mov	r4,r17
 5084138:	800b883a 	mov	r5,r16
 508413c:	000d883a 	mov	r6,zero
 5084140:	01cff434 	movhi	r7,16336
 5084144:	1829883a 	mov	r20,r3
 5084148:	d8800a15 	stw	r2,40(sp)
 508414c:	5085fa80 	call	5085fa8 <__muldf3>
 5084150:	01155574 	movhi	r4,21845
 5084154:	014ff574 	movhi	r5,16341
 5084158:	100d883a 	mov	r6,r2
 508415c:	180f883a 	mov	r7,r3
 5084160:	21155544 	addi	r4,r4,21845
 5084164:	29555544 	addi	r5,r5,21845
 5084168:	50866c00 	call	50866c0 <__subdf3>
 508416c:	880d883a 	mov	r6,r17
 5084170:	800f883a 	mov	r7,r16
 5084174:	1009883a 	mov	r4,r2
 5084178:	180b883a 	mov	r5,r3
 508417c:	5085fa80 	call	5085fa8 <__muldf3>
 5084180:	100d883a 	mov	r6,r2
 5084184:	180f883a 	mov	r7,r3
 5084188:	0009883a 	mov	r4,zero
 508418c:	014ff834 	movhi	r5,16352
 5084190:	50866c00 	call	50866c0 <__subdf3>
 5084194:	880d883a 	mov	r6,r17
 5084198:	800f883a 	mov	r7,r16
 508419c:	8809883a 	mov	r4,r17
 50841a0:	800b883a 	mov	r5,r16
 50841a4:	102f883a 	mov	r23,r2
 50841a8:	d8c00815 	stw	r3,32(sp)
 50841ac:	5085fa80 	call	5085fa8 <__muldf3>
 50841b0:	da400817 	ldw	r9,32(sp)
 50841b4:	100d883a 	mov	r6,r2
 50841b8:	180f883a 	mov	r7,r3
 50841bc:	480b883a 	mov	r5,r9
 50841c0:	b809883a 	mov	r4,r23
 50841c4:	5085fa80 	call	5085fa8 <__muldf3>
 50841c8:	01994b34 	movhi	r6,25900
 50841cc:	01cffdf4 	movhi	r7,16375
 50841d0:	31a0bf84 	addi	r6,r6,-32002
 50841d4:	39c551c4 	addi	r7,r7,5447
 50841d8:	1009883a 	mov	r4,r2
 50841dc:	180b883a 	mov	r5,r3
 50841e0:	5085fa80 	call	5085fa8 <__muldf3>
 50841e4:	da000a17 	ldw	r8,40(sp)
 50841e8:	a00b883a 	mov	r5,r20
 50841ec:	100d883a 	mov	r6,r2
 50841f0:	4009883a 	mov	r4,r8
 50841f4:	180f883a 	mov	r7,r3
 50841f8:	50866c00 	call	50866c0 <__subdf3>
 50841fc:	100d883a 	mov	r6,r2
 5084200:	180f883a 	mov	r7,r3
 5084204:	9809883a 	mov	r4,r19
 5084208:	900b883a 	mov	r5,r18
 508420c:	1029883a 	mov	r20,r2
 5084210:	1823883a 	mov	r17,r3
 5084214:	5084bbc0 	call	5084bbc <__adddf3>
 5084218:	1821883a 	mov	r16,r3
 508421c:	980d883a 	mov	r6,r19
 5084220:	900f883a 	mov	r7,r18
 5084224:	0009883a 	mov	r4,zero
 5084228:	180b883a 	mov	r5,r3
 508422c:	003e3a06 	br	5083b18 <__alt_data_end+0xfffb5918>
 5084230:	800d883a 	mov	r6,r16
 5084234:	980f883a 	mov	r7,r19
 5084238:	0009883a 	mov	r4,zero
 508423c:	900b883a 	mov	r5,r18
 5084240:	50854680 	call	5085468 <__divdf3>
 5084244:	003c4a06 	br	5083370 <__alt_data_end+0xfffb5170>
 5084248:	01a20034 	movhi	r6,34816
 508424c:	01df8e34 	movhi	r7,32312
 5084250:	980b883a 	mov	r5,r19
 5084254:	319d6704 	addi	r6,r6,30108
 5084258:	39f90f04 	addi	r7,r7,-7108
 508425c:	0009883a 	mov	r4,zero
 5084260:	5085fa80 	call	5085fa8 <__muldf3>
 5084264:	01a20034 	movhi	r6,34816
 5084268:	01df8e34 	movhi	r7,32312
 508426c:	319d6704 	addi	r6,r6,30108
 5084270:	39f90f04 	addi	r7,r7,-7108
 5084274:	1009883a 	mov	r4,r2
 5084278:	180b883a 	mov	r5,r3
 508427c:	5085fa80 	call	5085fa8 <__muldf3>
 5084280:	003c3b06 	br	5083370 <__alt_data_end+0xfffb5170>
 5084284:	303c551e 	bne	r6,zero,50833dc <__alt_data_end+0xfffb51dc>
 5084288:	1885c83a 	sub	r2,r3,r2
 508428c:	9087d83a 	sra	r3,r18,r2
 5084290:	1884983a 	sll	r2,r3,r2
 5084294:	90801f26 	beq	r18,r2,5084314 <__ieee754_pow+0x1094>
 5084298:	002b883a 	mov	r21,zero
 508429c:	003c1806 	br	5083300 <__alt_data_end+0xfffb5100>
 50842a0:	008ff834 	movhi	r2,16352
 50842a4:	157e6d16 	blt	r2,r21,5083c5c <__alt_data_end+0xfffb5a5c>
 50842a8:	d8000215 	stw	zero,8(sp)
 50842ac:	d8000015 	stw	zero,0(sp)
 50842b0:	003e8f06 	br	5083cf0 <__alt_data_end+0xfffb5af0>
 50842b4:	b80d883a 	mov	r6,r23
 50842b8:	180f883a 	mov	r7,r3
 50842bc:	003c9e06 	br	5083538 <__alt_data_end+0xfffb5338>
 50842c0:	008ff8f4 	movhi	r2,16355
 50842c4:	10ae00c4 	addi	r2,r2,-18429
 50842c8:	0250f434 	movhi	r9,17360
 50842cc:	020f9374 	movhi	r8,15949
 50842d0:	d8800215 	stw	r2,8(sp)
 50842d4:	4a740184 	addi	r9,r9,-12282
 50842d8:	423f7ac4 	addi	r8,r8,-533
 50842dc:	04d00034 	movhi	r19,16384
 50842e0:	02800134 	movhi	r10,4
 50842e4:	048ffe34 	movhi	r18,16376
 50842e8:	003cbf06 	br	50835e8 <__alt_data_end+0xfffb53e8>
 50842ec:	00c9c83a 	sub	r4,zero,r3
 50842f0:	d9000015 	stw	r4,0(sp)
 50842f4:	003e6d06 	br	5083cac <__alt_data_end+0xfffb5aac>
 50842f8:	d9800017 	ldw	r6,0(sp)
 50842fc:	1009883a 	mov	r4,r2
 5084300:	180b883a 	mov	r5,r3
 5084304:	50848500 	call	5084850 <scalbn>
 5084308:	1009883a 	mov	r4,r2
 508430c:	180b883a 	mov	r5,r3
 5084310:	003f2d06 	br	5083fc8 <__alt_data_end+0xfffb5dc8>
 5084314:	18c0004c 	andi	r3,r3,1
 5084318:	02800084 	movi	r10,2
 508431c:	50ebc83a 	sub	r21,r10,r3
 5084320:	003bf706 	br	5083300 <__alt_data_end+0xfffb5100>

05084324 <__ieee754_sqrt>:
 5084324:	defffd04 	addi	sp,sp,-12
 5084328:	dc400115 	stw	r17,4(sp)
 508432c:	dc000015 	stw	r16,0(sp)
 5084330:	dfc00215 	stw	ra,8(sp)
 5084334:	28dffc2c 	andhi	r3,r5,32752
 5084338:	009ffc34 	movhi	r2,32752
 508433c:	2821883a 	mov	r16,r5
 5084340:	2023883a 	mov	r17,r4
 5084344:	200d883a 	mov	r6,r4
 5084348:	18807b26 	beq	r3,r2,5084538 <__ieee754_sqrt+0x214>
 508434c:	01405f0e 	bge	zero,r5,50844cc <__ieee754_sqrt+0x1a8>
 5084350:	2815d53a 	srai	r10,r5,20
 5084354:	50006a26 	beq	r10,zero,5084500 <__ieee754_sqrt+0x1dc>
 5084358:	00c00434 	movhi	r3,16
 508435c:	52bf0044 	addi	r10,r10,-1023
 5084360:	18ffffc4 	addi	r3,r3,-1
 5084364:	80c6703a 	and	r3,r16,r3
 5084368:	5080004c 	andi	r2,r10,1
 508436c:	18c00434 	orhi	r3,r3,16
 5084370:	1000511e 	bne	r2,zero,50844b8 <__ieee754_sqrt+0x194>
 5084374:	3004d7fa 	srli	r2,r6,31
 5084378:	5015d07a 	srai	r10,r10,1
 508437c:	18c7883a 	add	r3,r3,r3
 5084380:	10c5883a 	add	r2,r2,r3
 5084384:	01400584 	movi	r5,22
 5084388:	3187883a 	add	r3,r6,r6
 508438c:	0013883a 	mov	r9,zero
 5084390:	000f883a 	mov	r7,zero
 5084394:	01000834 	movhi	r4,32
 5084398:	390d883a 	add	r6,r7,r4
 508439c:	1810d7fa 	srli	r8,r3,31
 50843a0:	297fffc4 	addi	r5,r5,-1
 50843a4:	11800316 	blt	r2,r6,50843b4 <__ieee754_sqrt+0x90>
 50843a8:	1185c83a 	sub	r2,r2,r6
 50843ac:	310f883a 	add	r7,r6,r4
 50843b0:	4913883a 	add	r9,r9,r4
 50843b4:	1085883a 	add	r2,r2,r2
 50843b8:	4085883a 	add	r2,r8,r2
 50843bc:	18c7883a 	add	r3,r3,r3
 50843c0:	2008d07a 	srli	r4,r4,1
 50843c4:	283ff41e 	bne	r5,zero,5084398 <__alt_data_end+0xfffb6198>
 50843c8:	01200034 	movhi	r4,32768
 50843cc:	01800804 	movi	r6,32
 50843d0:	0011883a 	mov	r8,zero
 50843d4:	0019883a 	mov	r12,zero
 50843d8:	201b883a 	mov	r13,r4
 50843dc:	00000806 	br	5084400 <__ieee754_sqrt+0xdc>
 50843e0:	38801726 	beq	r7,r2,5084440 <__ieee754_sqrt+0x11c>
 50843e4:	180ad7fa 	srli	r5,r3,31
 50843e8:	1085883a 	add	r2,r2,r2
 50843ec:	31bfffc4 	addi	r6,r6,-1
 50843f0:	2885883a 	add	r2,r5,r2
 50843f4:	18c7883a 	add	r3,r3,r3
 50843f8:	2008d07a 	srli	r4,r4,1
 50843fc:	30001726 	beq	r6,zero,508445c <__ieee754_sqrt+0x138>
 5084400:	230b883a 	add	r5,r4,r12
 5084404:	38bff60e 	bge	r7,r2,50843e0 <__alt_data_end+0xfffb61e0>
 5084408:	2ae0002c 	andhi	r11,r5,32768
 508440c:	2919883a 	add	r12,r5,r4
 5084410:	5b400826 	beq	r11,r13,5084434 <__ieee754_sqrt+0x110>
 5084414:	3817883a 	mov	r11,r7
 5084418:	11c5c83a 	sub	r2,r2,r7
 508441c:	1940012e 	bgeu	r3,r5,5084424 <__ieee754_sqrt+0x100>
 5084420:	10bfffc4 	addi	r2,r2,-1
 5084424:	1947c83a 	sub	r3,r3,r5
 5084428:	4111883a 	add	r8,r8,r4
 508442c:	580f883a 	mov	r7,r11
 5084430:	003fec06 	br	50843e4 <__alt_data_end+0xfffb61e4>
 5084434:	603ff716 	blt	r12,zero,5084414 <__alt_data_end+0xfffb6214>
 5084438:	3ac00044 	addi	r11,r7,1
 508443c:	003ff606 	br	5084418 <__alt_data_end+0xfffb6218>
 5084440:	19401936 	bltu	r3,r5,50844a8 <__ieee754_sqrt+0x184>
 5084444:	2ae0002c 	andhi	r11,r5,32768
 5084448:	2919883a 	add	r12,r5,r4
 508444c:	5b404526 	beq	r11,r13,5084564 <__ieee754_sqrt+0x240>
 5084450:	1017883a 	mov	r11,r2
 5084454:	0005883a 	mov	r2,zero
 5084458:	003ff206 	br	5084424 <__alt_data_end+0xfffb6224>
 508445c:	10c4b03a 	or	r2,r2,r3
 5084460:	10000426 	beq	r2,zero,5084474 <__ieee754_sqrt+0x150>
 5084464:	00bfffc4 	movi	r2,-1
 5084468:	40804026 	beq	r8,r2,508456c <__ieee754_sqrt+0x248>
 508446c:	4080004c 	andi	r2,r8,1
 5084470:	4091883a 	add	r8,r8,r2
 5084474:	4004d07a 	srli	r2,r8,1
 5084478:	4807d07a 	srai	r3,r9,1
 508447c:	010ff834 	movhi	r4,16352
 5084480:	4a40004c 	andi	r9,r9,1
 5084484:	1909883a 	add	r4,r3,r4
 5084488:	4800091e 	bne	r9,zero,50844b0 <__ieee754_sqrt+0x18c>
 508448c:	5006953a 	slli	r3,r10,20
 5084490:	1907883a 	add	r3,r3,r4
 5084494:	dfc00217 	ldw	ra,8(sp)
 5084498:	dc400117 	ldw	r17,4(sp)
 508449c:	dc000017 	ldw	r16,0(sp)
 50844a0:	dec00304 	addi	sp,sp,12
 50844a4:	f800283a 	ret
 50844a8:	3805883a 	mov	r2,r7
 50844ac:	003fcd06 	br	50843e4 <__alt_data_end+0xfffb61e4>
 50844b0:	10a00034 	orhi	r2,r2,32768
 50844b4:	003ff506 	br	508448c <__alt_data_end+0xfffb628c>
 50844b8:	3004d7fa 	srli	r2,r6,31
 50844bc:	18c7883a 	add	r3,r3,r3
 50844c0:	318d883a 	add	r6,r6,r6
 50844c4:	10c7883a 	add	r3,r2,r3
 50844c8:	003faa06 	br	5084374 <__alt_data_end+0xfffb6174>
 50844cc:	00a00034 	movhi	r2,32768
 50844d0:	10bfffc4 	addi	r2,r2,-1
 50844d4:	2884703a 	and	r2,r5,r2
 50844d8:	1104b03a 	or	r2,r2,r4
 50844dc:	10001e26 	beq	r2,zero,5084558 <__ieee754_sqrt+0x234>
 50844e0:	2800291e 	bne	r5,zero,5084588 <__ieee754_sqrt+0x264>
 50844e4:	0015883a 	mov	r10,zero
 50844e8:	3020d2fa 	srli	r16,r6,11
 50844ec:	52bffac4 	addi	r10,r10,-21
 50844f0:	300c957a 	slli	r6,r6,21
 50844f4:	803ffc26 	beq	r16,zero,50844e8 <__alt_data_end+0xfffb62e8>
 50844f8:	8080042c 	andhi	r2,r16,16
 50844fc:	10001e1e 	bne	r2,zero,5084578 <__ieee754_sqrt+0x254>
 5084500:	0005883a 	mov	r2,zero
 5084504:	00000106 	br	508450c <__ieee754_sqrt+0x1e8>
 5084508:	1805883a 	mov	r2,r3
 508450c:	8421883a 	add	r16,r16,r16
 5084510:	8100042c 	andhi	r4,r16,16
 5084514:	10c00044 	addi	r3,r2,1
 5084518:	203ffb26 	beq	r4,zero,5084508 <__alt_data_end+0xfffb6308>
 508451c:	01000804 	movi	r4,32
 5084520:	20c9c83a 	sub	r4,r4,r3
 5084524:	3108d83a 	srl	r4,r6,r4
 5084528:	5095c83a 	sub	r10,r10,r2
 508452c:	30cc983a 	sll	r6,r6,r3
 5084530:	2420b03a 	or	r16,r4,r16
 5084534:	003f8806 	br	5084358 <__alt_data_end+0xfffb6158>
 5084538:	280f883a 	mov	r7,r5
 508453c:	5085fa80 	call	5085fa8 <__muldf3>
 5084540:	880d883a 	mov	r6,r17
 5084544:	800f883a 	mov	r7,r16
 5084548:	1009883a 	mov	r4,r2
 508454c:	180b883a 	mov	r5,r3
 5084550:	5084bbc0 	call	5084bbc <__adddf3>
 5084554:	003fcf06 	br	5084494 <__alt_data_end+0xfffb6294>
 5084558:	2005883a 	mov	r2,r4
 508455c:	2807883a 	mov	r3,r5
 5084560:	003fcc06 	br	5084494 <__alt_data_end+0xfffb6294>
 5084564:	603fba16 	blt	r12,zero,5084450 <__alt_data_end+0xfffb6250>
 5084568:	003fb306 	br	5084438 <__alt_data_end+0xfffb6238>
 508456c:	4a400044 	addi	r9,r9,1
 5084570:	0005883a 	mov	r2,zero
 5084574:	003fc006 	br	5084478 <__alt_data_end+0xfffb6278>
 5084578:	01000804 	movi	r4,32
 508457c:	00bfffc4 	movi	r2,-1
 5084580:	0007883a 	mov	r3,zero
 5084584:	003fe706 	br	5084524 <__alt_data_end+0xfffb6324>
 5084588:	200d883a 	mov	r6,r4
 508458c:	280f883a 	mov	r7,r5
 5084590:	50866c00 	call	50866c0 <__subdf3>
 5084594:	100d883a 	mov	r6,r2
 5084598:	180f883a 	mov	r7,r3
 508459c:	1009883a 	mov	r4,r2
 50845a0:	180b883a 	mov	r5,r3
 50845a4:	50854680 	call	5085468 <__divdf3>
 50845a8:	003fba06 	br	5084494 <__alt_data_end+0xfffb6294>

050845ac <fabs>:
 50845ac:	00e00034 	movhi	r3,32768
 50845b0:	18ffffc4 	addi	r3,r3,-1
 50845b4:	2005883a 	mov	r2,r4
 50845b8:	28c6703a 	and	r3,r5,r3
 50845bc:	f800283a 	ret

050845c0 <finite>:
 50845c0:	00a00034 	movhi	r2,32768
 50845c4:	10bfffc4 	addi	r2,r2,-1
 50845c8:	288a703a 	and	r5,r5,r2
 50845cc:	00e00434 	movhi	r3,32784
 50845d0:	28c5883a 	add	r2,r5,r3
 50845d4:	1004d7fa 	srli	r2,r2,31
 50845d8:	f800283a 	ret

050845dc <__fpclassifyd>:
 50845dc:	00a00034 	movhi	r2,32768
 50845e0:	10bfffc4 	addi	r2,r2,-1
 50845e4:	2884703a 	and	r2,r5,r2
 50845e8:	10000726 	beq	r2,zero,5084608 <__fpclassifyd+0x2c>
 50845ec:	00fffc34 	movhi	r3,65520
 50845f0:	019ff834 	movhi	r6,32736
 50845f4:	28c7883a 	add	r3,r5,r3
 50845f8:	31bfffc4 	addi	r6,r6,-1
 50845fc:	30c00536 	bltu	r6,r3,5084614 <__fpclassifyd+0x38>
 5084600:	00800104 	movi	r2,4
 5084604:	f800283a 	ret
 5084608:	2000021e 	bne	r4,zero,5084614 <__fpclassifyd+0x38>
 508460c:	00800084 	movi	r2,2
 5084610:	f800283a 	ret
 5084614:	00dffc34 	movhi	r3,32752
 5084618:	019ff834 	movhi	r6,32736
 508461c:	28cb883a 	add	r5,r5,r3
 5084620:	31bfffc4 	addi	r6,r6,-1
 5084624:	317ff62e 	bgeu	r6,r5,5084600 <__alt_data_end+0xfffb6400>
 5084628:	01400434 	movhi	r5,16
 508462c:	297fffc4 	addi	r5,r5,-1
 5084630:	28800236 	bltu	r5,r2,508463c <__fpclassifyd+0x60>
 5084634:	008000c4 	movi	r2,3
 5084638:	f800283a 	ret
 508463c:	10c00226 	beq	r2,r3,5084648 <__fpclassifyd+0x6c>
 5084640:	0005883a 	mov	r2,zero
 5084644:	f800283a 	ret
 5084648:	2005003a 	cmpeq	r2,r4,zero
 508464c:	f800283a 	ret

05084650 <matherr>:
 5084650:	0005883a 	mov	r2,zero
 5084654:	f800283a 	ret

05084658 <nan>:
 5084658:	0005883a 	mov	r2,zero
 508465c:	00dffe34 	movhi	r3,32760
 5084660:	f800283a 	ret

05084664 <rint>:
 5084664:	2813d53a 	srai	r9,r5,20
 5084668:	defff904 	addi	sp,sp,-28
 508466c:	dc000215 	stw	r16,8(sp)
 5084670:	4a41ffcc 	andi	r9,r9,2047
 5084674:	dfc00615 	stw	ra,24(sp)
 5084678:	dcc00515 	stw	r19,20(sp)
 508467c:	dc800415 	stw	r18,16(sp)
 5084680:	dc400315 	stw	r17,12(sp)
 5084684:	01c004c4 	movi	r7,19
 5084688:	49bf0044 	addi	r6,r9,-1023
 508468c:	2811883a 	mov	r8,r5
 5084690:	2005883a 	mov	r2,r4
 5084694:	2807883a 	mov	r3,r5
 5084698:	2015883a 	mov	r10,r4
 508469c:	2820d7fa 	srli	r16,r5,31
 50846a0:	39801316 	blt	r7,r6,50846f0 <rint+0x8c>
 50846a4:	30003d16 	blt	r6,zero,508479c <rint+0x138>
 50846a8:	01000434 	movhi	r4,16
 50846ac:	213fffc4 	addi	r4,r4,-1
 50846b0:	2189d83a 	sra	r4,r4,r6
 50846b4:	290a703a 	and	r5,r5,r4
 50846b8:	288ab03a 	or	r5,r5,r2
 50846bc:	28001026 	beq	r5,zero,5084700 <rint+0x9c>
 50846c0:	2008d07a 	srli	r4,r4,1
 50846c4:	4104703a 	and	r2,r8,r4
 50846c8:	1294b03a 	or	r10,r2,r10
 50846cc:	50005626 	beq	r10,zero,5084828 <rint+0x1c4>
 50846d0:	31c05d26 	beq	r6,r7,5084848 <rint+0x1e4>
 50846d4:	0015883a 	mov	r10,zero
 50846d8:	00c00134 	movhi	r3,4
 50846dc:	1987d83a 	sra	r3,r3,r6
 50846e0:	0108303a 	nor	r4,zero,r4
 50846e4:	2210703a 	and	r8,r4,r8
 50846e8:	40c6b03a 	or	r3,r8,r3
 50846ec:	00001806 	br	5084750 <rint+0xec>
 50846f0:	01c00cc4 	movi	r7,51
 50846f4:	3980090e 	bge	r7,r6,508471c <rint+0xb8>
 50846f8:	01c10004 	movi	r7,1024
 50846fc:	31c04e26 	beq	r6,r7,5084838 <rint+0x1d4>
 5084700:	dfc00617 	ldw	ra,24(sp)
 5084704:	dcc00517 	ldw	r19,20(sp)
 5084708:	dc800417 	ldw	r18,16(sp)
 508470c:	dc400317 	ldw	r17,12(sp)
 5084710:	dc000217 	ldw	r16,8(sp)
 5084714:	dec00704 	addi	sp,sp,28
 5084718:	f800283a 	ret
 508471c:	4a7efb44 	addi	r9,r9,-1043
 5084720:	013fffc4 	movi	r4,-1
 5084724:	2248d83a 	srl	r4,r4,r9
 5084728:	110a703a 	and	r5,r2,r4
 508472c:	28004026 	beq	r5,zero,5084830 <rint+0x1cc>
 5084730:	2008d07a 	srli	r4,r4,1
 5084734:	1104703a 	and	r2,r2,r4
 5084738:	10000526 	beq	r2,zero,5084750 <rint+0xec>
 508473c:	00900034 	movhi	r2,16384
 5084740:	1253d83a 	sra	r9,r2,r9
 5084744:	0108303a 	nor	r4,zero,r4
 5084748:	2294703a 	and	r10,r4,r10
 508474c:	4a94b03a 	or	r10,r9,r10
 5084750:	802090fa 	slli	r16,r16,3
 5084754:	180b883a 	mov	r5,r3
 5084758:	00c14274 	movhi	r3,1289
 508475c:	18d0e004 	addi	r3,r3,17280
 5084760:	1c21883a 	add	r16,r3,r16
 5084764:	84400017 	ldw	r17,0(r16)
 5084768:	84000117 	ldw	r16,4(r16)
 508476c:	5009883a 	mov	r4,r10
 5084770:	880d883a 	mov	r6,r17
 5084774:	800f883a 	mov	r7,r16
 5084778:	5084bbc0 	call	5084bbc <__adddf3>
 508477c:	d8800015 	stw	r2,0(sp)
 5084780:	d8c00115 	stw	r3,4(sp)
 5084784:	d9000017 	ldw	r4,0(sp)
 5084788:	d9400117 	ldw	r5,4(sp)
 508478c:	880d883a 	mov	r6,r17
 5084790:	800f883a 	mov	r7,r16
 5084794:	50866c00 	call	50866c0 <__subdf3>
 5084798:	003fd906 	br	5084700 <__alt_data_end+0xfffb6500>
 508479c:	04600034 	movhi	r17,32768
 50847a0:	8c7fffc4 	addi	r17,r17,-1
 50847a4:	2c46703a 	and	r3,r5,r17
 50847a8:	1906b03a 	or	r3,r3,r4
 50847ac:	18002026 	beq	r3,zero,5084830 <rint+0x1cc>
 50847b0:	01800434 	movhi	r6,16
 50847b4:	31bfffc4 	addi	r6,r6,-1
 50847b8:	298c703a 	and	r6,r5,r6
 50847bc:	3104b03a 	or	r2,r6,r4
 50847c0:	008bc83a 	sub	r5,zero,r2
 50847c4:	800690fa 	slli	r3,r16,3
 50847c8:	2884b03a 	or	r2,r5,r2
 50847cc:	01414274 	movhi	r5,1289
 50847d0:	2950e004 	addi	r5,r5,17280
 50847d4:	28c7883a 	add	r3,r5,r3
 50847d8:	1004d33a 	srli	r2,r2,12
 50847dc:	1cc00017 	ldw	r19,0(r3)
 50847e0:	1c800117 	ldw	r18,4(r3)
 50847e4:	417fffac 	andhi	r5,r8,65534
 50847e8:	1080022c 	andhi	r2,r2,8
 50847ec:	980d883a 	mov	r6,r19
 50847f0:	900f883a 	mov	r7,r18
 50847f4:	114ab03a 	or	r5,r2,r5
 50847f8:	5084bbc0 	call	5084bbc <__adddf3>
 50847fc:	d8800015 	stw	r2,0(sp)
 5084800:	d8c00115 	stw	r3,4(sp)
 5084804:	d9000017 	ldw	r4,0(sp)
 5084808:	d9400117 	ldw	r5,4(sp)
 508480c:	980d883a 	mov	r6,r19
 5084810:	900f883a 	mov	r7,r18
 5084814:	50866c00 	call	50866c0 <__subdf3>
 5084818:	800897fa 	slli	r4,r16,31
 508481c:	1c46703a 	and	r3,r3,r17
 5084820:	1906b03a 	or	r3,r3,r4
 5084824:	003fb606 	br	5084700 <__alt_data_end+0xfffb6500>
 5084828:	0015883a 	mov	r10,zero
 508482c:	003fc806 	br	5084750 <__alt_data_end+0xfffb6550>
 5084830:	4007883a 	mov	r3,r8
 5084834:	003fb206 	br	5084700 <__alt_data_end+0xfffb6500>
 5084838:	200d883a 	mov	r6,r4
 508483c:	280f883a 	mov	r7,r5
 5084840:	5084bbc0 	call	5084bbc <__adddf3>
 5084844:	003fae06 	br	5084700 <__alt_data_end+0xfffb6500>
 5084848:	02a00034 	movhi	r10,32768
 508484c:	003fa206 	br	50846d8 <__alt_data_end+0xfffb64d8>

05084850 <scalbn>:
 5084850:	2a1ffc2c 	andhi	r8,r5,32752
 5084854:	4011d53a 	srai	r8,r8,20
 5084858:	defffe04 	addi	sp,sp,-8
 508485c:	dc000015 	stw	r16,0(sp)
 5084860:	dfc00115 	stw	ra,4(sp)
 5084864:	280f883a 	mov	r7,r5
 5084868:	2015883a 	mov	r10,r4
 508486c:	3021883a 	mov	r16,r6
 5084870:	40001e1e 	bne	r8,zero,50848ec <scalbn+0x9c>
 5084874:	00a00034 	movhi	r2,32768
 5084878:	10bfffc4 	addi	r2,r2,-1
 508487c:	2884703a 	and	r2,r5,r2
 5084880:	1104b03a 	or	r2,r2,r4
 5084884:	10002226 	beq	r2,zero,5084910 <scalbn+0xc0>
 5084888:	01d0d434 	movhi	r7,17232
 508488c:	000d883a 	mov	r6,zero
 5084890:	5085fa80 	call	5085fa8 <__muldf3>
 5084894:	013ffff4 	movhi	r4,65535
 5084898:	210f2c04 	addi	r4,r4,15536
 508489c:	1015883a 	mov	r10,r2
 50848a0:	180f883a 	mov	r7,r3
 50848a4:	81002a16 	blt	r16,r4,5084950 <scalbn+0x100>
 50848a8:	191ffc2c 	andhi	r4,r3,32752
 50848ac:	2009d53a 	srai	r4,r4,20
 50848b0:	223ff284 	addi	r8,r4,-54
 50848b4:	8211883a 	add	r8,r16,r8
 50848b8:	0081ff84 	movi	r2,2046
 50848bc:	12002f16 	blt	r2,r8,508497c <scalbn+0x12c>
 50848c0:	0200190e 	bge	zero,r8,5084928 <scalbn+0xd8>
 50848c4:	4010953a 	slli	r8,r8,20
 50848c8:	01600434 	movhi	r5,32784
 50848cc:	297fffc4 	addi	r5,r5,-1
 50848d0:	194e703a 	and	r7,r3,r5
 50848d4:	5005883a 	mov	r2,r10
 50848d8:	3a06b03a 	or	r3,r7,r8
 50848dc:	dfc00117 	ldw	ra,4(sp)
 50848e0:	dc000017 	ldw	r16,0(sp)
 50848e4:	dec00204 	addi	sp,sp,8
 50848e8:	f800283a 	ret
 50848ec:	0081ffc4 	movi	r2,2047
 50848f0:	2807883a 	mov	r3,r5
 50848f4:	40bfef1e 	bne	r8,r2,50848b4 <__alt_data_end+0xfffb66b4>
 50848f8:	200d883a 	mov	r6,r4
 50848fc:	5084bbc0 	call	5084bbc <__adddf3>
 5084900:	dfc00117 	ldw	ra,4(sp)
 5084904:	dc000017 	ldw	r16,0(sp)
 5084908:	dec00204 	addi	sp,sp,8
 508490c:	f800283a 	ret
 5084910:	2005883a 	mov	r2,r4
 5084914:	2807883a 	mov	r3,r5
 5084918:	dfc00117 	ldw	ra,4(sp)
 508491c:	dc000017 	ldw	r16,0(sp)
 5084920:	dec00204 	addi	sp,sp,8
 5084924:	f800283a 	ret
 5084928:	00bff2c4 	movi	r2,-53
 508492c:	4080240e 	bge	r8,r2,50849c0 <scalbn+0x170>
 5084930:	00b0d414 	movui	r2,50000
 5084934:	14001116 	blt	r2,r16,508497c <scalbn+0x12c>
 5084938:	0130be74 	movhi	r4,49913
 508493c:	01406974 	movhi	r5,421
 5084940:	213cd644 	addi	r4,r4,-3239
 5084944:	295b87c4 	addi	r5,r5,28191
 5084948:	500d883a 	mov	r6,r10
 508494c:	50849ec0 	call	50849ec <copysign>
 5084950:	01b0be74 	movhi	r6,49913
 5084954:	01c06974 	movhi	r7,421
 5084958:	31bcd644 	addi	r6,r6,-3239
 508495c:	39db87c4 	addi	r7,r7,28191
 5084960:	1009883a 	mov	r4,r2
 5084964:	180b883a 	mov	r5,r3
 5084968:	5085fa80 	call	5085fa8 <__muldf3>
 508496c:	dfc00117 	ldw	ra,4(sp)
 5084970:	dc000017 	ldw	r16,0(sp)
 5084974:	dec00204 	addi	sp,sp,8
 5084978:	f800283a 	ret
 508497c:	01220034 	movhi	r4,34816
 5084980:	015f8e34 	movhi	r5,32312
 5084984:	500d883a 	mov	r6,r10
 5084988:	211d6704 	addi	r4,r4,30108
 508498c:	29790f04 	addi	r5,r5,-7108
 5084990:	50849ec0 	call	50849ec <copysign>
 5084994:	01a20034 	movhi	r6,34816
 5084998:	01df8e34 	movhi	r7,32312
 508499c:	319d6704 	addi	r6,r6,30108
 50849a0:	39f90f04 	addi	r7,r7,-7108
 50849a4:	1009883a 	mov	r4,r2
 50849a8:	180b883a 	mov	r5,r3
 50849ac:	5085fa80 	call	5085fa8 <__muldf3>
 50849b0:	dfc00117 	ldw	ra,4(sp)
 50849b4:	dc000017 	ldw	r16,0(sp)
 50849b8:	dec00204 	addi	sp,sp,8
 50849bc:	f800283a 	ret
 50849c0:	42000d84 	addi	r8,r8,54
 50849c4:	4012953a 	slli	r9,r8,20
 50849c8:	01e00434 	movhi	r7,32784
 50849cc:	39ffffc4 	addi	r7,r7,-1
 50849d0:	19ca703a 	and	r5,r3,r7
 50849d4:	000d883a 	mov	r6,zero
 50849d8:	01cf2434 	movhi	r7,15504
 50849dc:	5009883a 	mov	r4,r10
 50849e0:	494ab03a 	or	r5,r9,r5
 50849e4:	5085fa80 	call	5085fa8 <__muldf3>
 50849e8:	003fbc06 	br	50848dc <__alt_data_end+0xfffb66dc>

050849ec <copysign>:
 50849ec:	2005883a 	mov	r2,r4
 50849f0:	01200034 	movhi	r4,32768
 50849f4:	213fffc4 	addi	r4,r4,-1
 50849f8:	38e0002c 	andhi	r3,r7,32768
 50849fc:	290a703a 	and	r5,r5,r4
 5084a00:	28c6b03a 	or	r3,r5,r3
 5084a04:	f800283a 	ret

05084a08 <__divsi3>:
 5084a08:	20001b16 	blt	r4,zero,5084a78 <__divsi3+0x70>
 5084a0c:	000f883a 	mov	r7,zero
 5084a10:	28001616 	blt	r5,zero,5084a6c <__divsi3+0x64>
 5084a14:	200d883a 	mov	r6,r4
 5084a18:	29001a2e 	bgeu	r5,r4,5084a84 <__divsi3+0x7c>
 5084a1c:	00800804 	movi	r2,32
 5084a20:	00c00044 	movi	r3,1
 5084a24:	00000106 	br	5084a2c <__divsi3+0x24>
 5084a28:	10000d26 	beq	r2,zero,5084a60 <__divsi3+0x58>
 5084a2c:	294b883a 	add	r5,r5,r5
 5084a30:	10bfffc4 	addi	r2,r2,-1
 5084a34:	18c7883a 	add	r3,r3,r3
 5084a38:	293ffb36 	bltu	r5,r4,5084a28 <__alt_data_end+0xfffb6828>
 5084a3c:	0005883a 	mov	r2,zero
 5084a40:	18000726 	beq	r3,zero,5084a60 <__divsi3+0x58>
 5084a44:	0005883a 	mov	r2,zero
 5084a48:	31400236 	bltu	r6,r5,5084a54 <__divsi3+0x4c>
 5084a4c:	314dc83a 	sub	r6,r6,r5
 5084a50:	10c4b03a 	or	r2,r2,r3
 5084a54:	1806d07a 	srli	r3,r3,1
 5084a58:	280ad07a 	srli	r5,r5,1
 5084a5c:	183ffa1e 	bne	r3,zero,5084a48 <__alt_data_end+0xfffb6848>
 5084a60:	38000126 	beq	r7,zero,5084a68 <__divsi3+0x60>
 5084a64:	0085c83a 	sub	r2,zero,r2
 5084a68:	f800283a 	ret
 5084a6c:	014bc83a 	sub	r5,zero,r5
 5084a70:	39c0005c 	xori	r7,r7,1
 5084a74:	003fe706 	br	5084a14 <__alt_data_end+0xfffb6814>
 5084a78:	0109c83a 	sub	r4,zero,r4
 5084a7c:	01c00044 	movi	r7,1
 5084a80:	003fe306 	br	5084a10 <__alt_data_end+0xfffb6810>
 5084a84:	00c00044 	movi	r3,1
 5084a88:	003fee06 	br	5084a44 <__alt_data_end+0xfffb6844>

05084a8c <__modsi3>:
 5084a8c:	20001716 	blt	r4,zero,5084aec <__modsi3+0x60>
 5084a90:	000f883a 	mov	r7,zero
 5084a94:	2005883a 	mov	r2,r4
 5084a98:	28001216 	blt	r5,zero,5084ae4 <__modsi3+0x58>
 5084a9c:	2900162e 	bgeu	r5,r4,5084af8 <__modsi3+0x6c>
 5084aa0:	01800804 	movi	r6,32
 5084aa4:	00c00044 	movi	r3,1
 5084aa8:	00000106 	br	5084ab0 <__modsi3+0x24>
 5084aac:	30000a26 	beq	r6,zero,5084ad8 <__modsi3+0x4c>
 5084ab0:	294b883a 	add	r5,r5,r5
 5084ab4:	31bfffc4 	addi	r6,r6,-1
 5084ab8:	18c7883a 	add	r3,r3,r3
 5084abc:	293ffb36 	bltu	r5,r4,5084aac <__alt_data_end+0xfffb68ac>
 5084ac0:	18000526 	beq	r3,zero,5084ad8 <__modsi3+0x4c>
 5084ac4:	1806d07a 	srli	r3,r3,1
 5084ac8:	11400136 	bltu	r2,r5,5084ad0 <__modsi3+0x44>
 5084acc:	1145c83a 	sub	r2,r2,r5
 5084ad0:	280ad07a 	srli	r5,r5,1
 5084ad4:	183ffb1e 	bne	r3,zero,5084ac4 <__alt_data_end+0xfffb68c4>
 5084ad8:	38000126 	beq	r7,zero,5084ae0 <__modsi3+0x54>
 5084adc:	0085c83a 	sub	r2,zero,r2
 5084ae0:	f800283a 	ret
 5084ae4:	014bc83a 	sub	r5,zero,r5
 5084ae8:	003fec06 	br	5084a9c <__alt_data_end+0xfffb689c>
 5084aec:	0109c83a 	sub	r4,zero,r4
 5084af0:	01c00044 	movi	r7,1
 5084af4:	003fe706 	br	5084a94 <__alt_data_end+0xfffb6894>
 5084af8:	00c00044 	movi	r3,1
 5084afc:	003ff106 	br	5084ac4 <__alt_data_end+0xfffb68c4>

05084b00 <__udivsi3>:
 5084b00:	200d883a 	mov	r6,r4
 5084b04:	2900152e 	bgeu	r5,r4,5084b5c <__udivsi3+0x5c>
 5084b08:	28001416 	blt	r5,zero,5084b5c <__udivsi3+0x5c>
 5084b0c:	00800804 	movi	r2,32
 5084b10:	00c00044 	movi	r3,1
 5084b14:	00000206 	br	5084b20 <__udivsi3+0x20>
 5084b18:	10000e26 	beq	r2,zero,5084b54 <__udivsi3+0x54>
 5084b1c:	28000516 	blt	r5,zero,5084b34 <__udivsi3+0x34>
 5084b20:	294b883a 	add	r5,r5,r5
 5084b24:	10bfffc4 	addi	r2,r2,-1
 5084b28:	18c7883a 	add	r3,r3,r3
 5084b2c:	293ffa36 	bltu	r5,r4,5084b18 <__alt_data_end+0xfffb6918>
 5084b30:	18000826 	beq	r3,zero,5084b54 <__udivsi3+0x54>
 5084b34:	0005883a 	mov	r2,zero
 5084b38:	31400236 	bltu	r6,r5,5084b44 <__udivsi3+0x44>
 5084b3c:	314dc83a 	sub	r6,r6,r5
 5084b40:	10c4b03a 	or	r2,r2,r3
 5084b44:	1806d07a 	srli	r3,r3,1
 5084b48:	280ad07a 	srli	r5,r5,1
 5084b4c:	183ffa1e 	bne	r3,zero,5084b38 <__alt_data_end+0xfffb6938>
 5084b50:	f800283a 	ret
 5084b54:	0005883a 	mov	r2,zero
 5084b58:	f800283a 	ret
 5084b5c:	00c00044 	movi	r3,1
 5084b60:	003ff406 	br	5084b34 <__alt_data_end+0xfffb6934>

05084b64 <__umodsi3>:
 5084b64:	2005883a 	mov	r2,r4
 5084b68:	2900122e 	bgeu	r5,r4,5084bb4 <__umodsi3+0x50>
 5084b6c:	28001116 	blt	r5,zero,5084bb4 <__umodsi3+0x50>
 5084b70:	01800804 	movi	r6,32
 5084b74:	00c00044 	movi	r3,1
 5084b78:	00000206 	br	5084b84 <__umodsi3+0x20>
 5084b7c:	30000c26 	beq	r6,zero,5084bb0 <__umodsi3+0x4c>
 5084b80:	28000516 	blt	r5,zero,5084b98 <__umodsi3+0x34>
 5084b84:	294b883a 	add	r5,r5,r5
 5084b88:	31bfffc4 	addi	r6,r6,-1
 5084b8c:	18c7883a 	add	r3,r3,r3
 5084b90:	293ffa36 	bltu	r5,r4,5084b7c <__alt_data_end+0xfffb697c>
 5084b94:	18000626 	beq	r3,zero,5084bb0 <__umodsi3+0x4c>
 5084b98:	1806d07a 	srli	r3,r3,1
 5084b9c:	11400136 	bltu	r2,r5,5084ba4 <__umodsi3+0x40>
 5084ba0:	1145c83a 	sub	r2,r2,r5
 5084ba4:	280ad07a 	srli	r5,r5,1
 5084ba8:	183ffb1e 	bne	r3,zero,5084b98 <__alt_data_end+0xfffb6998>
 5084bac:	f800283a 	ret
 5084bb0:	f800283a 	ret
 5084bb4:	00c00044 	movi	r3,1
 5084bb8:	003ff706 	br	5084b98 <__alt_data_end+0xfffb6998>

05084bbc <__adddf3>:
 5084bbc:	02c00434 	movhi	r11,16
 5084bc0:	5affffc4 	addi	r11,r11,-1
 5084bc4:	2806d7fa 	srli	r3,r5,31
 5084bc8:	2ad4703a 	and	r10,r5,r11
 5084bcc:	3ad2703a 	and	r9,r7,r11
 5084bd0:	3804d53a 	srli	r2,r7,20
 5084bd4:	3018d77a 	srli	r12,r6,29
 5084bd8:	280ad53a 	srli	r5,r5,20
 5084bdc:	501490fa 	slli	r10,r10,3
 5084be0:	2010d77a 	srli	r8,r4,29
 5084be4:	481290fa 	slli	r9,r9,3
 5084be8:	380ed7fa 	srli	r7,r7,31
 5084bec:	defffb04 	addi	sp,sp,-20
 5084bf0:	dc800215 	stw	r18,8(sp)
 5084bf4:	dc400115 	stw	r17,4(sp)
 5084bf8:	dc000015 	stw	r16,0(sp)
 5084bfc:	dfc00415 	stw	ra,16(sp)
 5084c00:	dcc00315 	stw	r19,12(sp)
 5084c04:	1c803fcc 	andi	r18,r3,255
 5084c08:	2c01ffcc 	andi	r16,r5,2047
 5084c0c:	5210b03a 	or	r8,r10,r8
 5084c10:	202290fa 	slli	r17,r4,3
 5084c14:	1081ffcc 	andi	r2,r2,2047
 5084c18:	4b12b03a 	or	r9,r9,r12
 5084c1c:	300c90fa 	slli	r6,r6,3
 5084c20:	91c07526 	beq	r18,r7,5084df8 <__adddf3+0x23c>
 5084c24:	8087c83a 	sub	r3,r16,r2
 5084c28:	00c0ab0e 	bge	zero,r3,5084ed8 <__adddf3+0x31c>
 5084c2c:	10002a1e 	bne	r2,zero,5084cd8 <__adddf3+0x11c>
 5084c30:	4984b03a 	or	r2,r9,r6
 5084c34:	1000961e 	bne	r2,zero,5084e90 <__adddf3+0x2d4>
 5084c38:	888001cc 	andi	r2,r17,7
 5084c3c:	10000726 	beq	r2,zero,5084c5c <__adddf3+0xa0>
 5084c40:	888003cc 	andi	r2,r17,15
 5084c44:	00c00104 	movi	r3,4
 5084c48:	10c00426 	beq	r2,r3,5084c5c <__adddf3+0xa0>
 5084c4c:	88c7883a 	add	r3,r17,r3
 5084c50:	1c63803a 	cmpltu	r17,r3,r17
 5084c54:	4451883a 	add	r8,r8,r17
 5084c58:	1823883a 	mov	r17,r3
 5084c5c:	4080202c 	andhi	r2,r8,128
 5084c60:	10005926 	beq	r2,zero,5084dc8 <__adddf3+0x20c>
 5084c64:	84000044 	addi	r16,r16,1
 5084c68:	0081ffc4 	movi	r2,2047
 5084c6c:	8080ba26 	beq	r16,r2,5084f58 <__adddf3+0x39c>
 5084c70:	00bfe034 	movhi	r2,65408
 5084c74:	10bfffc4 	addi	r2,r2,-1
 5084c78:	4090703a 	and	r8,r8,r2
 5084c7c:	4004977a 	slli	r2,r8,29
 5084c80:	4010927a 	slli	r8,r8,9
 5084c84:	8822d0fa 	srli	r17,r17,3
 5084c88:	8401ffcc 	andi	r16,r16,2047
 5084c8c:	4010d33a 	srli	r8,r8,12
 5084c90:	9007883a 	mov	r3,r18
 5084c94:	1444b03a 	or	r2,r2,r17
 5084c98:	8401ffcc 	andi	r16,r16,2047
 5084c9c:	8020953a 	slli	r16,r16,20
 5084ca0:	18c03fcc 	andi	r3,r3,255
 5084ca4:	01000434 	movhi	r4,16
 5084ca8:	213fffc4 	addi	r4,r4,-1
 5084cac:	180697fa 	slli	r3,r3,31
 5084cb0:	4110703a 	and	r8,r8,r4
 5084cb4:	4410b03a 	or	r8,r8,r16
 5084cb8:	40c6b03a 	or	r3,r8,r3
 5084cbc:	dfc00417 	ldw	ra,16(sp)
 5084cc0:	dcc00317 	ldw	r19,12(sp)
 5084cc4:	dc800217 	ldw	r18,8(sp)
 5084cc8:	dc400117 	ldw	r17,4(sp)
 5084ccc:	dc000017 	ldw	r16,0(sp)
 5084cd0:	dec00504 	addi	sp,sp,20
 5084cd4:	f800283a 	ret
 5084cd8:	0081ffc4 	movi	r2,2047
 5084cdc:	80bfd626 	beq	r16,r2,5084c38 <__alt_data_end+0xfffb6a38>
 5084ce0:	4a402034 	orhi	r9,r9,128
 5084ce4:	00800e04 	movi	r2,56
 5084ce8:	10c09f16 	blt	r2,r3,5084f68 <__adddf3+0x3ac>
 5084cec:	008007c4 	movi	r2,31
 5084cf0:	10c0c216 	blt	r2,r3,5084ffc <__adddf3+0x440>
 5084cf4:	00800804 	movi	r2,32
 5084cf8:	10c5c83a 	sub	r2,r2,r3
 5084cfc:	488a983a 	sll	r5,r9,r2
 5084d00:	30c8d83a 	srl	r4,r6,r3
 5084d04:	3084983a 	sll	r2,r6,r2
 5084d08:	48c6d83a 	srl	r3,r9,r3
 5084d0c:	290cb03a 	or	r6,r5,r4
 5084d10:	1004c03a 	cmpne	r2,r2,zero
 5084d14:	308cb03a 	or	r6,r6,r2
 5084d18:	898dc83a 	sub	r6,r17,r6
 5084d1c:	89a3803a 	cmpltu	r17,r17,r6
 5084d20:	40d1c83a 	sub	r8,r8,r3
 5084d24:	4451c83a 	sub	r8,r8,r17
 5084d28:	3023883a 	mov	r17,r6
 5084d2c:	4080202c 	andhi	r2,r8,128
 5084d30:	10002326 	beq	r2,zero,5084dc0 <__adddf3+0x204>
 5084d34:	04c02034 	movhi	r19,128
 5084d38:	9cffffc4 	addi	r19,r19,-1
 5084d3c:	44e6703a 	and	r19,r8,r19
 5084d40:	98007626 	beq	r19,zero,5084f1c <__adddf3+0x360>
 5084d44:	9809883a 	mov	r4,r19
 5084d48:	50871180 	call	5087118 <__clzsi2>
 5084d4c:	10fffe04 	addi	r3,r2,-8
 5084d50:	010007c4 	movi	r4,31
 5084d54:	20c07716 	blt	r4,r3,5084f34 <__adddf3+0x378>
 5084d58:	00800804 	movi	r2,32
 5084d5c:	10c5c83a 	sub	r2,r2,r3
 5084d60:	8884d83a 	srl	r2,r17,r2
 5084d64:	98d0983a 	sll	r8,r19,r3
 5084d68:	88e2983a 	sll	r17,r17,r3
 5084d6c:	1204b03a 	or	r2,r2,r8
 5084d70:	1c007416 	blt	r3,r16,5084f44 <__adddf3+0x388>
 5084d74:	1c21c83a 	sub	r16,r3,r16
 5084d78:	82000044 	addi	r8,r16,1
 5084d7c:	00c007c4 	movi	r3,31
 5084d80:	1a009116 	blt	r3,r8,5084fc8 <__adddf3+0x40c>
 5084d84:	00c00804 	movi	r3,32
 5084d88:	1a07c83a 	sub	r3,r3,r8
 5084d8c:	8a08d83a 	srl	r4,r17,r8
 5084d90:	88e2983a 	sll	r17,r17,r3
 5084d94:	10c6983a 	sll	r3,r2,r3
 5084d98:	1210d83a 	srl	r8,r2,r8
 5084d9c:	8804c03a 	cmpne	r2,r17,zero
 5084da0:	1906b03a 	or	r3,r3,r4
 5084da4:	18a2b03a 	or	r17,r3,r2
 5084da8:	0021883a 	mov	r16,zero
 5084dac:	003fa206 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5084db0:	1890b03a 	or	r8,r3,r2
 5084db4:	40017d26 	beq	r8,zero,50853ac <__adddf3+0x7f0>
 5084db8:	1011883a 	mov	r8,r2
 5084dbc:	1823883a 	mov	r17,r3
 5084dc0:	888001cc 	andi	r2,r17,7
 5084dc4:	103f9e1e 	bne	r2,zero,5084c40 <__alt_data_end+0xfffb6a40>
 5084dc8:	4004977a 	slli	r2,r8,29
 5084dcc:	8822d0fa 	srli	r17,r17,3
 5084dd0:	4010d0fa 	srli	r8,r8,3
 5084dd4:	9007883a 	mov	r3,r18
 5084dd8:	1444b03a 	or	r2,r2,r17
 5084ddc:	0101ffc4 	movi	r4,2047
 5084de0:	81002426 	beq	r16,r4,5084e74 <__adddf3+0x2b8>
 5084de4:	8120703a 	and	r16,r16,r4
 5084de8:	01000434 	movhi	r4,16
 5084dec:	213fffc4 	addi	r4,r4,-1
 5084df0:	4110703a 	and	r8,r8,r4
 5084df4:	003fa806 	br	5084c98 <__alt_data_end+0xfffb6a98>
 5084df8:	8089c83a 	sub	r4,r16,r2
 5084dfc:	01005e0e 	bge	zero,r4,5084f78 <__adddf3+0x3bc>
 5084e00:	10002b26 	beq	r2,zero,5084eb0 <__adddf3+0x2f4>
 5084e04:	0081ffc4 	movi	r2,2047
 5084e08:	80bf8b26 	beq	r16,r2,5084c38 <__alt_data_end+0xfffb6a38>
 5084e0c:	4a402034 	orhi	r9,r9,128
 5084e10:	00800e04 	movi	r2,56
 5084e14:	1100a40e 	bge	r2,r4,50850a8 <__adddf3+0x4ec>
 5084e18:	498cb03a 	or	r6,r9,r6
 5084e1c:	300ac03a 	cmpne	r5,r6,zero
 5084e20:	0013883a 	mov	r9,zero
 5084e24:	2c4b883a 	add	r5,r5,r17
 5084e28:	2c63803a 	cmpltu	r17,r5,r17
 5084e2c:	4a11883a 	add	r8,r9,r8
 5084e30:	8a11883a 	add	r8,r17,r8
 5084e34:	2823883a 	mov	r17,r5
 5084e38:	4080202c 	andhi	r2,r8,128
 5084e3c:	103fe026 	beq	r2,zero,5084dc0 <__alt_data_end+0xfffb6bc0>
 5084e40:	84000044 	addi	r16,r16,1
 5084e44:	0081ffc4 	movi	r2,2047
 5084e48:	8080d226 	beq	r16,r2,5085194 <__adddf3+0x5d8>
 5084e4c:	00bfe034 	movhi	r2,65408
 5084e50:	10bfffc4 	addi	r2,r2,-1
 5084e54:	4090703a 	and	r8,r8,r2
 5084e58:	880ad07a 	srli	r5,r17,1
 5084e5c:	400897fa 	slli	r4,r8,31
 5084e60:	88c0004c 	andi	r3,r17,1
 5084e64:	28e2b03a 	or	r17,r5,r3
 5084e68:	4010d07a 	srli	r8,r8,1
 5084e6c:	2462b03a 	or	r17,r4,r17
 5084e70:	003f7106 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5084e74:	4088b03a 	or	r4,r8,r2
 5084e78:	20014526 	beq	r4,zero,5085390 <__adddf3+0x7d4>
 5084e7c:	01000434 	movhi	r4,16
 5084e80:	42000234 	orhi	r8,r8,8
 5084e84:	213fffc4 	addi	r4,r4,-1
 5084e88:	4110703a 	and	r8,r8,r4
 5084e8c:	003f8206 	br	5084c98 <__alt_data_end+0xfffb6a98>
 5084e90:	18ffffc4 	addi	r3,r3,-1
 5084e94:	1800491e 	bne	r3,zero,5084fbc <__adddf3+0x400>
 5084e98:	898bc83a 	sub	r5,r17,r6
 5084e9c:	8963803a 	cmpltu	r17,r17,r5
 5084ea0:	4251c83a 	sub	r8,r8,r9
 5084ea4:	4451c83a 	sub	r8,r8,r17
 5084ea8:	2823883a 	mov	r17,r5
 5084eac:	003f9f06 	br	5084d2c <__alt_data_end+0xfffb6b2c>
 5084eb0:	4984b03a 	or	r2,r9,r6
 5084eb4:	103f6026 	beq	r2,zero,5084c38 <__alt_data_end+0xfffb6a38>
 5084eb8:	213fffc4 	addi	r4,r4,-1
 5084ebc:	2000931e 	bne	r4,zero,508510c <__adddf3+0x550>
 5084ec0:	898d883a 	add	r6,r17,r6
 5084ec4:	3463803a 	cmpltu	r17,r6,r17
 5084ec8:	4251883a 	add	r8,r8,r9
 5084ecc:	8a11883a 	add	r8,r17,r8
 5084ed0:	3023883a 	mov	r17,r6
 5084ed4:	003fd806 	br	5084e38 <__alt_data_end+0xfffb6c38>
 5084ed8:	1800541e 	bne	r3,zero,508502c <__adddf3+0x470>
 5084edc:	80800044 	addi	r2,r16,1
 5084ee0:	1081ffcc 	andi	r2,r2,2047
 5084ee4:	00c00044 	movi	r3,1
 5084ee8:	1880a00e 	bge	r3,r2,508516c <__adddf3+0x5b0>
 5084eec:	8989c83a 	sub	r4,r17,r6
 5084ef0:	8905803a 	cmpltu	r2,r17,r4
 5084ef4:	4267c83a 	sub	r19,r8,r9
 5084ef8:	98a7c83a 	sub	r19,r19,r2
 5084efc:	9880202c 	andhi	r2,r19,128
 5084f00:	10006326 	beq	r2,zero,5085090 <__adddf3+0x4d4>
 5084f04:	3463c83a 	sub	r17,r6,r17
 5084f08:	4a07c83a 	sub	r3,r9,r8
 5084f0c:	344d803a 	cmpltu	r6,r6,r17
 5084f10:	19a7c83a 	sub	r19,r3,r6
 5084f14:	3825883a 	mov	r18,r7
 5084f18:	983f8a1e 	bne	r19,zero,5084d44 <__alt_data_end+0xfffb6b44>
 5084f1c:	8809883a 	mov	r4,r17
 5084f20:	50871180 	call	5087118 <__clzsi2>
 5084f24:	10800804 	addi	r2,r2,32
 5084f28:	10fffe04 	addi	r3,r2,-8
 5084f2c:	010007c4 	movi	r4,31
 5084f30:	20ff890e 	bge	r4,r3,5084d58 <__alt_data_end+0xfffb6b58>
 5084f34:	10bff604 	addi	r2,r2,-40
 5084f38:	8884983a 	sll	r2,r17,r2
 5084f3c:	0023883a 	mov	r17,zero
 5084f40:	1c3f8c0e 	bge	r3,r16,5084d74 <__alt_data_end+0xfffb6b74>
 5084f44:	023fe034 	movhi	r8,65408
 5084f48:	423fffc4 	addi	r8,r8,-1
 5084f4c:	80e1c83a 	sub	r16,r16,r3
 5084f50:	1210703a 	and	r8,r2,r8
 5084f54:	003f3806 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5084f58:	9007883a 	mov	r3,r18
 5084f5c:	0011883a 	mov	r8,zero
 5084f60:	0005883a 	mov	r2,zero
 5084f64:	003f4c06 	br	5084c98 <__alt_data_end+0xfffb6a98>
 5084f68:	498cb03a 	or	r6,r9,r6
 5084f6c:	300cc03a 	cmpne	r6,r6,zero
 5084f70:	0007883a 	mov	r3,zero
 5084f74:	003f6806 	br	5084d18 <__alt_data_end+0xfffb6b18>
 5084f78:	20009c1e 	bne	r4,zero,50851ec <__adddf3+0x630>
 5084f7c:	80800044 	addi	r2,r16,1
 5084f80:	1141ffcc 	andi	r5,r2,2047
 5084f84:	01000044 	movi	r4,1
 5084f88:	2140670e 	bge	r4,r5,5085128 <__adddf3+0x56c>
 5084f8c:	0101ffc4 	movi	r4,2047
 5084f90:	11007f26 	beq	r2,r4,5085190 <__adddf3+0x5d4>
 5084f94:	898d883a 	add	r6,r17,r6
 5084f98:	4247883a 	add	r3,r8,r9
 5084f9c:	3451803a 	cmpltu	r8,r6,r17
 5084fa0:	40d1883a 	add	r8,r8,r3
 5084fa4:	402297fa 	slli	r17,r8,31
 5084fa8:	300cd07a 	srli	r6,r6,1
 5084fac:	4010d07a 	srli	r8,r8,1
 5084fb0:	1021883a 	mov	r16,r2
 5084fb4:	89a2b03a 	or	r17,r17,r6
 5084fb8:	003f1f06 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5084fbc:	0081ffc4 	movi	r2,2047
 5084fc0:	80bf481e 	bne	r16,r2,5084ce4 <__alt_data_end+0xfffb6ae4>
 5084fc4:	003f1c06 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5084fc8:	843ff844 	addi	r16,r16,-31
 5084fcc:	01000804 	movi	r4,32
 5084fd0:	1406d83a 	srl	r3,r2,r16
 5084fd4:	41005026 	beq	r8,r4,5085118 <__adddf3+0x55c>
 5084fd8:	01001004 	movi	r4,64
 5084fdc:	2211c83a 	sub	r8,r4,r8
 5084fe0:	1204983a 	sll	r2,r2,r8
 5084fe4:	88a2b03a 	or	r17,r17,r2
 5084fe8:	8822c03a 	cmpne	r17,r17,zero
 5084fec:	1c62b03a 	or	r17,r3,r17
 5084ff0:	0011883a 	mov	r8,zero
 5084ff4:	0021883a 	mov	r16,zero
 5084ff8:	003f7106 	br	5084dc0 <__alt_data_end+0xfffb6bc0>
 5084ffc:	193ff804 	addi	r4,r3,-32
 5085000:	00800804 	movi	r2,32
 5085004:	4908d83a 	srl	r4,r9,r4
 5085008:	18804526 	beq	r3,r2,5085120 <__adddf3+0x564>
 508500c:	00801004 	movi	r2,64
 5085010:	10c5c83a 	sub	r2,r2,r3
 5085014:	4886983a 	sll	r3,r9,r2
 5085018:	198cb03a 	or	r6,r3,r6
 508501c:	300cc03a 	cmpne	r6,r6,zero
 5085020:	218cb03a 	or	r6,r4,r6
 5085024:	0007883a 	mov	r3,zero
 5085028:	003f3b06 	br	5084d18 <__alt_data_end+0xfffb6b18>
 508502c:	80002a26 	beq	r16,zero,50850d8 <__adddf3+0x51c>
 5085030:	0101ffc4 	movi	r4,2047
 5085034:	11006826 	beq	r2,r4,50851d8 <__adddf3+0x61c>
 5085038:	00c7c83a 	sub	r3,zero,r3
 508503c:	42002034 	orhi	r8,r8,128
 5085040:	01000e04 	movi	r4,56
 5085044:	20c07c16 	blt	r4,r3,5085238 <__adddf3+0x67c>
 5085048:	010007c4 	movi	r4,31
 508504c:	20c0da16 	blt	r4,r3,50853b8 <__adddf3+0x7fc>
 5085050:	01000804 	movi	r4,32
 5085054:	20c9c83a 	sub	r4,r4,r3
 5085058:	4114983a 	sll	r10,r8,r4
 508505c:	88cad83a 	srl	r5,r17,r3
 5085060:	8908983a 	sll	r4,r17,r4
 5085064:	40c6d83a 	srl	r3,r8,r3
 5085068:	5162b03a 	or	r17,r10,r5
 508506c:	2008c03a 	cmpne	r4,r4,zero
 5085070:	8922b03a 	or	r17,r17,r4
 5085074:	3463c83a 	sub	r17,r6,r17
 5085078:	48c7c83a 	sub	r3,r9,r3
 508507c:	344d803a 	cmpltu	r6,r6,r17
 5085080:	1991c83a 	sub	r8,r3,r6
 5085084:	1021883a 	mov	r16,r2
 5085088:	3825883a 	mov	r18,r7
 508508c:	003f2706 	br	5084d2c <__alt_data_end+0xfffb6b2c>
 5085090:	24d0b03a 	or	r8,r4,r19
 5085094:	40001b1e 	bne	r8,zero,5085104 <__adddf3+0x548>
 5085098:	0005883a 	mov	r2,zero
 508509c:	0007883a 	mov	r3,zero
 50850a0:	0021883a 	mov	r16,zero
 50850a4:	003f4d06 	br	5084ddc <__alt_data_end+0xfffb6bdc>
 50850a8:	008007c4 	movi	r2,31
 50850ac:	11003c16 	blt	r2,r4,50851a0 <__adddf3+0x5e4>
 50850b0:	00800804 	movi	r2,32
 50850b4:	1105c83a 	sub	r2,r2,r4
 50850b8:	488e983a 	sll	r7,r9,r2
 50850bc:	310ad83a 	srl	r5,r6,r4
 50850c0:	3084983a 	sll	r2,r6,r2
 50850c4:	4912d83a 	srl	r9,r9,r4
 50850c8:	394ab03a 	or	r5,r7,r5
 50850cc:	1004c03a 	cmpne	r2,r2,zero
 50850d0:	288ab03a 	or	r5,r5,r2
 50850d4:	003f5306 	br	5084e24 <__alt_data_end+0xfffb6c24>
 50850d8:	4448b03a 	or	r4,r8,r17
 50850dc:	20003e26 	beq	r4,zero,50851d8 <__adddf3+0x61c>
 50850e0:	00c6303a 	nor	r3,zero,r3
 50850e4:	18003a1e 	bne	r3,zero,50851d0 <__adddf3+0x614>
 50850e8:	3463c83a 	sub	r17,r6,r17
 50850ec:	4a07c83a 	sub	r3,r9,r8
 50850f0:	344d803a 	cmpltu	r6,r6,r17
 50850f4:	1991c83a 	sub	r8,r3,r6
 50850f8:	1021883a 	mov	r16,r2
 50850fc:	3825883a 	mov	r18,r7
 5085100:	003f0a06 	br	5084d2c <__alt_data_end+0xfffb6b2c>
 5085104:	2023883a 	mov	r17,r4
 5085108:	003f0d06 	br	5084d40 <__alt_data_end+0xfffb6b40>
 508510c:	0081ffc4 	movi	r2,2047
 5085110:	80bf3f1e 	bne	r16,r2,5084e10 <__alt_data_end+0xfffb6c10>
 5085114:	003ec806 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5085118:	0005883a 	mov	r2,zero
 508511c:	003fb106 	br	5084fe4 <__alt_data_end+0xfffb6de4>
 5085120:	0007883a 	mov	r3,zero
 5085124:	003fbc06 	br	5085018 <__alt_data_end+0xfffb6e18>
 5085128:	4444b03a 	or	r2,r8,r17
 508512c:	8000871e 	bne	r16,zero,508534c <__adddf3+0x790>
 5085130:	1000ba26 	beq	r2,zero,508541c <__adddf3+0x860>
 5085134:	4984b03a 	or	r2,r9,r6
 5085138:	103ebf26 	beq	r2,zero,5084c38 <__alt_data_end+0xfffb6a38>
 508513c:	8985883a 	add	r2,r17,r6
 5085140:	4247883a 	add	r3,r8,r9
 5085144:	1451803a 	cmpltu	r8,r2,r17
 5085148:	40d1883a 	add	r8,r8,r3
 508514c:	40c0202c 	andhi	r3,r8,128
 5085150:	1023883a 	mov	r17,r2
 5085154:	183f1a26 	beq	r3,zero,5084dc0 <__alt_data_end+0xfffb6bc0>
 5085158:	00bfe034 	movhi	r2,65408
 508515c:	10bfffc4 	addi	r2,r2,-1
 5085160:	2021883a 	mov	r16,r4
 5085164:	4090703a 	and	r8,r8,r2
 5085168:	003eb306 	br	5084c38 <__alt_data_end+0xfffb6a38>
 508516c:	4444b03a 	or	r2,r8,r17
 5085170:	8000291e 	bne	r16,zero,5085218 <__adddf3+0x65c>
 5085174:	10004b1e 	bne	r2,zero,50852a4 <__adddf3+0x6e8>
 5085178:	4990b03a 	or	r8,r9,r6
 508517c:	40008b26 	beq	r8,zero,50853ac <__adddf3+0x7f0>
 5085180:	4811883a 	mov	r8,r9
 5085184:	3023883a 	mov	r17,r6
 5085188:	3825883a 	mov	r18,r7
 508518c:	003eaa06 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5085190:	1021883a 	mov	r16,r2
 5085194:	0011883a 	mov	r8,zero
 5085198:	0005883a 	mov	r2,zero
 508519c:	003f0f06 	br	5084ddc <__alt_data_end+0xfffb6bdc>
 50851a0:	217ff804 	addi	r5,r4,-32
 50851a4:	00800804 	movi	r2,32
 50851a8:	494ad83a 	srl	r5,r9,r5
 50851ac:	20807d26 	beq	r4,r2,50853a4 <__adddf3+0x7e8>
 50851b0:	00801004 	movi	r2,64
 50851b4:	1109c83a 	sub	r4,r2,r4
 50851b8:	4912983a 	sll	r9,r9,r4
 50851bc:	498cb03a 	or	r6,r9,r6
 50851c0:	300cc03a 	cmpne	r6,r6,zero
 50851c4:	298ab03a 	or	r5,r5,r6
 50851c8:	0013883a 	mov	r9,zero
 50851cc:	003f1506 	br	5084e24 <__alt_data_end+0xfffb6c24>
 50851d0:	0101ffc4 	movi	r4,2047
 50851d4:	113f9a1e 	bne	r2,r4,5085040 <__alt_data_end+0xfffb6e40>
 50851d8:	4811883a 	mov	r8,r9
 50851dc:	3023883a 	mov	r17,r6
 50851e0:	1021883a 	mov	r16,r2
 50851e4:	3825883a 	mov	r18,r7
 50851e8:	003e9306 	br	5084c38 <__alt_data_end+0xfffb6a38>
 50851ec:	8000161e 	bne	r16,zero,5085248 <__adddf3+0x68c>
 50851f0:	444ab03a 	or	r5,r8,r17
 50851f4:	28005126 	beq	r5,zero,508533c <__adddf3+0x780>
 50851f8:	0108303a 	nor	r4,zero,r4
 50851fc:	20004d1e 	bne	r4,zero,5085334 <__adddf3+0x778>
 5085200:	89a3883a 	add	r17,r17,r6
 5085204:	4253883a 	add	r9,r8,r9
 5085208:	898d803a 	cmpltu	r6,r17,r6
 508520c:	3251883a 	add	r8,r6,r9
 5085210:	1021883a 	mov	r16,r2
 5085214:	003f0806 	br	5084e38 <__alt_data_end+0xfffb6c38>
 5085218:	1000301e 	bne	r2,zero,50852dc <__adddf3+0x720>
 508521c:	4984b03a 	or	r2,r9,r6
 5085220:	10007126 	beq	r2,zero,50853e8 <__adddf3+0x82c>
 5085224:	4811883a 	mov	r8,r9
 5085228:	3023883a 	mov	r17,r6
 508522c:	3825883a 	mov	r18,r7
 5085230:	0401ffc4 	movi	r16,2047
 5085234:	003e8006 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5085238:	4462b03a 	or	r17,r8,r17
 508523c:	8822c03a 	cmpne	r17,r17,zero
 5085240:	0007883a 	mov	r3,zero
 5085244:	003f8b06 	br	5085074 <__alt_data_end+0xfffb6e74>
 5085248:	0141ffc4 	movi	r5,2047
 508524c:	11403b26 	beq	r2,r5,508533c <__adddf3+0x780>
 5085250:	0109c83a 	sub	r4,zero,r4
 5085254:	42002034 	orhi	r8,r8,128
 5085258:	01400e04 	movi	r5,56
 508525c:	29006716 	blt	r5,r4,50853fc <__adddf3+0x840>
 5085260:	014007c4 	movi	r5,31
 5085264:	29007016 	blt	r5,r4,5085428 <__adddf3+0x86c>
 5085268:	01400804 	movi	r5,32
 508526c:	290bc83a 	sub	r5,r5,r4
 5085270:	4154983a 	sll	r10,r8,r5
 5085274:	890ed83a 	srl	r7,r17,r4
 5085278:	894a983a 	sll	r5,r17,r5
 508527c:	4108d83a 	srl	r4,r8,r4
 5085280:	51e2b03a 	or	r17,r10,r7
 5085284:	280ac03a 	cmpne	r5,r5,zero
 5085288:	8962b03a 	or	r17,r17,r5
 508528c:	89a3883a 	add	r17,r17,r6
 5085290:	2253883a 	add	r9,r4,r9
 5085294:	898d803a 	cmpltu	r6,r17,r6
 5085298:	3251883a 	add	r8,r6,r9
 508529c:	1021883a 	mov	r16,r2
 50852a0:	003ee506 	br	5084e38 <__alt_data_end+0xfffb6c38>
 50852a4:	4984b03a 	or	r2,r9,r6
 50852a8:	103e6326 	beq	r2,zero,5084c38 <__alt_data_end+0xfffb6a38>
 50852ac:	8987c83a 	sub	r3,r17,r6
 50852b0:	88c9803a 	cmpltu	r4,r17,r3
 50852b4:	4245c83a 	sub	r2,r8,r9
 50852b8:	1105c83a 	sub	r2,r2,r4
 50852bc:	1100202c 	andhi	r4,r2,128
 50852c0:	203ebb26 	beq	r4,zero,5084db0 <__alt_data_end+0xfffb6bb0>
 50852c4:	3463c83a 	sub	r17,r6,r17
 50852c8:	4a07c83a 	sub	r3,r9,r8
 50852cc:	344d803a 	cmpltu	r6,r6,r17
 50852d0:	1991c83a 	sub	r8,r3,r6
 50852d4:	3825883a 	mov	r18,r7
 50852d8:	003e5706 	br	5084c38 <__alt_data_end+0xfffb6a38>
 50852dc:	4984b03a 	or	r2,r9,r6
 50852e0:	10002e26 	beq	r2,zero,508539c <__adddf3+0x7e0>
 50852e4:	4004d0fa 	srli	r2,r8,3
 50852e8:	8822d0fa 	srli	r17,r17,3
 50852ec:	4010977a 	slli	r8,r8,29
 50852f0:	10c0022c 	andhi	r3,r2,8
 50852f4:	4462b03a 	or	r17,r8,r17
 50852f8:	18000826 	beq	r3,zero,508531c <__adddf3+0x760>
 50852fc:	4808d0fa 	srli	r4,r9,3
 5085300:	20c0022c 	andhi	r3,r4,8
 5085304:	1800051e 	bne	r3,zero,508531c <__adddf3+0x760>
 5085308:	300cd0fa 	srli	r6,r6,3
 508530c:	4806977a 	slli	r3,r9,29
 5085310:	2005883a 	mov	r2,r4
 5085314:	3825883a 	mov	r18,r7
 5085318:	19a2b03a 	or	r17,r3,r6
 508531c:	8810d77a 	srli	r8,r17,29
 5085320:	100490fa 	slli	r2,r2,3
 5085324:	882290fa 	slli	r17,r17,3
 5085328:	0401ffc4 	movi	r16,2047
 508532c:	4090b03a 	or	r8,r8,r2
 5085330:	003e4106 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5085334:	0141ffc4 	movi	r5,2047
 5085338:	117fc71e 	bne	r2,r5,5085258 <__alt_data_end+0xfffb7058>
 508533c:	4811883a 	mov	r8,r9
 5085340:	3023883a 	mov	r17,r6
 5085344:	1021883a 	mov	r16,r2
 5085348:	003e3b06 	br	5084c38 <__alt_data_end+0xfffb6a38>
 508534c:	10002f26 	beq	r2,zero,508540c <__adddf3+0x850>
 5085350:	4984b03a 	or	r2,r9,r6
 5085354:	10001126 	beq	r2,zero,508539c <__adddf3+0x7e0>
 5085358:	4004d0fa 	srli	r2,r8,3
 508535c:	8822d0fa 	srli	r17,r17,3
 5085360:	4010977a 	slli	r8,r8,29
 5085364:	10c0022c 	andhi	r3,r2,8
 5085368:	4462b03a 	or	r17,r8,r17
 508536c:	183feb26 	beq	r3,zero,508531c <__alt_data_end+0xfffb711c>
 5085370:	4808d0fa 	srli	r4,r9,3
 5085374:	20c0022c 	andhi	r3,r4,8
 5085378:	183fe81e 	bne	r3,zero,508531c <__alt_data_end+0xfffb711c>
 508537c:	300cd0fa 	srli	r6,r6,3
 5085380:	4806977a 	slli	r3,r9,29
 5085384:	2005883a 	mov	r2,r4
 5085388:	19a2b03a 	or	r17,r3,r6
 508538c:	003fe306 	br	508531c <__alt_data_end+0xfffb711c>
 5085390:	0011883a 	mov	r8,zero
 5085394:	0005883a 	mov	r2,zero
 5085398:	003e3f06 	br	5084c98 <__alt_data_end+0xfffb6a98>
 508539c:	0401ffc4 	movi	r16,2047
 50853a0:	003e2506 	br	5084c38 <__alt_data_end+0xfffb6a38>
 50853a4:	0013883a 	mov	r9,zero
 50853a8:	003f8406 	br	50851bc <__alt_data_end+0xfffb6fbc>
 50853ac:	0005883a 	mov	r2,zero
 50853b0:	0007883a 	mov	r3,zero
 50853b4:	003e8906 	br	5084ddc <__alt_data_end+0xfffb6bdc>
 50853b8:	197ff804 	addi	r5,r3,-32
 50853bc:	01000804 	movi	r4,32
 50853c0:	414ad83a 	srl	r5,r8,r5
 50853c4:	19002426 	beq	r3,r4,5085458 <__adddf3+0x89c>
 50853c8:	01001004 	movi	r4,64
 50853cc:	20c7c83a 	sub	r3,r4,r3
 50853d0:	40c6983a 	sll	r3,r8,r3
 50853d4:	1c46b03a 	or	r3,r3,r17
 50853d8:	1806c03a 	cmpne	r3,r3,zero
 50853dc:	28e2b03a 	or	r17,r5,r3
 50853e0:	0007883a 	mov	r3,zero
 50853e4:	003f2306 	br	5085074 <__alt_data_end+0xfffb6e74>
 50853e8:	0007883a 	mov	r3,zero
 50853ec:	5811883a 	mov	r8,r11
 50853f0:	00bfffc4 	movi	r2,-1
 50853f4:	0401ffc4 	movi	r16,2047
 50853f8:	003e7806 	br	5084ddc <__alt_data_end+0xfffb6bdc>
 50853fc:	4462b03a 	or	r17,r8,r17
 5085400:	8822c03a 	cmpne	r17,r17,zero
 5085404:	0009883a 	mov	r4,zero
 5085408:	003fa006 	br	508528c <__alt_data_end+0xfffb708c>
 508540c:	4811883a 	mov	r8,r9
 5085410:	3023883a 	mov	r17,r6
 5085414:	0401ffc4 	movi	r16,2047
 5085418:	003e0706 	br	5084c38 <__alt_data_end+0xfffb6a38>
 508541c:	4811883a 	mov	r8,r9
 5085420:	3023883a 	mov	r17,r6
 5085424:	003e0406 	br	5084c38 <__alt_data_end+0xfffb6a38>
 5085428:	21fff804 	addi	r7,r4,-32
 508542c:	01400804 	movi	r5,32
 5085430:	41ced83a 	srl	r7,r8,r7
 5085434:	21400a26 	beq	r4,r5,5085460 <__adddf3+0x8a4>
 5085438:	01401004 	movi	r5,64
 508543c:	2909c83a 	sub	r4,r5,r4
 5085440:	4108983a 	sll	r4,r8,r4
 5085444:	2448b03a 	or	r4,r4,r17
 5085448:	2008c03a 	cmpne	r4,r4,zero
 508544c:	3922b03a 	or	r17,r7,r4
 5085450:	0009883a 	mov	r4,zero
 5085454:	003f8d06 	br	508528c <__alt_data_end+0xfffb708c>
 5085458:	0007883a 	mov	r3,zero
 508545c:	003fdd06 	br	50853d4 <__alt_data_end+0xfffb71d4>
 5085460:	0009883a 	mov	r4,zero
 5085464:	003ff706 	br	5085444 <__alt_data_end+0xfffb7244>

05085468 <__divdf3>:
 5085468:	defff204 	addi	sp,sp,-56
 508546c:	dd400915 	stw	r21,36(sp)
 5085470:	282ad53a 	srli	r21,r5,20
 5085474:	dd000815 	stw	r20,32(sp)
 5085478:	2828d7fa 	srli	r20,r5,31
 508547c:	dc000415 	stw	r16,16(sp)
 5085480:	04000434 	movhi	r16,16
 5085484:	df000c15 	stw	fp,48(sp)
 5085488:	843fffc4 	addi	r16,r16,-1
 508548c:	dfc00d15 	stw	ra,52(sp)
 5085490:	ddc00b15 	stw	r23,44(sp)
 5085494:	dd800a15 	stw	r22,40(sp)
 5085498:	dcc00715 	stw	r19,28(sp)
 508549c:	dc800615 	stw	r18,24(sp)
 50854a0:	dc400515 	stw	r17,20(sp)
 50854a4:	ad41ffcc 	andi	r21,r21,2047
 50854a8:	2c20703a 	and	r16,r5,r16
 50854ac:	a7003fcc 	andi	fp,r20,255
 50854b0:	a8006126 	beq	r21,zero,5085638 <__divdf3+0x1d0>
 50854b4:	0081ffc4 	movi	r2,2047
 50854b8:	2025883a 	mov	r18,r4
 50854bc:	a8803726 	beq	r21,r2,508559c <__divdf3+0x134>
 50854c0:	80800434 	orhi	r2,r16,16
 50854c4:	100490fa 	slli	r2,r2,3
 50854c8:	2020d77a 	srli	r16,r4,29
 50854cc:	202490fa 	slli	r18,r4,3
 50854d0:	ad7f0044 	addi	r21,r21,-1023
 50854d4:	80a0b03a 	or	r16,r16,r2
 50854d8:	0027883a 	mov	r19,zero
 50854dc:	0013883a 	mov	r9,zero
 50854e0:	3804d53a 	srli	r2,r7,20
 50854e4:	382cd7fa 	srli	r22,r7,31
 50854e8:	04400434 	movhi	r17,16
 50854ec:	8c7fffc4 	addi	r17,r17,-1
 50854f0:	1081ffcc 	andi	r2,r2,2047
 50854f4:	3011883a 	mov	r8,r6
 50854f8:	3c62703a 	and	r17,r7,r17
 50854fc:	b5c03fcc 	andi	r23,r22,255
 5085500:	10006c26 	beq	r2,zero,50856b4 <__divdf3+0x24c>
 5085504:	00c1ffc4 	movi	r3,2047
 5085508:	10c06426 	beq	r2,r3,508569c <__divdf3+0x234>
 508550c:	88c00434 	orhi	r3,r17,16
 5085510:	180690fa 	slli	r3,r3,3
 5085514:	3022d77a 	srli	r17,r6,29
 5085518:	301090fa 	slli	r8,r6,3
 508551c:	10bf0044 	addi	r2,r2,-1023
 5085520:	88e2b03a 	or	r17,r17,r3
 5085524:	000f883a 	mov	r7,zero
 5085528:	a58cf03a 	xor	r6,r20,r22
 508552c:	3cc8b03a 	or	r4,r7,r19
 5085530:	a8abc83a 	sub	r21,r21,r2
 5085534:	008003c4 	movi	r2,15
 5085538:	3007883a 	mov	r3,r6
 508553c:	34c03fcc 	andi	r19,r6,255
 5085540:	11009036 	bltu	r2,r4,5085784 <__divdf3+0x31c>
 5085544:	200890ba 	slli	r4,r4,2
 5085548:	00814234 	movhi	r2,1288
 508554c:	10955704 	addi	r2,r2,21852
 5085550:	2089883a 	add	r4,r4,r2
 5085554:	20800017 	ldw	r2,0(r4)
 5085558:	1000683a 	jmp	r2
 508555c:	05085784 	movi	r20,8542
 5085560:	050855d4 	movui	r20,8535
 5085564:	05085774 	movhi	r20,8541
 5085568:	050855c8 	cmpgei	r20,zero,8535
 508556c:	05085774 	movhi	r20,8541
 5085570:	05085748 	cmpgei	r20,zero,8541
 5085574:	05085774 	movhi	r20,8541
 5085578:	050855c8 	cmpgei	r20,zero,8535
 508557c:	050855d4 	movui	r20,8535
 5085580:	050855d4 	movui	r20,8535
 5085584:	05085748 	cmpgei	r20,zero,8541
 5085588:	050855c8 	cmpgei	r20,zero,8535
 508558c:	050855b8 	rdprs	r20,zero,8534
 5085590:	050855b8 	rdprs	r20,zero,8534
 5085594:	050855b8 	rdprs	r20,zero,8534
 5085598:	05085a68 	cmpgeui	r20,zero,8553
 508559c:	2404b03a 	or	r2,r4,r16
 50855a0:	1000661e 	bne	r2,zero,508573c <__divdf3+0x2d4>
 50855a4:	04c00204 	movi	r19,8
 50855a8:	0021883a 	mov	r16,zero
 50855ac:	0025883a 	mov	r18,zero
 50855b0:	02400084 	movi	r9,2
 50855b4:	003fca06 	br	50854e0 <__alt_data_end+0xfffb72e0>
 50855b8:	8023883a 	mov	r17,r16
 50855bc:	9011883a 	mov	r8,r18
 50855c0:	e02f883a 	mov	r23,fp
 50855c4:	480f883a 	mov	r7,r9
 50855c8:	00800084 	movi	r2,2
 50855cc:	3881311e 	bne	r7,r2,5085a94 <__divdf3+0x62c>
 50855d0:	b827883a 	mov	r19,r23
 50855d4:	98c0004c 	andi	r3,r19,1
 50855d8:	0081ffc4 	movi	r2,2047
 50855dc:	000b883a 	mov	r5,zero
 50855e0:	0025883a 	mov	r18,zero
 50855e4:	1004953a 	slli	r2,r2,20
 50855e8:	18c03fcc 	andi	r3,r3,255
 50855ec:	04400434 	movhi	r17,16
 50855f0:	8c7fffc4 	addi	r17,r17,-1
 50855f4:	180697fa 	slli	r3,r3,31
 50855f8:	2c4a703a 	and	r5,r5,r17
 50855fc:	288ab03a 	or	r5,r5,r2
 5085600:	28c6b03a 	or	r3,r5,r3
 5085604:	9005883a 	mov	r2,r18
 5085608:	dfc00d17 	ldw	ra,52(sp)
 508560c:	df000c17 	ldw	fp,48(sp)
 5085610:	ddc00b17 	ldw	r23,44(sp)
 5085614:	dd800a17 	ldw	r22,40(sp)
 5085618:	dd400917 	ldw	r21,36(sp)
 508561c:	dd000817 	ldw	r20,32(sp)
 5085620:	dcc00717 	ldw	r19,28(sp)
 5085624:	dc800617 	ldw	r18,24(sp)
 5085628:	dc400517 	ldw	r17,20(sp)
 508562c:	dc000417 	ldw	r16,16(sp)
 5085630:	dec00e04 	addi	sp,sp,56
 5085634:	f800283a 	ret
 5085638:	2404b03a 	or	r2,r4,r16
 508563c:	2027883a 	mov	r19,r4
 5085640:	10003926 	beq	r2,zero,5085728 <__divdf3+0x2c0>
 5085644:	80012e26 	beq	r16,zero,5085b00 <__divdf3+0x698>
 5085648:	8009883a 	mov	r4,r16
 508564c:	d9800315 	stw	r6,12(sp)
 5085650:	d9c00215 	stw	r7,8(sp)
 5085654:	50871180 	call	5087118 <__clzsi2>
 5085658:	d9800317 	ldw	r6,12(sp)
 508565c:	d9c00217 	ldw	r7,8(sp)
 5085660:	113ffd44 	addi	r4,r2,-11
 5085664:	00c00704 	movi	r3,28
 5085668:	19012116 	blt	r3,r4,5085af0 <__divdf3+0x688>
 508566c:	00c00744 	movi	r3,29
 5085670:	147ffe04 	addi	r17,r2,-8
 5085674:	1907c83a 	sub	r3,r3,r4
 5085678:	8460983a 	sll	r16,r16,r17
 508567c:	98c6d83a 	srl	r3,r19,r3
 5085680:	9c64983a 	sll	r18,r19,r17
 5085684:	1c20b03a 	or	r16,r3,r16
 5085688:	1080fcc4 	addi	r2,r2,1011
 508568c:	00abc83a 	sub	r21,zero,r2
 5085690:	0027883a 	mov	r19,zero
 5085694:	0013883a 	mov	r9,zero
 5085698:	003f9106 	br	50854e0 <__alt_data_end+0xfffb72e0>
 508569c:	3446b03a 	or	r3,r6,r17
 50856a0:	18001f1e 	bne	r3,zero,5085720 <__divdf3+0x2b8>
 50856a4:	0023883a 	mov	r17,zero
 50856a8:	0011883a 	mov	r8,zero
 50856ac:	01c00084 	movi	r7,2
 50856b0:	003f9d06 	br	5085528 <__alt_data_end+0xfffb7328>
 50856b4:	3446b03a 	or	r3,r6,r17
 50856b8:	18001526 	beq	r3,zero,5085710 <__divdf3+0x2a8>
 50856bc:	88011b26 	beq	r17,zero,5085b2c <__divdf3+0x6c4>
 50856c0:	8809883a 	mov	r4,r17
 50856c4:	d9800315 	stw	r6,12(sp)
 50856c8:	da400115 	stw	r9,4(sp)
 50856cc:	50871180 	call	5087118 <__clzsi2>
 50856d0:	d9800317 	ldw	r6,12(sp)
 50856d4:	da400117 	ldw	r9,4(sp)
 50856d8:	113ffd44 	addi	r4,r2,-11
 50856dc:	00c00704 	movi	r3,28
 50856e0:	19010e16 	blt	r3,r4,5085b1c <__divdf3+0x6b4>
 50856e4:	00c00744 	movi	r3,29
 50856e8:	123ffe04 	addi	r8,r2,-8
 50856ec:	1907c83a 	sub	r3,r3,r4
 50856f0:	8a22983a 	sll	r17,r17,r8
 50856f4:	30c6d83a 	srl	r3,r6,r3
 50856f8:	3210983a 	sll	r8,r6,r8
 50856fc:	1c62b03a 	or	r17,r3,r17
 5085700:	1080fcc4 	addi	r2,r2,1011
 5085704:	0085c83a 	sub	r2,zero,r2
 5085708:	000f883a 	mov	r7,zero
 508570c:	003f8606 	br	5085528 <__alt_data_end+0xfffb7328>
 5085710:	0023883a 	mov	r17,zero
 5085714:	0011883a 	mov	r8,zero
 5085718:	01c00044 	movi	r7,1
 508571c:	003f8206 	br	5085528 <__alt_data_end+0xfffb7328>
 5085720:	01c000c4 	movi	r7,3
 5085724:	003f8006 	br	5085528 <__alt_data_end+0xfffb7328>
 5085728:	04c00104 	movi	r19,4
 508572c:	0021883a 	mov	r16,zero
 5085730:	0025883a 	mov	r18,zero
 5085734:	02400044 	movi	r9,1
 5085738:	003f6906 	br	50854e0 <__alt_data_end+0xfffb72e0>
 508573c:	04c00304 	movi	r19,12
 5085740:	024000c4 	movi	r9,3
 5085744:	003f6606 	br	50854e0 <__alt_data_end+0xfffb72e0>
 5085748:	01400434 	movhi	r5,16
 508574c:	0007883a 	mov	r3,zero
 5085750:	297fffc4 	addi	r5,r5,-1
 5085754:	04bfffc4 	movi	r18,-1
 5085758:	0081ffc4 	movi	r2,2047
 508575c:	003fa106 	br	50855e4 <__alt_data_end+0xfffb73e4>
 5085760:	00c00044 	movi	r3,1
 5085764:	1887c83a 	sub	r3,r3,r2
 5085768:	01000e04 	movi	r4,56
 508576c:	20c1210e 	bge	r4,r3,5085bf4 <__divdf3+0x78c>
 5085770:	98c0004c 	andi	r3,r19,1
 5085774:	0005883a 	mov	r2,zero
 5085778:	000b883a 	mov	r5,zero
 508577c:	0025883a 	mov	r18,zero
 5085780:	003f9806 	br	50855e4 <__alt_data_end+0xfffb73e4>
 5085784:	8c00fd36 	bltu	r17,r16,5085b7c <__divdf3+0x714>
 5085788:	8440fb26 	beq	r16,r17,5085b78 <__divdf3+0x710>
 508578c:	8007883a 	mov	r3,r16
 5085790:	ad7fffc4 	addi	r21,r21,-1
 5085794:	0021883a 	mov	r16,zero
 5085798:	4004d63a 	srli	r2,r8,24
 508579c:	8822923a 	slli	r17,r17,8
 50857a0:	1809883a 	mov	r4,r3
 50857a4:	402c923a 	slli	r22,r8,8
 50857a8:	88b8b03a 	or	fp,r17,r2
 50857ac:	e028d43a 	srli	r20,fp,16
 50857b0:	d8c00015 	stw	r3,0(sp)
 50857b4:	e5ffffcc 	andi	r23,fp,65535
 50857b8:	a00b883a 	mov	r5,r20
 50857bc:	5084b000 	call	5084b00 <__udivsi3>
 50857c0:	d8c00017 	ldw	r3,0(sp)
 50857c4:	a00b883a 	mov	r5,r20
 50857c8:	d8800315 	stw	r2,12(sp)
 50857cc:	1809883a 	mov	r4,r3
 50857d0:	5084b640 	call	5084b64 <__umodsi3>
 50857d4:	d9800317 	ldw	r6,12(sp)
 50857d8:	1006943a 	slli	r3,r2,16
 50857dc:	9004d43a 	srli	r2,r18,16
 50857e0:	b9a3383a 	mul	r17,r23,r6
 50857e4:	10c4b03a 	or	r2,r2,r3
 50857e8:	1440062e 	bgeu	r2,r17,5085804 <__divdf3+0x39c>
 50857ec:	1705883a 	add	r2,r2,fp
 50857f0:	30ffffc4 	addi	r3,r6,-1
 50857f4:	1700ee36 	bltu	r2,fp,5085bb0 <__divdf3+0x748>
 50857f8:	1440ed2e 	bgeu	r2,r17,5085bb0 <__divdf3+0x748>
 50857fc:	31bfff84 	addi	r6,r6,-2
 5085800:	1705883a 	add	r2,r2,fp
 5085804:	1463c83a 	sub	r17,r2,r17
 5085808:	a00b883a 	mov	r5,r20
 508580c:	8809883a 	mov	r4,r17
 5085810:	d9800315 	stw	r6,12(sp)
 5085814:	5084b000 	call	5084b00 <__udivsi3>
 5085818:	a00b883a 	mov	r5,r20
 508581c:	8809883a 	mov	r4,r17
 5085820:	d8800215 	stw	r2,8(sp)
 5085824:	5084b640 	call	5084b64 <__umodsi3>
 5085828:	d9c00217 	ldw	r7,8(sp)
 508582c:	1004943a 	slli	r2,r2,16
 5085830:	94bfffcc 	andi	r18,r18,65535
 5085834:	b9d1383a 	mul	r8,r23,r7
 5085838:	90a4b03a 	or	r18,r18,r2
 508583c:	d9800317 	ldw	r6,12(sp)
 5085840:	9200062e 	bgeu	r18,r8,508585c <__divdf3+0x3f4>
 5085844:	9725883a 	add	r18,r18,fp
 5085848:	38bfffc4 	addi	r2,r7,-1
 508584c:	9700d636 	bltu	r18,fp,5085ba8 <__divdf3+0x740>
 5085850:	9200d52e 	bgeu	r18,r8,5085ba8 <__divdf3+0x740>
 5085854:	39ffff84 	addi	r7,r7,-2
 5085858:	9725883a 	add	r18,r18,fp
 508585c:	3004943a 	slli	r2,r6,16
 5085860:	b012d43a 	srli	r9,r22,16
 5085864:	b1bfffcc 	andi	r6,r22,65535
 5085868:	11e2b03a 	or	r17,r2,r7
 508586c:	8806d43a 	srli	r3,r17,16
 5085870:	893fffcc 	andi	r4,r17,65535
 5085874:	218b383a 	mul	r5,r4,r6
 5085878:	30c5383a 	mul	r2,r6,r3
 508587c:	2249383a 	mul	r4,r4,r9
 5085880:	280ed43a 	srli	r7,r5,16
 5085884:	9225c83a 	sub	r18,r18,r8
 5085888:	2089883a 	add	r4,r4,r2
 508588c:	3909883a 	add	r4,r7,r4
 5085890:	1a47383a 	mul	r3,r3,r9
 5085894:	2080022e 	bgeu	r4,r2,50858a0 <__divdf3+0x438>
 5085898:	00800074 	movhi	r2,1
 508589c:	1887883a 	add	r3,r3,r2
 50858a0:	2004d43a 	srli	r2,r4,16
 50858a4:	2008943a 	slli	r4,r4,16
 50858a8:	297fffcc 	andi	r5,r5,65535
 50858ac:	10c7883a 	add	r3,r2,r3
 50858b0:	2149883a 	add	r4,r4,r5
 50858b4:	90c0a536 	bltu	r18,r3,5085b4c <__divdf3+0x6e4>
 50858b8:	90c0bf26 	beq	r18,r3,5085bb8 <__divdf3+0x750>
 50858bc:	90c7c83a 	sub	r3,r18,r3
 50858c0:	810fc83a 	sub	r7,r16,r4
 50858c4:	81e5803a 	cmpltu	r18,r16,r7
 50858c8:	1ca5c83a 	sub	r18,r3,r18
 50858cc:	e480c126 	beq	fp,r18,5085bd4 <__divdf3+0x76c>
 50858d0:	a00b883a 	mov	r5,r20
 50858d4:	9009883a 	mov	r4,r18
 50858d8:	d9800315 	stw	r6,12(sp)
 50858dc:	d9c00215 	stw	r7,8(sp)
 50858e0:	da400115 	stw	r9,4(sp)
 50858e4:	5084b000 	call	5084b00 <__udivsi3>
 50858e8:	a00b883a 	mov	r5,r20
 50858ec:	9009883a 	mov	r4,r18
 50858f0:	d8800015 	stw	r2,0(sp)
 50858f4:	5084b640 	call	5084b64 <__umodsi3>
 50858f8:	d9c00217 	ldw	r7,8(sp)
 50858fc:	da000017 	ldw	r8,0(sp)
 5085900:	1006943a 	slli	r3,r2,16
 5085904:	3804d43a 	srli	r2,r7,16
 5085908:	ba21383a 	mul	r16,r23,r8
 508590c:	d9800317 	ldw	r6,12(sp)
 5085910:	10c4b03a 	or	r2,r2,r3
 5085914:	da400117 	ldw	r9,4(sp)
 5085918:	1400062e 	bgeu	r2,r16,5085934 <__divdf3+0x4cc>
 508591c:	1705883a 	add	r2,r2,fp
 5085920:	40ffffc4 	addi	r3,r8,-1
 5085924:	1700ad36 	bltu	r2,fp,5085bdc <__divdf3+0x774>
 5085928:	1400ac2e 	bgeu	r2,r16,5085bdc <__divdf3+0x774>
 508592c:	423fff84 	addi	r8,r8,-2
 5085930:	1705883a 	add	r2,r2,fp
 5085934:	1421c83a 	sub	r16,r2,r16
 5085938:	a00b883a 	mov	r5,r20
 508593c:	8009883a 	mov	r4,r16
 5085940:	d9800315 	stw	r6,12(sp)
 5085944:	d9c00215 	stw	r7,8(sp)
 5085948:	da000015 	stw	r8,0(sp)
 508594c:	da400115 	stw	r9,4(sp)
 5085950:	5084b000 	call	5084b00 <__udivsi3>
 5085954:	8009883a 	mov	r4,r16
 5085958:	a00b883a 	mov	r5,r20
 508595c:	1025883a 	mov	r18,r2
 5085960:	5084b640 	call	5084b64 <__umodsi3>
 5085964:	d9c00217 	ldw	r7,8(sp)
 5085968:	1004943a 	slli	r2,r2,16
 508596c:	bcaf383a 	mul	r23,r23,r18
 5085970:	393fffcc 	andi	r4,r7,65535
 5085974:	2088b03a 	or	r4,r4,r2
 5085978:	d9800317 	ldw	r6,12(sp)
 508597c:	da000017 	ldw	r8,0(sp)
 5085980:	da400117 	ldw	r9,4(sp)
 5085984:	25c0062e 	bgeu	r4,r23,50859a0 <__divdf3+0x538>
 5085988:	2709883a 	add	r4,r4,fp
 508598c:	90bfffc4 	addi	r2,r18,-1
 5085990:	27009436 	bltu	r4,fp,5085be4 <__divdf3+0x77c>
 5085994:	25c0932e 	bgeu	r4,r23,5085be4 <__divdf3+0x77c>
 5085998:	94bfff84 	addi	r18,r18,-2
 508599c:	2709883a 	add	r4,r4,fp
 50859a0:	4004943a 	slli	r2,r8,16
 50859a4:	25efc83a 	sub	r23,r4,r23
 50859a8:	1490b03a 	or	r8,r2,r18
 50859ac:	4008d43a 	srli	r4,r8,16
 50859b0:	40ffffcc 	andi	r3,r8,65535
 50859b4:	30c5383a 	mul	r2,r6,r3
 50859b8:	1a47383a 	mul	r3,r3,r9
 50859bc:	310d383a 	mul	r6,r6,r4
 50859c0:	100ad43a 	srli	r5,r2,16
 50859c4:	4913383a 	mul	r9,r9,r4
 50859c8:	1987883a 	add	r3,r3,r6
 50859cc:	28c7883a 	add	r3,r5,r3
 50859d0:	1980022e 	bgeu	r3,r6,50859dc <__divdf3+0x574>
 50859d4:	01000074 	movhi	r4,1
 50859d8:	4913883a 	add	r9,r9,r4
 50859dc:	1808d43a 	srli	r4,r3,16
 50859e0:	1806943a 	slli	r3,r3,16
 50859e4:	10bfffcc 	andi	r2,r2,65535
 50859e8:	2253883a 	add	r9,r4,r9
 50859ec:	1887883a 	add	r3,r3,r2
 50859f0:	ba403836 	bltu	r23,r9,5085ad4 <__divdf3+0x66c>
 50859f4:	ba403626 	beq	r23,r9,5085ad0 <__divdf3+0x668>
 50859f8:	42000054 	ori	r8,r8,1
 50859fc:	a880ffc4 	addi	r2,r21,1023
 5085a00:	00bf570e 	bge	zero,r2,5085760 <__alt_data_end+0xfffb7560>
 5085a04:	40c001cc 	andi	r3,r8,7
 5085a08:	18000726 	beq	r3,zero,5085a28 <__divdf3+0x5c0>
 5085a0c:	40c003cc 	andi	r3,r8,15
 5085a10:	01000104 	movi	r4,4
 5085a14:	19000426 	beq	r3,r4,5085a28 <__divdf3+0x5c0>
 5085a18:	4107883a 	add	r3,r8,r4
 5085a1c:	1a11803a 	cmpltu	r8,r3,r8
 5085a20:	8a23883a 	add	r17,r17,r8
 5085a24:	1811883a 	mov	r8,r3
 5085a28:	88c0402c 	andhi	r3,r17,256
 5085a2c:	18000426 	beq	r3,zero,5085a40 <__divdf3+0x5d8>
 5085a30:	00ffc034 	movhi	r3,65280
 5085a34:	18ffffc4 	addi	r3,r3,-1
 5085a38:	a8810004 	addi	r2,r21,1024
 5085a3c:	88e2703a 	and	r17,r17,r3
 5085a40:	00c1ff84 	movi	r3,2046
 5085a44:	18bee316 	blt	r3,r2,50855d4 <__alt_data_end+0xfffb73d4>
 5085a48:	8824977a 	slli	r18,r17,29
 5085a4c:	4010d0fa 	srli	r8,r8,3
 5085a50:	8822927a 	slli	r17,r17,9
 5085a54:	1081ffcc 	andi	r2,r2,2047
 5085a58:	9224b03a 	or	r18,r18,r8
 5085a5c:	880ad33a 	srli	r5,r17,12
 5085a60:	98c0004c 	andi	r3,r19,1
 5085a64:	003edf06 	br	50855e4 <__alt_data_end+0xfffb73e4>
 5085a68:	8080022c 	andhi	r2,r16,8
 5085a6c:	10001226 	beq	r2,zero,5085ab8 <__divdf3+0x650>
 5085a70:	8880022c 	andhi	r2,r17,8
 5085a74:	1000101e 	bne	r2,zero,5085ab8 <__divdf3+0x650>
 5085a78:	00800434 	movhi	r2,16
 5085a7c:	89400234 	orhi	r5,r17,8
 5085a80:	10bfffc4 	addi	r2,r2,-1
 5085a84:	b007883a 	mov	r3,r22
 5085a88:	288a703a 	and	r5,r5,r2
 5085a8c:	4025883a 	mov	r18,r8
 5085a90:	003f3106 	br	5085758 <__alt_data_end+0xfffb7558>
 5085a94:	008000c4 	movi	r2,3
 5085a98:	3880a626 	beq	r7,r2,5085d34 <__divdf3+0x8cc>
 5085a9c:	00800044 	movi	r2,1
 5085aa0:	3880521e 	bne	r7,r2,5085bec <__divdf3+0x784>
 5085aa4:	b807883a 	mov	r3,r23
 5085aa8:	0005883a 	mov	r2,zero
 5085aac:	000b883a 	mov	r5,zero
 5085ab0:	0025883a 	mov	r18,zero
 5085ab4:	003ecb06 	br	50855e4 <__alt_data_end+0xfffb73e4>
 5085ab8:	00800434 	movhi	r2,16
 5085abc:	81400234 	orhi	r5,r16,8
 5085ac0:	10bfffc4 	addi	r2,r2,-1
 5085ac4:	a007883a 	mov	r3,r20
 5085ac8:	288a703a 	and	r5,r5,r2
 5085acc:	003f2206 	br	5085758 <__alt_data_end+0xfffb7558>
 5085ad0:	183fca26 	beq	r3,zero,50859fc <__alt_data_end+0xfffb77fc>
 5085ad4:	e5ef883a 	add	r23,fp,r23
 5085ad8:	40bfffc4 	addi	r2,r8,-1
 5085adc:	bf00392e 	bgeu	r23,fp,5085bc4 <__divdf3+0x75c>
 5085ae0:	1011883a 	mov	r8,r2
 5085ae4:	ba7fc41e 	bne	r23,r9,50859f8 <__alt_data_end+0xfffb77f8>
 5085ae8:	b0ffc31e 	bne	r22,r3,50859f8 <__alt_data_end+0xfffb77f8>
 5085aec:	003fc306 	br	50859fc <__alt_data_end+0xfffb77fc>
 5085af0:	143ff604 	addi	r16,r2,-40
 5085af4:	9c20983a 	sll	r16,r19,r16
 5085af8:	0025883a 	mov	r18,zero
 5085afc:	003ee206 	br	5085688 <__alt_data_end+0xfffb7488>
 5085b00:	d9800315 	stw	r6,12(sp)
 5085b04:	d9c00215 	stw	r7,8(sp)
 5085b08:	50871180 	call	5087118 <__clzsi2>
 5085b0c:	10800804 	addi	r2,r2,32
 5085b10:	d9c00217 	ldw	r7,8(sp)
 5085b14:	d9800317 	ldw	r6,12(sp)
 5085b18:	003ed106 	br	5085660 <__alt_data_end+0xfffb7460>
 5085b1c:	147ff604 	addi	r17,r2,-40
 5085b20:	3462983a 	sll	r17,r6,r17
 5085b24:	0011883a 	mov	r8,zero
 5085b28:	003ef506 	br	5085700 <__alt_data_end+0xfffb7500>
 5085b2c:	3009883a 	mov	r4,r6
 5085b30:	d9800315 	stw	r6,12(sp)
 5085b34:	da400115 	stw	r9,4(sp)
 5085b38:	50871180 	call	5087118 <__clzsi2>
 5085b3c:	10800804 	addi	r2,r2,32
 5085b40:	da400117 	ldw	r9,4(sp)
 5085b44:	d9800317 	ldw	r6,12(sp)
 5085b48:	003ee306 	br	50856d8 <__alt_data_end+0xfffb74d8>
 5085b4c:	85a1883a 	add	r16,r16,r22
 5085b50:	8585803a 	cmpltu	r2,r16,r22
 5085b54:	1705883a 	add	r2,r2,fp
 5085b58:	14a5883a 	add	r18,r2,r18
 5085b5c:	88bfffc4 	addi	r2,r17,-1
 5085b60:	e4800c2e 	bgeu	fp,r18,5085b94 <__divdf3+0x72c>
 5085b64:	90c03e36 	bltu	r18,r3,5085c60 <__divdf3+0x7f8>
 5085b68:	1c806926 	beq	r3,r18,5085d10 <__divdf3+0x8a8>
 5085b6c:	90c7c83a 	sub	r3,r18,r3
 5085b70:	1023883a 	mov	r17,r2
 5085b74:	003f5206 	br	50858c0 <__alt_data_end+0xfffb76c0>
 5085b78:	923f0436 	bltu	r18,r8,508578c <__alt_data_end+0xfffb758c>
 5085b7c:	800897fa 	slli	r4,r16,31
 5085b80:	9004d07a 	srli	r2,r18,1
 5085b84:	8006d07a 	srli	r3,r16,1
 5085b88:	902097fa 	slli	r16,r18,31
 5085b8c:	20a4b03a 	or	r18,r4,r2
 5085b90:	003f0106 	br	5085798 <__alt_data_end+0xfffb7598>
 5085b94:	e4bff51e 	bne	fp,r18,5085b6c <__alt_data_end+0xfffb796c>
 5085b98:	85bff22e 	bgeu	r16,r22,5085b64 <__alt_data_end+0xfffb7964>
 5085b9c:	e0c7c83a 	sub	r3,fp,r3
 5085ba0:	1023883a 	mov	r17,r2
 5085ba4:	003f4606 	br	50858c0 <__alt_data_end+0xfffb76c0>
 5085ba8:	100f883a 	mov	r7,r2
 5085bac:	003f2b06 	br	508585c <__alt_data_end+0xfffb765c>
 5085bb0:	180d883a 	mov	r6,r3
 5085bb4:	003f1306 	br	5085804 <__alt_data_end+0xfffb7604>
 5085bb8:	813fe436 	bltu	r16,r4,5085b4c <__alt_data_end+0xfffb794c>
 5085bbc:	0007883a 	mov	r3,zero
 5085bc0:	003f3f06 	br	50858c0 <__alt_data_end+0xfffb76c0>
 5085bc4:	ba402c36 	bltu	r23,r9,5085c78 <__divdf3+0x810>
 5085bc8:	4dc05426 	beq	r9,r23,5085d1c <__divdf3+0x8b4>
 5085bcc:	1011883a 	mov	r8,r2
 5085bd0:	003f8906 	br	50859f8 <__alt_data_end+0xfffb77f8>
 5085bd4:	023fffc4 	movi	r8,-1
 5085bd8:	003f8806 	br	50859fc <__alt_data_end+0xfffb77fc>
 5085bdc:	1811883a 	mov	r8,r3
 5085be0:	003f5406 	br	5085934 <__alt_data_end+0xfffb7734>
 5085be4:	1025883a 	mov	r18,r2
 5085be8:	003f6d06 	br	50859a0 <__alt_data_end+0xfffb77a0>
 5085bec:	b827883a 	mov	r19,r23
 5085bf0:	003f8206 	br	50859fc <__alt_data_end+0xfffb77fc>
 5085bf4:	010007c4 	movi	r4,31
 5085bf8:	20c02616 	blt	r4,r3,5085c94 <__divdf3+0x82c>
 5085bfc:	00800804 	movi	r2,32
 5085c00:	10c5c83a 	sub	r2,r2,r3
 5085c04:	888a983a 	sll	r5,r17,r2
 5085c08:	40c8d83a 	srl	r4,r8,r3
 5085c0c:	4084983a 	sll	r2,r8,r2
 5085c10:	88e2d83a 	srl	r17,r17,r3
 5085c14:	2906b03a 	or	r3,r5,r4
 5085c18:	1004c03a 	cmpne	r2,r2,zero
 5085c1c:	1886b03a 	or	r3,r3,r2
 5085c20:	188001cc 	andi	r2,r3,7
 5085c24:	10000726 	beq	r2,zero,5085c44 <__divdf3+0x7dc>
 5085c28:	188003cc 	andi	r2,r3,15
 5085c2c:	01000104 	movi	r4,4
 5085c30:	11000426 	beq	r2,r4,5085c44 <__divdf3+0x7dc>
 5085c34:	1805883a 	mov	r2,r3
 5085c38:	10c00104 	addi	r3,r2,4
 5085c3c:	1885803a 	cmpltu	r2,r3,r2
 5085c40:	88a3883a 	add	r17,r17,r2
 5085c44:	8880202c 	andhi	r2,r17,128
 5085c48:	10002726 	beq	r2,zero,5085ce8 <__divdf3+0x880>
 5085c4c:	98c0004c 	andi	r3,r19,1
 5085c50:	00800044 	movi	r2,1
 5085c54:	000b883a 	mov	r5,zero
 5085c58:	0025883a 	mov	r18,zero
 5085c5c:	003e6106 	br	50855e4 <__alt_data_end+0xfffb73e4>
 5085c60:	85a1883a 	add	r16,r16,r22
 5085c64:	8585803a 	cmpltu	r2,r16,r22
 5085c68:	1705883a 	add	r2,r2,fp
 5085c6c:	14a5883a 	add	r18,r2,r18
 5085c70:	8c7fff84 	addi	r17,r17,-2
 5085c74:	003f1106 	br	50858bc <__alt_data_end+0xfffb76bc>
 5085c78:	b589883a 	add	r4,r22,r22
 5085c7c:	25ad803a 	cmpltu	r22,r4,r22
 5085c80:	b739883a 	add	fp,r22,fp
 5085c84:	40bfff84 	addi	r2,r8,-2
 5085c88:	bf2f883a 	add	r23,r23,fp
 5085c8c:	202d883a 	mov	r22,r4
 5085c90:	003f9306 	br	5085ae0 <__alt_data_end+0xfffb78e0>
 5085c94:	013ff844 	movi	r4,-31
 5085c98:	2085c83a 	sub	r2,r4,r2
 5085c9c:	8888d83a 	srl	r4,r17,r2
 5085ca0:	00800804 	movi	r2,32
 5085ca4:	18802126 	beq	r3,r2,5085d2c <__divdf3+0x8c4>
 5085ca8:	00801004 	movi	r2,64
 5085cac:	10c5c83a 	sub	r2,r2,r3
 5085cb0:	8884983a 	sll	r2,r17,r2
 5085cb4:	1204b03a 	or	r2,r2,r8
 5085cb8:	1004c03a 	cmpne	r2,r2,zero
 5085cbc:	2084b03a 	or	r2,r4,r2
 5085cc0:	144001cc 	andi	r17,r2,7
 5085cc4:	88000d1e 	bne	r17,zero,5085cfc <__divdf3+0x894>
 5085cc8:	000b883a 	mov	r5,zero
 5085ccc:	1024d0fa 	srli	r18,r2,3
 5085cd0:	98c0004c 	andi	r3,r19,1
 5085cd4:	0005883a 	mov	r2,zero
 5085cd8:	9464b03a 	or	r18,r18,r17
 5085cdc:	003e4106 	br	50855e4 <__alt_data_end+0xfffb73e4>
 5085ce0:	1007883a 	mov	r3,r2
 5085ce4:	0023883a 	mov	r17,zero
 5085ce8:	880a927a 	slli	r5,r17,9
 5085cec:	1805883a 	mov	r2,r3
 5085cf0:	8822977a 	slli	r17,r17,29
 5085cf4:	280ad33a 	srli	r5,r5,12
 5085cf8:	003ff406 	br	5085ccc <__alt_data_end+0xfffb7acc>
 5085cfc:	10c003cc 	andi	r3,r2,15
 5085d00:	01000104 	movi	r4,4
 5085d04:	193ff626 	beq	r3,r4,5085ce0 <__alt_data_end+0xfffb7ae0>
 5085d08:	0023883a 	mov	r17,zero
 5085d0c:	003fca06 	br	5085c38 <__alt_data_end+0xfffb7a38>
 5085d10:	813fd336 	bltu	r16,r4,5085c60 <__alt_data_end+0xfffb7a60>
 5085d14:	1023883a 	mov	r17,r2
 5085d18:	003fa806 	br	5085bbc <__alt_data_end+0xfffb79bc>
 5085d1c:	b0ffd636 	bltu	r22,r3,5085c78 <__alt_data_end+0xfffb7a78>
 5085d20:	1011883a 	mov	r8,r2
 5085d24:	b0ff341e 	bne	r22,r3,50859f8 <__alt_data_end+0xfffb77f8>
 5085d28:	003f3406 	br	50859fc <__alt_data_end+0xfffb77fc>
 5085d2c:	0005883a 	mov	r2,zero
 5085d30:	003fe006 	br	5085cb4 <__alt_data_end+0xfffb7ab4>
 5085d34:	00800434 	movhi	r2,16
 5085d38:	89400234 	orhi	r5,r17,8
 5085d3c:	10bfffc4 	addi	r2,r2,-1
 5085d40:	b807883a 	mov	r3,r23
 5085d44:	288a703a 	and	r5,r5,r2
 5085d48:	4025883a 	mov	r18,r8
 5085d4c:	003e8206 	br	5085758 <__alt_data_end+0xfffb7558>

05085d50 <__eqdf2>:
 5085d50:	2804d53a 	srli	r2,r5,20
 5085d54:	3806d53a 	srli	r3,r7,20
 5085d58:	02000434 	movhi	r8,16
 5085d5c:	423fffc4 	addi	r8,r8,-1
 5085d60:	1081ffcc 	andi	r2,r2,2047
 5085d64:	0281ffc4 	movi	r10,2047
 5085d68:	2a12703a 	and	r9,r5,r8
 5085d6c:	18c1ffcc 	andi	r3,r3,2047
 5085d70:	3a10703a 	and	r8,r7,r8
 5085d74:	280ad7fa 	srli	r5,r5,31
 5085d78:	380ed7fa 	srli	r7,r7,31
 5085d7c:	12801026 	beq	r2,r10,5085dc0 <__eqdf2+0x70>
 5085d80:	0281ffc4 	movi	r10,2047
 5085d84:	1a800a26 	beq	r3,r10,5085db0 <__eqdf2+0x60>
 5085d88:	10c00226 	beq	r2,r3,5085d94 <__eqdf2+0x44>
 5085d8c:	00800044 	movi	r2,1
 5085d90:	f800283a 	ret
 5085d94:	4a3ffd1e 	bne	r9,r8,5085d8c <__alt_data_end+0xfffb7b8c>
 5085d98:	21bffc1e 	bne	r4,r6,5085d8c <__alt_data_end+0xfffb7b8c>
 5085d9c:	29c00c26 	beq	r5,r7,5085dd0 <__eqdf2+0x80>
 5085da0:	103ffa1e 	bne	r2,zero,5085d8c <__alt_data_end+0xfffb7b8c>
 5085da4:	2244b03a 	or	r2,r4,r9
 5085da8:	1004c03a 	cmpne	r2,r2,zero
 5085dac:	f800283a 	ret
 5085db0:	3214b03a 	or	r10,r6,r8
 5085db4:	503ff426 	beq	r10,zero,5085d88 <__alt_data_end+0xfffb7b88>
 5085db8:	00800044 	movi	r2,1
 5085dbc:	f800283a 	ret
 5085dc0:	2254b03a 	or	r10,r4,r9
 5085dc4:	503fee26 	beq	r10,zero,5085d80 <__alt_data_end+0xfffb7b80>
 5085dc8:	00800044 	movi	r2,1
 5085dcc:	f800283a 	ret
 5085dd0:	0005883a 	mov	r2,zero
 5085dd4:	f800283a 	ret

05085dd8 <__gedf2>:
 5085dd8:	2804d53a 	srli	r2,r5,20
 5085ddc:	3806d53a 	srli	r3,r7,20
 5085de0:	02000434 	movhi	r8,16
 5085de4:	423fffc4 	addi	r8,r8,-1
 5085de8:	1081ffcc 	andi	r2,r2,2047
 5085dec:	0241ffc4 	movi	r9,2047
 5085df0:	2a14703a 	and	r10,r5,r8
 5085df4:	18c1ffcc 	andi	r3,r3,2047
 5085df8:	3a10703a 	and	r8,r7,r8
 5085dfc:	280ad7fa 	srli	r5,r5,31
 5085e00:	380ed7fa 	srli	r7,r7,31
 5085e04:	12401d26 	beq	r2,r9,5085e7c <__gedf2+0xa4>
 5085e08:	0241ffc4 	movi	r9,2047
 5085e0c:	1a401226 	beq	r3,r9,5085e58 <__gedf2+0x80>
 5085e10:	1000081e 	bne	r2,zero,5085e34 <__gedf2+0x5c>
 5085e14:	2296b03a 	or	r11,r4,r10
 5085e18:	5813003a 	cmpeq	r9,r11,zero
 5085e1c:	1800091e 	bne	r3,zero,5085e44 <__gedf2+0x6c>
 5085e20:	3218b03a 	or	r12,r6,r8
 5085e24:	6000071e 	bne	r12,zero,5085e44 <__gedf2+0x6c>
 5085e28:	0005883a 	mov	r2,zero
 5085e2c:	5800101e 	bne	r11,zero,5085e70 <__gedf2+0x98>
 5085e30:	f800283a 	ret
 5085e34:	18000c1e 	bne	r3,zero,5085e68 <__gedf2+0x90>
 5085e38:	3212b03a 	or	r9,r6,r8
 5085e3c:	48000c26 	beq	r9,zero,5085e70 <__gedf2+0x98>
 5085e40:	0013883a 	mov	r9,zero
 5085e44:	39c03fcc 	andi	r7,r7,255
 5085e48:	48000826 	beq	r9,zero,5085e6c <__gedf2+0x94>
 5085e4c:	38000926 	beq	r7,zero,5085e74 <__gedf2+0x9c>
 5085e50:	00800044 	movi	r2,1
 5085e54:	f800283a 	ret
 5085e58:	3212b03a 	or	r9,r6,r8
 5085e5c:	483fec26 	beq	r9,zero,5085e10 <__alt_data_end+0xfffb7c10>
 5085e60:	00bfff84 	movi	r2,-2
 5085e64:	f800283a 	ret
 5085e68:	39c03fcc 	andi	r7,r7,255
 5085e6c:	29c00626 	beq	r5,r7,5085e88 <__gedf2+0xb0>
 5085e70:	283ff726 	beq	r5,zero,5085e50 <__alt_data_end+0xfffb7c50>
 5085e74:	00bfffc4 	movi	r2,-1
 5085e78:	f800283a 	ret
 5085e7c:	2292b03a 	or	r9,r4,r10
 5085e80:	483fe126 	beq	r9,zero,5085e08 <__alt_data_end+0xfffb7c08>
 5085e84:	003ff606 	br	5085e60 <__alt_data_end+0xfffb7c60>
 5085e88:	18bff916 	blt	r3,r2,5085e70 <__alt_data_end+0xfffb7c70>
 5085e8c:	10c00316 	blt	r2,r3,5085e9c <__gedf2+0xc4>
 5085e90:	42bff736 	bltu	r8,r10,5085e70 <__alt_data_end+0xfffb7c70>
 5085e94:	52000326 	beq	r10,r8,5085ea4 <__gedf2+0xcc>
 5085e98:	5200042e 	bgeu	r10,r8,5085eac <__gedf2+0xd4>
 5085e9c:	283fec1e 	bne	r5,zero,5085e50 <__alt_data_end+0xfffb7c50>
 5085ea0:	003ff406 	br	5085e74 <__alt_data_end+0xfffb7c74>
 5085ea4:	313ff236 	bltu	r6,r4,5085e70 <__alt_data_end+0xfffb7c70>
 5085ea8:	21bffc36 	bltu	r4,r6,5085e9c <__alt_data_end+0xfffb7c9c>
 5085eac:	0005883a 	mov	r2,zero
 5085eb0:	f800283a 	ret

05085eb4 <__ledf2>:
 5085eb4:	2804d53a 	srli	r2,r5,20
 5085eb8:	3810d53a 	srli	r8,r7,20
 5085ebc:	00c00434 	movhi	r3,16
 5085ec0:	18ffffc4 	addi	r3,r3,-1
 5085ec4:	1081ffcc 	andi	r2,r2,2047
 5085ec8:	0241ffc4 	movi	r9,2047
 5085ecc:	28d4703a 	and	r10,r5,r3
 5085ed0:	4201ffcc 	andi	r8,r8,2047
 5085ed4:	38c6703a 	and	r3,r7,r3
 5085ed8:	280ad7fa 	srli	r5,r5,31
 5085edc:	380ed7fa 	srli	r7,r7,31
 5085ee0:	12401f26 	beq	r2,r9,5085f60 <__ledf2+0xac>
 5085ee4:	0241ffc4 	movi	r9,2047
 5085ee8:	42401426 	beq	r8,r9,5085f3c <__ledf2+0x88>
 5085eec:	1000091e 	bne	r2,zero,5085f14 <__ledf2+0x60>
 5085ef0:	2296b03a 	or	r11,r4,r10
 5085ef4:	5813003a 	cmpeq	r9,r11,zero
 5085ef8:	29403fcc 	andi	r5,r5,255
 5085efc:	40000a1e 	bne	r8,zero,5085f28 <__ledf2+0x74>
 5085f00:	30d8b03a 	or	r12,r6,r3
 5085f04:	6000081e 	bne	r12,zero,5085f28 <__ledf2+0x74>
 5085f08:	0005883a 	mov	r2,zero
 5085f0c:	5800111e 	bne	r11,zero,5085f54 <__ledf2+0xa0>
 5085f10:	f800283a 	ret
 5085f14:	29403fcc 	andi	r5,r5,255
 5085f18:	40000c1e 	bne	r8,zero,5085f4c <__ledf2+0x98>
 5085f1c:	30d2b03a 	or	r9,r6,r3
 5085f20:	48000c26 	beq	r9,zero,5085f54 <__ledf2+0xa0>
 5085f24:	0013883a 	mov	r9,zero
 5085f28:	39c03fcc 	andi	r7,r7,255
 5085f2c:	48000826 	beq	r9,zero,5085f50 <__ledf2+0x9c>
 5085f30:	38001126 	beq	r7,zero,5085f78 <__ledf2+0xc4>
 5085f34:	00800044 	movi	r2,1
 5085f38:	f800283a 	ret
 5085f3c:	30d2b03a 	or	r9,r6,r3
 5085f40:	483fea26 	beq	r9,zero,5085eec <__alt_data_end+0xfffb7cec>
 5085f44:	00800084 	movi	r2,2
 5085f48:	f800283a 	ret
 5085f4c:	39c03fcc 	andi	r7,r7,255
 5085f50:	39400726 	beq	r7,r5,5085f70 <__ledf2+0xbc>
 5085f54:	2800081e 	bne	r5,zero,5085f78 <__ledf2+0xc4>
 5085f58:	00800044 	movi	r2,1
 5085f5c:	f800283a 	ret
 5085f60:	2292b03a 	or	r9,r4,r10
 5085f64:	483fdf26 	beq	r9,zero,5085ee4 <__alt_data_end+0xfffb7ce4>
 5085f68:	00800084 	movi	r2,2
 5085f6c:	f800283a 	ret
 5085f70:	4080030e 	bge	r8,r2,5085f80 <__ledf2+0xcc>
 5085f74:	383fef26 	beq	r7,zero,5085f34 <__alt_data_end+0xfffb7d34>
 5085f78:	00bfffc4 	movi	r2,-1
 5085f7c:	f800283a 	ret
 5085f80:	123feb16 	blt	r2,r8,5085f30 <__alt_data_end+0xfffb7d30>
 5085f84:	1abff336 	bltu	r3,r10,5085f54 <__alt_data_end+0xfffb7d54>
 5085f88:	50c00326 	beq	r10,r3,5085f98 <__ledf2+0xe4>
 5085f8c:	50c0042e 	bgeu	r10,r3,5085fa0 <__ledf2+0xec>
 5085f90:	283fe81e 	bne	r5,zero,5085f34 <__alt_data_end+0xfffb7d34>
 5085f94:	003ff806 	br	5085f78 <__alt_data_end+0xfffb7d78>
 5085f98:	313fee36 	bltu	r6,r4,5085f54 <__alt_data_end+0xfffb7d54>
 5085f9c:	21bffc36 	bltu	r4,r6,5085f90 <__alt_data_end+0xfffb7d90>
 5085fa0:	0005883a 	mov	r2,zero
 5085fa4:	f800283a 	ret

05085fa8 <__muldf3>:
 5085fa8:	defff304 	addi	sp,sp,-52
 5085fac:	2804d53a 	srli	r2,r5,20
 5085fb0:	dd800915 	stw	r22,36(sp)
 5085fb4:	282cd7fa 	srli	r22,r5,31
 5085fb8:	dc000315 	stw	r16,12(sp)
 5085fbc:	04000434 	movhi	r16,16
 5085fc0:	dd400815 	stw	r21,32(sp)
 5085fc4:	dc800515 	stw	r18,20(sp)
 5085fc8:	843fffc4 	addi	r16,r16,-1
 5085fcc:	dfc00c15 	stw	ra,48(sp)
 5085fd0:	df000b15 	stw	fp,44(sp)
 5085fd4:	ddc00a15 	stw	r23,40(sp)
 5085fd8:	dd000715 	stw	r20,28(sp)
 5085fdc:	dcc00615 	stw	r19,24(sp)
 5085fe0:	dc400415 	stw	r17,16(sp)
 5085fe4:	1481ffcc 	andi	r18,r2,2047
 5085fe8:	2c20703a 	and	r16,r5,r16
 5085fec:	b02b883a 	mov	r21,r22
 5085ff0:	b2403fcc 	andi	r9,r22,255
 5085ff4:	90006026 	beq	r18,zero,5086178 <__muldf3+0x1d0>
 5085ff8:	0081ffc4 	movi	r2,2047
 5085ffc:	2029883a 	mov	r20,r4
 5086000:	90803626 	beq	r18,r2,50860dc <__muldf3+0x134>
 5086004:	80800434 	orhi	r2,r16,16
 5086008:	100490fa 	slli	r2,r2,3
 508600c:	2020d77a 	srli	r16,r4,29
 5086010:	202890fa 	slli	r20,r4,3
 5086014:	94bf0044 	addi	r18,r18,-1023
 5086018:	80a0b03a 	or	r16,r16,r2
 508601c:	0027883a 	mov	r19,zero
 5086020:	0039883a 	mov	fp,zero
 5086024:	3804d53a 	srli	r2,r7,20
 5086028:	382ed7fa 	srli	r23,r7,31
 508602c:	04400434 	movhi	r17,16
 5086030:	8c7fffc4 	addi	r17,r17,-1
 5086034:	1081ffcc 	andi	r2,r2,2047
 5086038:	3011883a 	mov	r8,r6
 508603c:	3c62703a 	and	r17,r7,r17
 5086040:	ba803fcc 	andi	r10,r23,255
 5086044:	10006d26 	beq	r2,zero,50861fc <__muldf3+0x254>
 5086048:	00c1ffc4 	movi	r3,2047
 508604c:	10c06526 	beq	r2,r3,50861e4 <__muldf3+0x23c>
 5086050:	88c00434 	orhi	r3,r17,16
 5086054:	180690fa 	slli	r3,r3,3
 5086058:	3022d77a 	srli	r17,r6,29
 508605c:	301090fa 	slli	r8,r6,3
 5086060:	10bf0044 	addi	r2,r2,-1023
 5086064:	88e2b03a 	or	r17,r17,r3
 5086068:	000b883a 	mov	r5,zero
 508606c:	9085883a 	add	r2,r18,r2
 5086070:	2cc8b03a 	or	r4,r5,r19
 5086074:	00c003c4 	movi	r3,15
 5086078:	bdacf03a 	xor	r22,r23,r22
 508607c:	12c00044 	addi	r11,r2,1
 5086080:	19009936 	bltu	r3,r4,50862e8 <__muldf3+0x340>
 5086084:	200890ba 	slli	r4,r4,2
 5086088:	00c14234 	movhi	r3,1288
 508608c:	18d82704 	addi	r3,r3,24732
 5086090:	20c9883a 	add	r4,r4,r3
 5086094:	20c00017 	ldw	r3,0(r4)
 5086098:	1800683a 	jmp	r3
 508609c:	050862e8 	cmpgeui	r20,zero,8587
 50860a0:	050860fc 	xorhi	r20,zero,8579
 50860a4:	050860fc 	xorhi	r20,zero,8579
 50860a8:	050860f8 	rdprs	r20,zero,8579
 50860ac:	050862c4 	movi	r20,8587
 50860b0:	050862c4 	movi	r20,8587
 50860b4:	050862ac 	andhi	r20,zero,8586
 50860b8:	050860f8 	rdprs	r20,zero,8579
 50860bc:	050862c4 	movi	r20,8587
 50860c0:	050862ac 	andhi	r20,zero,8586
 50860c4:	050862c4 	movi	r20,8587
 50860c8:	050860f8 	rdprs	r20,zero,8579
 50860cc:	050862d4 	movui	r20,8587
 50860d0:	050862d4 	movui	r20,8587
 50860d4:	050862d4 	movui	r20,8587
 50860d8:	050864f0 	cmpltui	r20,zero,8595
 50860dc:	2404b03a 	or	r2,r4,r16
 50860e0:	10006f1e 	bne	r2,zero,50862a0 <__muldf3+0x2f8>
 50860e4:	04c00204 	movi	r19,8
 50860e8:	0021883a 	mov	r16,zero
 50860ec:	0029883a 	mov	r20,zero
 50860f0:	07000084 	movi	fp,2
 50860f4:	003fcb06 	br	5086024 <__alt_data_end+0xfffb7e24>
 50860f8:	502d883a 	mov	r22,r10
 50860fc:	00800084 	movi	r2,2
 5086100:	28805726 	beq	r5,r2,5086260 <__muldf3+0x2b8>
 5086104:	008000c4 	movi	r2,3
 5086108:	28816626 	beq	r5,r2,50866a4 <__muldf3+0x6fc>
 508610c:	00800044 	movi	r2,1
 5086110:	2881411e 	bne	r5,r2,5086618 <__muldf3+0x670>
 5086114:	b02b883a 	mov	r21,r22
 5086118:	0005883a 	mov	r2,zero
 508611c:	000b883a 	mov	r5,zero
 5086120:	0029883a 	mov	r20,zero
 5086124:	1004953a 	slli	r2,r2,20
 5086128:	a8c03fcc 	andi	r3,r21,255
 508612c:	04400434 	movhi	r17,16
 5086130:	8c7fffc4 	addi	r17,r17,-1
 5086134:	180697fa 	slli	r3,r3,31
 5086138:	2c4a703a 	and	r5,r5,r17
 508613c:	288ab03a 	or	r5,r5,r2
 5086140:	28c6b03a 	or	r3,r5,r3
 5086144:	a005883a 	mov	r2,r20
 5086148:	dfc00c17 	ldw	ra,48(sp)
 508614c:	df000b17 	ldw	fp,44(sp)
 5086150:	ddc00a17 	ldw	r23,40(sp)
 5086154:	dd800917 	ldw	r22,36(sp)
 5086158:	dd400817 	ldw	r21,32(sp)
 508615c:	dd000717 	ldw	r20,28(sp)
 5086160:	dcc00617 	ldw	r19,24(sp)
 5086164:	dc800517 	ldw	r18,20(sp)
 5086168:	dc400417 	ldw	r17,16(sp)
 508616c:	dc000317 	ldw	r16,12(sp)
 5086170:	dec00d04 	addi	sp,sp,52
 5086174:	f800283a 	ret
 5086178:	2404b03a 	or	r2,r4,r16
 508617c:	2027883a 	mov	r19,r4
 5086180:	10004226 	beq	r2,zero,508628c <__muldf3+0x2e4>
 5086184:	8000fc26 	beq	r16,zero,5086578 <__muldf3+0x5d0>
 5086188:	8009883a 	mov	r4,r16
 508618c:	d9800215 	stw	r6,8(sp)
 5086190:	d9c00015 	stw	r7,0(sp)
 5086194:	da400115 	stw	r9,4(sp)
 5086198:	50871180 	call	5087118 <__clzsi2>
 508619c:	d9800217 	ldw	r6,8(sp)
 50861a0:	d9c00017 	ldw	r7,0(sp)
 50861a4:	da400117 	ldw	r9,4(sp)
 50861a8:	113ffd44 	addi	r4,r2,-11
 50861ac:	00c00704 	movi	r3,28
 50861b0:	1900ed16 	blt	r3,r4,5086568 <__muldf3+0x5c0>
 50861b4:	00c00744 	movi	r3,29
 50861b8:	147ffe04 	addi	r17,r2,-8
 50861bc:	1907c83a 	sub	r3,r3,r4
 50861c0:	8460983a 	sll	r16,r16,r17
 50861c4:	98c6d83a 	srl	r3,r19,r3
 50861c8:	9c68983a 	sll	r20,r19,r17
 50861cc:	1c20b03a 	or	r16,r3,r16
 50861d0:	1080fcc4 	addi	r2,r2,1011
 50861d4:	00a5c83a 	sub	r18,zero,r2
 50861d8:	0027883a 	mov	r19,zero
 50861dc:	0039883a 	mov	fp,zero
 50861e0:	003f9006 	br	5086024 <__alt_data_end+0xfffb7e24>
 50861e4:	3446b03a 	or	r3,r6,r17
 50861e8:	1800261e 	bne	r3,zero,5086284 <__muldf3+0x2dc>
 50861ec:	0023883a 	mov	r17,zero
 50861f0:	0011883a 	mov	r8,zero
 50861f4:	01400084 	movi	r5,2
 50861f8:	003f9c06 	br	508606c <__alt_data_end+0xfffb7e6c>
 50861fc:	3446b03a 	or	r3,r6,r17
 5086200:	18001c26 	beq	r3,zero,5086274 <__muldf3+0x2cc>
 5086204:	8800ce26 	beq	r17,zero,5086540 <__muldf3+0x598>
 5086208:	8809883a 	mov	r4,r17
 508620c:	d9800215 	stw	r6,8(sp)
 5086210:	da400115 	stw	r9,4(sp)
 5086214:	da800015 	stw	r10,0(sp)
 5086218:	50871180 	call	5087118 <__clzsi2>
 508621c:	d9800217 	ldw	r6,8(sp)
 5086220:	da400117 	ldw	r9,4(sp)
 5086224:	da800017 	ldw	r10,0(sp)
 5086228:	113ffd44 	addi	r4,r2,-11
 508622c:	00c00704 	movi	r3,28
 5086230:	1900bf16 	blt	r3,r4,5086530 <__muldf3+0x588>
 5086234:	00c00744 	movi	r3,29
 5086238:	123ffe04 	addi	r8,r2,-8
 508623c:	1907c83a 	sub	r3,r3,r4
 5086240:	8a22983a 	sll	r17,r17,r8
 5086244:	30c6d83a 	srl	r3,r6,r3
 5086248:	3210983a 	sll	r8,r6,r8
 508624c:	1c62b03a 	or	r17,r3,r17
 5086250:	1080fcc4 	addi	r2,r2,1011
 5086254:	0085c83a 	sub	r2,zero,r2
 5086258:	000b883a 	mov	r5,zero
 508625c:	003f8306 	br	508606c <__alt_data_end+0xfffb7e6c>
 5086260:	b02b883a 	mov	r21,r22
 5086264:	0081ffc4 	movi	r2,2047
 5086268:	000b883a 	mov	r5,zero
 508626c:	0029883a 	mov	r20,zero
 5086270:	003fac06 	br	5086124 <__alt_data_end+0xfffb7f24>
 5086274:	0023883a 	mov	r17,zero
 5086278:	0011883a 	mov	r8,zero
 508627c:	01400044 	movi	r5,1
 5086280:	003f7a06 	br	508606c <__alt_data_end+0xfffb7e6c>
 5086284:	014000c4 	movi	r5,3
 5086288:	003f7806 	br	508606c <__alt_data_end+0xfffb7e6c>
 508628c:	04c00104 	movi	r19,4
 5086290:	0021883a 	mov	r16,zero
 5086294:	0029883a 	mov	r20,zero
 5086298:	07000044 	movi	fp,1
 508629c:	003f6106 	br	5086024 <__alt_data_end+0xfffb7e24>
 50862a0:	04c00304 	movi	r19,12
 50862a4:	070000c4 	movi	fp,3
 50862a8:	003f5e06 	br	5086024 <__alt_data_end+0xfffb7e24>
 50862ac:	01400434 	movhi	r5,16
 50862b0:	002b883a 	mov	r21,zero
 50862b4:	297fffc4 	addi	r5,r5,-1
 50862b8:	053fffc4 	movi	r20,-1
 50862bc:	0081ffc4 	movi	r2,2047
 50862c0:	003f9806 	br	5086124 <__alt_data_end+0xfffb7f24>
 50862c4:	8023883a 	mov	r17,r16
 50862c8:	a011883a 	mov	r8,r20
 50862cc:	e00b883a 	mov	r5,fp
 50862d0:	003f8a06 	br	50860fc <__alt_data_end+0xfffb7efc>
 50862d4:	8023883a 	mov	r17,r16
 50862d8:	a011883a 	mov	r8,r20
 50862dc:	482d883a 	mov	r22,r9
 50862e0:	e00b883a 	mov	r5,fp
 50862e4:	003f8506 	br	50860fc <__alt_data_end+0xfffb7efc>
 50862e8:	a00ad43a 	srli	r5,r20,16
 50862ec:	401ad43a 	srli	r13,r8,16
 50862f0:	a53fffcc 	andi	r20,r20,65535
 50862f4:	423fffcc 	andi	r8,r8,65535
 50862f8:	4519383a 	mul	r12,r8,r20
 50862fc:	4147383a 	mul	r3,r8,r5
 5086300:	6d09383a 	mul	r4,r13,r20
 5086304:	600cd43a 	srli	r6,r12,16
 5086308:	2b5d383a 	mul	r14,r5,r13
 508630c:	20c9883a 	add	r4,r4,r3
 5086310:	310d883a 	add	r6,r6,r4
 5086314:	30c0022e 	bgeu	r6,r3,5086320 <__muldf3+0x378>
 5086318:	00c00074 	movhi	r3,1
 508631c:	70dd883a 	add	r14,r14,r3
 5086320:	8826d43a 	srli	r19,r17,16
 5086324:	8bffffcc 	andi	r15,r17,65535
 5086328:	7d23383a 	mul	r17,r15,r20
 508632c:	7949383a 	mul	r4,r15,r5
 5086330:	9d29383a 	mul	r20,r19,r20
 5086334:	8814d43a 	srli	r10,r17,16
 5086338:	3012943a 	slli	r9,r6,16
 508633c:	a129883a 	add	r20,r20,r4
 5086340:	633fffcc 	andi	r12,r12,65535
 5086344:	5515883a 	add	r10,r10,r20
 5086348:	3006d43a 	srli	r3,r6,16
 508634c:	4b13883a 	add	r9,r9,r12
 5086350:	2ccb383a 	mul	r5,r5,r19
 5086354:	5100022e 	bgeu	r10,r4,5086360 <__muldf3+0x3b8>
 5086358:	01000074 	movhi	r4,1
 508635c:	290b883a 	add	r5,r5,r4
 5086360:	802ad43a 	srli	r21,r16,16
 5086364:	843fffcc 	andi	r16,r16,65535
 5086368:	440d383a 	mul	r6,r8,r16
 508636c:	4565383a 	mul	r18,r8,r21
 5086370:	8349383a 	mul	r4,r16,r13
 5086374:	500e943a 	slli	r7,r10,16
 5086378:	3010d43a 	srli	r8,r6,16
 508637c:	5028d43a 	srli	r20,r10,16
 5086380:	2489883a 	add	r4,r4,r18
 5086384:	8abfffcc 	andi	r10,r17,65535
 5086388:	3a95883a 	add	r10,r7,r10
 508638c:	4119883a 	add	r12,r8,r4
 5086390:	a169883a 	add	r20,r20,r5
 5086394:	1a87883a 	add	r3,r3,r10
 5086398:	6d5b383a 	mul	r13,r13,r21
 508639c:	6480022e 	bgeu	r12,r18,50863a8 <__muldf3+0x400>
 50863a0:	01000074 	movhi	r4,1
 50863a4:	691b883a 	add	r13,r13,r4
 50863a8:	7c25383a 	mul	r18,r15,r16
 50863ac:	7d4b383a 	mul	r5,r15,r21
 50863b0:	84cf383a 	mul	r7,r16,r19
 50863b4:	901ed43a 	srli	r15,r18,16
 50863b8:	6008d43a 	srli	r4,r12,16
 50863bc:	6010943a 	slli	r8,r12,16
 50863c0:	394f883a 	add	r7,r7,r5
 50863c4:	333fffcc 	andi	r12,r6,65535
 50863c8:	79df883a 	add	r15,r15,r7
 50863cc:	235b883a 	add	r13,r4,r13
 50863d0:	9d63383a 	mul	r17,r19,r21
 50863d4:	4309883a 	add	r4,r8,r12
 50863d8:	7940022e 	bgeu	r15,r5,50863e4 <__muldf3+0x43c>
 50863dc:	01400074 	movhi	r5,1
 50863e0:	8963883a 	add	r17,r17,r5
 50863e4:	780a943a 	slli	r5,r15,16
 50863e8:	91bfffcc 	andi	r6,r18,65535
 50863ec:	70c7883a 	add	r3,r14,r3
 50863f0:	298d883a 	add	r6,r5,r6
 50863f4:	1a8f803a 	cmpltu	r7,r3,r10
 50863f8:	350b883a 	add	r5,r6,r20
 50863fc:	20c7883a 	add	r3,r4,r3
 5086400:	3955883a 	add	r10,r7,r5
 5086404:	1909803a 	cmpltu	r4,r3,r4
 5086408:	6a91883a 	add	r8,r13,r10
 508640c:	780cd43a 	srli	r6,r15,16
 5086410:	2219883a 	add	r12,r4,r8
 5086414:	2d0b803a 	cmpltu	r5,r5,r20
 5086418:	51cf803a 	cmpltu	r7,r10,r7
 508641c:	29ceb03a 	or	r7,r5,r7
 5086420:	4351803a 	cmpltu	r8,r8,r13
 5086424:	610b803a 	cmpltu	r5,r12,r4
 5086428:	4148b03a 	or	r4,r8,r5
 508642c:	398f883a 	add	r7,r7,r6
 5086430:	3909883a 	add	r4,r7,r4
 5086434:	1810927a 	slli	r8,r3,9
 5086438:	2449883a 	add	r4,r4,r17
 508643c:	2008927a 	slli	r4,r4,9
 5086440:	6022d5fa 	srli	r17,r12,23
 5086444:	1806d5fa 	srli	r3,r3,23
 5086448:	4252b03a 	or	r9,r8,r9
 508644c:	600a927a 	slli	r5,r12,9
 5086450:	4810c03a 	cmpne	r8,r9,zero
 5086454:	2462b03a 	or	r17,r4,r17
 5086458:	40c6b03a 	or	r3,r8,r3
 508645c:	8900402c 	andhi	r4,r17,256
 5086460:	1950b03a 	or	r8,r3,r5
 5086464:	20000726 	beq	r4,zero,5086484 <__muldf3+0x4dc>
 5086468:	4006d07a 	srli	r3,r8,1
 508646c:	880497fa 	slli	r2,r17,31
 5086470:	4200004c 	andi	r8,r8,1
 5086474:	8822d07a 	srli	r17,r17,1
 5086478:	1a10b03a 	or	r8,r3,r8
 508647c:	1210b03a 	or	r8,r2,r8
 5086480:	5805883a 	mov	r2,r11
 5086484:	1140ffc4 	addi	r5,r2,1023
 5086488:	0140440e 	bge	zero,r5,508659c <__muldf3+0x5f4>
 508648c:	40c001cc 	andi	r3,r8,7
 5086490:	18000726 	beq	r3,zero,50864b0 <__muldf3+0x508>
 5086494:	40c003cc 	andi	r3,r8,15
 5086498:	01000104 	movi	r4,4
 508649c:	19000426 	beq	r3,r4,50864b0 <__muldf3+0x508>
 50864a0:	4107883a 	add	r3,r8,r4
 50864a4:	1a11803a 	cmpltu	r8,r3,r8
 50864a8:	8a23883a 	add	r17,r17,r8
 50864ac:	1811883a 	mov	r8,r3
 50864b0:	88c0402c 	andhi	r3,r17,256
 50864b4:	18000426 	beq	r3,zero,50864c8 <__muldf3+0x520>
 50864b8:	11410004 	addi	r5,r2,1024
 50864bc:	00bfc034 	movhi	r2,65280
 50864c0:	10bfffc4 	addi	r2,r2,-1
 50864c4:	88a2703a 	and	r17,r17,r2
 50864c8:	0081ff84 	movi	r2,2046
 50864cc:	117f6416 	blt	r2,r5,5086260 <__alt_data_end+0xfffb8060>
 50864d0:	8828977a 	slli	r20,r17,29
 50864d4:	4010d0fa 	srli	r8,r8,3
 50864d8:	8822927a 	slli	r17,r17,9
 50864dc:	2881ffcc 	andi	r2,r5,2047
 50864e0:	a228b03a 	or	r20,r20,r8
 50864e4:	880ad33a 	srli	r5,r17,12
 50864e8:	b02b883a 	mov	r21,r22
 50864ec:	003f0d06 	br	5086124 <__alt_data_end+0xfffb7f24>
 50864f0:	8080022c 	andhi	r2,r16,8
 50864f4:	10000926 	beq	r2,zero,508651c <__muldf3+0x574>
 50864f8:	8880022c 	andhi	r2,r17,8
 50864fc:	1000071e 	bne	r2,zero,508651c <__muldf3+0x574>
 5086500:	00800434 	movhi	r2,16
 5086504:	89400234 	orhi	r5,r17,8
 5086508:	10bfffc4 	addi	r2,r2,-1
 508650c:	b82b883a 	mov	r21,r23
 5086510:	288a703a 	and	r5,r5,r2
 5086514:	4029883a 	mov	r20,r8
 5086518:	003f6806 	br	50862bc <__alt_data_end+0xfffb80bc>
 508651c:	00800434 	movhi	r2,16
 5086520:	81400234 	orhi	r5,r16,8
 5086524:	10bfffc4 	addi	r2,r2,-1
 5086528:	288a703a 	and	r5,r5,r2
 508652c:	003f6306 	br	50862bc <__alt_data_end+0xfffb80bc>
 5086530:	147ff604 	addi	r17,r2,-40
 5086534:	3462983a 	sll	r17,r6,r17
 5086538:	0011883a 	mov	r8,zero
 508653c:	003f4406 	br	5086250 <__alt_data_end+0xfffb8050>
 5086540:	3009883a 	mov	r4,r6
 5086544:	d9800215 	stw	r6,8(sp)
 5086548:	da400115 	stw	r9,4(sp)
 508654c:	da800015 	stw	r10,0(sp)
 5086550:	50871180 	call	5087118 <__clzsi2>
 5086554:	10800804 	addi	r2,r2,32
 5086558:	da800017 	ldw	r10,0(sp)
 508655c:	da400117 	ldw	r9,4(sp)
 5086560:	d9800217 	ldw	r6,8(sp)
 5086564:	003f3006 	br	5086228 <__alt_data_end+0xfffb8028>
 5086568:	143ff604 	addi	r16,r2,-40
 508656c:	9c20983a 	sll	r16,r19,r16
 5086570:	0029883a 	mov	r20,zero
 5086574:	003f1606 	br	50861d0 <__alt_data_end+0xfffb7fd0>
 5086578:	d9800215 	stw	r6,8(sp)
 508657c:	d9c00015 	stw	r7,0(sp)
 5086580:	da400115 	stw	r9,4(sp)
 5086584:	50871180 	call	5087118 <__clzsi2>
 5086588:	10800804 	addi	r2,r2,32
 508658c:	da400117 	ldw	r9,4(sp)
 5086590:	d9c00017 	ldw	r7,0(sp)
 5086594:	d9800217 	ldw	r6,8(sp)
 5086598:	003f0306 	br	50861a8 <__alt_data_end+0xfffb7fa8>
 508659c:	00c00044 	movi	r3,1
 50865a0:	1947c83a 	sub	r3,r3,r5
 50865a4:	00800e04 	movi	r2,56
 50865a8:	10feda16 	blt	r2,r3,5086114 <__alt_data_end+0xfffb7f14>
 50865ac:	008007c4 	movi	r2,31
 50865b0:	10c01b16 	blt	r2,r3,5086620 <__muldf3+0x678>
 50865b4:	00800804 	movi	r2,32
 50865b8:	10c5c83a 	sub	r2,r2,r3
 50865bc:	888a983a 	sll	r5,r17,r2
 50865c0:	40c8d83a 	srl	r4,r8,r3
 50865c4:	4084983a 	sll	r2,r8,r2
 50865c8:	88e2d83a 	srl	r17,r17,r3
 50865cc:	2906b03a 	or	r3,r5,r4
 50865d0:	1004c03a 	cmpne	r2,r2,zero
 50865d4:	1886b03a 	or	r3,r3,r2
 50865d8:	188001cc 	andi	r2,r3,7
 50865dc:	10000726 	beq	r2,zero,50865fc <__muldf3+0x654>
 50865e0:	188003cc 	andi	r2,r3,15
 50865e4:	01000104 	movi	r4,4
 50865e8:	11000426 	beq	r2,r4,50865fc <__muldf3+0x654>
 50865ec:	1805883a 	mov	r2,r3
 50865f0:	10c00104 	addi	r3,r2,4
 50865f4:	1885803a 	cmpltu	r2,r3,r2
 50865f8:	88a3883a 	add	r17,r17,r2
 50865fc:	8880202c 	andhi	r2,r17,128
 5086600:	10001c26 	beq	r2,zero,5086674 <__muldf3+0x6cc>
 5086604:	b02b883a 	mov	r21,r22
 5086608:	00800044 	movi	r2,1
 508660c:	000b883a 	mov	r5,zero
 5086610:	0029883a 	mov	r20,zero
 5086614:	003ec306 	br	5086124 <__alt_data_end+0xfffb7f24>
 5086618:	5805883a 	mov	r2,r11
 508661c:	003f9906 	br	5086484 <__alt_data_end+0xfffb8284>
 5086620:	00bff844 	movi	r2,-31
 5086624:	1145c83a 	sub	r2,r2,r5
 5086628:	8888d83a 	srl	r4,r17,r2
 508662c:	00800804 	movi	r2,32
 5086630:	18801a26 	beq	r3,r2,508669c <__muldf3+0x6f4>
 5086634:	00801004 	movi	r2,64
 5086638:	10c5c83a 	sub	r2,r2,r3
 508663c:	8884983a 	sll	r2,r17,r2
 5086640:	1204b03a 	or	r2,r2,r8
 5086644:	1004c03a 	cmpne	r2,r2,zero
 5086648:	2084b03a 	or	r2,r4,r2
 508664c:	144001cc 	andi	r17,r2,7
 5086650:	88000d1e 	bne	r17,zero,5086688 <__muldf3+0x6e0>
 5086654:	000b883a 	mov	r5,zero
 5086658:	1028d0fa 	srli	r20,r2,3
 508665c:	b02b883a 	mov	r21,r22
 5086660:	0005883a 	mov	r2,zero
 5086664:	a468b03a 	or	r20,r20,r17
 5086668:	003eae06 	br	5086124 <__alt_data_end+0xfffb7f24>
 508666c:	1007883a 	mov	r3,r2
 5086670:	0023883a 	mov	r17,zero
 5086674:	880a927a 	slli	r5,r17,9
 5086678:	1805883a 	mov	r2,r3
 508667c:	8822977a 	slli	r17,r17,29
 5086680:	280ad33a 	srli	r5,r5,12
 5086684:	003ff406 	br	5086658 <__alt_data_end+0xfffb8458>
 5086688:	10c003cc 	andi	r3,r2,15
 508668c:	01000104 	movi	r4,4
 5086690:	193ff626 	beq	r3,r4,508666c <__alt_data_end+0xfffb846c>
 5086694:	0023883a 	mov	r17,zero
 5086698:	003fd506 	br	50865f0 <__alt_data_end+0xfffb83f0>
 508669c:	0005883a 	mov	r2,zero
 50866a0:	003fe706 	br	5086640 <__alt_data_end+0xfffb8440>
 50866a4:	00800434 	movhi	r2,16
 50866a8:	89400234 	orhi	r5,r17,8
 50866ac:	10bfffc4 	addi	r2,r2,-1
 50866b0:	b02b883a 	mov	r21,r22
 50866b4:	288a703a 	and	r5,r5,r2
 50866b8:	4029883a 	mov	r20,r8
 50866bc:	003eff06 	br	50862bc <__alt_data_end+0xfffb80bc>

050866c0 <__subdf3>:
 50866c0:	02000434 	movhi	r8,16
 50866c4:	423fffc4 	addi	r8,r8,-1
 50866c8:	defffb04 	addi	sp,sp,-20
 50866cc:	2a14703a 	and	r10,r5,r8
 50866d0:	3812d53a 	srli	r9,r7,20
 50866d4:	3a10703a 	and	r8,r7,r8
 50866d8:	2006d77a 	srli	r3,r4,29
 50866dc:	3004d77a 	srli	r2,r6,29
 50866e0:	dc000015 	stw	r16,0(sp)
 50866e4:	501490fa 	slli	r10,r10,3
 50866e8:	2820d53a 	srli	r16,r5,20
 50866ec:	401090fa 	slli	r8,r8,3
 50866f0:	dc800215 	stw	r18,8(sp)
 50866f4:	dc400115 	stw	r17,4(sp)
 50866f8:	dfc00415 	stw	ra,16(sp)
 50866fc:	202290fa 	slli	r17,r4,3
 5086700:	dcc00315 	stw	r19,12(sp)
 5086704:	4a41ffcc 	andi	r9,r9,2047
 5086708:	0101ffc4 	movi	r4,2047
 508670c:	2824d7fa 	srli	r18,r5,31
 5086710:	8401ffcc 	andi	r16,r16,2047
 5086714:	50c6b03a 	or	r3,r10,r3
 5086718:	380ed7fa 	srli	r7,r7,31
 508671c:	408ab03a 	or	r5,r8,r2
 5086720:	300c90fa 	slli	r6,r6,3
 5086724:	49009626 	beq	r9,r4,5086980 <__subdf3+0x2c0>
 5086728:	39c0005c 	xori	r7,r7,1
 508672c:	8245c83a 	sub	r2,r16,r9
 5086730:	3c807426 	beq	r7,r18,5086904 <__subdf3+0x244>
 5086734:	0080af0e 	bge	zero,r2,50869f4 <__subdf3+0x334>
 5086738:	48002a1e 	bne	r9,zero,50867e4 <__subdf3+0x124>
 508673c:	2988b03a 	or	r4,r5,r6
 5086740:	20009a1e 	bne	r4,zero,50869ac <__subdf3+0x2ec>
 5086744:	888001cc 	andi	r2,r17,7
 5086748:	10000726 	beq	r2,zero,5086768 <__subdf3+0xa8>
 508674c:	888003cc 	andi	r2,r17,15
 5086750:	01000104 	movi	r4,4
 5086754:	11000426 	beq	r2,r4,5086768 <__subdf3+0xa8>
 5086758:	890b883a 	add	r5,r17,r4
 508675c:	2c63803a 	cmpltu	r17,r5,r17
 5086760:	1c47883a 	add	r3,r3,r17
 5086764:	2823883a 	mov	r17,r5
 5086768:	1880202c 	andhi	r2,r3,128
 508676c:	10005926 	beq	r2,zero,50868d4 <__subdf3+0x214>
 5086770:	84000044 	addi	r16,r16,1
 5086774:	0081ffc4 	movi	r2,2047
 5086778:	8080be26 	beq	r16,r2,5086a74 <__subdf3+0x3b4>
 508677c:	017fe034 	movhi	r5,65408
 5086780:	297fffc4 	addi	r5,r5,-1
 5086784:	1946703a 	and	r3,r3,r5
 5086788:	1804977a 	slli	r2,r3,29
 508678c:	1806927a 	slli	r3,r3,9
 5086790:	8822d0fa 	srli	r17,r17,3
 5086794:	8401ffcc 	andi	r16,r16,2047
 5086798:	180ad33a 	srli	r5,r3,12
 508679c:	9100004c 	andi	r4,r18,1
 50867a0:	1444b03a 	or	r2,r2,r17
 50867a4:	80c1ffcc 	andi	r3,r16,2047
 50867a8:	1820953a 	slli	r16,r3,20
 50867ac:	20c03fcc 	andi	r3,r4,255
 50867b0:	180897fa 	slli	r4,r3,31
 50867b4:	00c00434 	movhi	r3,16
 50867b8:	18ffffc4 	addi	r3,r3,-1
 50867bc:	28c6703a 	and	r3,r5,r3
 50867c0:	1c06b03a 	or	r3,r3,r16
 50867c4:	1906b03a 	or	r3,r3,r4
 50867c8:	dfc00417 	ldw	ra,16(sp)
 50867cc:	dcc00317 	ldw	r19,12(sp)
 50867d0:	dc800217 	ldw	r18,8(sp)
 50867d4:	dc400117 	ldw	r17,4(sp)
 50867d8:	dc000017 	ldw	r16,0(sp)
 50867dc:	dec00504 	addi	sp,sp,20
 50867e0:	f800283a 	ret
 50867e4:	0101ffc4 	movi	r4,2047
 50867e8:	813fd626 	beq	r16,r4,5086744 <__alt_data_end+0xfffb8544>
 50867ec:	29402034 	orhi	r5,r5,128
 50867f0:	01000e04 	movi	r4,56
 50867f4:	2080a316 	blt	r4,r2,5086a84 <__subdf3+0x3c4>
 50867f8:	010007c4 	movi	r4,31
 50867fc:	2080c616 	blt	r4,r2,5086b18 <__subdf3+0x458>
 5086800:	01000804 	movi	r4,32
 5086804:	2089c83a 	sub	r4,r4,r2
 5086808:	2910983a 	sll	r8,r5,r4
 508680c:	308ed83a 	srl	r7,r6,r2
 5086810:	3108983a 	sll	r4,r6,r4
 5086814:	2884d83a 	srl	r2,r5,r2
 5086818:	41ccb03a 	or	r6,r8,r7
 508681c:	2008c03a 	cmpne	r4,r4,zero
 5086820:	310cb03a 	or	r6,r6,r4
 5086824:	898dc83a 	sub	r6,r17,r6
 5086828:	89a3803a 	cmpltu	r17,r17,r6
 508682c:	1887c83a 	sub	r3,r3,r2
 5086830:	1c47c83a 	sub	r3,r3,r17
 5086834:	3023883a 	mov	r17,r6
 5086838:	1880202c 	andhi	r2,r3,128
 508683c:	10002326 	beq	r2,zero,50868cc <__subdf3+0x20c>
 5086840:	04c02034 	movhi	r19,128
 5086844:	9cffffc4 	addi	r19,r19,-1
 5086848:	1ce6703a 	and	r19,r3,r19
 508684c:	98007a26 	beq	r19,zero,5086a38 <__subdf3+0x378>
 5086850:	9809883a 	mov	r4,r19
 5086854:	50871180 	call	5087118 <__clzsi2>
 5086858:	113ffe04 	addi	r4,r2,-8
 508685c:	00c007c4 	movi	r3,31
 5086860:	19007b16 	blt	r3,r4,5086a50 <__subdf3+0x390>
 5086864:	00800804 	movi	r2,32
 5086868:	1105c83a 	sub	r2,r2,r4
 508686c:	8884d83a 	srl	r2,r17,r2
 5086870:	9906983a 	sll	r3,r19,r4
 5086874:	8922983a 	sll	r17,r17,r4
 5086878:	10c4b03a 	or	r2,r2,r3
 508687c:	24007816 	blt	r4,r16,5086a60 <__subdf3+0x3a0>
 5086880:	2421c83a 	sub	r16,r4,r16
 5086884:	80c00044 	addi	r3,r16,1
 5086888:	010007c4 	movi	r4,31
 508688c:	20c09516 	blt	r4,r3,5086ae4 <__subdf3+0x424>
 5086890:	01400804 	movi	r5,32
 5086894:	28cbc83a 	sub	r5,r5,r3
 5086898:	88c8d83a 	srl	r4,r17,r3
 508689c:	8962983a 	sll	r17,r17,r5
 50868a0:	114a983a 	sll	r5,r2,r5
 50868a4:	10c6d83a 	srl	r3,r2,r3
 50868a8:	8804c03a 	cmpne	r2,r17,zero
 50868ac:	290ab03a 	or	r5,r5,r4
 50868b0:	28a2b03a 	or	r17,r5,r2
 50868b4:	0021883a 	mov	r16,zero
 50868b8:	003fa206 	br	5086744 <__alt_data_end+0xfffb8544>
 50868bc:	2090b03a 	or	r8,r4,r2
 50868c0:	40018e26 	beq	r8,zero,5086efc <__subdf3+0x83c>
 50868c4:	1007883a 	mov	r3,r2
 50868c8:	2023883a 	mov	r17,r4
 50868cc:	888001cc 	andi	r2,r17,7
 50868d0:	103f9e1e 	bne	r2,zero,508674c <__alt_data_end+0xfffb854c>
 50868d4:	1804977a 	slli	r2,r3,29
 50868d8:	8822d0fa 	srli	r17,r17,3
 50868dc:	1810d0fa 	srli	r8,r3,3
 50868e0:	9100004c 	andi	r4,r18,1
 50868e4:	1444b03a 	or	r2,r2,r17
 50868e8:	00c1ffc4 	movi	r3,2047
 50868ec:	80c02826 	beq	r16,r3,5086990 <__subdf3+0x2d0>
 50868f0:	01400434 	movhi	r5,16
 50868f4:	297fffc4 	addi	r5,r5,-1
 50868f8:	80e0703a 	and	r16,r16,r3
 50868fc:	414a703a 	and	r5,r8,r5
 5086900:	003fa806 	br	50867a4 <__alt_data_end+0xfffb85a4>
 5086904:	0080630e 	bge	zero,r2,5086a94 <__subdf3+0x3d4>
 5086908:	48003026 	beq	r9,zero,50869cc <__subdf3+0x30c>
 508690c:	0101ffc4 	movi	r4,2047
 5086910:	813f8c26 	beq	r16,r4,5086744 <__alt_data_end+0xfffb8544>
 5086914:	29402034 	orhi	r5,r5,128
 5086918:	01000e04 	movi	r4,56
 508691c:	2080a90e 	bge	r4,r2,5086bc4 <__subdf3+0x504>
 5086920:	298cb03a 	or	r6,r5,r6
 5086924:	3012c03a 	cmpne	r9,r6,zero
 5086928:	0005883a 	mov	r2,zero
 508692c:	4c53883a 	add	r9,r9,r17
 5086930:	4c63803a 	cmpltu	r17,r9,r17
 5086934:	10c7883a 	add	r3,r2,r3
 5086938:	88c7883a 	add	r3,r17,r3
 508693c:	4823883a 	mov	r17,r9
 5086940:	1880202c 	andhi	r2,r3,128
 5086944:	1000d026 	beq	r2,zero,5086c88 <__subdf3+0x5c8>
 5086948:	84000044 	addi	r16,r16,1
 508694c:	0081ffc4 	movi	r2,2047
 5086950:	8080fe26 	beq	r16,r2,5086d4c <__subdf3+0x68c>
 5086954:	00bfe034 	movhi	r2,65408
 5086958:	10bfffc4 	addi	r2,r2,-1
 508695c:	1886703a 	and	r3,r3,r2
 5086960:	880ad07a 	srli	r5,r17,1
 5086964:	180497fa 	slli	r2,r3,31
 5086968:	8900004c 	andi	r4,r17,1
 508696c:	2922b03a 	or	r17,r5,r4
 5086970:	1806d07a 	srli	r3,r3,1
 5086974:	1462b03a 	or	r17,r2,r17
 5086978:	3825883a 	mov	r18,r7
 508697c:	003f7106 	br	5086744 <__alt_data_end+0xfffb8544>
 5086980:	2984b03a 	or	r2,r5,r6
 5086984:	103f6826 	beq	r2,zero,5086728 <__alt_data_end+0xfffb8528>
 5086988:	39c03fcc 	andi	r7,r7,255
 508698c:	003f6706 	br	508672c <__alt_data_end+0xfffb852c>
 5086990:	4086b03a 	or	r3,r8,r2
 5086994:	18015226 	beq	r3,zero,5086ee0 <__subdf3+0x820>
 5086998:	00c00434 	movhi	r3,16
 508699c:	41400234 	orhi	r5,r8,8
 50869a0:	18ffffc4 	addi	r3,r3,-1
 50869a4:	28ca703a 	and	r5,r5,r3
 50869a8:	003f7e06 	br	50867a4 <__alt_data_end+0xfffb85a4>
 50869ac:	10bfffc4 	addi	r2,r2,-1
 50869b0:	1000491e 	bne	r2,zero,5086ad8 <__subdf3+0x418>
 50869b4:	898fc83a 	sub	r7,r17,r6
 50869b8:	89e3803a 	cmpltu	r17,r17,r7
 50869bc:	1947c83a 	sub	r3,r3,r5
 50869c0:	1c47c83a 	sub	r3,r3,r17
 50869c4:	3823883a 	mov	r17,r7
 50869c8:	003f9b06 	br	5086838 <__alt_data_end+0xfffb8638>
 50869cc:	2988b03a 	or	r4,r5,r6
 50869d0:	203f5c26 	beq	r4,zero,5086744 <__alt_data_end+0xfffb8544>
 50869d4:	10bfffc4 	addi	r2,r2,-1
 50869d8:	1000931e 	bne	r2,zero,5086c28 <__subdf3+0x568>
 50869dc:	898d883a 	add	r6,r17,r6
 50869e0:	3463803a 	cmpltu	r17,r6,r17
 50869e4:	1947883a 	add	r3,r3,r5
 50869e8:	88c7883a 	add	r3,r17,r3
 50869ec:	3023883a 	mov	r17,r6
 50869f0:	003fd306 	br	5086940 <__alt_data_end+0xfffb8740>
 50869f4:	1000541e 	bne	r2,zero,5086b48 <__subdf3+0x488>
 50869f8:	80800044 	addi	r2,r16,1
 50869fc:	1081ffcc 	andi	r2,r2,2047
 5086a00:	01000044 	movi	r4,1
 5086a04:	2080a20e 	bge	r4,r2,5086c90 <__subdf3+0x5d0>
 5086a08:	8989c83a 	sub	r4,r17,r6
 5086a0c:	8905803a 	cmpltu	r2,r17,r4
 5086a10:	1967c83a 	sub	r19,r3,r5
 5086a14:	98a7c83a 	sub	r19,r19,r2
 5086a18:	9880202c 	andhi	r2,r19,128
 5086a1c:	10006326 	beq	r2,zero,5086bac <__subdf3+0x4ec>
 5086a20:	3463c83a 	sub	r17,r6,r17
 5086a24:	28c7c83a 	sub	r3,r5,r3
 5086a28:	344d803a 	cmpltu	r6,r6,r17
 5086a2c:	19a7c83a 	sub	r19,r3,r6
 5086a30:	3825883a 	mov	r18,r7
 5086a34:	983f861e 	bne	r19,zero,5086850 <__alt_data_end+0xfffb8650>
 5086a38:	8809883a 	mov	r4,r17
 5086a3c:	50871180 	call	5087118 <__clzsi2>
 5086a40:	10800804 	addi	r2,r2,32
 5086a44:	113ffe04 	addi	r4,r2,-8
 5086a48:	00c007c4 	movi	r3,31
 5086a4c:	193f850e 	bge	r3,r4,5086864 <__alt_data_end+0xfffb8664>
 5086a50:	10bff604 	addi	r2,r2,-40
 5086a54:	8884983a 	sll	r2,r17,r2
 5086a58:	0023883a 	mov	r17,zero
 5086a5c:	243f880e 	bge	r4,r16,5086880 <__alt_data_end+0xfffb8680>
 5086a60:	00ffe034 	movhi	r3,65408
 5086a64:	18ffffc4 	addi	r3,r3,-1
 5086a68:	8121c83a 	sub	r16,r16,r4
 5086a6c:	10c6703a 	and	r3,r2,r3
 5086a70:	003f3406 	br	5086744 <__alt_data_end+0xfffb8544>
 5086a74:	9100004c 	andi	r4,r18,1
 5086a78:	000b883a 	mov	r5,zero
 5086a7c:	0005883a 	mov	r2,zero
 5086a80:	003f4806 	br	50867a4 <__alt_data_end+0xfffb85a4>
 5086a84:	298cb03a 	or	r6,r5,r6
 5086a88:	300cc03a 	cmpne	r6,r6,zero
 5086a8c:	0005883a 	mov	r2,zero
 5086a90:	003f6406 	br	5086824 <__alt_data_end+0xfffb8624>
 5086a94:	10009a1e 	bne	r2,zero,5086d00 <__subdf3+0x640>
 5086a98:	82400044 	addi	r9,r16,1
 5086a9c:	4881ffcc 	andi	r2,r9,2047
 5086aa0:	02800044 	movi	r10,1
 5086aa4:	5080670e 	bge	r10,r2,5086c44 <__subdf3+0x584>
 5086aa8:	0081ffc4 	movi	r2,2047
 5086aac:	4880af26 	beq	r9,r2,5086d6c <__subdf3+0x6ac>
 5086ab0:	898d883a 	add	r6,r17,r6
 5086ab4:	1945883a 	add	r2,r3,r5
 5086ab8:	3447803a 	cmpltu	r3,r6,r17
 5086abc:	1887883a 	add	r3,r3,r2
 5086ac0:	182297fa 	slli	r17,r3,31
 5086ac4:	300cd07a 	srli	r6,r6,1
 5086ac8:	1806d07a 	srli	r3,r3,1
 5086acc:	4821883a 	mov	r16,r9
 5086ad0:	89a2b03a 	or	r17,r17,r6
 5086ad4:	003f1b06 	br	5086744 <__alt_data_end+0xfffb8544>
 5086ad8:	0101ffc4 	movi	r4,2047
 5086adc:	813f441e 	bne	r16,r4,50867f0 <__alt_data_end+0xfffb85f0>
 5086ae0:	003f1806 	br	5086744 <__alt_data_end+0xfffb8544>
 5086ae4:	843ff844 	addi	r16,r16,-31
 5086ae8:	01400804 	movi	r5,32
 5086aec:	1408d83a 	srl	r4,r2,r16
 5086af0:	19405026 	beq	r3,r5,5086c34 <__subdf3+0x574>
 5086af4:	01401004 	movi	r5,64
 5086af8:	28c7c83a 	sub	r3,r5,r3
 5086afc:	10c4983a 	sll	r2,r2,r3
 5086b00:	88a2b03a 	or	r17,r17,r2
 5086b04:	8822c03a 	cmpne	r17,r17,zero
 5086b08:	2462b03a 	or	r17,r4,r17
 5086b0c:	0007883a 	mov	r3,zero
 5086b10:	0021883a 	mov	r16,zero
 5086b14:	003f6d06 	br	50868cc <__alt_data_end+0xfffb86cc>
 5086b18:	11fff804 	addi	r7,r2,-32
 5086b1c:	01000804 	movi	r4,32
 5086b20:	29ced83a 	srl	r7,r5,r7
 5086b24:	11004526 	beq	r2,r4,5086c3c <__subdf3+0x57c>
 5086b28:	01001004 	movi	r4,64
 5086b2c:	2089c83a 	sub	r4,r4,r2
 5086b30:	2904983a 	sll	r2,r5,r4
 5086b34:	118cb03a 	or	r6,r2,r6
 5086b38:	300cc03a 	cmpne	r6,r6,zero
 5086b3c:	398cb03a 	or	r6,r7,r6
 5086b40:	0005883a 	mov	r2,zero
 5086b44:	003f3706 	br	5086824 <__alt_data_end+0xfffb8624>
 5086b48:	80002a26 	beq	r16,zero,5086bf4 <__subdf3+0x534>
 5086b4c:	0101ffc4 	movi	r4,2047
 5086b50:	49006626 	beq	r9,r4,5086cec <__subdf3+0x62c>
 5086b54:	0085c83a 	sub	r2,zero,r2
 5086b58:	18c02034 	orhi	r3,r3,128
 5086b5c:	01000e04 	movi	r4,56
 5086b60:	20807e16 	blt	r4,r2,5086d5c <__subdf3+0x69c>
 5086b64:	010007c4 	movi	r4,31
 5086b68:	2080e716 	blt	r4,r2,5086f08 <__subdf3+0x848>
 5086b6c:	01000804 	movi	r4,32
 5086b70:	2089c83a 	sub	r4,r4,r2
 5086b74:	1914983a 	sll	r10,r3,r4
 5086b78:	8890d83a 	srl	r8,r17,r2
 5086b7c:	8908983a 	sll	r4,r17,r4
 5086b80:	1884d83a 	srl	r2,r3,r2
 5086b84:	5222b03a 	or	r17,r10,r8
 5086b88:	2006c03a 	cmpne	r3,r4,zero
 5086b8c:	88e2b03a 	or	r17,r17,r3
 5086b90:	3463c83a 	sub	r17,r6,r17
 5086b94:	2885c83a 	sub	r2,r5,r2
 5086b98:	344d803a 	cmpltu	r6,r6,r17
 5086b9c:	1187c83a 	sub	r3,r2,r6
 5086ba0:	4821883a 	mov	r16,r9
 5086ba4:	3825883a 	mov	r18,r7
 5086ba8:	003f2306 	br	5086838 <__alt_data_end+0xfffb8638>
 5086bac:	24d0b03a 	or	r8,r4,r19
 5086bb0:	40001b1e 	bne	r8,zero,5086c20 <__subdf3+0x560>
 5086bb4:	0005883a 	mov	r2,zero
 5086bb8:	0009883a 	mov	r4,zero
 5086bbc:	0021883a 	mov	r16,zero
 5086bc0:	003f4906 	br	50868e8 <__alt_data_end+0xfffb86e8>
 5086bc4:	010007c4 	movi	r4,31
 5086bc8:	20803a16 	blt	r4,r2,5086cb4 <__subdf3+0x5f4>
 5086bcc:	01000804 	movi	r4,32
 5086bd0:	2089c83a 	sub	r4,r4,r2
 5086bd4:	2912983a 	sll	r9,r5,r4
 5086bd8:	3090d83a 	srl	r8,r6,r2
 5086bdc:	3108983a 	sll	r4,r6,r4
 5086be0:	2884d83a 	srl	r2,r5,r2
 5086be4:	4a12b03a 	or	r9,r9,r8
 5086be8:	2008c03a 	cmpne	r4,r4,zero
 5086bec:	4912b03a 	or	r9,r9,r4
 5086bf0:	003f4e06 	br	508692c <__alt_data_end+0xfffb872c>
 5086bf4:	1c48b03a 	or	r4,r3,r17
 5086bf8:	20003c26 	beq	r4,zero,5086cec <__subdf3+0x62c>
 5086bfc:	0084303a 	nor	r2,zero,r2
 5086c00:	1000381e 	bne	r2,zero,5086ce4 <__subdf3+0x624>
 5086c04:	3463c83a 	sub	r17,r6,r17
 5086c08:	28c5c83a 	sub	r2,r5,r3
 5086c0c:	344d803a 	cmpltu	r6,r6,r17
 5086c10:	1187c83a 	sub	r3,r2,r6
 5086c14:	4821883a 	mov	r16,r9
 5086c18:	3825883a 	mov	r18,r7
 5086c1c:	003f0606 	br	5086838 <__alt_data_end+0xfffb8638>
 5086c20:	2023883a 	mov	r17,r4
 5086c24:	003f0906 	br	508684c <__alt_data_end+0xfffb864c>
 5086c28:	0101ffc4 	movi	r4,2047
 5086c2c:	813f3a1e 	bne	r16,r4,5086918 <__alt_data_end+0xfffb8718>
 5086c30:	003ec406 	br	5086744 <__alt_data_end+0xfffb8544>
 5086c34:	0005883a 	mov	r2,zero
 5086c38:	003fb106 	br	5086b00 <__alt_data_end+0xfffb8900>
 5086c3c:	0005883a 	mov	r2,zero
 5086c40:	003fbc06 	br	5086b34 <__alt_data_end+0xfffb8934>
 5086c44:	1c44b03a 	or	r2,r3,r17
 5086c48:	80008e1e 	bne	r16,zero,5086e84 <__subdf3+0x7c4>
 5086c4c:	1000c826 	beq	r2,zero,5086f70 <__subdf3+0x8b0>
 5086c50:	2984b03a 	or	r2,r5,r6
 5086c54:	103ebb26 	beq	r2,zero,5086744 <__alt_data_end+0xfffb8544>
 5086c58:	8989883a 	add	r4,r17,r6
 5086c5c:	1945883a 	add	r2,r3,r5
 5086c60:	2447803a 	cmpltu	r3,r4,r17
 5086c64:	1887883a 	add	r3,r3,r2
 5086c68:	1880202c 	andhi	r2,r3,128
 5086c6c:	2023883a 	mov	r17,r4
 5086c70:	103f1626 	beq	r2,zero,50868cc <__alt_data_end+0xfffb86cc>
 5086c74:	00bfe034 	movhi	r2,65408
 5086c78:	10bfffc4 	addi	r2,r2,-1
 5086c7c:	5021883a 	mov	r16,r10
 5086c80:	1886703a 	and	r3,r3,r2
 5086c84:	003eaf06 	br	5086744 <__alt_data_end+0xfffb8544>
 5086c88:	3825883a 	mov	r18,r7
 5086c8c:	003f0f06 	br	50868cc <__alt_data_end+0xfffb86cc>
 5086c90:	1c44b03a 	or	r2,r3,r17
 5086c94:	8000251e 	bne	r16,zero,5086d2c <__subdf3+0x66c>
 5086c98:	1000661e 	bne	r2,zero,5086e34 <__subdf3+0x774>
 5086c9c:	2990b03a 	or	r8,r5,r6
 5086ca0:	40009626 	beq	r8,zero,5086efc <__subdf3+0x83c>
 5086ca4:	2807883a 	mov	r3,r5
 5086ca8:	3023883a 	mov	r17,r6
 5086cac:	3825883a 	mov	r18,r7
 5086cb0:	003ea406 	br	5086744 <__alt_data_end+0xfffb8544>
 5086cb4:	127ff804 	addi	r9,r2,-32
 5086cb8:	01000804 	movi	r4,32
 5086cbc:	2a52d83a 	srl	r9,r5,r9
 5086cc0:	11008c26 	beq	r2,r4,5086ef4 <__subdf3+0x834>
 5086cc4:	01001004 	movi	r4,64
 5086cc8:	2085c83a 	sub	r2,r4,r2
 5086ccc:	2884983a 	sll	r2,r5,r2
 5086cd0:	118cb03a 	or	r6,r2,r6
 5086cd4:	300cc03a 	cmpne	r6,r6,zero
 5086cd8:	4992b03a 	or	r9,r9,r6
 5086cdc:	0005883a 	mov	r2,zero
 5086ce0:	003f1206 	br	508692c <__alt_data_end+0xfffb872c>
 5086ce4:	0101ffc4 	movi	r4,2047
 5086ce8:	493f9c1e 	bne	r9,r4,5086b5c <__alt_data_end+0xfffb895c>
 5086cec:	2807883a 	mov	r3,r5
 5086cf0:	3023883a 	mov	r17,r6
 5086cf4:	4821883a 	mov	r16,r9
 5086cf8:	3825883a 	mov	r18,r7
 5086cfc:	003e9106 	br	5086744 <__alt_data_end+0xfffb8544>
 5086d00:	80001f1e 	bne	r16,zero,5086d80 <__subdf3+0x6c0>
 5086d04:	1c48b03a 	or	r4,r3,r17
 5086d08:	20005a26 	beq	r4,zero,5086e74 <__subdf3+0x7b4>
 5086d0c:	0084303a 	nor	r2,zero,r2
 5086d10:	1000561e 	bne	r2,zero,5086e6c <__subdf3+0x7ac>
 5086d14:	89a3883a 	add	r17,r17,r6
 5086d18:	1945883a 	add	r2,r3,r5
 5086d1c:	898d803a 	cmpltu	r6,r17,r6
 5086d20:	3087883a 	add	r3,r6,r2
 5086d24:	4821883a 	mov	r16,r9
 5086d28:	003f0506 	br	5086940 <__alt_data_end+0xfffb8740>
 5086d2c:	10002b1e 	bne	r2,zero,5086ddc <__subdf3+0x71c>
 5086d30:	2984b03a 	or	r2,r5,r6
 5086d34:	10008026 	beq	r2,zero,5086f38 <__subdf3+0x878>
 5086d38:	2807883a 	mov	r3,r5
 5086d3c:	3023883a 	mov	r17,r6
 5086d40:	3825883a 	mov	r18,r7
 5086d44:	0401ffc4 	movi	r16,2047
 5086d48:	003e7e06 	br	5086744 <__alt_data_end+0xfffb8544>
 5086d4c:	3809883a 	mov	r4,r7
 5086d50:	0011883a 	mov	r8,zero
 5086d54:	0005883a 	mov	r2,zero
 5086d58:	003ee306 	br	50868e8 <__alt_data_end+0xfffb86e8>
 5086d5c:	1c62b03a 	or	r17,r3,r17
 5086d60:	8822c03a 	cmpne	r17,r17,zero
 5086d64:	0005883a 	mov	r2,zero
 5086d68:	003f8906 	br	5086b90 <__alt_data_end+0xfffb8990>
 5086d6c:	3809883a 	mov	r4,r7
 5086d70:	4821883a 	mov	r16,r9
 5086d74:	0011883a 	mov	r8,zero
 5086d78:	0005883a 	mov	r2,zero
 5086d7c:	003eda06 	br	50868e8 <__alt_data_end+0xfffb86e8>
 5086d80:	0101ffc4 	movi	r4,2047
 5086d84:	49003b26 	beq	r9,r4,5086e74 <__subdf3+0x7b4>
 5086d88:	0085c83a 	sub	r2,zero,r2
 5086d8c:	18c02034 	orhi	r3,r3,128
 5086d90:	01000e04 	movi	r4,56
 5086d94:	20806e16 	blt	r4,r2,5086f50 <__subdf3+0x890>
 5086d98:	010007c4 	movi	r4,31
 5086d9c:	20807716 	blt	r4,r2,5086f7c <__subdf3+0x8bc>
 5086da0:	01000804 	movi	r4,32
 5086da4:	2089c83a 	sub	r4,r4,r2
 5086da8:	1914983a 	sll	r10,r3,r4
 5086dac:	8890d83a 	srl	r8,r17,r2
 5086db0:	8908983a 	sll	r4,r17,r4
 5086db4:	1884d83a 	srl	r2,r3,r2
 5086db8:	5222b03a 	or	r17,r10,r8
 5086dbc:	2006c03a 	cmpne	r3,r4,zero
 5086dc0:	88e2b03a 	or	r17,r17,r3
 5086dc4:	89a3883a 	add	r17,r17,r6
 5086dc8:	1145883a 	add	r2,r2,r5
 5086dcc:	898d803a 	cmpltu	r6,r17,r6
 5086dd0:	3087883a 	add	r3,r6,r2
 5086dd4:	4821883a 	mov	r16,r9
 5086dd8:	003ed906 	br	5086940 <__alt_data_end+0xfffb8740>
 5086ddc:	2984b03a 	or	r2,r5,r6
 5086de0:	10004226 	beq	r2,zero,5086eec <__subdf3+0x82c>
 5086de4:	1808d0fa 	srli	r4,r3,3
 5086de8:	8822d0fa 	srli	r17,r17,3
 5086dec:	1806977a 	slli	r3,r3,29
 5086df0:	2080022c 	andhi	r2,r4,8
 5086df4:	1c62b03a 	or	r17,r3,r17
 5086df8:	10000826 	beq	r2,zero,5086e1c <__subdf3+0x75c>
 5086dfc:	2812d0fa 	srli	r9,r5,3
 5086e00:	4880022c 	andhi	r2,r9,8
 5086e04:	1000051e 	bne	r2,zero,5086e1c <__subdf3+0x75c>
 5086e08:	300cd0fa 	srli	r6,r6,3
 5086e0c:	2804977a 	slli	r2,r5,29
 5086e10:	4809883a 	mov	r4,r9
 5086e14:	3825883a 	mov	r18,r7
 5086e18:	11a2b03a 	or	r17,r2,r6
 5086e1c:	8806d77a 	srli	r3,r17,29
 5086e20:	200890fa 	slli	r4,r4,3
 5086e24:	882290fa 	slli	r17,r17,3
 5086e28:	0401ffc4 	movi	r16,2047
 5086e2c:	1906b03a 	or	r3,r3,r4
 5086e30:	003e4406 	br	5086744 <__alt_data_end+0xfffb8544>
 5086e34:	2984b03a 	or	r2,r5,r6
 5086e38:	103e4226 	beq	r2,zero,5086744 <__alt_data_end+0xfffb8544>
 5086e3c:	8989c83a 	sub	r4,r17,r6
 5086e40:	8911803a 	cmpltu	r8,r17,r4
 5086e44:	1945c83a 	sub	r2,r3,r5
 5086e48:	1205c83a 	sub	r2,r2,r8
 5086e4c:	1200202c 	andhi	r8,r2,128
 5086e50:	403e9a26 	beq	r8,zero,50868bc <__alt_data_end+0xfffb86bc>
 5086e54:	3463c83a 	sub	r17,r6,r17
 5086e58:	28c5c83a 	sub	r2,r5,r3
 5086e5c:	344d803a 	cmpltu	r6,r6,r17
 5086e60:	1187c83a 	sub	r3,r2,r6
 5086e64:	3825883a 	mov	r18,r7
 5086e68:	003e3606 	br	5086744 <__alt_data_end+0xfffb8544>
 5086e6c:	0101ffc4 	movi	r4,2047
 5086e70:	493fc71e 	bne	r9,r4,5086d90 <__alt_data_end+0xfffb8b90>
 5086e74:	2807883a 	mov	r3,r5
 5086e78:	3023883a 	mov	r17,r6
 5086e7c:	4821883a 	mov	r16,r9
 5086e80:	003e3006 	br	5086744 <__alt_data_end+0xfffb8544>
 5086e84:	10003626 	beq	r2,zero,5086f60 <__subdf3+0x8a0>
 5086e88:	2984b03a 	or	r2,r5,r6
 5086e8c:	10001726 	beq	r2,zero,5086eec <__subdf3+0x82c>
 5086e90:	1808d0fa 	srli	r4,r3,3
 5086e94:	8822d0fa 	srli	r17,r17,3
 5086e98:	1806977a 	slli	r3,r3,29
 5086e9c:	2080022c 	andhi	r2,r4,8
 5086ea0:	1c62b03a 	or	r17,r3,r17
 5086ea4:	10000726 	beq	r2,zero,5086ec4 <__subdf3+0x804>
 5086ea8:	2812d0fa 	srli	r9,r5,3
 5086eac:	4880022c 	andhi	r2,r9,8
 5086eb0:	1000041e 	bne	r2,zero,5086ec4 <__subdf3+0x804>
 5086eb4:	300cd0fa 	srli	r6,r6,3
 5086eb8:	2804977a 	slli	r2,r5,29
 5086ebc:	4809883a 	mov	r4,r9
 5086ec0:	11a2b03a 	or	r17,r2,r6
 5086ec4:	8806d77a 	srli	r3,r17,29
 5086ec8:	200890fa 	slli	r4,r4,3
 5086ecc:	882290fa 	slli	r17,r17,3
 5086ed0:	3825883a 	mov	r18,r7
 5086ed4:	1906b03a 	or	r3,r3,r4
 5086ed8:	0401ffc4 	movi	r16,2047
 5086edc:	003e1906 	br	5086744 <__alt_data_end+0xfffb8544>
 5086ee0:	000b883a 	mov	r5,zero
 5086ee4:	0005883a 	mov	r2,zero
 5086ee8:	003e2e06 	br	50867a4 <__alt_data_end+0xfffb85a4>
 5086eec:	0401ffc4 	movi	r16,2047
 5086ef0:	003e1406 	br	5086744 <__alt_data_end+0xfffb8544>
 5086ef4:	0005883a 	mov	r2,zero
 5086ef8:	003f7506 	br	5086cd0 <__alt_data_end+0xfffb8ad0>
 5086efc:	0005883a 	mov	r2,zero
 5086f00:	0009883a 	mov	r4,zero
 5086f04:	003e7806 	br	50868e8 <__alt_data_end+0xfffb86e8>
 5086f08:	123ff804 	addi	r8,r2,-32
 5086f0c:	01000804 	movi	r4,32
 5086f10:	1a10d83a 	srl	r8,r3,r8
 5086f14:	11002526 	beq	r2,r4,5086fac <__subdf3+0x8ec>
 5086f18:	01001004 	movi	r4,64
 5086f1c:	2085c83a 	sub	r2,r4,r2
 5086f20:	1884983a 	sll	r2,r3,r2
 5086f24:	1444b03a 	or	r2,r2,r17
 5086f28:	1004c03a 	cmpne	r2,r2,zero
 5086f2c:	40a2b03a 	or	r17,r8,r2
 5086f30:	0005883a 	mov	r2,zero
 5086f34:	003f1606 	br	5086b90 <__alt_data_end+0xfffb8990>
 5086f38:	02000434 	movhi	r8,16
 5086f3c:	0009883a 	mov	r4,zero
 5086f40:	423fffc4 	addi	r8,r8,-1
 5086f44:	00bfffc4 	movi	r2,-1
 5086f48:	0401ffc4 	movi	r16,2047
 5086f4c:	003e6606 	br	50868e8 <__alt_data_end+0xfffb86e8>
 5086f50:	1c62b03a 	or	r17,r3,r17
 5086f54:	8822c03a 	cmpne	r17,r17,zero
 5086f58:	0005883a 	mov	r2,zero
 5086f5c:	003f9906 	br	5086dc4 <__alt_data_end+0xfffb8bc4>
 5086f60:	2807883a 	mov	r3,r5
 5086f64:	3023883a 	mov	r17,r6
 5086f68:	0401ffc4 	movi	r16,2047
 5086f6c:	003df506 	br	5086744 <__alt_data_end+0xfffb8544>
 5086f70:	2807883a 	mov	r3,r5
 5086f74:	3023883a 	mov	r17,r6
 5086f78:	003df206 	br	5086744 <__alt_data_end+0xfffb8544>
 5086f7c:	123ff804 	addi	r8,r2,-32
 5086f80:	01000804 	movi	r4,32
 5086f84:	1a10d83a 	srl	r8,r3,r8
 5086f88:	11000a26 	beq	r2,r4,5086fb4 <__subdf3+0x8f4>
 5086f8c:	01001004 	movi	r4,64
 5086f90:	2085c83a 	sub	r2,r4,r2
 5086f94:	1884983a 	sll	r2,r3,r2
 5086f98:	1444b03a 	or	r2,r2,r17
 5086f9c:	1004c03a 	cmpne	r2,r2,zero
 5086fa0:	40a2b03a 	or	r17,r8,r2
 5086fa4:	0005883a 	mov	r2,zero
 5086fa8:	003f8606 	br	5086dc4 <__alt_data_end+0xfffb8bc4>
 5086fac:	0005883a 	mov	r2,zero
 5086fb0:	003fdc06 	br	5086f24 <__alt_data_end+0xfffb8d24>
 5086fb4:	0005883a 	mov	r2,zero
 5086fb8:	003ff706 	br	5086f98 <__alt_data_end+0xfffb8d98>

05086fbc <__fixdfsi>:
 5086fbc:	280cd53a 	srli	r6,r5,20
 5086fc0:	00c00434 	movhi	r3,16
 5086fc4:	18ffffc4 	addi	r3,r3,-1
 5086fc8:	3181ffcc 	andi	r6,r6,2047
 5086fcc:	01c0ff84 	movi	r7,1022
 5086fd0:	28c6703a 	and	r3,r5,r3
 5086fd4:	280ad7fa 	srli	r5,r5,31
 5086fd8:	3980120e 	bge	r7,r6,5087024 <__fixdfsi+0x68>
 5086fdc:	00810744 	movi	r2,1053
 5086fe0:	11800c16 	blt	r2,r6,5087014 <__fixdfsi+0x58>
 5086fe4:	00810cc4 	movi	r2,1075
 5086fe8:	1185c83a 	sub	r2,r2,r6
 5086fec:	01c007c4 	movi	r7,31
 5086ff0:	18c00434 	orhi	r3,r3,16
 5086ff4:	38800d16 	blt	r7,r2,508702c <__fixdfsi+0x70>
 5086ff8:	31befb44 	addi	r6,r6,-1043
 5086ffc:	2084d83a 	srl	r2,r4,r2
 5087000:	1986983a 	sll	r3,r3,r6
 5087004:	1884b03a 	or	r2,r3,r2
 5087008:	28000726 	beq	r5,zero,5087028 <__fixdfsi+0x6c>
 508700c:	0085c83a 	sub	r2,zero,r2
 5087010:	f800283a 	ret
 5087014:	00a00034 	movhi	r2,32768
 5087018:	10bfffc4 	addi	r2,r2,-1
 508701c:	2885883a 	add	r2,r5,r2
 5087020:	f800283a 	ret
 5087024:	0005883a 	mov	r2,zero
 5087028:	f800283a 	ret
 508702c:	008104c4 	movi	r2,1043
 5087030:	1185c83a 	sub	r2,r2,r6
 5087034:	1884d83a 	srl	r2,r3,r2
 5087038:	003ff306 	br	5087008 <__alt_data_end+0xfffb8e08>

0508703c <__floatsidf>:
 508703c:	defffd04 	addi	sp,sp,-12
 5087040:	dfc00215 	stw	ra,8(sp)
 5087044:	dc400115 	stw	r17,4(sp)
 5087048:	dc000015 	stw	r16,0(sp)
 508704c:	20002b26 	beq	r4,zero,50870fc <__floatsidf+0xc0>
 5087050:	2023883a 	mov	r17,r4
 5087054:	2020d7fa 	srli	r16,r4,31
 5087058:	20002d16 	blt	r4,zero,5087110 <__floatsidf+0xd4>
 508705c:	8809883a 	mov	r4,r17
 5087060:	50871180 	call	5087118 <__clzsi2>
 5087064:	01410784 	movi	r5,1054
 5087068:	288bc83a 	sub	r5,r5,r2
 508706c:	01010cc4 	movi	r4,1075
 5087070:	2149c83a 	sub	r4,r4,r5
 5087074:	00c007c4 	movi	r3,31
 5087078:	1900160e 	bge	r3,r4,50870d4 <__floatsidf+0x98>
 508707c:	00c104c4 	movi	r3,1043
 5087080:	1947c83a 	sub	r3,r3,r5
 5087084:	88c6983a 	sll	r3,r17,r3
 5087088:	00800434 	movhi	r2,16
 508708c:	10bfffc4 	addi	r2,r2,-1
 5087090:	1886703a 	and	r3,r3,r2
 5087094:	2941ffcc 	andi	r5,r5,2047
 5087098:	800d883a 	mov	r6,r16
 508709c:	0005883a 	mov	r2,zero
 50870a0:	280a953a 	slli	r5,r5,20
 50870a4:	31803fcc 	andi	r6,r6,255
 50870a8:	01000434 	movhi	r4,16
 50870ac:	300c97fa 	slli	r6,r6,31
 50870b0:	213fffc4 	addi	r4,r4,-1
 50870b4:	1906703a 	and	r3,r3,r4
 50870b8:	1946b03a 	or	r3,r3,r5
 50870bc:	1986b03a 	or	r3,r3,r6
 50870c0:	dfc00217 	ldw	ra,8(sp)
 50870c4:	dc400117 	ldw	r17,4(sp)
 50870c8:	dc000017 	ldw	r16,0(sp)
 50870cc:	dec00304 	addi	sp,sp,12
 50870d0:	f800283a 	ret
 50870d4:	00c002c4 	movi	r3,11
 50870d8:	1887c83a 	sub	r3,r3,r2
 50870dc:	88c6d83a 	srl	r3,r17,r3
 50870e0:	8904983a 	sll	r2,r17,r4
 50870e4:	01000434 	movhi	r4,16
 50870e8:	213fffc4 	addi	r4,r4,-1
 50870ec:	2941ffcc 	andi	r5,r5,2047
 50870f0:	1906703a 	and	r3,r3,r4
 50870f4:	800d883a 	mov	r6,r16
 50870f8:	003fe906 	br	50870a0 <__alt_data_end+0xfffb8ea0>
 50870fc:	000d883a 	mov	r6,zero
 5087100:	000b883a 	mov	r5,zero
 5087104:	0007883a 	mov	r3,zero
 5087108:	0005883a 	mov	r2,zero
 508710c:	003fe406 	br	50870a0 <__alt_data_end+0xfffb8ea0>
 5087110:	0123c83a 	sub	r17,zero,r4
 5087114:	003fd106 	br	508705c <__alt_data_end+0xfffb8e5c>

05087118 <__clzsi2>:
 5087118:	00bfffd4 	movui	r2,65535
 508711c:	11000536 	bltu	r2,r4,5087134 <__clzsi2+0x1c>
 5087120:	00803fc4 	movi	r2,255
 5087124:	11000f36 	bltu	r2,r4,5087164 <__clzsi2+0x4c>
 5087128:	00800804 	movi	r2,32
 508712c:	0007883a 	mov	r3,zero
 5087130:	00000506 	br	5087148 <__clzsi2+0x30>
 5087134:	00804034 	movhi	r2,256
 5087138:	10bfffc4 	addi	r2,r2,-1
 508713c:	11000c2e 	bgeu	r2,r4,5087170 <__clzsi2+0x58>
 5087140:	00800204 	movi	r2,8
 5087144:	00c00604 	movi	r3,24
 5087148:	20c8d83a 	srl	r4,r4,r3
 508714c:	00c14274 	movhi	r3,1289
 5087150:	18d0e404 	addi	r3,r3,17296
 5087154:	1909883a 	add	r4,r3,r4
 5087158:	20c00003 	ldbu	r3,0(r4)
 508715c:	10c5c83a 	sub	r2,r2,r3
 5087160:	f800283a 	ret
 5087164:	00800604 	movi	r2,24
 5087168:	00c00204 	movi	r3,8
 508716c:	003ff606 	br	5087148 <__alt_data_end+0xfffb8f48>
 5087170:	00800404 	movi	r2,16
 5087174:	1007883a 	mov	r3,r2
 5087178:	003ff306 	br	5087148 <__alt_data_end+0xfffb8f48>

0508717c <__errno>:
 508717c:	00814274 	movhi	r2,1289
 5087180:	10986204 	addi	r2,r2,24968
 5087184:	10800017 	ldw	r2,0(r2)
 5087188:	f800283a 	ret

0508718c <_printf_r>:
 508718c:	defffd04 	addi	sp,sp,-12
 5087190:	2805883a 	mov	r2,r5
 5087194:	dfc00015 	stw	ra,0(sp)
 5087198:	d9800115 	stw	r6,4(sp)
 508719c:	d9c00215 	stw	r7,8(sp)
 50871a0:	21400217 	ldw	r5,8(r4)
 50871a4:	d9c00104 	addi	r7,sp,4
 50871a8:	100d883a 	mov	r6,r2
 50871ac:	50874980 	call	5087498 <___vfprintf_internal_r>
 50871b0:	dfc00017 	ldw	ra,0(sp)
 50871b4:	dec00304 	addi	sp,sp,12
 50871b8:	f800283a 	ret

050871bc <printf>:
 50871bc:	defffc04 	addi	sp,sp,-16
 50871c0:	dfc00015 	stw	ra,0(sp)
 50871c4:	d9400115 	stw	r5,4(sp)
 50871c8:	d9800215 	stw	r6,8(sp)
 50871cc:	d9c00315 	stw	r7,12(sp)
 50871d0:	00814274 	movhi	r2,1289
 50871d4:	10986204 	addi	r2,r2,24968
 50871d8:	10800017 	ldw	r2,0(r2)
 50871dc:	200b883a 	mov	r5,r4
 50871e0:	d9800104 	addi	r6,sp,4
 50871e4:	11000217 	ldw	r4,8(r2)
 50871e8:	50896900 	call	5089690 <__vfprintf_internal>
 50871ec:	dfc00017 	ldw	ra,0(sp)
 50871f0:	dec00404 	addi	sp,sp,16
 50871f4:	f800283a 	ret

050871f8 <_putchar_r>:
 50871f8:	21800217 	ldw	r6,8(r4)
 50871fc:	508e1541 	jmpi	508e154 <_putc_r>

05087200 <putchar>:
 5087200:	00814274 	movhi	r2,1289
 5087204:	10986204 	addi	r2,r2,24968
 5087208:	200b883a 	mov	r5,r4
 508720c:	11000017 	ldw	r4,0(r2)
 5087210:	21800217 	ldw	r6,8(r4)
 5087214:	508e1541 	jmpi	508e154 <_putc_r>

05087218 <_puts_r>:
 5087218:	defff604 	addi	sp,sp,-40
 508721c:	dc000715 	stw	r16,28(sp)
 5087220:	2021883a 	mov	r16,r4
 5087224:	2809883a 	mov	r4,r5
 5087228:	dc400815 	stw	r17,32(sp)
 508722c:	dfc00915 	stw	ra,36(sp)
 5087230:	2823883a 	mov	r17,r5
 5087234:	50874000 	call	5087400 <strlen>
 5087238:	10c00044 	addi	r3,r2,1
 508723c:	d8800115 	stw	r2,4(sp)
 5087240:	00814274 	movhi	r2,1289
 5087244:	10912504 	addi	r2,r2,17556
 5087248:	d8800215 	stw	r2,8(sp)
 508724c:	00800044 	movi	r2,1
 5087250:	d8800315 	stw	r2,12(sp)
 5087254:	00800084 	movi	r2,2
 5087258:	dc400015 	stw	r17,0(sp)
 508725c:	d8c00615 	stw	r3,24(sp)
 5087260:	dec00415 	stw	sp,16(sp)
 5087264:	d8800515 	stw	r2,20(sp)
 5087268:	80000226 	beq	r16,zero,5087274 <_puts_r+0x5c>
 508726c:	80800e17 	ldw	r2,56(r16)
 5087270:	10001426 	beq	r2,zero,50872c4 <_puts_r+0xac>
 5087274:	81400217 	ldw	r5,8(r16)
 5087278:	2880030b 	ldhu	r2,12(r5)
 508727c:	10c8000c 	andi	r3,r2,8192
 5087280:	1800061e 	bne	r3,zero,508729c <_puts_r+0x84>
 5087284:	29001917 	ldw	r4,100(r5)
 5087288:	00f7ffc4 	movi	r3,-8193
 508728c:	10880014 	ori	r2,r2,8192
 5087290:	20c6703a 	and	r3,r4,r3
 5087294:	2880030d 	sth	r2,12(r5)
 5087298:	28c01915 	stw	r3,100(r5)
 508729c:	d9800404 	addi	r6,sp,16
 50872a0:	8009883a 	mov	r4,r16
 50872a4:	508bbc00 	call	508bbc0 <__sfvwrite_r>
 50872a8:	1000091e 	bne	r2,zero,50872d0 <_puts_r+0xb8>
 50872ac:	00800284 	movi	r2,10
 50872b0:	dfc00917 	ldw	ra,36(sp)
 50872b4:	dc400817 	ldw	r17,32(sp)
 50872b8:	dc000717 	ldw	r16,28(sp)
 50872bc:	dec00a04 	addi	sp,sp,40
 50872c0:	f800283a 	ret
 50872c4:	8009883a 	mov	r4,r16
 50872c8:	508b73c0 	call	508b73c <__sinit>
 50872cc:	003fe906 	br	5087274 <__alt_data_end+0xfffb9074>
 50872d0:	00bfffc4 	movi	r2,-1
 50872d4:	003ff606 	br	50872b0 <__alt_data_end+0xfffb90b0>

050872d8 <puts>:
 50872d8:	00814274 	movhi	r2,1289
 50872dc:	10986204 	addi	r2,r2,24968
 50872e0:	200b883a 	mov	r5,r4
 50872e4:	11000017 	ldw	r4,0(r2)
 50872e8:	50872181 	jmpi	5087218 <_puts_r>

050872ec <strcat>:
 50872ec:	defffe04 	addi	sp,sp,-8
 50872f0:	dc000015 	stw	r16,0(sp)
 50872f4:	dfc00115 	stw	ra,4(sp)
 50872f8:	208000cc 	andi	r2,r4,3
 50872fc:	2021883a 	mov	r16,r4
 5087300:	1000131e 	bne	r2,zero,5087350 <strcat+0x64>
 5087304:	20800017 	ldw	r2,0(r4)
 5087308:	01ffbff4 	movhi	r7,65279
 508730c:	39ffbfc4 	addi	r7,r7,-257
 5087310:	0086303a 	nor	r3,zero,r2
 5087314:	01a02074 	movhi	r6,32897
 5087318:	11c5883a 	add	r2,r2,r7
 508731c:	31a02004 	addi	r6,r6,-32640
 5087320:	10c4703a 	and	r2,r2,r3
 5087324:	1184703a 	and	r2,r2,r6
 5087328:	1000091e 	bne	r2,zero,5087350 <strcat+0x64>
 508732c:	21000104 	addi	r4,r4,4
 5087330:	20800017 	ldw	r2,0(r4)
 5087334:	11c7883a 	add	r3,r2,r7
 5087338:	0084303a 	nor	r2,zero,r2
 508733c:	1884703a 	and	r2,r3,r2
 5087340:	1184703a 	and	r2,r2,r6
 5087344:	103ff926 	beq	r2,zero,508732c <__alt_data_end+0xfffb912c>
 5087348:	00000106 	br	5087350 <strcat+0x64>
 508734c:	21000044 	addi	r4,r4,1
 5087350:	20800007 	ldb	r2,0(r4)
 5087354:	103ffd1e 	bne	r2,zero,508734c <__alt_data_end+0xfffb914c>
 5087358:	50873700 	call	5087370 <strcpy>
 508735c:	8005883a 	mov	r2,r16
 5087360:	dfc00117 	ldw	ra,4(sp)
 5087364:	dc000017 	ldw	r16,0(sp)
 5087368:	dec00204 	addi	sp,sp,8
 508736c:	f800283a 	ret

05087370 <strcpy>:
 5087370:	2906b03a 	or	r3,r5,r4
 5087374:	18c000cc 	andi	r3,r3,3
 5087378:	2005883a 	mov	r2,r4
 508737c:	1800161e 	bne	r3,zero,50873d8 <strcpy+0x68>
 5087380:	29c00017 	ldw	r7,0(r5)
 5087384:	02ffbff4 	movhi	r11,65279
 5087388:	5affbfc4 	addi	r11,r11,-257
 508738c:	02a02074 	movhi	r10,32897
 5087390:	01c6303a 	nor	r3,zero,r7
 5087394:	3ac9883a 	add	r4,r7,r11
 5087398:	52a02004 	addi	r10,r10,-32640
 508739c:	20c6703a 	and	r3,r4,r3
 50873a0:	1a86703a 	and	r3,r3,r10
 50873a4:	18000c1e 	bne	r3,zero,50873d8 <strcpy+0x68>
 50873a8:	1011883a 	mov	r8,r2
 50873ac:	41c00015 	stw	r7,0(r8)
 50873b0:	29400104 	addi	r5,r5,4
 50873b4:	29c00017 	ldw	r7,0(r5)
 50873b8:	41800104 	addi	r6,r8,4
 50873bc:	3011883a 	mov	r8,r6
 50873c0:	3ad3883a 	add	r9,r7,r11
 50873c4:	01c6303a 	nor	r3,zero,r7
 50873c8:	48c6703a 	and	r3,r9,r3
 50873cc:	1a86703a 	and	r3,r3,r10
 50873d0:	183ff626 	beq	r3,zero,50873ac <__alt_data_end+0xfffb91ac>
 50873d4:	00000106 	br	50873dc <strcpy+0x6c>
 50873d8:	100d883a 	mov	r6,r2
 50873dc:	28c00003 	ldbu	r3,0(r5)
 50873e0:	31800044 	addi	r6,r6,1
 50873e4:	29400044 	addi	r5,r5,1
 50873e8:	30ffffc5 	stb	r3,-1(r6)
 50873ec:	18c03fcc 	andi	r3,r3,255
 50873f0:	18c0201c 	xori	r3,r3,128
 50873f4:	18ffe004 	addi	r3,r3,-128
 50873f8:	183ff81e 	bne	r3,zero,50873dc <__alt_data_end+0xfffb91dc>
 50873fc:	f800283a 	ret

05087400 <strlen>:
 5087400:	208000cc 	andi	r2,r4,3
 5087404:	10002026 	beq	r2,zero,5087488 <strlen+0x88>
 5087408:	20800007 	ldb	r2,0(r4)
 508740c:	10002026 	beq	r2,zero,5087490 <strlen+0x90>
 5087410:	2005883a 	mov	r2,r4
 5087414:	00000206 	br	5087420 <strlen+0x20>
 5087418:	10c00007 	ldb	r3,0(r2)
 508741c:	18001826 	beq	r3,zero,5087480 <strlen+0x80>
 5087420:	10800044 	addi	r2,r2,1
 5087424:	10c000cc 	andi	r3,r2,3
 5087428:	183ffb1e 	bne	r3,zero,5087418 <__alt_data_end+0xfffb9218>
 508742c:	10c00017 	ldw	r3,0(r2)
 5087430:	01ffbff4 	movhi	r7,65279
 5087434:	39ffbfc4 	addi	r7,r7,-257
 5087438:	00ca303a 	nor	r5,zero,r3
 508743c:	01a02074 	movhi	r6,32897
 5087440:	19c7883a 	add	r3,r3,r7
 5087444:	31a02004 	addi	r6,r6,-32640
 5087448:	1946703a 	and	r3,r3,r5
 508744c:	1986703a 	and	r3,r3,r6
 5087450:	1800091e 	bne	r3,zero,5087478 <strlen+0x78>
 5087454:	10800104 	addi	r2,r2,4
 5087458:	10c00017 	ldw	r3,0(r2)
 508745c:	19cb883a 	add	r5,r3,r7
 5087460:	00c6303a 	nor	r3,zero,r3
 5087464:	28c6703a 	and	r3,r5,r3
 5087468:	1986703a 	and	r3,r3,r6
 508746c:	183ff926 	beq	r3,zero,5087454 <__alt_data_end+0xfffb9254>
 5087470:	00000106 	br	5087478 <strlen+0x78>
 5087474:	10800044 	addi	r2,r2,1
 5087478:	10c00007 	ldb	r3,0(r2)
 508747c:	183ffd1e 	bne	r3,zero,5087474 <__alt_data_end+0xfffb9274>
 5087480:	1105c83a 	sub	r2,r2,r4
 5087484:	f800283a 	ret
 5087488:	2005883a 	mov	r2,r4
 508748c:	003fe706 	br	508742c <__alt_data_end+0xfffb922c>
 5087490:	0005883a 	mov	r2,zero
 5087494:	f800283a 	ret

05087498 <___vfprintf_internal_r>:
 5087498:	deffb804 	addi	sp,sp,-288
 508749c:	dfc04715 	stw	ra,284(sp)
 50874a0:	ddc04515 	stw	r23,276(sp)
 50874a4:	dd404315 	stw	r21,268(sp)
 50874a8:	d9002c15 	stw	r4,176(sp)
 50874ac:	282f883a 	mov	r23,r5
 50874b0:	302b883a 	mov	r21,r6
 50874b4:	d9c02d15 	stw	r7,180(sp)
 50874b8:	df004615 	stw	fp,280(sp)
 50874bc:	dd804415 	stw	r22,272(sp)
 50874c0:	dd004215 	stw	r20,264(sp)
 50874c4:	dcc04115 	stw	r19,260(sp)
 50874c8:	dc804015 	stw	r18,256(sp)
 50874cc:	dc403f15 	stw	r17,252(sp)
 50874d0:	dc003e15 	stw	r16,248(sp)
 50874d4:	508c2b00 	call	508c2b0 <_localeconv_r>
 50874d8:	10800017 	ldw	r2,0(r2)
 50874dc:	1009883a 	mov	r4,r2
 50874e0:	d8803415 	stw	r2,208(sp)
 50874e4:	50874000 	call	5087400 <strlen>
 50874e8:	d8803715 	stw	r2,220(sp)
 50874ec:	d8802c17 	ldw	r2,176(sp)
 50874f0:	10000226 	beq	r2,zero,50874fc <___vfprintf_internal_r+0x64>
 50874f4:	10800e17 	ldw	r2,56(r2)
 50874f8:	1000f926 	beq	r2,zero,50878e0 <___vfprintf_internal_r+0x448>
 50874fc:	b880030b 	ldhu	r2,12(r23)
 5087500:	10c8000c 	andi	r3,r2,8192
 5087504:	1800061e 	bne	r3,zero,5087520 <___vfprintf_internal_r+0x88>
 5087508:	b9001917 	ldw	r4,100(r23)
 508750c:	00f7ffc4 	movi	r3,-8193
 5087510:	10880014 	ori	r2,r2,8192
 5087514:	20c6703a 	and	r3,r4,r3
 5087518:	b880030d 	sth	r2,12(r23)
 508751c:	b8c01915 	stw	r3,100(r23)
 5087520:	10c0020c 	andi	r3,r2,8
 5087524:	1800c126 	beq	r3,zero,508782c <___vfprintf_internal_r+0x394>
 5087528:	b8c00417 	ldw	r3,16(r23)
 508752c:	1800bf26 	beq	r3,zero,508782c <___vfprintf_internal_r+0x394>
 5087530:	1080068c 	andi	r2,r2,26
 5087534:	00c00284 	movi	r3,10
 5087538:	10c0c426 	beq	r2,r3,508784c <___vfprintf_internal_r+0x3b4>
 508753c:	d8c00404 	addi	r3,sp,16
 5087540:	05014274 	movhi	r20,1289
 5087544:	d9001e04 	addi	r4,sp,120
 5087548:	a5113684 	addi	r20,r20,17626
 508754c:	d8c01e15 	stw	r3,120(sp)
 5087550:	d8002015 	stw	zero,128(sp)
 5087554:	d8001f15 	stw	zero,124(sp)
 5087558:	d8003315 	stw	zero,204(sp)
 508755c:	d8003615 	stw	zero,216(sp)
 5087560:	d8003815 	stw	zero,224(sp)
 5087564:	1811883a 	mov	r8,r3
 5087568:	d8003915 	stw	zero,228(sp)
 508756c:	d8003a15 	stw	zero,232(sp)
 5087570:	d8002f15 	stw	zero,188(sp)
 5087574:	d9002815 	stw	r4,160(sp)
 5087578:	a8800007 	ldb	r2,0(r21)
 508757c:	10027b26 	beq	r2,zero,5087f6c <___vfprintf_internal_r+0xad4>
 5087580:	00c00944 	movi	r3,37
 5087584:	a821883a 	mov	r16,r21
 5087588:	10c0021e 	bne	r2,r3,5087594 <___vfprintf_internal_r+0xfc>
 508758c:	00001406 	br	50875e0 <___vfprintf_internal_r+0x148>
 5087590:	10c00326 	beq	r2,r3,50875a0 <___vfprintf_internal_r+0x108>
 5087594:	84000044 	addi	r16,r16,1
 5087598:	80800007 	ldb	r2,0(r16)
 508759c:	103ffc1e 	bne	r2,zero,5087590 <__alt_data_end+0xfffb9390>
 50875a0:	8563c83a 	sub	r17,r16,r21
 50875a4:	88000e26 	beq	r17,zero,50875e0 <___vfprintf_internal_r+0x148>
 50875a8:	d8c02017 	ldw	r3,128(sp)
 50875ac:	d8801f17 	ldw	r2,124(sp)
 50875b0:	45400015 	stw	r21,0(r8)
 50875b4:	1c47883a 	add	r3,r3,r17
 50875b8:	10800044 	addi	r2,r2,1
 50875bc:	d8c02015 	stw	r3,128(sp)
 50875c0:	44400115 	stw	r17,4(r8)
 50875c4:	d8801f15 	stw	r2,124(sp)
 50875c8:	00c001c4 	movi	r3,7
 50875cc:	1880a716 	blt	r3,r2,508786c <___vfprintf_internal_r+0x3d4>
 50875d0:	42000204 	addi	r8,r8,8
 50875d4:	d9402f17 	ldw	r5,188(sp)
 50875d8:	2c4b883a 	add	r5,r5,r17
 50875dc:	d9402f15 	stw	r5,188(sp)
 50875e0:	80800007 	ldb	r2,0(r16)
 50875e4:	1000a826 	beq	r2,zero,5087888 <___vfprintf_internal_r+0x3f0>
 50875e8:	84400047 	ldb	r17,1(r16)
 50875ec:	00bfffc4 	movi	r2,-1
 50875f0:	85400044 	addi	r21,r16,1
 50875f4:	d8002785 	stb	zero,158(sp)
 50875f8:	0007883a 	mov	r3,zero
 50875fc:	000f883a 	mov	r7,zero
 5087600:	d8802915 	stw	r2,164(sp)
 5087604:	d8003115 	stw	zero,196(sp)
 5087608:	0025883a 	mov	r18,zero
 508760c:	01401604 	movi	r5,88
 5087610:	01800244 	movi	r6,9
 5087614:	02800a84 	movi	r10,42
 5087618:	02401b04 	movi	r9,108
 508761c:	ad400044 	addi	r21,r21,1
 5087620:	88bff804 	addi	r2,r17,-32
 5087624:	28830436 	bltu	r5,r2,5088238 <___vfprintf_internal_r+0xda0>
 5087628:	100490ba 	slli	r2,r2,2
 508762c:	01014234 	movhi	r4,1288
 5087630:	211d9004 	addi	r4,r4,30272
 5087634:	1105883a 	add	r2,r2,r4
 5087638:	10800017 	ldw	r2,0(r2)
 508763c:	1000683a 	jmp	r2
 5087640:	05088158 	cmpnei	r20,zero,8709
 5087644:	05088238 	rdprs	r20,zero,8712
 5087648:	05088238 	rdprs	r20,zero,8712
 508764c:	05088178 	rdprs	r20,zero,8709
 5087650:	05088238 	rdprs	r20,zero,8712
 5087654:	05088238 	rdprs	r20,zero,8712
 5087658:	05088238 	rdprs	r20,zero,8712
 508765c:	05088238 	rdprs	r20,zero,8712
 5087660:	05088238 	rdprs	r20,zero,8712
 5087664:	05088238 	rdprs	r20,zero,8712
 5087668:	050878ec 	andhi	r20,zero,8675
 508766c:	05088094 	movui	r20,8706
 5087670:	05088238 	rdprs	r20,zero,8712
 5087674:	050877b4 	movhi	r20,8670
 5087678:	05087914 	movui	r20,8676
 508767c:	05088238 	rdprs	r20,zero,8712
 5087680:	05087954 	movui	r20,8677
 5087684:	05087960 	cmpeqi	r20,zero,8677
 5087688:	05087960 	cmpeqi	r20,zero,8677
 508768c:	05087960 	cmpeqi	r20,zero,8677
 5087690:	05087960 	cmpeqi	r20,zero,8677
 5087694:	05087960 	cmpeqi	r20,zero,8677
 5087698:	05087960 	cmpeqi	r20,zero,8677
 508769c:	05087960 	cmpeqi	r20,zero,8677
 50876a0:	05087960 	cmpeqi	r20,zero,8677
 50876a4:	05087960 	cmpeqi	r20,zero,8677
 50876a8:	05088238 	rdprs	r20,zero,8712
 50876ac:	05088238 	rdprs	r20,zero,8712
 50876b0:	05088238 	rdprs	r20,zero,8712
 50876b4:	05088238 	rdprs	r20,zero,8712
 50876b8:	05088238 	rdprs	r20,zero,8712
 50876bc:	05088238 	rdprs	r20,zero,8712
 50876c0:	05088238 	rdprs	r20,zero,8712
 50876c4:	05088238 	rdprs	r20,zero,8712
 50876c8:	05088238 	rdprs	r20,zero,8712
 50876cc:	05088238 	rdprs	r20,zero,8712
 50876d0:	05087994 	movui	r20,8678
 50876d4:	05087a50 	cmplti	r20,zero,8681
 50876d8:	05088238 	rdprs	r20,zero,8712
 50876dc:	05087a50 	cmplti	r20,zero,8681
 50876e0:	05088238 	rdprs	r20,zero,8712
 50876e4:	05088238 	rdprs	r20,zero,8712
 50876e8:	05088238 	rdprs	r20,zero,8712
 50876ec:	05088238 	rdprs	r20,zero,8712
 50876f0:	05087af0 	cmpltui	r20,zero,8683
 50876f4:	05088238 	rdprs	r20,zero,8712
 50876f8:	05088238 	rdprs	r20,zero,8712
 50876fc:	05087afc 	xorhi	r20,zero,8683
 5087700:	05088238 	rdprs	r20,zero,8712
 5087704:	05088238 	rdprs	r20,zero,8712
 5087708:	05088238 	rdprs	r20,zero,8712
 508770c:	05088238 	rdprs	r20,zero,8712
 5087710:	05088238 	rdprs	r20,zero,8712
 5087714:	05087f74 	movhi	r20,8701
 5087718:	05088238 	rdprs	r20,zero,8712
 508771c:	05088238 	rdprs	r20,zero,8712
 5087720:	05087fd4 	movui	r20,8703
 5087724:	05088238 	rdprs	r20,zero,8712
 5087728:	05088238 	rdprs	r20,zero,8712
 508772c:	05088238 	rdprs	r20,zero,8712
 5087730:	05088238 	rdprs	r20,zero,8712
 5087734:	05088238 	rdprs	r20,zero,8712
 5087738:	05088238 	rdprs	r20,zero,8712
 508773c:	05088238 	rdprs	r20,zero,8712
 5087740:	05088238 	rdprs	r20,zero,8712
 5087744:	05088238 	rdprs	r20,zero,8712
 5087748:	05088238 	rdprs	r20,zero,8712
 508774c:	050881e4 	muli	r20,zero,8711
 5087750:	05088184 	movi	r20,8710
 5087754:	05087a50 	cmplti	r20,zero,8681
 5087758:	05087a50 	cmplti	r20,zero,8681
 508775c:	05087a50 	cmplti	r20,zero,8681
 5087760:	05088194 	movui	r20,8710
 5087764:	05088184 	movi	r20,8710
 5087768:	05088238 	rdprs	r20,zero,8712
 508776c:	05088238 	rdprs	r20,zero,8712
 5087770:	050881a0 	cmpeqi	r20,zero,8710
 5087774:	05088238 	rdprs	r20,zero,8712
 5087778:	050881b0 	cmpltui	r20,zero,8710
 508777c:	05088084 	movi	r20,8706
 5087780:	050877c0 	call	50877c <__alt_mem_sdram+0x50877c>
 5087784:	050880a4 	muli	r20,zero,8706
 5087788:	05088238 	rdprs	r20,zero,8712
 508778c:	050880b0 	cmpltui	r20,zero,8706
 5087790:	05088238 	rdprs	r20,zero,8712
 5087794:	0508810c 	andi	r20,zero,8708
 5087798:	05088238 	rdprs	r20,zero,8712
 508779c:	05088238 	rdprs	r20,zero,8712
 50877a0:	0508811c 	xori	r20,zero,8708
 50877a4:	d9003117 	ldw	r4,196(sp)
 50877a8:	d8802d15 	stw	r2,180(sp)
 50877ac:	0109c83a 	sub	r4,zero,r4
 50877b0:	d9003115 	stw	r4,196(sp)
 50877b4:	94800114 	ori	r18,r18,4
 50877b8:	ac400007 	ldb	r17,0(r21)
 50877bc:	003f9706 	br	508761c <__alt_data_end+0xfffb941c>
 50877c0:	00800c04 	movi	r2,48
 50877c4:	d9002d17 	ldw	r4,180(sp)
 50877c8:	d9402917 	ldw	r5,164(sp)
 50877cc:	d8802705 	stb	r2,156(sp)
 50877d0:	00801e04 	movi	r2,120
 50877d4:	d8802745 	stb	r2,157(sp)
 50877d8:	d8002785 	stb	zero,158(sp)
 50877dc:	20c00104 	addi	r3,r4,4
 50877e0:	24c00017 	ldw	r19,0(r4)
 50877e4:	002d883a 	mov	r22,zero
 50877e8:	90800094 	ori	r2,r18,2
 50877ec:	28029a16 	blt	r5,zero,5088258 <___vfprintf_internal_r+0xdc0>
 50877f0:	00bfdfc4 	movi	r2,-129
 50877f4:	90a4703a 	and	r18,r18,r2
 50877f8:	d8c02d15 	stw	r3,180(sp)
 50877fc:	94800094 	ori	r18,r18,2
 5087800:	9802871e 	bne	r19,zero,5088220 <___vfprintf_internal_r+0xd88>
 5087804:	00814274 	movhi	r2,1289
 5087808:	10912f04 	addi	r2,r2,17596
 508780c:	d8803915 	stw	r2,228(sp)
 5087810:	04401e04 	movi	r17,120
 5087814:	d8802917 	ldw	r2,164(sp)
 5087818:	0039883a 	mov	fp,zero
 508781c:	1001e926 	beq	r2,zero,5087fc4 <___vfprintf_internal_r+0xb2c>
 5087820:	0027883a 	mov	r19,zero
 5087824:	002d883a 	mov	r22,zero
 5087828:	00020506 	br	5088040 <___vfprintf_internal_r+0xba8>
 508782c:	d9002c17 	ldw	r4,176(sp)
 5087830:	b80b883a 	mov	r5,r23
 5087834:	50897680 	call	5089768 <__swsetup_r>
 5087838:	1005ac1e 	bne	r2,zero,5088eec <___vfprintf_internal_r+0x1a54>
 508783c:	b880030b 	ldhu	r2,12(r23)
 5087840:	00c00284 	movi	r3,10
 5087844:	1080068c 	andi	r2,r2,26
 5087848:	10ff3c1e 	bne	r2,r3,508753c <__alt_data_end+0xfffb933c>
 508784c:	b880038f 	ldh	r2,14(r23)
 5087850:	103f3a16 	blt	r2,zero,508753c <__alt_data_end+0xfffb933c>
 5087854:	d9c02d17 	ldw	r7,180(sp)
 5087858:	d9002c17 	ldw	r4,176(sp)
 508785c:	a80d883a 	mov	r6,r21
 5087860:	b80b883a 	mov	r5,r23
 5087864:	50896ac0 	call	50896ac <__sbprintf>
 5087868:	00001106 	br	50878b0 <___vfprintf_internal_r+0x418>
 508786c:	d9002c17 	ldw	r4,176(sp)
 5087870:	d9801e04 	addi	r6,sp,120
 5087874:	b80b883a 	mov	r5,r23
 5087878:	508eb880 	call	508eb88 <__sprint_r>
 508787c:	1000081e 	bne	r2,zero,50878a0 <___vfprintf_internal_r+0x408>
 5087880:	da000404 	addi	r8,sp,16
 5087884:	003f5306 	br	50875d4 <__alt_data_end+0xfffb93d4>
 5087888:	d8802017 	ldw	r2,128(sp)
 508788c:	10000426 	beq	r2,zero,50878a0 <___vfprintf_internal_r+0x408>
 5087890:	d9002c17 	ldw	r4,176(sp)
 5087894:	d9801e04 	addi	r6,sp,120
 5087898:	b80b883a 	mov	r5,r23
 508789c:	508eb880 	call	508eb88 <__sprint_r>
 50878a0:	b880030b 	ldhu	r2,12(r23)
 50878a4:	1080100c 	andi	r2,r2,64
 50878a8:	1005901e 	bne	r2,zero,5088eec <___vfprintf_internal_r+0x1a54>
 50878ac:	d8802f17 	ldw	r2,188(sp)
 50878b0:	dfc04717 	ldw	ra,284(sp)
 50878b4:	df004617 	ldw	fp,280(sp)
 50878b8:	ddc04517 	ldw	r23,276(sp)
 50878bc:	dd804417 	ldw	r22,272(sp)
 50878c0:	dd404317 	ldw	r21,268(sp)
 50878c4:	dd004217 	ldw	r20,264(sp)
 50878c8:	dcc04117 	ldw	r19,260(sp)
 50878cc:	dc804017 	ldw	r18,256(sp)
 50878d0:	dc403f17 	ldw	r17,252(sp)
 50878d4:	dc003e17 	ldw	r16,248(sp)
 50878d8:	dec04804 	addi	sp,sp,288
 50878dc:	f800283a 	ret
 50878e0:	d9002c17 	ldw	r4,176(sp)
 50878e4:	508b73c0 	call	508b73c <__sinit>
 50878e8:	003f0406 	br	50874fc <__alt_data_end+0xfffb92fc>
 50878ec:	d8802d17 	ldw	r2,180(sp)
 50878f0:	d9002d17 	ldw	r4,180(sp)
 50878f4:	10800017 	ldw	r2,0(r2)
 50878f8:	d8803115 	stw	r2,196(sp)
 50878fc:	20800104 	addi	r2,r4,4
 5087900:	d9003117 	ldw	r4,196(sp)
 5087904:	203fa716 	blt	r4,zero,50877a4 <__alt_data_end+0xfffb95a4>
 5087908:	d8802d15 	stw	r2,180(sp)
 508790c:	ac400007 	ldb	r17,0(r21)
 5087910:	003f4206 	br	508761c <__alt_data_end+0xfffb941c>
 5087914:	ac400007 	ldb	r17,0(r21)
 5087918:	aac00044 	addi	r11,r21,1
 508791c:	8a872826 	beq	r17,r10,50895c0 <___vfprintf_internal_r+0x2128>
 5087920:	88bff404 	addi	r2,r17,-48
 5087924:	0009883a 	mov	r4,zero
 5087928:	30867d36 	bltu	r6,r2,5089320 <___vfprintf_internal_r+0x1e88>
 508792c:	5c400007 	ldb	r17,0(r11)
 5087930:	210002a4 	muli	r4,r4,10
 5087934:	5d400044 	addi	r21,r11,1
 5087938:	a817883a 	mov	r11,r21
 508793c:	2089883a 	add	r4,r4,r2
 5087940:	88bff404 	addi	r2,r17,-48
 5087944:	30bff92e 	bgeu	r6,r2,508792c <__alt_data_end+0xfffb972c>
 5087948:	2005c916 	blt	r4,zero,5089070 <___vfprintf_internal_r+0x1bd8>
 508794c:	d9002915 	stw	r4,164(sp)
 5087950:	003f3306 	br	5087620 <__alt_data_end+0xfffb9420>
 5087954:	94802014 	ori	r18,r18,128
 5087958:	ac400007 	ldb	r17,0(r21)
 508795c:	003f2f06 	br	508761c <__alt_data_end+0xfffb941c>
 5087960:	a809883a 	mov	r4,r21
 5087964:	d8003115 	stw	zero,196(sp)
 5087968:	88bff404 	addi	r2,r17,-48
 508796c:	0017883a 	mov	r11,zero
 5087970:	24400007 	ldb	r17,0(r4)
 5087974:	5ac002a4 	muli	r11,r11,10
 5087978:	ad400044 	addi	r21,r21,1
 508797c:	a809883a 	mov	r4,r21
 5087980:	12d7883a 	add	r11,r2,r11
 5087984:	88bff404 	addi	r2,r17,-48
 5087988:	30bff92e 	bgeu	r6,r2,5087970 <__alt_data_end+0xfffb9770>
 508798c:	dac03115 	stw	r11,196(sp)
 5087990:	003f2306 	br	5087620 <__alt_data_end+0xfffb9420>
 5087994:	18c03fcc 	andi	r3,r3,255
 5087998:	18072b1e 	bne	r3,zero,5089648 <___vfprintf_internal_r+0x21b0>
 508799c:	94800414 	ori	r18,r18,16
 50879a0:	9080080c 	andi	r2,r18,32
 50879a4:	10037b26 	beq	r2,zero,5088794 <___vfprintf_internal_r+0x12fc>
 50879a8:	d9402d17 	ldw	r5,180(sp)
 50879ac:	28800117 	ldw	r2,4(r5)
 50879b0:	2cc00017 	ldw	r19,0(r5)
 50879b4:	29400204 	addi	r5,r5,8
 50879b8:	d9402d15 	stw	r5,180(sp)
 50879bc:	102d883a 	mov	r22,r2
 50879c0:	10044b16 	blt	r2,zero,5088af0 <___vfprintf_internal_r+0x1658>
 50879c4:	d9402917 	ldw	r5,164(sp)
 50879c8:	df002783 	ldbu	fp,158(sp)
 50879cc:	2803bc16 	blt	r5,zero,50888c0 <___vfprintf_internal_r+0x1428>
 50879d0:	00ffdfc4 	movi	r3,-129
 50879d4:	9d84b03a 	or	r2,r19,r22
 50879d8:	90e4703a 	and	r18,r18,r3
 50879dc:	10017726 	beq	r2,zero,5087fbc <___vfprintf_internal_r+0xb24>
 50879e0:	b0038326 	beq	r22,zero,50887f0 <___vfprintf_internal_r+0x1358>
 50879e4:	dc402a15 	stw	r17,168(sp)
 50879e8:	dc001e04 	addi	r16,sp,120
 50879ec:	b023883a 	mov	r17,r22
 50879f0:	402d883a 	mov	r22,r8
 50879f4:	9809883a 	mov	r4,r19
 50879f8:	880b883a 	mov	r5,r17
 50879fc:	01800284 	movi	r6,10
 5087a00:	000f883a 	mov	r7,zero
 5087a04:	5090f800 	call	5090f80 <__umoddi3>
 5087a08:	10800c04 	addi	r2,r2,48
 5087a0c:	843fffc4 	addi	r16,r16,-1
 5087a10:	9809883a 	mov	r4,r19
 5087a14:	880b883a 	mov	r5,r17
 5087a18:	80800005 	stb	r2,0(r16)
 5087a1c:	01800284 	movi	r6,10
 5087a20:	000f883a 	mov	r7,zero
 5087a24:	5090a080 	call	5090a08 <__udivdi3>
 5087a28:	1027883a 	mov	r19,r2
 5087a2c:	10c4b03a 	or	r2,r2,r3
 5087a30:	1823883a 	mov	r17,r3
 5087a34:	103fef1e 	bne	r2,zero,50879f4 <__alt_data_end+0xfffb97f4>
 5087a38:	d8c02817 	ldw	r3,160(sp)
 5087a3c:	dc402a17 	ldw	r17,168(sp)
 5087a40:	b011883a 	mov	r8,r22
 5087a44:	1c07c83a 	sub	r3,r3,r16
 5087a48:	d8c02e15 	stw	r3,184(sp)
 5087a4c:	00005906 	br	5087bb4 <___vfprintf_internal_r+0x71c>
 5087a50:	18c03fcc 	andi	r3,r3,255
 5087a54:	1806fa1e 	bne	r3,zero,5089640 <___vfprintf_internal_r+0x21a8>
 5087a58:	9080020c 	andi	r2,r18,8
 5087a5c:	10048a26 	beq	r2,zero,5088c88 <___vfprintf_internal_r+0x17f0>
 5087a60:	d8c02d17 	ldw	r3,180(sp)
 5087a64:	d9002d17 	ldw	r4,180(sp)
 5087a68:	d9402d17 	ldw	r5,180(sp)
 5087a6c:	18c00017 	ldw	r3,0(r3)
 5087a70:	21000117 	ldw	r4,4(r4)
 5087a74:	29400204 	addi	r5,r5,8
 5087a78:	d8c03615 	stw	r3,216(sp)
 5087a7c:	d9003815 	stw	r4,224(sp)
 5087a80:	d9402d15 	stw	r5,180(sp)
 5087a84:	d9003617 	ldw	r4,216(sp)
 5087a88:	d9403817 	ldw	r5,224(sp)
 5087a8c:	da003d15 	stw	r8,244(sp)
 5087a90:	04000044 	movi	r16,1
 5087a94:	50845dc0 	call	50845dc <__fpclassifyd>
 5087a98:	da003d17 	ldw	r8,244(sp)
 5087a9c:	14041f1e 	bne	r2,r16,5088b1c <___vfprintf_internal_r+0x1684>
 5087aa0:	d9003617 	ldw	r4,216(sp)
 5087aa4:	d9403817 	ldw	r5,224(sp)
 5087aa8:	000d883a 	mov	r6,zero
 5087aac:	000f883a 	mov	r7,zero
 5087ab0:	5085eb40 	call	5085eb4 <__ledf2>
 5087ab4:	da003d17 	ldw	r8,244(sp)
 5087ab8:	1005be16 	blt	r2,zero,50891b4 <___vfprintf_internal_r+0x1d1c>
 5087abc:	df002783 	ldbu	fp,158(sp)
 5087ac0:	008011c4 	movi	r2,71
 5087ac4:	1445330e 	bge	r2,r17,5088f94 <___vfprintf_internal_r+0x1afc>
 5087ac8:	04014274 	movhi	r16,1289
 5087acc:	84112704 	addi	r16,r16,17564
 5087ad0:	00c000c4 	movi	r3,3
 5087ad4:	00bfdfc4 	movi	r2,-129
 5087ad8:	d8c02a15 	stw	r3,168(sp)
 5087adc:	90a4703a 	and	r18,r18,r2
 5087ae0:	d8c02e15 	stw	r3,184(sp)
 5087ae4:	d8002915 	stw	zero,164(sp)
 5087ae8:	d8003215 	stw	zero,200(sp)
 5087aec:	00003706 	br	5087bcc <___vfprintf_internal_r+0x734>
 5087af0:	94800214 	ori	r18,r18,8
 5087af4:	ac400007 	ldb	r17,0(r21)
 5087af8:	003ec806 	br	508761c <__alt_data_end+0xfffb941c>
 5087afc:	18c03fcc 	andi	r3,r3,255
 5087b00:	1806db1e 	bne	r3,zero,5089670 <___vfprintf_internal_r+0x21d8>
 5087b04:	94800414 	ori	r18,r18,16
 5087b08:	9080080c 	andi	r2,r18,32
 5087b0c:	1002d826 	beq	r2,zero,5088670 <___vfprintf_internal_r+0x11d8>
 5087b10:	d9402d17 	ldw	r5,180(sp)
 5087b14:	d8c02917 	ldw	r3,164(sp)
 5087b18:	d8002785 	stb	zero,158(sp)
 5087b1c:	28800204 	addi	r2,r5,8
 5087b20:	2cc00017 	ldw	r19,0(r5)
 5087b24:	2d800117 	ldw	r22,4(r5)
 5087b28:	18048f16 	blt	r3,zero,5088d68 <___vfprintf_internal_r+0x18d0>
 5087b2c:	013fdfc4 	movi	r4,-129
 5087b30:	9d86b03a 	or	r3,r19,r22
 5087b34:	d8802d15 	stw	r2,180(sp)
 5087b38:	9124703a 	and	r18,r18,r4
 5087b3c:	1802d91e 	bne	r3,zero,50886a4 <___vfprintf_internal_r+0x120c>
 5087b40:	d8c02917 	ldw	r3,164(sp)
 5087b44:	0039883a 	mov	fp,zero
 5087b48:	1805c326 	beq	r3,zero,5089258 <___vfprintf_internal_r+0x1dc0>
 5087b4c:	0027883a 	mov	r19,zero
 5087b50:	002d883a 	mov	r22,zero
 5087b54:	dc001e04 	addi	r16,sp,120
 5087b58:	9806d0fa 	srli	r3,r19,3
 5087b5c:	b008977a 	slli	r4,r22,29
 5087b60:	b02cd0fa 	srli	r22,r22,3
 5087b64:	9cc001cc 	andi	r19,r19,7
 5087b68:	98800c04 	addi	r2,r19,48
 5087b6c:	843fffc4 	addi	r16,r16,-1
 5087b70:	20e6b03a 	or	r19,r4,r3
 5087b74:	80800005 	stb	r2,0(r16)
 5087b78:	9d86b03a 	or	r3,r19,r22
 5087b7c:	183ff61e 	bne	r3,zero,5087b58 <__alt_data_end+0xfffb9958>
 5087b80:	90c0004c 	andi	r3,r18,1
 5087b84:	18013b26 	beq	r3,zero,5088074 <___vfprintf_internal_r+0xbdc>
 5087b88:	10803fcc 	andi	r2,r2,255
 5087b8c:	1080201c 	xori	r2,r2,128
 5087b90:	10bfe004 	addi	r2,r2,-128
 5087b94:	00c00c04 	movi	r3,48
 5087b98:	10c13626 	beq	r2,r3,5088074 <___vfprintf_internal_r+0xbdc>
 5087b9c:	80ffffc5 	stb	r3,-1(r16)
 5087ba0:	d8c02817 	ldw	r3,160(sp)
 5087ba4:	80bfffc4 	addi	r2,r16,-1
 5087ba8:	1021883a 	mov	r16,r2
 5087bac:	1887c83a 	sub	r3,r3,r2
 5087bb0:	d8c02e15 	stw	r3,184(sp)
 5087bb4:	d8802e17 	ldw	r2,184(sp)
 5087bb8:	d9002917 	ldw	r4,164(sp)
 5087bbc:	1100010e 	bge	r2,r4,5087bc4 <___vfprintf_internal_r+0x72c>
 5087bc0:	2005883a 	mov	r2,r4
 5087bc4:	d8802a15 	stw	r2,168(sp)
 5087bc8:	d8003215 	stw	zero,200(sp)
 5087bcc:	e7003fcc 	andi	fp,fp,255
 5087bd0:	e700201c 	xori	fp,fp,128
 5087bd4:	e73fe004 	addi	fp,fp,-128
 5087bd8:	e0000326 	beq	fp,zero,5087be8 <___vfprintf_internal_r+0x750>
 5087bdc:	d8c02a17 	ldw	r3,168(sp)
 5087be0:	18c00044 	addi	r3,r3,1
 5087be4:	d8c02a15 	stw	r3,168(sp)
 5087be8:	90c0008c 	andi	r3,r18,2
 5087bec:	d8c02b15 	stw	r3,172(sp)
 5087bf0:	18000326 	beq	r3,zero,5087c00 <___vfprintf_internal_r+0x768>
 5087bf4:	d8c02a17 	ldw	r3,168(sp)
 5087bf8:	18c00084 	addi	r3,r3,2
 5087bfc:	d8c02a15 	stw	r3,168(sp)
 5087c00:	90c0210c 	andi	r3,r18,132
 5087c04:	d8c03015 	stw	r3,192(sp)
 5087c08:	1801a31e 	bne	r3,zero,5088298 <___vfprintf_internal_r+0xe00>
 5087c0c:	d9003117 	ldw	r4,196(sp)
 5087c10:	d8c02a17 	ldw	r3,168(sp)
 5087c14:	20e7c83a 	sub	r19,r4,r3
 5087c18:	04c19f0e 	bge	zero,r19,5088298 <___vfprintf_internal_r+0xe00>
 5087c1c:	02400404 	movi	r9,16
 5087c20:	d8c02017 	ldw	r3,128(sp)
 5087c24:	d8801f17 	ldw	r2,124(sp)
 5087c28:	4cc50d0e 	bge	r9,r19,5089060 <___vfprintf_internal_r+0x1bc8>
 5087c2c:	01414274 	movhi	r5,1289
 5087c30:	29513a84 	addi	r5,r5,17642
 5087c34:	dc403b15 	stw	r17,236(sp)
 5087c38:	d9403515 	stw	r5,212(sp)
 5087c3c:	9823883a 	mov	r17,r19
 5087c40:	482d883a 	mov	r22,r9
 5087c44:	9027883a 	mov	r19,r18
 5087c48:	070001c4 	movi	fp,7
 5087c4c:	8025883a 	mov	r18,r16
 5087c50:	dc002c17 	ldw	r16,176(sp)
 5087c54:	00000306 	br	5087c64 <___vfprintf_internal_r+0x7cc>
 5087c58:	8c7ffc04 	addi	r17,r17,-16
 5087c5c:	42000204 	addi	r8,r8,8
 5087c60:	b440130e 	bge	r22,r17,5087cb0 <___vfprintf_internal_r+0x818>
 5087c64:	01014274 	movhi	r4,1289
 5087c68:	18c00404 	addi	r3,r3,16
 5087c6c:	10800044 	addi	r2,r2,1
 5087c70:	21113a84 	addi	r4,r4,17642
 5087c74:	41000015 	stw	r4,0(r8)
 5087c78:	45800115 	stw	r22,4(r8)
 5087c7c:	d8c02015 	stw	r3,128(sp)
 5087c80:	d8801f15 	stw	r2,124(sp)
 5087c84:	e0bff40e 	bge	fp,r2,5087c58 <__alt_data_end+0xfffb9a58>
 5087c88:	d9801e04 	addi	r6,sp,120
 5087c8c:	b80b883a 	mov	r5,r23
 5087c90:	8009883a 	mov	r4,r16
 5087c94:	508eb880 	call	508eb88 <__sprint_r>
 5087c98:	103f011e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5087c9c:	8c7ffc04 	addi	r17,r17,-16
 5087ca0:	d8c02017 	ldw	r3,128(sp)
 5087ca4:	d8801f17 	ldw	r2,124(sp)
 5087ca8:	da000404 	addi	r8,sp,16
 5087cac:	b47fed16 	blt	r22,r17,5087c64 <__alt_data_end+0xfffb9a64>
 5087cb0:	9021883a 	mov	r16,r18
 5087cb4:	9825883a 	mov	r18,r19
 5087cb8:	8827883a 	mov	r19,r17
 5087cbc:	dc403b17 	ldw	r17,236(sp)
 5087cc0:	d9403517 	ldw	r5,212(sp)
 5087cc4:	98c7883a 	add	r3,r19,r3
 5087cc8:	10800044 	addi	r2,r2,1
 5087ccc:	41400015 	stw	r5,0(r8)
 5087cd0:	44c00115 	stw	r19,4(r8)
 5087cd4:	d8c02015 	stw	r3,128(sp)
 5087cd8:	d8801f15 	stw	r2,124(sp)
 5087cdc:	010001c4 	movi	r4,7
 5087ce0:	2082a316 	blt	r4,r2,5088770 <___vfprintf_internal_r+0x12d8>
 5087ce4:	df002787 	ldb	fp,158(sp)
 5087ce8:	42000204 	addi	r8,r8,8
 5087cec:	e0000c26 	beq	fp,zero,5087d20 <___vfprintf_internal_r+0x888>
 5087cf0:	d8801f17 	ldw	r2,124(sp)
 5087cf4:	d9002784 	addi	r4,sp,158
 5087cf8:	18c00044 	addi	r3,r3,1
 5087cfc:	10800044 	addi	r2,r2,1
 5087d00:	41000015 	stw	r4,0(r8)
 5087d04:	01000044 	movi	r4,1
 5087d08:	41000115 	stw	r4,4(r8)
 5087d0c:	d8c02015 	stw	r3,128(sp)
 5087d10:	d8801f15 	stw	r2,124(sp)
 5087d14:	010001c4 	movi	r4,7
 5087d18:	20823c16 	blt	r4,r2,508860c <___vfprintf_internal_r+0x1174>
 5087d1c:	42000204 	addi	r8,r8,8
 5087d20:	d8802b17 	ldw	r2,172(sp)
 5087d24:	10000c26 	beq	r2,zero,5087d58 <___vfprintf_internal_r+0x8c0>
 5087d28:	d8801f17 	ldw	r2,124(sp)
 5087d2c:	d9002704 	addi	r4,sp,156
 5087d30:	18c00084 	addi	r3,r3,2
 5087d34:	10800044 	addi	r2,r2,1
 5087d38:	41000015 	stw	r4,0(r8)
 5087d3c:	01000084 	movi	r4,2
 5087d40:	41000115 	stw	r4,4(r8)
 5087d44:	d8c02015 	stw	r3,128(sp)
 5087d48:	d8801f15 	stw	r2,124(sp)
 5087d4c:	010001c4 	movi	r4,7
 5087d50:	20823616 	blt	r4,r2,508862c <___vfprintf_internal_r+0x1194>
 5087d54:	42000204 	addi	r8,r8,8
 5087d58:	d9003017 	ldw	r4,192(sp)
 5087d5c:	00802004 	movi	r2,128
 5087d60:	20819926 	beq	r4,r2,50883c8 <___vfprintf_internal_r+0xf30>
 5087d64:	d9402917 	ldw	r5,164(sp)
 5087d68:	d8802e17 	ldw	r2,184(sp)
 5087d6c:	28adc83a 	sub	r22,r5,r2
 5087d70:	0580310e 	bge	zero,r22,5087e38 <___vfprintf_internal_r+0x9a0>
 5087d74:	07000404 	movi	fp,16
 5087d78:	d8801f17 	ldw	r2,124(sp)
 5087d7c:	e584140e 	bge	fp,r22,5088dd0 <___vfprintf_internal_r+0x1938>
 5087d80:	01414274 	movhi	r5,1289
 5087d84:	29513684 	addi	r5,r5,17626
 5087d88:	dc402915 	stw	r17,164(sp)
 5087d8c:	d9402b15 	stw	r5,172(sp)
 5087d90:	b023883a 	mov	r17,r22
 5087d94:	04c001c4 	movi	r19,7
 5087d98:	a82d883a 	mov	r22,r21
 5087d9c:	902b883a 	mov	r21,r18
 5087da0:	8025883a 	mov	r18,r16
 5087da4:	dc002c17 	ldw	r16,176(sp)
 5087da8:	00000306 	br	5087db8 <___vfprintf_internal_r+0x920>
 5087dac:	8c7ffc04 	addi	r17,r17,-16
 5087db0:	42000204 	addi	r8,r8,8
 5087db4:	e440110e 	bge	fp,r17,5087dfc <___vfprintf_internal_r+0x964>
 5087db8:	18c00404 	addi	r3,r3,16
 5087dbc:	10800044 	addi	r2,r2,1
 5087dc0:	45000015 	stw	r20,0(r8)
 5087dc4:	47000115 	stw	fp,4(r8)
 5087dc8:	d8c02015 	stw	r3,128(sp)
 5087dcc:	d8801f15 	stw	r2,124(sp)
 5087dd0:	98bff60e 	bge	r19,r2,5087dac <__alt_data_end+0xfffb9bac>
 5087dd4:	d9801e04 	addi	r6,sp,120
 5087dd8:	b80b883a 	mov	r5,r23
 5087ddc:	8009883a 	mov	r4,r16
 5087de0:	508eb880 	call	508eb88 <__sprint_r>
 5087de4:	103eae1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5087de8:	8c7ffc04 	addi	r17,r17,-16
 5087dec:	d8c02017 	ldw	r3,128(sp)
 5087df0:	d8801f17 	ldw	r2,124(sp)
 5087df4:	da000404 	addi	r8,sp,16
 5087df8:	e47fef16 	blt	fp,r17,5087db8 <__alt_data_end+0xfffb9bb8>
 5087dfc:	9021883a 	mov	r16,r18
 5087e00:	a825883a 	mov	r18,r21
 5087e04:	b02b883a 	mov	r21,r22
 5087e08:	882d883a 	mov	r22,r17
 5087e0c:	dc402917 	ldw	r17,164(sp)
 5087e10:	d9002b17 	ldw	r4,172(sp)
 5087e14:	1d87883a 	add	r3,r3,r22
 5087e18:	10800044 	addi	r2,r2,1
 5087e1c:	41000015 	stw	r4,0(r8)
 5087e20:	45800115 	stw	r22,4(r8)
 5087e24:	d8c02015 	stw	r3,128(sp)
 5087e28:	d8801f15 	stw	r2,124(sp)
 5087e2c:	010001c4 	movi	r4,7
 5087e30:	2081ee16 	blt	r4,r2,50885ec <___vfprintf_internal_r+0x1154>
 5087e34:	42000204 	addi	r8,r8,8
 5087e38:	9080400c 	andi	r2,r18,256
 5087e3c:	1001181e 	bne	r2,zero,50882a0 <___vfprintf_internal_r+0xe08>
 5087e40:	d9402e17 	ldw	r5,184(sp)
 5087e44:	d8801f17 	ldw	r2,124(sp)
 5087e48:	44000015 	stw	r16,0(r8)
 5087e4c:	1947883a 	add	r3,r3,r5
 5087e50:	10800044 	addi	r2,r2,1
 5087e54:	41400115 	stw	r5,4(r8)
 5087e58:	d8c02015 	stw	r3,128(sp)
 5087e5c:	d8801f15 	stw	r2,124(sp)
 5087e60:	010001c4 	movi	r4,7
 5087e64:	2081d316 	blt	r4,r2,50885b4 <___vfprintf_internal_r+0x111c>
 5087e68:	42000204 	addi	r8,r8,8
 5087e6c:	9480010c 	andi	r18,r18,4
 5087e70:	90003226 	beq	r18,zero,5087f3c <___vfprintf_internal_r+0xaa4>
 5087e74:	d9403117 	ldw	r5,196(sp)
 5087e78:	d8802a17 	ldw	r2,168(sp)
 5087e7c:	28a1c83a 	sub	r16,r5,r2
 5087e80:	04002e0e 	bge	zero,r16,5087f3c <___vfprintf_internal_r+0xaa4>
 5087e84:	04400404 	movi	r17,16
 5087e88:	d8801f17 	ldw	r2,124(sp)
 5087e8c:	8c04a20e 	bge	r17,r16,5089118 <___vfprintf_internal_r+0x1c80>
 5087e90:	01414274 	movhi	r5,1289
 5087e94:	29513a84 	addi	r5,r5,17642
 5087e98:	d9403515 	stw	r5,212(sp)
 5087e9c:	048001c4 	movi	r18,7
 5087ea0:	dcc02c17 	ldw	r19,176(sp)
 5087ea4:	00000306 	br	5087eb4 <___vfprintf_internal_r+0xa1c>
 5087ea8:	843ffc04 	addi	r16,r16,-16
 5087eac:	42000204 	addi	r8,r8,8
 5087eb0:	8c00130e 	bge	r17,r16,5087f00 <___vfprintf_internal_r+0xa68>
 5087eb4:	01014274 	movhi	r4,1289
 5087eb8:	18c00404 	addi	r3,r3,16
 5087ebc:	10800044 	addi	r2,r2,1
 5087ec0:	21113a84 	addi	r4,r4,17642
 5087ec4:	41000015 	stw	r4,0(r8)
 5087ec8:	44400115 	stw	r17,4(r8)
 5087ecc:	d8c02015 	stw	r3,128(sp)
 5087ed0:	d8801f15 	stw	r2,124(sp)
 5087ed4:	90bff40e 	bge	r18,r2,5087ea8 <__alt_data_end+0xfffb9ca8>
 5087ed8:	d9801e04 	addi	r6,sp,120
 5087edc:	b80b883a 	mov	r5,r23
 5087ee0:	9809883a 	mov	r4,r19
 5087ee4:	508eb880 	call	508eb88 <__sprint_r>
 5087ee8:	103e6d1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5087eec:	843ffc04 	addi	r16,r16,-16
 5087ef0:	d8c02017 	ldw	r3,128(sp)
 5087ef4:	d8801f17 	ldw	r2,124(sp)
 5087ef8:	da000404 	addi	r8,sp,16
 5087efc:	8c3fed16 	blt	r17,r16,5087eb4 <__alt_data_end+0xfffb9cb4>
 5087f00:	d9403517 	ldw	r5,212(sp)
 5087f04:	1c07883a 	add	r3,r3,r16
 5087f08:	10800044 	addi	r2,r2,1
 5087f0c:	41400015 	stw	r5,0(r8)
 5087f10:	44000115 	stw	r16,4(r8)
 5087f14:	d8c02015 	stw	r3,128(sp)
 5087f18:	d8801f15 	stw	r2,124(sp)
 5087f1c:	010001c4 	movi	r4,7
 5087f20:	2080060e 	bge	r4,r2,5087f3c <___vfprintf_internal_r+0xaa4>
 5087f24:	d9002c17 	ldw	r4,176(sp)
 5087f28:	d9801e04 	addi	r6,sp,120
 5087f2c:	b80b883a 	mov	r5,r23
 5087f30:	508eb880 	call	508eb88 <__sprint_r>
 5087f34:	103e5a1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5087f38:	d8c02017 	ldw	r3,128(sp)
 5087f3c:	d8803117 	ldw	r2,196(sp)
 5087f40:	d9002a17 	ldw	r4,168(sp)
 5087f44:	1100010e 	bge	r2,r4,5087f4c <___vfprintf_internal_r+0xab4>
 5087f48:	2005883a 	mov	r2,r4
 5087f4c:	d9402f17 	ldw	r5,188(sp)
 5087f50:	288b883a 	add	r5,r5,r2
 5087f54:	d9402f15 	stw	r5,188(sp)
 5087f58:	18019e1e 	bne	r3,zero,50885d4 <___vfprintf_internal_r+0x113c>
 5087f5c:	a8800007 	ldb	r2,0(r21)
 5087f60:	d8001f15 	stw	zero,124(sp)
 5087f64:	da000404 	addi	r8,sp,16
 5087f68:	103d851e 	bne	r2,zero,5087580 <__alt_data_end+0xfffb9380>
 5087f6c:	a821883a 	mov	r16,r21
 5087f70:	003d9b06 	br	50875e0 <__alt_data_end+0xfffb93e0>
 5087f74:	18c03fcc 	andi	r3,r3,255
 5087f78:	1805c11e 	bne	r3,zero,5089680 <___vfprintf_internal_r+0x21e8>
 5087f7c:	94800414 	ori	r18,r18,16
 5087f80:	9080080c 	andi	r2,r18,32
 5087f84:	10020c26 	beq	r2,zero,50887b8 <___vfprintf_internal_r+0x1320>
 5087f88:	d8802d17 	ldw	r2,180(sp)
 5087f8c:	d9002917 	ldw	r4,164(sp)
 5087f90:	d8002785 	stb	zero,158(sp)
 5087f94:	10c00204 	addi	r3,r2,8
 5087f98:	14c00017 	ldw	r19,0(r2)
 5087f9c:	15800117 	ldw	r22,4(r2)
 5087fa0:	20040f16 	blt	r4,zero,5088fe0 <___vfprintf_internal_r+0x1b48>
 5087fa4:	013fdfc4 	movi	r4,-129
 5087fa8:	9d84b03a 	or	r2,r19,r22
 5087fac:	d8c02d15 	stw	r3,180(sp)
 5087fb0:	9124703a 	and	r18,r18,r4
 5087fb4:	0039883a 	mov	fp,zero
 5087fb8:	103e891e 	bne	r2,zero,50879e0 <__alt_data_end+0xfffb97e0>
 5087fbc:	d9002917 	ldw	r4,164(sp)
 5087fc0:	2002c11e 	bne	r4,zero,5088ac8 <___vfprintf_internal_r+0x1630>
 5087fc4:	d8002915 	stw	zero,164(sp)
 5087fc8:	d8002e15 	stw	zero,184(sp)
 5087fcc:	dc001e04 	addi	r16,sp,120
 5087fd0:	003ef806 	br	5087bb4 <__alt_data_end+0xfffb99b4>
 5087fd4:	18c03fcc 	andi	r3,r3,255
 5087fd8:	18059d1e 	bne	r3,zero,5089650 <___vfprintf_internal_r+0x21b8>
 5087fdc:	01414274 	movhi	r5,1289
 5087fe0:	29512a04 	addi	r5,r5,17576
 5087fe4:	d9403915 	stw	r5,228(sp)
 5087fe8:	9080080c 	andi	r2,r18,32
 5087fec:	10005226 	beq	r2,zero,5088138 <___vfprintf_internal_r+0xca0>
 5087ff0:	d8802d17 	ldw	r2,180(sp)
 5087ff4:	14c00017 	ldw	r19,0(r2)
 5087ff8:	15800117 	ldw	r22,4(r2)
 5087ffc:	10800204 	addi	r2,r2,8
 5088000:	d8802d15 	stw	r2,180(sp)
 5088004:	9080004c 	andi	r2,r18,1
 5088008:	10019026 	beq	r2,zero,508864c <___vfprintf_internal_r+0x11b4>
 508800c:	9d84b03a 	or	r2,r19,r22
 5088010:	10036926 	beq	r2,zero,5088db8 <___vfprintf_internal_r+0x1920>
 5088014:	d8c02917 	ldw	r3,164(sp)
 5088018:	00800c04 	movi	r2,48
 508801c:	d8802705 	stb	r2,156(sp)
 5088020:	dc402745 	stb	r17,157(sp)
 5088024:	d8002785 	stb	zero,158(sp)
 5088028:	90800094 	ori	r2,r18,2
 508802c:	18045d16 	blt	r3,zero,50891a4 <___vfprintf_internal_r+0x1d0c>
 5088030:	00bfdfc4 	movi	r2,-129
 5088034:	90a4703a 	and	r18,r18,r2
 5088038:	94800094 	ori	r18,r18,2
 508803c:	0039883a 	mov	fp,zero
 5088040:	d9003917 	ldw	r4,228(sp)
 5088044:	dc001e04 	addi	r16,sp,120
 5088048:	988003cc 	andi	r2,r19,15
 508804c:	b006973a 	slli	r3,r22,28
 5088050:	2085883a 	add	r2,r4,r2
 5088054:	9826d13a 	srli	r19,r19,4
 5088058:	10800003 	ldbu	r2,0(r2)
 508805c:	b02cd13a 	srli	r22,r22,4
 5088060:	843fffc4 	addi	r16,r16,-1
 5088064:	1ce6b03a 	or	r19,r3,r19
 5088068:	80800005 	stb	r2,0(r16)
 508806c:	9d84b03a 	or	r2,r19,r22
 5088070:	103ff51e 	bne	r2,zero,5088048 <__alt_data_end+0xfffb9e48>
 5088074:	d8c02817 	ldw	r3,160(sp)
 5088078:	1c07c83a 	sub	r3,r3,r16
 508807c:	d8c02e15 	stw	r3,184(sp)
 5088080:	003ecc06 	br	5087bb4 <__alt_data_end+0xfffb99b4>
 5088084:	18c03fcc 	andi	r3,r3,255
 5088088:	183e9f26 	beq	r3,zero,5087b08 <__alt_data_end+0xfffb9908>
 508808c:	d9c02785 	stb	r7,158(sp)
 5088090:	003e9d06 	br	5087b08 <__alt_data_end+0xfffb9908>
 5088094:	00c00044 	movi	r3,1
 5088098:	01c00ac4 	movi	r7,43
 508809c:	ac400007 	ldb	r17,0(r21)
 50880a0:	003d5e06 	br	508761c <__alt_data_end+0xfffb941c>
 50880a4:	94800814 	ori	r18,r18,32
 50880a8:	ac400007 	ldb	r17,0(r21)
 50880ac:	003d5b06 	br	508761c <__alt_data_end+0xfffb941c>
 50880b0:	d8c02d17 	ldw	r3,180(sp)
 50880b4:	d8002785 	stb	zero,158(sp)
 50880b8:	1c000017 	ldw	r16,0(r3)
 50880bc:	1cc00104 	addi	r19,r3,4
 50880c0:	80041926 	beq	r16,zero,5089128 <___vfprintf_internal_r+0x1c90>
 50880c4:	d9002917 	ldw	r4,164(sp)
 50880c8:	2003d016 	blt	r4,zero,508900c <___vfprintf_internal_r+0x1b74>
 50880cc:	200d883a 	mov	r6,r4
 50880d0:	000b883a 	mov	r5,zero
 50880d4:	8009883a 	mov	r4,r16
 50880d8:	da003d15 	stw	r8,244(sp)
 50880dc:	508cca80 	call	508cca8 <memchr>
 50880e0:	da003d17 	ldw	r8,244(sp)
 50880e4:	10045426 	beq	r2,zero,5089238 <___vfprintf_internal_r+0x1da0>
 50880e8:	1405c83a 	sub	r2,r2,r16
 50880ec:	d8802e15 	stw	r2,184(sp)
 50880f0:	1003cc16 	blt	r2,zero,5089024 <___vfprintf_internal_r+0x1b8c>
 50880f4:	df002783 	ldbu	fp,158(sp)
 50880f8:	d8802a15 	stw	r2,168(sp)
 50880fc:	dcc02d15 	stw	r19,180(sp)
 5088100:	d8002915 	stw	zero,164(sp)
 5088104:	d8003215 	stw	zero,200(sp)
 5088108:	003eb006 	br	5087bcc <__alt_data_end+0xfffb99cc>
 508810c:	18c03fcc 	andi	r3,r3,255
 5088110:	183f9b26 	beq	r3,zero,5087f80 <__alt_data_end+0xfffb9d80>
 5088114:	d9c02785 	stb	r7,158(sp)
 5088118:	003f9906 	br	5087f80 <__alt_data_end+0xfffb9d80>
 508811c:	18c03fcc 	andi	r3,r3,255
 5088120:	1805551e 	bne	r3,zero,5089678 <___vfprintf_internal_r+0x21e0>
 5088124:	01414274 	movhi	r5,1289
 5088128:	29512f04 	addi	r5,r5,17596
 508812c:	d9403915 	stw	r5,228(sp)
 5088130:	9080080c 	andi	r2,r18,32
 5088134:	103fae1e 	bne	r2,zero,5087ff0 <__alt_data_end+0xfffb9df0>
 5088138:	9080040c 	andi	r2,r18,16
 508813c:	1002de26 	beq	r2,zero,5088cb8 <___vfprintf_internal_r+0x1820>
 5088140:	d8c02d17 	ldw	r3,180(sp)
 5088144:	002d883a 	mov	r22,zero
 5088148:	1cc00017 	ldw	r19,0(r3)
 508814c:	18c00104 	addi	r3,r3,4
 5088150:	d8c02d15 	stw	r3,180(sp)
 5088154:	003fab06 	br	5088004 <__alt_data_end+0xfffb9e04>
 5088158:	38803fcc 	andi	r2,r7,255
 508815c:	1080201c 	xori	r2,r2,128
 5088160:	10bfe004 	addi	r2,r2,-128
 5088164:	1002d21e 	bne	r2,zero,5088cb0 <___vfprintf_internal_r+0x1818>
 5088168:	00c00044 	movi	r3,1
 508816c:	01c00804 	movi	r7,32
 5088170:	ac400007 	ldb	r17,0(r21)
 5088174:	003d2906 	br	508761c <__alt_data_end+0xfffb941c>
 5088178:	94800054 	ori	r18,r18,1
 508817c:	ac400007 	ldb	r17,0(r21)
 5088180:	003d2606 	br	508761c <__alt_data_end+0xfffb941c>
 5088184:	18c03fcc 	andi	r3,r3,255
 5088188:	183e0526 	beq	r3,zero,50879a0 <__alt_data_end+0xfffb97a0>
 508818c:	d9c02785 	stb	r7,158(sp)
 5088190:	003e0306 	br	50879a0 <__alt_data_end+0xfffb97a0>
 5088194:	94801014 	ori	r18,r18,64
 5088198:	ac400007 	ldb	r17,0(r21)
 508819c:	003d1f06 	br	508761c <__alt_data_end+0xfffb941c>
 50881a0:	ac400007 	ldb	r17,0(r21)
 50881a4:	8a438726 	beq	r17,r9,5088fc4 <___vfprintf_internal_r+0x1b2c>
 50881a8:	94800414 	ori	r18,r18,16
 50881ac:	003d1b06 	br	508761c <__alt_data_end+0xfffb941c>
 50881b0:	18c03fcc 	andi	r3,r3,255
 50881b4:	1805341e 	bne	r3,zero,5089688 <___vfprintf_internal_r+0x21f0>
 50881b8:	9080080c 	andi	r2,r18,32
 50881bc:	1002cd26 	beq	r2,zero,5088cf4 <___vfprintf_internal_r+0x185c>
 50881c0:	d9402d17 	ldw	r5,180(sp)
 50881c4:	d9002f17 	ldw	r4,188(sp)
 50881c8:	28800017 	ldw	r2,0(r5)
 50881cc:	2007d7fa 	srai	r3,r4,31
 50881d0:	29400104 	addi	r5,r5,4
 50881d4:	d9402d15 	stw	r5,180(sp)
 50881d8:	11000015 	stw	r4,0(r2)
 50881dc:	10c00115 	stw	r3,4(r2)
 50881e0:	003ce506 	br	5087578 <__alt_data_end+0xfffb9378>
 50881e4:	d8c02d17 	ldw	r3,180(sp)
 50881e8:	d9002d17 	ldw	r4,180(sp)
 50881ec:	d8002785 	stb	zero,158(sp)
 50881f0:	18800017 	ldw	r2,0(r3)
 50881f4:	21000104 	addi	r4,r4,4
 50881f8:	00c00044 	movi	r3,1
 50881fc:	d8c02a15 	stw	r3,168(sp)
 5088200:	d8801405 	stb	r2,80(sp)
 5088204:	d9002d15 	stw	r4,180(sp)
 5088208:	d8c02e15 	stw	r3,184(sp)
 508820c:	d8002915 	stw	zero,164(sp)
 5088210:	d8003215 	stw	zero,200(sp)
 5088214:	dc001404 	addi	r16,sp,80
 5088218:	0039883a 	mov	fp,zero
 508821c:	003e7206 	br	5087be8 <__alt_data_end+0xfffb99e8>
 5088220:	01014274 	movhi	r4,1289
 5088224:	21112f04 	addi	r4,r4,17596
 5088228:	0039883a 	mov	fp,zero
 508822c:	d9003915 	stw	r4,228(sp)
 5088230:	04401e04 	movi	r17,120
 5088234:	003f8206 	br	5088040 <__alt_data_end+0xfffb9e40>
 5088238:	18c03fcc 	andi	r3,r3,255
 508823c:	1805061e 	bne	r3,zero,5089658 <___vfprintf_internal_r+0x21c0>
 5088240:	883d9126 	beq	r17,zero,5087888 <__alt_data_end+0xfffb9688>
 5088244:	00c00044 	movi	r3,1
 5088248:	d8c02a15 	stw	r3,168(sp)
 508824c:	dc401405 	stb	r17,80(sp)
 5088250:	d8002785 	stb	zero,158(sp)
 5088254:	003fec06 	br	5088208 <__alt_data_end+0xfffba008>
 5088258:	01414274 	movhi	r5,1289
 508825c:	29512f04 	addi	r5,r5,17596
 5088260:	d9403915 	stw	r5,228(sp)
 5088264:	d8c02d15 	stw	r3,180(sp)
 5088268:	1025883a 	mov	r18,r2
 508826c:	04401e04 	movi	r17,120
 5088270:	9d84b03a 	or	r2,r19,r22
 5088274:	1000fc1e 	bne	r2,zero,5088668 <___vfprintf_internal_r+0x11d0>
 5088278:	0039883a 	mov	fp,zero
 508827c:	00800084 	movi	r2,2
 5088280:	10803fcc 	andi	r2,r2,255
 5088284:	00c00044 	movi	r3,1
 5088288:	10c20f26 	beq	r2,r3,5088ac8 <___vfprintf_internal_r+0x1630>
 508828c:	00c00084 	movi	r3,2
 5088290:	10fd6326 	beq	r2,r3,5087820 <__alt_data_end+0xfffb9620>
 5088294:	003e2d06 	br	5087b4c <__alt_data_end+0xfffb994c>
 5088298:	d8c02017 	ldw	r3,128(sp)
 508829c:	003e9306 	br	5087cec <__alt_data_end+0xfffb9aec>
 50882a0:	00801944 	movi	r2,101
 50882a4:	14407e0e 	bge	r2,r17,50884a0 <___vfprintf_internal_r+0x1008>
 50882a8:	d9003617 	ldw	r4,216(sp)
 50882ac:	d9403817 	ldw	r5,224(sp)
 50882b0:	000d883a 	mov	r6,zero
 50882b4:	000f883a 	mov	r7,zero
 50882b8:	d8c03c15 	stw	r3,240(sp)
 50882bc:	da003d15 	stw	r8,244(sp)
 50882c0:	5085d500 	call	5085d50 <__eqdf2>
 50882c4:	d8c03c17 	ldw	r3,240(sp)
 50882c8:	da003d17 	ldw	r8,244(sp)
 50882cc:	1000f71e 	bne	r2,zero,50886ac <___vfprintf_internal_r+0x1214>
 50882d0:	d8801f17 	ldw	r2,124(sp)
 50882d4:	01014274 	movhi	r4,1289
 50882d8:	21113604 	addi	r4,r4,17624
 50882dc:	18c00044 	addi	r3,r3,1
 50882e0:	10800044 	addi	r2,r2,1
 50882e4:	41000015 	stw	r4,0(r8)
 50882e8:	01000044 	movi	r4,1
 50882ec:	41000115 	stw	r4,4(r8)
 50882f0:	d8c02015 	stw	r3,128(sp)
 50882f4:	d8801f15 	stw	r2,124(sp)
 50882f8:	010001c4 	movi	r4,7
 50882fc:	2082b816 	blt	r4,r2,5088de0 <___vfprintf_internal_r+0x1948>
 5088300:	42000204 	addi	r8,r8,8
 5088304:	d8802617 	ldw	r2,152(sp)
 5088308:	d9403317 	ldw	r5,204(sp)
 508830c:	11400216 	blt	r2,r5,5088318 <___vfprintf_internal_r+0xe80>
 5088310:	9080004c 	andi	r2,r18,1
 5088314:	103ed526 	beq	r2,zero,5087e6c <__alt_data_end+0xfffb9c6c>
 5088318:	d8803717 	ldw	r2,220(sp)
 508831c:	d9003417 	ldw	r4,208(sp)
 5088320:	d9403717 	ldw	r5,220(sp)
 5088324:	1887883a 	add	r3,r3,r2
 5088328:	d8801f17 	ldw	r2,124(sp)
 508832c:	41000015 	stw	r4,0(r8)
 5088330:	41400115 	stw	r5,4(r8)
 5088334:	10800044 	addi	r2,r2,1
 5088338:	d8c02015 	stw	r3,128(sp)
 508833c:	d8801f15 	stw	r2,124(sp)
 5088340:	010001c4 	movi	r4,7
 5088344:	20832916 	blt	r4,r2,5088fec <___vfprintf_internal_r+0x1b54>
 5088348:	42000204 	addi	r8,r8,8
 508834c:	d8803317 	ldw	r2,204(sp)
 5088350:	143fffc4 	addi	r16,r2,-1
 5088354:	043ec50e 	bge	zero,r16,5087e6c <__alt_data_end+0xfffb9c6c>
 5088358:	04400404 	movi	r17,16
 508835c:	d8801f17 	ldw	r2,124(sp)
 5088360:	8c00880e 	bge	r17,r16,5088584 <___vfprintf_internal_r+0x10ec>
 5088364:	01414274 	movhi	r5,1289
 5088368:	29513684 	addi	r5,r5,17626
 508836c:	d9402b15 	stw	r5,172(sp)
 5088370:	058001c4 	movi	r22,7
 5088374:	dcc02c17 	ldw	r19,176(sp)
 5088378:	00000306 	br	5088388 <___vfprintf_internal_r+0xef0>
 508837c:	42000204 	addi	r8,r8,8
 5088380:	843ffc04 	addi	r16,r16,-16
 5088384:	8c00820e 	bge	r17,r16,5088590 <___vfprintf_internal_r+0x10f8>
 5088388:	18c00404 	addi	r3,r3,16
 508838c:	10800044 	addi	r2,r2,1
 5088390:	45000015 	stw	r20,0(r8)
 5088394:	44400115 	stw	r17,4(r8)
 5088398:	d8c02015 	stw	r3,128(sp)
 508839c:	d8801f15 	stw	r2,124(sp)
 50883a0:	b0bff60e 	bge	r22,r2,508837c <__alt_data_end+0xfffba17c>
 50883a4:	d9801e04 	addi	r6,sp,120
 50883a8:	b80b883a 	mov	r5,r23
 50883ac:	9809883a 	mov	r4,r19
 50883b0:	508eb880 	call	508eb88 <__sprint_r>
 50883b4:	103d3a1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 50883b8:	d8c02017 	ldw	r3,128(sp)
 50883bc:	d8801f17 	ldw	r2,124(sp)
 50883c0:	da000404 	addi	r8,sp,16
 50883c4:	003fee06 	br	5088380 <__alt_data_end+0xfffba180>
 50883c8:	d9403117 	ldw	r5,196(sp)
 50883cc:	d8802a17 	ldw	r2,168(sp)
 50883d0:	28adc83a 	sub	r22,r5,r2
 50883d4:	05be630e 	bge	zero,r22,5087d64 <__alt_data_end+0xfffb9b64>
 50883d8:	07000404 	movi	fp,16
 50883dc:	d8801f17 	ldw	r2,124(sp)
 50883e0:	e5838f0e 	bge	fp,r22,5089220 <___vfprintf_internal_r+0x1d88>
 50883e4:	01414274 	movhi	r5,1289
 50883e8:	29513684 	addi	r5,r5,17626
 50883ec:	dc403015 	stw	r17,192(sp)
 50883f0:	d9402b15 	stw	r5,172(sp)
 50883f4:	b023883a 	mov	r17,r22
 50883f8:	04c001c4 	movi	r19,7
 50883fc:	a82d883a 	mov	r22,r21
 5088400:	902b883a 	mov	r21,r18
 5088404:	8025883a 	mov	r18,r16
 5088408:	dc002c17 	ldw	r16,176(sp)
 508840c:	00000306 	br	508841c <___vfprintf_internal_r+0xf84>
 5088410:	8c7ffc04 	addi	r17,r17,-16
 5088414:	42000204 	addi	r8,r8,8
 5088418:	e440110e 	bge	fp,r17,5088460 <___vfprintf_internal_r+0xfc8>
 508841c:	18c00404 	addi	r3,r3,16
 5088420:	10800044 	addi	r2,r2,1
 5088424:	45000015 	stw	r20,0(r8)
 5088428:	47000115 	stw	fp,4(r8)
 508842c:	d8c02015 	stw	r3,128(sp)
 5088430:	d8801f15 	stw	r2,124(sp)
 5088434:	98bff60e 	bge	r19,r2,5088410 <__alt_data_end+0xfffba210>
 5088438:	d9801e04 	addi	r6,sp,120
 508843c:	b80b883a 	mov	r5,r23
 5088440:	8009883a 	mov	r4,r16
 5088444:	508eb880 	call	508eb88 <__sprint_r>
 5088448:	103d151e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 508844c:	8c7ffc04 	addi	r17,r17,-16
 5088450:	d8c02017 	ldw	r3,128(sp)
 5088454:	d8801f17 	ldw	r2,124(sp)
 5088458:	da000404 	addi	r8,sp,16
 508845c:	e47fef16 	blt	fp,r17,508841c <__alt_data_end+0xfffba21c>
 5088460:	9021883a 	mov	r16,r18
 5088464:	a825883a 	mov	r18,r21
 5088468:	b02b883a 	mov	r21,r22
 508846c:	882d883a 	mov	r22,r17
 5088470:	dc403017 	ldw	r17,192(sp)
 5088474:	d9002b17 	ldw	r4,172(sp)
 5088478:	1d87883a 	add	r3,r3,r22
 508847c:	10800044 	addi	r2,r2,1
 5088480:	41000015 	stw	r4,0(r8)
 5088484:	45800115 	stw	r22,4(r8)
 5088488:	d8c02015 	stw	r3,128(sp)
 508848c:	d8801f15 	stw	r2,124(sp)
 5088490:	010001c4 	movi	r4,7
 5088494:	20818e16 	blt	r4,r2,5088ad0 <___vfprintf_internal_r+0x1638>
 5088498:	42000204 	addi	r8,r8,8
 508849c:	003e3106 	br	5087d64 <__alt_data_end+0xfffb9b64>
 50884a0:	d9403317 	ldw	r5,204(sp)
 50884a4:	00800044 	movi	r2,1
 50884a8:	18c00044 	addi	r3,r3,1
 50884ac:	1141530e 	bge	r2,r5,50889fc <___vfprintf_internal_r+0x1564>
 50884b0:	dc401f17 	ldw	r17,124(sp)
 50884b4:	00800044 	movi	r2,1
 50884b8:	40800115 	stw	r2,4(r8)
 50884bc:	8c400044 	addi	r17,r17,1
 50884c0:	44000015 	stw	r16,0(r8)
 50884c4:	d8c02015 	stw	r3,128(sp)
 50884c8:	dc401f15 	stw	r17,124(sp)
 50884cc:	008001c4 	movi	r2,7
 50884d0:	14416b16 	blt	r2,r17,5088a80 <___vfprintf_internal_r+0x15e8>
 50884d4:	42000204 	addi	r8,r8,8
 50884d8:	d8803717 	ldw	r2,220(sp)
 50884dc:	d9003417 	ldw	r4,208(sp)
 50884e0:	8c400044 	addi	r17,r17,1
 50884e4:	10c7883a 	add	r3,r2,r3
 50884e8:	40800115 	stw	r2,4(r8)
 50884ec:	41000015 	stw	r4,0(r8)
 50884f0:	d8c02015 	stw	r3,128(sp)
 50884f4:	dc401f15 	stw	r17,124(sp)
 50884f8:	008001c4 	movi	r2,7
 50884fc:	14416916 	blt	r2,r17,5088aa4 <___vfprintf_internal_r+0x160c>
 5088500:	45800204 	addi	r22,r8,8
 5088504:	d9003617 	ldw	r4,216(sp)
 5088508:	d9403817 	ldw	r5,224(sp)
 508850c:	000d883a 	mov	r6,zero
 5088510:	000f883a 	mov	r7,zero
 5088514:	d8c03c15 	stw	r3,240(sp)
 5088518:	5085d500 	call	5085d50 <__eqdf2>
 508851c:	d8c03c17 	ldw	r3,240(sp)
 5088520:	1000bc26 	beq	r2,zero,5088814 <___vfprintf_internal_r+0x137c>
 5088524:	d9403317 	ldw	r5,204(sp)
 5088528:	84000044 	addi	r16,r16,1
 508852c:	8c400044 	addi	r17,r17,1
 5088530:	28bfffc4 	addi	r2,r5,-1
 5088534:	1887883a 	add	r3,r3,r2
 5088538:	b0800115 	stw	r2,4(r22)
 508853c:	b4000015 	stw	r16,0(r22)
 5088540:	d8c02015 	stw	r3,128(sp)
 5088544:	dc401f15 	stw	r17,124(sp)
 5088548:	008001c4 	movi	r2,7
 508854c:	14414316 	blt	r2,r17,5088a5c <___vfprintf_internal_r+0x15c4>
 5088550:	b5800204 	addi	r22,r22,8
 5088554:	d9003a17 	ldw	r4,232(sp)
 5088558:	df0022c4 	addi	fp,sp,139
 508855c:	8c400044 	addi	r17,r17,1
 5088560:	20c7883a 	add	r3,r4,r3
 5088564:	b7000015 	stw	fp,0(r22)
 5088568:	b1000115 	stw	r4,4(r22)
 508856c:	d8c02015 	stw	r3,128(sp)
 5088570:	dc401f15 	stw	r17,124(sp)
 5088574:	008001c4 	movi	r2,7
 5088578:	14400e16 	blt	r2,r17,50885b4 <___vfprintf_internal_r+0x111c>
 508857c:	b2000204 	addi	r8,r22,8
 5088580:	003e3a06 	br	5087e6c <__alt_data_end+0xfffb9c6c>
 5088584:	01014274 	movhi	r4,1289
 5088588:	21113684 	addi	r4,r4,17626
 508858c:	d9002b15 	stw	r4,172(sp)
 5088590:	d9002b17 	ldw	r4,172(sp)
 5088594:	1c07883a 	add	r3,r3,r16
 5088598:	44000115 	stw	r16,4(r8)
 508859c:	41000015 	stw	r4,0(r8)
 50885a0:	10800044 	addi	r2,r2,1
 50885a4:	d8c02015 	stw	r3,128(sp)
 50885a8:	d8801f15 	stw	r2,124(sp)
 50885ac:	010001c4 	movi	r4,7
 50885b0:	20be2d0e 	bge	r4,r2,5087e68 <__alt_data_end+0xfffb9c68>
 50885b4:	d9002c17 	ldw	r4,176(sp)
 50885b8:	d9801e04 	addi	r6,sp,120
 50885bc:	b80b883a 	mov	r5,r23
 50885c0:	508eb880 	call	508eb88 <__sprint_r>
 50885c4:	103cb61e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 50885c8:	d8c02017 	ldw	r3,128(sp)
 50885cc:	da000404 	addi	r8,sp,16
 50885d0:	003e2606 	br	5087e6c <__alt_data_end+0xfffb9c6c>
 50885d4:	d9002c17 	ldw	r4,176(sp)
 50885d8:	d9801e04 	addi	r6,sp,120
 50885dc:	b80b883a 	mov	r5,r23
 50885e0:	508eb880 	call	508eb88 <__sprint_r>
 50885e4:	103e5d26 	beq	r2,zero,5087f5c <__alt_data_end+0xfffb9d5c>
 50885e8:	003cad06 	br	50878a0 <__alt_data_end+0xfffb96a0>
 50885ec:	d9002c17 	ldw	r4,176(sp)
 50885f0:	d9801e04 	addi	r6,sp,120
 50885f4:	b80b883a 	mov	r5,r23
 50885f8:	508eb880 	call	508eb88 <__sprint_r>
 50885fc:	103ca81e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088600:	d8c02017 	ldw	r3,128(sp)
 5088604:	da000404 	addi	r8,sp,16
 5088608:	003e0b06 	br	5087e38 <__alt_data_end+0xfffb9c38>
 508860c:	d9002c17 	ldw	r4,176(sp)
 5088610:	d9801e04 	addi	r6,sp,120
 5088614:	b80b883a 	mov	r5,r23
 5088618:	508eb880 	call	508eb88 <__sprint_r>
 508861c:	103ca01e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088620:	d8c02017 	ldw	r3,128(sp)
 5088624:	da000404 	addi	r8,sp,16
 5088628:	003dbd06 	br	5087d20 <__alt_data_end+0xfffb9b20>
 508862c:	d9002c17 	ldw	r4,176(sp)
 5088630:	d9801e04 	addi	r6,sp,120
 5088634:	b80b883a 	mov	r5,r23
 5088638:	508eb880 	call	508eb88 <__sprint_r>
 508863c:	103c981e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088640:	d8c02017 	ldw	r3,128(sp)
 5088644:	da000404 	addi	r8,sp,16
 5088648:	003dc306 	br	5087d58 <__alt_data_end+0xfffb9b58>
 508864c:	d8802917 	ldw	r2,164(sp)
 5088650:	d8002785 	stb	zero,158(sp)
 5088654:	103f0616 	blt	r2,zero,5088270 <__alt_data_end+0xfffba070>
 5088658:	00ffdfc4 	movi	r3,-129
 508865c:	9d84b03a 	or	r2,r19,r22
 5088660:	90e4703a 	and	r18,r18,r3
 5088664:	103c6b26 	beq	r2,zero,5087814 <__alt_data_end+0xfffb9614>
 5088668:	0039883a 	mov	fp,zero
 508866c:	003e7406 	br	5088040 <__alt_data_end+0xfffb9e40>
 5088670:	9080040c 	andi	r2,r18,16
 5088674:	1001b326 	beq	r2,zero,5088d44 <___vfprintf_internal_r+0x18ac>
 5088678:	d9002d17 	ldw	r4,180(sp)
 508867c:	d9402917 	ldw	r5,164(sp)
 5088680:	d8002785 	stb	zero,158(sp)
 5088684:	20800104 	addi	r2,r4,4
 5088688:	24c00017 	ldw	r19,0(r4)
 508868c:	002d883a 	mov	r22,zero
 5088690:	2801b516 	blt	r5,zero,5088d68 <___vfprintf_internal_r+0x18d0>
 5088694:	00ffdfc4 	movi	r3,-129
 5088698:	d8802d15 	stw	r2,180(sp)
 508869c:	90e4703a 	and	r18,r18,r3
 50886a0:	983d2726 	beq	r19,zero,5087b40 <__alt_data_end+0xfffb9940>
 50886a4:	0039883a 	mov	fp,zero
 50886a8:	003d2a06 	br	5087b54 <__alt_data_end+0xfffb9954>
 50886ac:	dc402617 	ldw	r17,152(sp)
 50886b0:	0441d30e 	bge	zero,r17,5088e00 <___vfprintf_internal_r+0x1968>
 50886b4:	dc403217 	ldw	r17,200(sp)
 50886b8:	d8803317 	ldw	r2,204(sp)
 50886bc:	1440010e 	bge	r2,r17,50886c4 <___vfprintf_internal_r+0x122c>
 50886c0:	1023883a 	mov	r17,r2
 50886c4:	04400a0e 	bge	zero,r17,50886f0 <___vfprintf_internal_r+0x1258>
 50886c8:	d8801f17 	ldw	r2,124(sp)
 50886cc:	1c47883a 	add	r3,r3,r17
 50886d0:	44000015 	stw	r16,0(r8)
 50886d4:	10800044 	addi	r2,r2,1
 50886d8:	44400115 	stw	r17,4(r8)
 50886dc:	d8c02015 	stw	r3,128(sp)
 50886e0:	d8801f15 	stw	r2,124(sp)
 50886e4:	010001c4 	movi	r4,7
 50886e8:	20826516 	blt	r4,r2,5089080 <___vfprintf_internal_r+0x1be8>
 50886ec:	42000204 	addi	r8,r8,8
 50886f0:	88026116 	blt	r17,zero,5089078 <___vfprintf_internal_r+0x1be0>
 50886f4:	d9003217 	ldw	r4,200(sp)
 50886f8:	2463c83a 	sub	r17,r4,r17
 50886fc:	04407b0e 	bge	zero,r17,50888ec <___vfprintf_internal_r+0x1454>
 5088700:	05800404 	movi	r22,16
 5088704:	d8801f17 	ldw	r2,124(sp)
 5088708:	b4419d0e 	bge	r22,r17,5088d80 <___vfprintf_internal_r+0x18e8>
 508870c:	01014274 	movhi	r4,1289
 5088710:	21113684 	addi	r4,r4,17626
 5088714:	d9002b15 	stw	r4,172(sp)
 5088718:	070001c4 	movi	fp,7
 508871c:	dcc02c17 	ldw	r19,176(sp)
 5088720:	00000306 	br	5088730 <___vfprintf_internal_r+0x1298>
 5088724:	42000204 	addi	r8,r8,8
 5088728:	8c7ffc04 	addi	r17,r17,-16
 508872c:	b441970e 	bge	r22,r17,5088d8c <___vfprintf_internal_r+0x18f4>
 5088730:	18c00404 	addi	r3,r3,16
 5088734:	10800044 	addi	r2,r2,1
 5088738:	45000015 	stw	r20,0(r8)
 508873c:	45800115 	stw	r22,4(r8)
 5088740:	d8c02015 	stw	r3,128(sp)
 5088744:	d8801f15 	stw	r2,124(sp)
 5088748:	e0bff60e 	bge	fp,r2,5088724 <__alt_data_end+0xfffba524>
 508874c:	d9801e04 	addi	r6,sp,120
 5088750:	b80b883a 	mov	r5,r23
 5088754:	9809883a 	mov	r4,r19
 5088758:	508eb880 	call	508eb88 <__sprint_r>
 508875c:	103c501e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088760:	d8c02017 	ldw	r3,128(sp)
 5088764:	d8801f17 	ldw	r2,124(sp)
 5088768:	da000404 	addi	r8,sp,16
 508876c:	003fee06 	br	5088728 <__alt_data_end+0xfffba528>
 5088770:	d9002c17 	ldw	r4,176(sp)
 5088774:	d9801e04 	addi	r6,sp,120
 5088778:	b80b883a 	mov	r5,r23
 508877c:	508eb880 	call	508eb88 <__sprint_r>
 5088780:	103c471e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088784:	d8c02017 	ldw	r3,128(sp)
 5088788:	df002787 	ldb	fp,158(sp)
 508878c:	da000404 	addi	r8,sp,16
 5088790:	003d5606 	br	5087cec <__alt_data_end+0xfffb9aec>
 5088794:	9080040c 	andi	r2,r18,16
 5088798:	10016126 	beq	r2,zero,5088d20 <___vfprintf_internal_r+0x1888>
 508879c:	d8802d17 	ldw	r2,180(sp)
 50887a0:	14c00017 	ldw	r19,0(r2)
 50887a4:	10800104 	addi	r2,r2,4
 50887a8:	d8802d15 	stw	r2,180(sp)
 50887ac:	982dd7fa 	srai	r22,r19,31
 50887b0:	b005883a 	mov	r2,r22
 50887b4:	003c8206 	br	50879c0 <__alt_data_end+0xfffb97c0>
 50887b8:	9080040c 	andi	r2,r18,16
 50887bc:	10003526 	beq	r2,zero,5088894 <___vfprintf_internal_r+0x13fc>
 50887c0:	d9402d17 	ldw	r5,180(sp)
 50887c4:	d8c02917 	ldw	r3,164(sp)
 50887c8:	d8002785 	stb	zero,158(sp)
 50887cc:	28800104 	addi	r2,r5,4
 50887d0:	2cc00017 	ldw	r19,0(r5)
 50887d4:	002d883a 	mov	r22,zero
 50887d8:	18003716 	blt	r3,zero,50888b8 <___vfprintf_internal_r+0x1420>
 50887dc:	00ffdfc4 	movi	r3,-129
 50887e0:	d8802d15 	stw	r2,180(sp)
 50887e4:	90e4703a 	and	r18,r18,r3
 50887e8:	0039883a 	mov	fp,zero
 50887ec:	983df326 	beq	r19,zero,5087fbc <__alt_data_end+0xfffb9dbc>
 50887f0:	00800244 	movi	r2,9
 50887f4:	14fc7b36 	bltu	r2,r19,50879e4 <__alt_data_end+0xfffb97e4>
 50887f8:	d8c02817 	ldw	r3,160(sp)
 50887fc:	dc001dc4 	addi	r16,sp,119
 5088800:	9cc00c04 	addi	r19,r19,48
 5088804:	1c07c83a 	sub	r3,r3,r16
 5088808:	dcc01dc5 	stb	r19,119(sp)
 508880c:	d8c02e15 	stw	r3,184(sp)
 5088810:	003ce806 	br	5087bb4 <__alt_data_end+0xfffb99b4>
 5088814:	d8803317 	ldw	r2,204(sp)
 5088818:	143fffc4 	addi	r16,r2,-1
 508881c:	043f4d0e 	bge	zero,r16,5088554 <__alt_data_end+0xfffba354>
 5088820:	07000404 	movi	fp,16
 5088824:	e400810e 	bge	fp,r16,5088a2c <___vfprintf_internal_r+0x1594>
 5088828:	01414274 	movhi	r5,1289
 508882c:	29513684 	addi	r5,r5,17626
 5088830:	d9402b15 	stw	r5,172(sp)
 5088834:	01c001c4 	movi	r7,7
 5088838:	dcc02c17 	ldw	r19,176(sp)
 508883c:	00000306 	br	508884c <___vfprintf_internal_r+0x13b4>
 5088840:	b5800204 	addi	r22,r22,8
 5088844:	843ffc04 	addi	r16,r16,-16
 5088848:	e4007b0e 	bge	fp,r16,5088a38 <___vfprintf_internal_r+0x15a0>
 508884c:	18c00404 	addi	r3,r3,16
 5088850:	8c400044 	addi	r17,r17,1
 5088854:	b5000015 	stw	r20,0(r22)
 5088858:	b7000115 	stw	fp,4(r22)
 508885c:	d8c02015 	stw	r3,128(sp)
 5088860:	dc401f15 	stw	r17,124(sp)
 5088864:	3c7ff60e 	bge	r7,r17,5088840 <__alt_data_end+0xfffba640>
 5088868:	d9801e04 	addi	r6,sp,120
 508886c:	b80b883a 	mov	r5,r23
 5088870:	9809883a 	mov	r4,r19
 5088874:	d9c03c15 	stw	r7,240(sp)
 5088878:	508eb880 	call	508eb88 <__sprint_r>
 508887c:	d9c03c17 	ldw	r7,240(sp)
 5088880:	103c071e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088884:	d8c02017 	ldw	r3,128(sp)
 5088888:	dc401f17 	ldw	r17,124(sp)
 508888c:	dd800404 	addi	r22,sp,16
 5088890:	003fec06 	br	5088844 <__alt_data_end+0xfffba644>
 5088894:	9080100c 	andi	r2,r18,64
 5088898:	d8002785 	stb	zero,158(sp)
 508889c:	10010e26 	beq	r2,zero,5088cd8 <___vfprintf_internal_r+0x1840>
 50888a0:	d9002d17 	ldw	r4,180(sp)
 50888a4:	d9402917 	ldw	r5,164(sp)
 50888a8:	002d883a 	mov	r22,zero
 50888ac:	20800104 	addi	r2,r4,4
 50888b0:	24c0000b 	ldhu	r19,0(r4)
 50888b4:	283fc90e 	bge	r5,zero,50887dc <__alt_data_end+0xfffba5dc>
 50888b8:	d8802d15 	stw	r2,180(sp)
 50888bc:	0039883a 	mov	fp,zero
 50888c0:	9d84b03a 	or	r2,r19,r22
 50888c4:	103c461e 	bne	r2,zero,50879e0 <__alt_data_end+0xfffb97e0>
 50888c8:	00800044 	movi	r2,1
 50888cc:	003e6c06 	br	5088280 <__alt_data_end+0xfffba080>
 50888d0:	d9002c17 	ldw	r4,176(sp)
 50888d4:	d9801e04 	addi	r6,sp,120
 50888d8:	b80b883a 	mov	r5,r23
 50888dc:	508eb880 	call	508eb88 <__sprint_r>
 50888e0:	103bef1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 50888e4:	d8c02017 	ldw	r3,128(sp)
 50888e8:	da000404 	addi	r8,sp,16
 50888ec:	d9003217 	ldw	r4,200(sp)
 50888f0:	d8802617 	ldw	r2,152(sp)
 50888f4:	d9403317 	ldw	r5,204(sp)
 50888f8:	8123883a 	add	r17,r16,r4
 50888fc:	11400216 	blt	r2,r5,5088908 <___vfprintf_internal_r+0x1470>
 5088900:	9100004c 	andi	r4,r18,1
 5088904:	20000d26 	beq	r4,zero,508893c <___vfprintf_internal_r+0x14a4>
 5088908:	d9003717 	ldw	r4,220(sp)
 508890c:	d9403417 	ldw	r5,208(sp)
 5088910:	1907883a 	add	r3,r3,r4
 5088914:	d9001f17 	ldw	r4,124(sp)
 5088918:	41400015 	stw	r5,0(r8)
 508891c:	d9403717 	ldw	r5,220(sp)
 5088920:	21000044 	addi	r4,r4,1
 5088924:	d8c02015 	stw	r3,128(sp)
 5088928:	41400115 	stw	r5,4(r8)
 508892c:	d9001f15 	stw	r4,124(sp)
 5088930:	014001c4 	movi	r5,7
 5088934:	2901e816 	blt	r5,r4,50890d8 <___vfprintf_internal_r+0x1c40>
 5088938:	42000204 	addi	r8,r8,8
 508893c:	d9003317 	ldw	r4,204(sp)
 5088940:	8121883a 	add	r16,r16,r4
 5088944:	2085c83a 	sub	r2,r4,r2
 5088948:	8461c83a 	sub	r16,r16,r17
 508894c:	1400010e 	bge	r2,r16,5088954 <___vfprintf_internal_r+0x14bc>
 5088950:	1021883a 	mov	r16,r2
 5088954:	04000a0e 	bge	zero,r16,5088980 <___vfprintf_internal_r+0x14e8>
 5088958:	d9001f17 	ldw	r4,124(sp)
 508895c:	1c07883a 	add	r3,r3,r16
 5088960:	44400015 	stw	r17,0(r8)
 5088964:	21000044 	addi	r4,r4,1
 5088968:	44000115 	stw	r16,4(r8)
 508896c:	d8c02015 	stw	r3,128(sp)
 5088970:	d9001f15 	stw	r4,124(sp)
 5088974:	014001c4 	movi	r5,7
 5088978:	2901fb16 	blt	r5,r4,5089168 <___vfprintf_internal_r+0x1cd0>
 508897c:	42000204 	addi	r8,r8,8
 5088980:	8001f716 	blt	r16,zero,5089160 <___vfprintf_internal_r+0x1cc8>
 5088984:	1421c83a 	sub	r16,r2,r16
 5088988:	043d380e 	bge	zero,r16,5087e6c <__alt_data_end+0xfffb9c6c>
 508898c:	04400404 	movi	r17,16
 5088990:	d8801f17 	ldw	r2,124(sp)
 5088994:	8c3efb0e 	bge	r17,r16,5088584 <__alt_data_end+0xfffba384>
 5088998:	01414274 	movhi	r5,1289
 508899c:	29513684 	addi	r5,r5,17626
 50889a0:	d9402b15 	stw	r5,172(sp)
 50889a4:	058001c4 	movi	r22,7
 50889a8:	dcc02c17 	ldw	r19,176(sp)
 50889ac:	00000306 	br	50889bc <___vfprintf_internal_r+0x1524>
 50889b0:	42000204 	addi	r8,r8,8
 50889b4:	843ffc04 	addi	r16,r16,-16
 50889b8:	8c3ef50e 	bge	r17,r16,5088590 <__alt_data_end+0xfffba390>
 50889bc:	18c00404 	addi	r3,r3,16
 50889c0:	10800044 	addi	r2,r2,1
 50889c4:	45000015 	stw	r20,0(r8)
 50889c8:	44400115 	stw	r17,4(r8)
 50889cc:	d8c02015 	stw	r3,128(sp)
 50889d0:	d8801f15 	stw	r2,124(sp)
 50889d4:	b0bff60e 	bge	r22,r2,50889b0 <__alt_data_end+0xfffba7b0>
 50889d8:	d9801e04 	addi	r6,sp,120
 50889dc:	b80b883a 	mov	r5,r23
 50889e0:	9809883a 	mov	r4,r19
 50889e4:	508eb880 	call	508eb88 <__sprint_r>
 50889e8:	103bad1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 50889ec:	d8c02017 	ldw	r3,128(sp)
 50889f0:	d8801f17 	ldw	r2,124(sp)
 50889f4:	da000404 	addi	r8,sp,16
 50889f8:	003fee06 	br	50889b4 <__alt_data_end+0xfffba7b4>
 50889fc:	9088703a 	and	r4,r18,r2
 5088a00:	203eab1e 	bne	r4,zero,50884b0 <__alt_data_end+0xfffba2b0>
 5088a04:	dc401f17 	ldw	r17,124(sp)
 5088a08:	40800115 	stw	r2,4(r8)
 5088a0c:	44000015 	stw	r16,0(r8)
 5088a10:	8c400044 	addi	r17,r17,1
 5088a14:	d8c02015 	stw	r3,128(sp)
 5088a18:	dc401f15 	stw	r17,124(sp)
 5088a1c:	008001c4 	movi	r2,7
 5088a20:	14400e16 	blt	r2,r17,5088a5c <___vfprintf_internal_r+0x15c4>
 5088a24:	45800204 	addi	r22,r8,8
 5088a28:	003eca06 	br	5088554 <__alt_data_end+0xfffba354>
 5088a2c:	01014274 	movhi	r4,1289
 5088a30:	21113684 	addi	r4,r4,17626
 5088a34:	d9002b15 	stw	r4,172(sp)
 5088a38:	d8802b17 	ldw	r2,172(sp)
 5088a3c:	1c07883a 	add	r3,r3,r16
 5088a40:	8c400044 	addi	r17,r17,1
 5088a44:	b0800015 	stw	r2,0(r22)
 5088a48:	b4000115 	stw	r16,4(r22)
 5088a4c:	d8c02015 	stw	r3,128(sp)
 5088a50:	dc401f15 	stw	r17,124(sp)
 5088a54:	008001c4 	movi	r2,7
 5088a58:	147ebd0e 	bge	r2,r17,5088550 <__alt_data_end+0xfffba350>
 5088a5c:	d9002c17 	ldw	r4,176(sp)
 5088a60:	d9801e04 	addi	r6,sp,120
 5088a64:	b80b883a 	mov	r5,r23
 5088a68:	508eb880 	call	508eb88 <__sprint_r>
 5088a6c:	103b8c1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088a70:	d8c02017 	ldw	r3,128(sp)
 5088a74:	dc401f17 	ldw	r17,124(sp)
 5088a78:	dd800404 	addi	r22,sp,16
 5088a7c:	003eb506 	br	5088554 <__alt_data_end+0xfffba354>
 5088a80:	d9002c17 	ldw	r4,176(sp)
 5088a84:	d9801e04 	addi	r6,sp,120
 5088a88:	b80b883a 	mov	r5,r23
 5088a8c:	508eb880 	call	508eb88 <__sprint_r>
 5088a90:	103b831e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088a94:	d8c02017 	ldw	r3,128(sp)
 5088a98:	dc401f17 	ldw	r17,124(sp)
 5088a9c:	da000404 	addi	r8,sp,16
 5088aa0:	003e8d06 	br	50884d8 <__alt_data_end+0xfffba2d8>
 5088aa4:	d9002c17 	ldw	r4,176(sp)
 5088aa8:	d9801e04 	addi	r6,sp,120
 5088aac:	b80b883a 	mov	r5,r23
 5088ab0:	508eb880 	call	508eb88 <__sprint_r>
 5088ab4:	103b7a1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088ab8:	d8c02017 	ldw	r3,128(sp)
 5088abc:	dc401f17 	ldw	r17,124(sp)
 5088ac0:	dd800404 	addi	r22,sp,16
 5088ac4:	003e8f06 	br	5088504 <__alt_data_end+0xfffba304>
 5088ac8:	0027883a 	mov	r19,zero
 5088acc:	003f4a06 	br	50887f8 <__alt_data_end+0xfffba5f8>
 5088ad0:	d9002c17 	ldw	r4,176(sp)
 5088ad4:	d9801e04 	addi	r6,sp,120
 5088ad8:	b80b883a 	mov	r5,r23
 5088adc:	508eb880 	call	508eb88 <__sprint_r>
 5088ae0:	103b6f1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088ae4:	d8c02017 	ldw	r3,128(sp)
 5088ae8:	da000404 	addi	r8,sp,16
 5088aec:	003c9d06 	br	5087d64 <__alt_data_end+0xfffb9b64>
 5088af0:	04e7c83a 	sub	r19,zero,r19
 5088af4:	9804c03a 	cmpne	r2,r19,zero
 5088af8:	05adc83a 	sub	r22,zero,r22
 5088afc:	b0adc83a 	sub	r22,r22,r2
 5088b00:	d8802917 	ldw	r2,164(sp)
 5088b04:	07000b44 	movi	fp,45
 5088b08:	df002785 	stb	fp,158(sp)
 5088b0c:	10017b16 	blt	r2,zero,50890fc <___vfprintf_internal_r+0x1c64>
 5088b10:	00bfdfc4 	movi	r2,-129
 5088b14:	90a4703a 	and	r18,r18,r2
 5088b18:	003bb106 	br	50879e0 <__alt_data_end+0xfffb97e0>
 5088b1c:	d9003617 	ldw	r4,216(sp)
 5088b20:	d9403817 	ldw	r5,224(sp)
 5088b24:	da003d15 	stw	r8,244(sp)
 5088b28:	50845dc0 	call	50845dc <__fpclassifyd>
 5088b2c:	da003d17 	ldw	r8,244(sp)
 5088b30:	1000f026 	beq	r2,zero,5088ef4 <___vfprintf_internal_r+0x1a5c>
 5088b34:	d9002917 	ldw	r4,164(sp)
 5088b38:	05bff7c4 	movi	r22,-33
 5088b3c:	00bfffc4 	movi	r2,-1
 5088b40:	8dac703a 	and	r22,r17,r22
 5088b44:	20820026 	beq	r4,r2,5089348 <___vfprintf_internal_r+0x1eb0>
 5088b48:	008011c4 	movi	r2,71
 5088b4c:	b081f726 	beq	r22,r2,508932c <___vfprintf_internal_r+0x1e94>
 5088b50:	d9003817 	ldw	r4,224(sp)
 5088b54:	90c04014 	ori	r3,r18,256
 5088b58:	d8c02b15 	stw	r3,172(sp)
 5088b5c:	20021516 	blt	r4,zero,50893b4 <___vfprintf_internal_r+0x1f1c>
 5088b60:	dcc03817 	ldw	r19,224(sp)
 5088b64:	d8002a05 	stb	zero,168(sp)
 5088b68:	00801984 	movi	r2,102
 5088b6c:	8881f926 	beq	r17,r2,5089354 <___vfprintf_internal_r+0x1ebc>
 5088b70:	00801184 	movi	r2,70
 5088b74:	88821c26 	beq	r17,r2,50893e8 <___vfprintf_internal_r+0x1f50>
 5088b78:	00801144 	movi	r2,69
 5088b7c:	b081ef26 	beq	r22,r2,508933c <___vfprintf_internal_r+0x1ea4>
 5088b80:	d8c02917 	ldw	r3,164(sp)
 5088b84:	d8802104 	addi	r2,sp,132
 5088b88:	d8800315 	stw	r2,12(sp)
 5088b8c:	d9403617 	ldw	r5,216(sp)
 5088b90:	d8802504 	addi	r2,sp,148
 5088b94:	d9002c17 	ldw	r4,176(sp)
 5088b98:	d8800215 	stw	r2,8(sp)
 5088b9c:	d8802604 	addi	r2,sp,152
 5088ba0:	d8c00015 	stw	r3,0(sp)
 5088ba4:	d8800115 	stw	r2,4(sp)
 5088ba8:	01c00084 	movi	r7,2
 5088bac:	980d883a 	mov	r6,r19
 5088bb0:	d8c03c15 	stw	r3,240(sp)
 5088bb4:	da003d15 	stw	r8,244(sp)
 5088bb8:	5089abc0 	call	5089abc <_dtoa_r>
 5088bbc:	1021883a 	mov	r16,r2
 5088bc0:	008019c4 	movi	r2,103
 5088bc4:	d8c03c17 	ldw	r3,240(sp)
 5088bc8:	da003d17 	ldw	r8,244(sp)
 5088bcc:	88817126 	beq	r17,r2,5089194 <___vfprintf_internal_r+0x1cfc>
 5088bd0:	008011c4 	movi	r2,71
 5088bd4:	88829226 	beq	r17,r2,5089620 <___vfprintf_internal_r+0x2188>
 5088bd8:	80f9883a 	add	fp,r16,r3
 5088bdc:	d9003617 	ldw	r4,216(sp)
 5088be0:	000d883a 	mov	r6,zero
 5088be4:	000f883a 	mov	r7,zero
 5088be8:	980b883a 	mov	r5,r19
 5088bec:	da003d15 	stw	r8,244(sp)
 5088bf0:	5085d500 	call	5085d50 <__eqdf2>
 5088bf4:	da003d17 	ldw	r8,244(sp)
 5088bf8:	10018d26 	beq	r2,zero,5089230 <___vfprintf_internal_r+0x1d98>
 5088bfc:	d8802117 	ldw	r2,132(sp)
 5088c00:	1700062e 	bgeu	r2,fp,5088c1c <___vfprintf_internal_r+0x1784>
 5088c04:	01000c04 	movi	r4,48
 5088c08:	10c00044 	addi	r3,r2,1
 5088c0c:	d8c02115 	stw	r3,132(sp)
 5088c10:	11000005 	stb	r4,0(r2)
 5088c14:	d8802117 	ldw	r2,132(sp)
 5088c18:	173ffb36 	bltu	r2,fp,5088c08 <__alt_data_end+0xfffbaa08>
 5088c1c:	1405c83a 	sub	r2,r2,r16
 5088c20:	d8803315 	stw	r2,204(sp)
 5088c24:	008011c4 	movi	r2,71
 5088c28:	b0817626 	beq	r22,r2,5089204 <___vfprintf_internal_r+0x1d6c>
 5088c2c:	00801944 	movi	r2,101
 5088c30:	1442810e 	bge	r2,r17,5089638 <___vfprintf_internal_r+0x21a0>
 5088c34:	d8c02617 	ldw	r3,152(sp)
 5088c38:	00801984 	movi	r2,102
 5088c3c:	d8c03215 	stw	r3,200(sp)
 5088c40:	8881fe26 	beq	r17,r2,508943c <___vfprintf_internal_r+0x1fa4>
 5088c44:	d8c03217 	ldw	r3,200(sp)
 5088c48:	d9003317 	ldw	r4,204(sp)
 5088c4c:	1901dd16 	blt	r3,r4,50893c4 <___vfprintf_internal_r+0x1f2c>
 5088c50:	9480004c 	andi	r18,r18,1
 5088c54:	90022b1e 	bne	r18,zero,5089504 <___vfprintf_internal_r+0x206c>
 5088c58:	1805883a 	mov	r2,r3
 5088c5c:	18028016 	blt	r3,zero,5089660 <___vfprintf_internal_r+0x21c8>
 5088c60:	d8c03217 	ldw	r3,200(sp)
 5088c64:	044019c4 	movi	r17,103
 5088c68:	d8c02e15 	stw	r3,184(sp)
 5088c6c:	df002a07 	ldb	fp,168(sp)
 5088c70:	e001531e 	bne	fp,zero,50891c0 <___vfprintf_internal_r+0x1d28>
 5088c74:	df002783 	ldbu	fp,158(sp)
 5088c78:	d8802a15 	stw	r2,168(sp)
 5088c7c:	dc802b17 	ldw	r18,172(sp)
 5088c80:	d8002915 	stw	zero,164(sp)
 5088c84:	003bd106 	br	5087bcc <__alt_data_end+0xfffb99cc>
 5088c88:	d8802d17 	ldw	r2,180(sp)
 5088c8c:	d8c02d17 	ldw	r3,180(sp)
 5088c90:	d9002d17 	ldw	r4,180(sp)
 5088c94:	10800017 	ldw	r2,0(r2)
 5088c98:	18c00117 	ldw	r3,4(r3)
 5088c9c:	21000204 	addi	r4,r4,8
 5088ca0:	d8803615 	stw	r2,216(sp)
 5088ca4:	d8c03815 	stw	r3,224(sp)
 5088ca8:	d9002d15 	stw	r4,180(sp)
 5088cac:	003b7506 	br	5087a84 <__alt_data_end+0xfffb9884>
 5088cb0:	ac400007 	ldb	r17,0(r21)
 5088cb4:	003a5906 	br	508761c <__alt_data_end+0xfffb941c>
 5088cb8:	9080100c 	andi	r2,r18,64
 5088cbc:	1000a826 	beq	r2,zero,5088f60 <___vfprintf_internal_r+0x1ac8>
 5088cc0:	d9002d17 	ldw	r4,180(sp)
 5088cc4:	002d883a 	mov	r22,zero
 5088cc8:	24c0000b 	ldhu	r19,0(r4)
 5088ccc:	21000104 	addi	r4,r4,4
 5088cd0:	d9002d15 	stw	r4,180(sp)
 5088cd4:	003ccb06 	br	5088004 <__alt_data_end+0xfffb9e04>
 5088cd8:	d8c02d17 	ldw	r3,180(sp)
 5088cdc:	d9002917 	ldw	r4,164(sp)
 5088ce0:	002d883a 	mov	r22,zero
 5088ce4:	18800104 	addi	r2,r3,4
 5088ce8:	1cc00017 	ldw	r19,0(r3)
 5088cec:	203ebb0e 	bge	r4,zero,50887dc <__alt_data_end+0xfffba5dc>
 5088cf0:	003ef106 	br	50888b8 <__alt_data_end+0xfffba6b8>
 5088cf4:	9080040c 	andi	r2,r18,16
 5088cf8:	1000921e 	bne	r2,zero,5088f44 <___vfprintf_internal_r+0x1aac>
 5088cfc:	9480100c 	andi	r18,r18,64
 5088d00:	90013926 	beq	r18,zero,50891e8 <___vfprintf_internal_r+0x1d50>
 5088d04:	d9002d17 	ldw	r4,180(sp)
 5088d08:	d9402f17 	ldw	r5,188(sp)
 5088d0c:	20800017 	ldw	r2,0(r4)
 5088d10:	21000104 	addi	r4,r4,4
 5088d14:	d9002d15 	stw	r4,180(sp)
 5088d18:	1140000d 	sth	r5,0(r2)
 5088d1c:	003a1606 	br	5087578 <__alt_data_end+0xfffb9378>
 5088d20:	9080100c 	andi	r2,r18,64
 5088d24:	10008026 	beq	r2,zero,5088f28 <___vfprintf_internal_r+0x1a90>
 5088d28:	d8c02d17 	ldw	r3,180(sp)
 5088d2c:	1cc0000f 	ldh	r19,0(r3)
 5088d30:	18c00104 	addi	r3,r3,4
 5088d34:	d8c02d15 	stw	r3,180(sp)
 5088d38:	982dd7fa 	srai	r22,r19,31
 5088d3c:	b005883a 	mov	r2,r22
 5088d40:	003b1f06 	br	50879c0 <__alt_data_end+0xfffb97c0>
 5088d44:	9080100c 	andi	r2,r18,64
 5088d48:	d8002785 	stb	zero,158(sp)
 5088d4c:	10008a1e 	bne	r2,zero,5088f78 <___vfprintf_internal_r+0x1ae0>
 5088d50:	d9402d17 	ldw	r5,180(sp)
 5088d54:	d8c02917 	ldw	r3,164(sp)
 5088d58:	002d883a 	mov	r22,zero
 5088d5c:	28800104 	addi	r2,r5,4
 5088d60:	2cc00017 	ldw	r19,0(r5)
 5088d64:	183e4b0e 	bge	r3,zero,5088694 <__alt_data_end+0xfffba494>
 5088d68:	9d86b03a 	or	r3,r19,r22
 5088d6c:	d8802d15 	stw	r2,180(sp)
 5088d70:	183e4c1e 	bne	r3,zero,50886a4 <__alt_data_end+0xfffba4a4>
 5088d74:	0039883a 	mov	fp,zero
 5088d78:	0005883a 	mov	r2,zero
 5088d7c:	003d4006 	br	5088280 <__alt_data_end+0xfffba080>
 5088d80:	01414274 	movhi	r5,1289
 5088d84:	29513684 	addi	r5,r5,17626
 5088d88:	d9402b15 	stw	r5,172(sp)
 5088d8c:	d9402b17 	ldw	r5,172(sp)
 5088d90:	1c47883a 	add	r3,r3,r17
 5088d94:	10800044 	addi	r2,r2,1
 5088d98:	41400015 	stw	r5,0(r8)
 5088d9c:	44400115 	stw	r17,4(r8)
 5088da0:	d8c02015 	stw	r3,128(sp)
 5088da4:	d8801f15 	stw	r2,124(sp)
 5088da8:	010001c4 	movi	r4,7
 5088dac:	20bec816 	blt	r4,r2,50888d0 <__alt_data_end+0xfffba6d0>
 5088db0:	42000204 	addi	r8,r8,8
 5088db4:	003ecd06 	br	50888ec <__alt_data_end+0xfffba6ec>
 5088db8:	d9002917 	ldw	r4,164(sp)
 5088dbc:	d8002785 	stb	zero,158(sp)
 5088dc0:	203d2d16 	blt	r4,zero,5088278 <__alt_data_end+0xfffba078>
 5088dc4:	00bfdfc4 	movi	r2,-129
 5088dc8:	90a4703a 	and	r18,r18,r2
 5088dcc:	003a9106 	br	5087814 <__alt_data_end+0xfffb9614>
 5088dd0:	01014274 	movhi	r4,1289
 5088dd4:	21113684 	addi	r4,r4,17626
 5088dd8:	d9002b15 	stw	r4,172(sp)
 5088ddc:	003c0c06 	br	5087e10 <__alt_data_end+0xfffb9c10>
 5088de0:	d9002c17 	ldw	r4,176(sp)
 5088de4:	d9801e04 	addi	r6,sp,120
 5088de8:	b80b883a 	mov	r5,r23
 5088dec:	508eb880 	call	508eb88 <__sprint_r>
 5088df0:	103aab1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088df4:	d8c02017 	ldw	r3,128(sp)
 5088df8:	da000404 	addi	r8,sp,16
 5088dfc:	003d4106 	br	5088304 <__alt_data_end+0xfffba104>
 5088e00:	d8801f17 	ldw	r2,124(sp)
 5088e04:	01414274 	movhi	r5,1289
 5088e08:	01000044 	movi	r4,1
 5088e0c:	18c00044 	addi	r3,r3,1
 5088e10:	10800044 	addi	r2,r2,1
 5088e14:	29513604 	addi	r5,r5,17624
 5088e18:	41000115 	stw	r4,4(r8)
 5088e1c:	41400015 	stw	r5,0(r8)
 5088e20:	d8c02015 	stw	r3,128(sp)
 5088e24:	d8801f15 	stw	r2,124(sp)
 5088e28:	010001c4 	movi	r4,7
 5088e2c:	20805c16 	blt	r4,r2,5088fa0 <___vfprintf_internal_r+0x1b08>
 5088e30:	42000204 	addi	r8,r8,8
 5088e34:	8800041e 	bne	r17,zero,5088e48 <___vfprintf_internal_r+0x19b0>
 5088e38:	d8803317 	ldw	r2,204(sp)
 5088e3c:	1000021e 	bne	r2,zero,5088e48 <___vfprintf_internal_r+0x19b0>
 5088e40:	9080004c 	andi	r2,r18,1
 5088e44:	103c0926 	beq	r2,zero,5087e6c <__alt_data_end+0xfffb9c6c>
 5088e48:	d9003717 	ldw	r4,220(sp)
 5088e4c:	d8801f17 	ldw	r2,124(sp)
 5088e50:	d9403417 	ldw	r5,208(sp)
 5088e54:	20c7883a 	add	r3,r4,r3
 5088e58:	10800044 	addi	r2,r2,1
 5088e5c:	41000115 	stw	r4,4(r8)
 5088e60:	41400015 	stw	r5,0(r8)
 5088e64:	d8c02015 	stw	r3,128(sp)
 5088e68:	d8801f15 	stw	r2,124(sp)
 5088e6c:	010001c4 	movi	r4,7
 5088e70:	20812116 	blt	r4,r2,50892f8 <___vfprintf_internal_r+0x1e60>
 5088e74:	42000204 	addi	r8,r8,8
 5088e78:	0463c83a 	sub	r17,zero,r17
 5088e7c:	0440730e 	bge	zero,r17,508904c <___vfprintf_internal_r+0x1bb4>
 5088e80:	05800404 	movi	r22,16
 5088e84:	b440860e 	bge	r22,r17,50890a0 <___vfprintf_internal_r+0x1c08>
 5088e88:	01414274 	movhi	r5,1289
 5088e8c:	29513684 	addi	r5,r5,17626
 5088e90:	d9402b15 	stw	r5,172(sp)
 5088e94:	070001c4 	movi	fp,7
 5088e98:	dcc02c17 	ldw	r19,176(sp)
 5088e9c:	00000306 	br	5088eac <___vfprintf_internal_r+0x1a14>
 5088ea0:	42000204 	addi	r8,r8,8
 5088ea4:	8c7ffc04 	addi	r17,r17,-16
 5088ea8:	b440800e 	bge	r22,r17,50890ac <___vfprintf_internal_r+0x1c14>
 5088eac:	18c00404 	addi	r3,r3,16
 5088eb0:	10800044 	addi	r2,r2,1
 5088eb4:	45000015 	stw	r20,0(r8)
 5088eb8:	45800115 	stw	r22,4(r8)
 5088ebc:	d8c02015 	stw	r3,128(sp)
 5088ec0:	d8801f15 	stw	r2,124(sp)
 5088ec4:	e0bff60e 	bge	fp,r2,5088ea0 <__alt_data_end+0xfffbaca0>
 5088ec8:	d9801e04 	addi	r6,sp,120
 5088ecc:	b80b883a 	mov	r5,r23
 5088ed0:	9809883a 	mov	r4,r19
 5088ed4:	508eb880 	call	508eb88 <__sprint_r>
 5088ed8:	103a711e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088edc:	d8c02017 	ldw	r3,128(sp)
 5088ee0:	d8801f17 	ldw	r2,124(sp)
 5088ee4:	da000404 	addi	r8,sp,16
 5088ee8:	003fee06 	br	5088ea4 <__alt_data_end+0xfffbaca4>
 5088eec:	00bfffc4 	movi	r2,-1
 5088ef0:	003a6f06 	br	50878b0 <__alt_data_end+0xfffb96b0>
 5088ef4:	008011c4 	movi	r2,71
 5088ef8:	1440b816 	blt	r2,r17,50891dc <___vfprintf_internal_r+0x1d44>
 5088efc:	04014274 	movhi	r16,1289
 5088f00:	84112804 	addi	r16,r16,17568
 5088f04:	00c000c4 	movi	r3,3
 5088f08:	00bfdfc4 	movi	r2,-129
 5088f0c:	d8c02a15 	stw	r3,168(sp)
 5088f10:	90a4703a 	and	r18,r18,r2
 5088f14:	df002783 	ldbu	fp,158(sp)
 5088f18:	d8c02e15 	stw	r3,184(sp)
 5088f1c:	d8002915 	stw	zero,164(sp)
 5088f20:	d8003215 	stw	zero,200(sp)
 5088f24:	003b2906 	br	5087bcc <__alt_data_end+0xfffb99cc>
 5088f28:	d9002d17 	ldw	r4,180(sp)
 5088f2c:	24c00017 	ldw	r19,0(r4)
 5088f30:	21000104 	addi	r4,r4,4
 5088f34:	d9002d15 	stw	r4,180(sp)
 5088f38:	982dd7fa 	srai	r22,r19,31
 5088f3c:	b005883a 	mov	r2,r22
 5088f40:	003a9f06 	br	50879c0 <__alt_data_end+0xfffb97c0>
 5088f44:	d9402d17 	ldw	r5,180(sp)
 5088f48:	d8c02f17 	ldw	r3,188(sp)
 5088f4c:	28800017 	ldw	r2,0(r5)
 5088f50:	29400104 	addi	r5,r5,4
 5088f54:	d9402d15 	stw	r5,180(sp)
 5088f58:	10c00015 	stw	r3,0(r2)
 5088f5c:	00398606 	br	5087578 <__alt_data_end+0xfffb9378>
 5088f60:	d9402d17 	ldw	r5,180(sp)
 5088f64:	002d883a 	mov	r22,zero
 5088f68:	2cc00017 	ldw	r19,0(r5)
 5088f6c:	29400104 	addi	r5,r5,4
 5088f70:	d9402d15 	stw	r5,180(sp)
 5088f74:	003c2306 	br	5088004 <__alt_data_end+0xfffb9e04>
 5088f78:	d8c02d17 	ldw	r3,180(sp)
 5088f7c:	d9002917 	ldw	r4,164(sp)
 5088f80:	002d883a 	mov	r22,zero
 5088f84:	18800104 	addi	r2,r3,4
 5088f88:	1cc0000b 	ldhu	r19,0(r3)
 5088f8c:	203dc10e 	bge	r4,zero,5088694 <__alt_data_end+0xfffba494>
 5088f90:	003f7506 	br	5088d68 <__alt_data_end+0xfffbab68>
 5088f94:	04014274 	movhi	r16,1289
 5088f98:	84112604 	addi	r16,r16,17560
 5088f9c:	003acc06 	br	5087ad0 <__alt_data_end+0xfffb98d0>
 5088fa0:	d9002c17 	ldw	r4,176(sp)
 5088fa4:	d9801e04 	addi	r6,sp,120
 5088fa8:	b80b883a 	mov	r5,r23
 5088fac:	508eb880 	call	508eb88 <__sprint_r>
 5088fb0:	103a3b1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5088fb4:	dc402617 	ldw	r17,152(sp)
 5088fb8:	d8c02017 	ldw	r3,128(sp)
 5088fbc:	da000404 	addi	r8,sp,16
 5088fc0:	003f9c06 	br	5088e34 <__alt_data_end+0xfffbac34>
 5088fc4:	ac400043 	ldbu	r17,1(r21)
 5088fc8:	94800814 	ori	r18,r18,32
 5088fcc:	ad400044 	addi	r21,r21,1
 5088fd0:	8c403fcc 	andi	r17,r17,255
 5088fd4:	8c40201c 	xori	r17,r17,128
 5088fd8:	8c7fe004 	addi	r17,r17,-128
 5088fdc:	00398f06 	br	508761c <__alt_data_end+0xfffb941c>
 5088fe0:	d8c02d15 	stw	r3,180(sp)
 5088fe4:	0039883a 	mov	fp,zero
 5088fe8:	003e3506 	br	50888c0 <__alt_data_end+0xfffba6c0>
 5088fec:	d9002c17 	ldw	r4,176(sp)
 5088ff0:	d9801e04 	addi	r6,sp,120
 5088ff4:	b80b883a 	mov	r5,r23
 5088ff8:	508eb880 	call	508eb88 <__sprint_r>
 5088ffc:	103a281e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5089000:	d8c02017 	ldw	r3,128(sp)
 5089004:	da000404 	addi	r8,sp,16
 5089008:	003cd006 	br	508834c <__alt_data_end+0xfffba14c>
 508900c:	8009883a 	mov	r4,r16
 5089010:	da003d15 	stw	r8,244(sp)
 5089014:	50874000 	call	5087400 <strlen>
 5089018:	d8802e15 	stw	r2,184(sp)
 508901c:	da003d17 	ldw	r8,244(sp)
 5089020:	103c340e 	bge	r2,zero,50880f4 <__alt_data_end+0xfffb9ef4>
 5089024:	0005883a 	mov	r2,zero
 5089028:	003c3206 	br	50880f4 <__alt_data_end+0xfffb9ef4>
 508902c:	d9002c17 	ldw	r4,176(sp)
 5089030:	d9801e04 	addi	r6,sp,120
 5089034:	b80b883a 	mov	r5,r23
 5089038:	508eb880 	call	508eb88 <__sprint_r>
 508903c:	103a181e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5089040:	d8c02017 	ldw	r3,128(sp)
 5089044:	d8801f17 	ldw	r2,124(sp)
 5089048:	da000404 	addi	r8,sp,16
 508904c:	d9403317 	ldw	r5,204(sp)
 5089050:	10800044 	addi	r2,r2,1
 5089054:	44000015 	stw	r16,0(r8)
 5089058:	28c7883a 	add	r3,r5,r3
 508905c:	003b7d06 	br	5087e54 <__alt_data_end+0xfffb9c54>
 5089060:	01014274 	movhi	r4,1289
 5089064:	21113a84 	addi	r4,r4,17642
 5089068:	d9003515 	stw	r4,212(sp)
 508906c:	003b1406 	br	5087cc0 <__alt_data_end+0xfffb9ac0>
 5089070:	013fffc4 	movi	r4,-1
 5089074:	003a3506 	br	508794c <__alt_data_end+0xfffb974c>
 5089078:	0023883a 	mov	r17,zero
 508907c:	003d9d06 	br	50886f4 <__alt_data_end+0xfffba4f4>
 5089080:	d9002c17 	ldw	r4,176(sp)
 5089084:	d9801e04 	addi	r6,sp,120
 5089088:	b80b883a 	mov	r5,r23
 508908c:	508eb880 	call	508eb88 <__sprint_r>
 5089090:	103a031e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 5089094:	d8c02017 	ldw	r3,128(sp)
 5089098:	da000404 	addi	r8,sp,16
 508909c:	003d9406 	br	50886f0 <__alt_data_end+0xfffba4f0>
 50890a0:	01014274 	movhi	r4,1289
 50890a4:	21113684 	addi	r4,r4,17626
 50890a8:	d9002b15 	stw	r4,172(sp)
 50890ac:	d9002b17 	ldw	r4,172(sp)
 50890b0:	1c47883a 	add	r3,r3,r17
 50890b4:	10800044 	addi	r2,r2,1
 50890b8:	41000015 	stw	r4,0(r8)
 50890bc:	44400115 	stw	r17,4(r8)
 50890c0:	d8c02015 	stw	r3,128(sp)
 50890c4:	d8801f15 	stw	r2,124(sp)
 50890c8:	010001c4 	movi	r4,7
 50890cc:	20bfd716 	blt	r4,r2,508902c <__alt_data_end+0xfffbae2c>
 50890d0:	42000204 	addi	r8,r8,8
 50890d4:	003fdd06 	br	508904c <__alt_data_end+0xfffbae4c>
 50890d8:	d9002c17 	ldw	r4,176(sp)
 50890dc:	d9801e04 	addi	r6,sp,120
 50890e0:	b80b883a 	mov	r5,r23
 50890e4:	508eb880 	call	508eb88 <__sprint_r>
 50890e8:	1039ed1e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 50890ec:	d8802617 	ldw	r2,152(sp)
 50890f0:	d8c02017 	ldw	r3,128(sp)
 50890f4:	da000404 	addi	r8,sp,16
 50890f8:	003e1006 	br	508893c <__alt_data_end+0xfffba73c>
 50890fc:	00800044 	movi	r2,1
 5089100:	10803fcc 	andi	r2,r2,255
 5089104:	00c00044 	movi	r3,1
 5089108:	10fa3526 	beq	r2,r3,50879e0 <__alt_data_end+0xfffb97e0>
 508910c:	00c00084 	movi	r3,2
 5089110:	10fbcb26 	beq	r2,r3,5088040 <__alt_data_end+0xfffb9e40>
 5089114:	003a8f06 	br	5087b54 <__alt_data_end+0xfffb9954>
 5089118:	01014274 	movhi	r4,1289
 508911c:	21113a84 	addi	r4,r4,17642
 5089120:	d9003515 	stw	r4,212(sp)
 5089124:	003b7606 	br	5087f00 <__alt_data_end+0xfffb9d00>
 5089128:	d8802917 	ldw	r2,164(sp)
 508912c:	00c00184 	movi	r3,6
 5089130:	1880012e 	bgeu	r3,r2,5089138 <___vfprintf_internal_r+0x1ca0>
 5089134:	1805883a 	mov	r2,r3
 5089138:	d8802e15 	stw	r2,184(sp)
 508913c:	1000ef16 	blt	r2,zero,50894fc <___vfprintf_internal_r+0x2064>
 5089140:	04014274 	movhi	r16,1289
 5089144:	d8802a15 	stw	r2,168(sp)
 5089148:	dcc02d15 	stw	r19,180(sp)
 508914c:	d8002915 	stw	zero,164(sp)
 5089150:	d8003215 	stw	zero,200(sp)
 5089154:	84113404 	addi	r16,r16,17616
 5089158:	0039883a 	mov	fp,zero
 508915c:	003aa206 	br	5087be8 <__alt_data_end+0xfffb99e8>
 5089160:	0021883a 	mov	r16,zero
 5089164:	003e0706 	br	5088984 <__alt_data_end+0xfffba784>
 5089168:	d9002c17 	ldw	r4,176(sp)
 508916c:	d9801e04 	addi	r6,sp,120
 5089170:	b80b883a 	mov	r5,r23
 5089174:	508eb880 	call	508eb88 <__sprint_r>
 5089178:	1039c91e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 508917c:	d8802617 	ldw	r2,152(sp)
 5089180:	d9403317 	ldw	r5,204(sp)
 5089184:	d8c02017 	ldw	r3,128(sp)
 5089188:	da000404 	addi	r8,sp,16
 508918c:	2885c83a 	sub	r2,r5,r2
 5089190:	003dfb06 	br	5088980 <__alt_data_end+0xfffba780>
 5089194:	9080004c 	andi	r2,r18,1
 5089198:	103e8f1e 	bne	r2,zero,5088bd8 <__alt_data_end+0xfffba9d8>
 508919c:	d8802117 	ldw	r2,132(sp)
 50891a0:	003e9e06 	br	5088c1c <__alt_data_end+0xfffbaa1c>
 50891a4:	1025883a 	mov	r18,r2
 50891a8:	0039883a 	mov	fp,zero
 50891ac:	00800084 	movi	r2,2
 50891b0:	003fd306 	br	5089100 <__alt_data_end+0xfffbaf00>
 50891b4:	07000b44 	movi	fp,45
 50891b8:	df002785 	stb	fp,158(sp)
 50891bc:	003a4006 	br	5087ac0 <__alt_data_end+0xfffb98c0>
 50891c0:	00c00b44 	movi	r3,45
 50891c4:	d8c02785 	stb	r3,158(sp)
 50891c8:	d8802a15 	stw	r2,168(sp)
 50891cc:	dc802b17 	ldw	r18,172(sp)
 50891d0:	d8002915 	stw	zero,164(sp)
 50891d4:	07000b44 	movi	fp,45
 50891d8:	003a8006 	br	5087bdc <__alt_data_end+0xfffb99dc>
 50891dc:	04014274 	movhi	r16,1289
 50891e0:	84112904 	addi	r16,r16,17572
 50891e4:	003f4706 	br	5088f04 <__alt_data_end+0xfffbad04>
 50891e8:	d8c02d17 	ldw	r3,180(sp)
 50891ec:	d9002f17 	ldw	r4,188(sp)
 50891f0:	18800017 	ldw	r2,0(r3)
 50891f4:	18c00104 	addi	r3,r3,4
 50891f8:	d8c02d15 	stw	r3,180(sp)
 50891fc:	11000015 	stw	r4,0(r2)
 5089200:	0038dd06 	br	5087578 <__alt_data_end+0xfffb9378>
 5089204:	dd802617 	ldw	r22,152(sp)
 5089208:	00bfff44 	movi	r2,-3
 508920c:	b0801c16 	blt	r22,r2,5089280 <___vfprintf_internal_r+0x1de8>
 5089210:	d9402917 	ldw	r5,164(sp)
 5089214:	2d801a16 	blt	r5,r22,5089280 <___vfprintf_internal_r+0x1de8>
 5089218:	dd803215 	stw	r22,200(sp)
 508921c:	003e8906 	br	5088c44 <__alt_data_end+0xfffbaa44>
 5089220:	01014274 	movhi	r4,1289
 5089224:	21113684 	addi	r4,r4,17626
 5089228:	d9002b15 	stw	r4,172(sp)
 508922c:	003c9106 	br	5088474 <__alt_data_end+0xfffba274>
 5089230:	e005883a 	mov	r2,fp
 5089234:	003e7906 	br	5088c1c <__alt_data_end+0xfffbaa1c>
 5089238:	d9402917 	ldw	r5,164(sp)
 508923c:	df002783 	ldbu	fp,158(sp)
 5089240:	dcc02d15 	stw	r19,180(sp)
 5089244:	d9402a15 	stw	r5,168(sp)
 5089248:	d9402e15 	stw	r5,184(sp)
 508924c:	d8002915 	stw	zero,164(sp)
 5089250:	d8003215 	stw	zero,200(sp)
 5089254:	003a5d06 	br	5087bcc <__alt_data_end+0xfffb99cc>
 5089258:	9080004c 	andi	r2,r18,1
 508925c:	0039883a 	mov	fp,zero
 5089260:	10000426 	beq	r2,zero,5089274 <___vfprintf_internal_r+0x1ddc>
 5089264:	00800c04 	movi	r2,48
 5089268:	dc001dc4 	addi	r16,sp,119
 508926c:	d8801dc5 	stb	r2,119(sp)
 5089270:	003b8006 	br	5088074 <__alt_data_end+0xfffb9e74>
 5089274:	d8002e15 	stw	zero,184(sp)
 5089278:	dc001e04 	addi	r16,sp,120
 508927c:	003a4d06 	br	5087bb4 <__alt_data_end+0xfffb99b4>
 5089280:	8c7fff84 	addi	r17,r17,-2
 5089284:	b5bfffc4 	addi	r22,r22,-1
 5089288:	dd802615 	stw	r22,152(sp)
 508928c:	dc4022c5 	stb	r17,139(sp)
 5089290:	b000bf16 	blt	r22,zero,5089590 <___vfprintf_internal_r+0x20f8>
 5089294:	00800ac4 	movi	r2,43
 5089298:	d8802305 	stb	r2,140(sp)
 508929c:	00800244 	movi	r2,9
 50892a0:	15807016 	blt	r2,r22,5089464 <___vfprintf_internal_r+0x1fcc>
 50892a4:	00800c04 	movi	r2,48
 50892a8:	b5800c04 	addi	r22,r22,48
 50892ac:	d8802345 	stb	r2,141(sp)
 50892b0:	dd802385 	stb	r22,142(sp)
 50892b4:	d88023c4 	addi	r2,sp,143
 50892b8:	df0022c4 	addi	fp,sp,139
 50892bc:	d8c03317 	ldw	r3,204(sp)
 50892c0:	1739c83a 	sub	fp,r2,fp
 50892c4:	d9003317 	ldw	r4,204(sp)
 50892c8:	e0c7883a 	add	r3,fp,r3
 50892cc:	df003a15 	stw	fp,232(sp)
 50892d0:	d8c02e15 	stw	r3,184(sp)
 50892d4:	00800044 	movi	r2,1
 50892d8:	1100b30e 	bge	r2,r4,50895a8 <___vfprintf_internal_r+0x2110>
 50892dc:	d8c02e17 	ldw	r3,184(sp)
 50892e0:	18c00044 	addi	r3,r3,1
 50892e4:	d8c02e15 	stw	r3,184(sp)
 50892e8:	1805883a 	mov	r2,r3
 50892ec:	1800ac16 	blt	r3,zero,50895a0 <___vfprintf_internal_r+0x2108>
 50892f0:	d8003215 	stw	zero,200(sp)
 50892f4:	003e5d06 	br	5088c6c <__alt_data_end+0xfffbaa6c>
 50892f8:	d9002c17 	ldw	r4,176(sp)
 50892fc:	d9801e04 	addi	r6,sp,120
 5089300:	b80b883a 	mov	r5,r23
 5089304:	508eb880 	call	508eb88 <__sprint_r>
 5089308:	1039651e 	bne	r2,zero,50878a0 <__alt_data_end+0xfffb96a0>
 508930c:	dc402617 	ldw	r17,152(sp)
 5089310:	d8c02017 	ldw	r3,128(sp)
 5089314:	d8801f17 	ldw	r2,124(sp)
 5089318:	da000404 	addi	r8,sp,16
 508931c:	003ed606 	br	5088e78 <__alt_data_end+0xfffbac78>
 5089320:	582b883a 	mov	r21,r11
 5089324:	d8002915 	stw	zero,164(sp)
 5089328:	0038bd06 	br	5087620 <__alt_data_end+0xfffb9420>
 508932c:	d8802917 	ldw	r2,164(sp)
 5089330:	103e071e 	bne	r2,zero,5088b50 <__alt_data_end+0xfffba950>
 5089334:	dc002915 	stw	r16,164(sp)
 5089338:	003e0506 	br	5088b50 <__alt_data_end+0xfffba950>
 508933c:	d9002917 	ldw	r4,164(sp)
 5089340:	20c00044 	addi	r3,r4,1
 5089344:	003e0f06 	br	5088b84 <__alt_data_end+0xfffba984>
 5089348:	01400184 	movi	r5,6
 508934c:	d9402915 	stw	r5,164(sp)
 5089350:	003dff06 	br	5088b50 <__alt_data_end+0xfffba950>
 5089354:	d8802104 	addi	r2,sp,132
 5089358:	d8800315 	stw	r2,12(sp)
 508935c:	d8802504 	addi	r2,sp,148
 5089360:	d8800215 	stw	r2,8(sp)
 5089364:	d8802604 	addi	r2,sp,152
 5089368:	d8800115 	stw	r2,4(sp)
 508936c:	d8802917 	ldw	r2,164(sp)
 5089370:	d9403617 	ldw	r5,216(sp)
 5089374:	d9002c17 	ldw	r4,176(sp)
 5089378:	d8800015 	stw	r2,0(sp)
 508937c:	01c000c4 	movi	r7,3
 5089380:	980d883a 	mov	r6,r19
 5089384:	da003d15 	stw	r8,244(sp)
 5089388:	5089abc0 	call	5089abc <_dtoa_r>
 508938c:	d8c02917 	ldw	r3,164(sp)
 5089390:	da003d17 	ldw	r8,244(sp)
 5089394:	1021883a 	mov	r16,r2
 5089398:	10f9883a 	add	fp,r2,r3
 508939c:	81000007 	ldb	r4,0(r16)
 50893a0:	00800c04 	movi	r2,48
 50893a4:	20805e26 	beq	r4,r2,5089520 <___vfprintf_internal_r+0x2088>
 50893a8:	d8c02617 	ldw	r3,152(sp)
 50893ac:	e0f9883a 	add	fp,fp,r3
 50893b0:	003e0a06 	br	5088bdc <__alt_data_end+0xfffba9dc>
 50893b4:	00c00b44 	movi	r3,45
 50893b8:	24e0003c 	xorhi	r19,r4,32768
 50893bc:	d8c02a05 	stb	r3,168(sp)
 50893c0:	003de906 	br	5088b68 <__alt_data_end+0xfffba968>
 50893c4:	d8c03217 	ldw	r3,200(sp)
 50893c8:	00c07a0e 	bge	zero,r3,50895b4 <___vfprintf_internal_r+0x211c>
 50893cc:	00800044 	movi	r2,1
 50893d0:	d9003317 	ldw	r4,204(sp)
 50893d4:	1105883a 	add	r2,r2,r4
 50893d8:	d8802e15 	stw	r2,184(sp)
 50893dc:	10004e16 	blt	r2,zero,5089518 <___vfprintf_internal_r+0x2080>
 50893e0:	044019c4 	movi	r17,103
 50893e4:	003e2106 	br	5088c6c <__alt_data_end+0xfffbaa6c>
 50893e8:	d9002917 	ldw	r4,164(sp)
 50893ec:	d8802104 	addi	r2,sp,132
 50893f0:	d8800315 	stw	r2,12(sp)
 50893f4:	d9000015 	stw	r4,0(sp)
 50893f8:	d8802504 	addi	r2,sp,148
 50893fc:	d9403617 	ldw	r5,216(sp)
 5089400:	d9002c17 	ldw	r4,176(sp)
 5089404:	d8800215 	stw	r2,8(sp)
 5089408:	d8802604 	addi	r2,sp,152
 508940c:	d8800115 	stw	r2,4(sp)
 5089410:	01c000c4 	movi	r7,3
 5089414:	980d883a 	mov	r6,r19
 5089418:	da003d15 	stw	r8,244(sp)
 508941c:	5089abc0 	call	5089abc <_dtoa_r>
 5089420:	d8c02917 	ldw	r3,164(sp)
 5089424:	da003d17 	ldw	r8,244(sp)
 5089428:	1021883a 	mov	r16,r2
 508942c:	00801184 	movi	r2,70
 5089430:	80f9883a 	add	fp,r16,r3
 5089434:	88bfd926 	beq	r17,r2,508939c <__alt_data_end+0xfffbb19c>
 5089438:	003de806 	br	5088bdc <__alt_data_end+0xfffba9dc>
 508943c:	d9002917 	ldw	r4,164(sp)
 5089440:	00c04d0e 	bge	zero,r3,5089578 <___vfprintf_internal_r+0x20e0>
 5089444:	2000441e 	bne	r4,zero,5089558 <___vfprintf_internal_r+0x20c0>
 5089448:	9480004c 	andi	r18,r18,1
 508944c:	9000421e 	bne	r18,zero,5089558 <___vfprintf_internal_r+0x20c0>
 5089450:	1805883a 	mov	r2,r3
 5089454:	18007016 	blt	r3,zero,5089618 <___vfprintf_internal_r+0x2180>
 5089458:	d8c03217 	ldw	r3,200(sp)
 508945c:	d8c02e15 	stw	r3,184(sp)
 5089460:	003e0206 	br	5088c6c <__alt_data_end+0xfffbaa6c>
 5089464:	df0022c4 	addi	fp,sp,139
 5089468:	dc002915 	stw	r16,164(sp)
 508946c:	4027883a 	mov	r19,r8
 5089470:	e021883a 	mov	r16,fp
 5089474:	b009883a 	mov	r4,r22
 5089478:	01400284 	movi	r5,10
 508947c:	5084a8c0 	call	5084a8c <__modsi3>
 5089480:	10800c04 	addi	r2,r2,48
 5089484:	843fffc4 	addi	r16,r16,-1
 5089488:	b009883a 	mov	r4,r22
 508948c:	01400284 	movi	r5,10
 5089490:	80800005 	stb	r2,0(r16)
 5089494:	5084a080 	call	5084a08 <__divsi3>
 5089498:	102d883a 	mov	r22,r2
 508949c:	00800244 	movi	r2,9
 50894a0:	15bff416 	blt	r2,r22,5089474 <__alt_data_end+0xfffbb274>
 50894a4:	9811883a 	mov	r8,r19
 50894a8:	b0800c04 	addi	r2,r22,48
 50894ac:	8027883a 	mov	r19,r16
 50894b0:	997fffc4 	addi	r5,r19,-1
 50894b4:	98bfffc5 	stb	r2,-1(r19)
 50894b8:	dc002917 	ldw	r16,164(sp)
 50894bc:	2f006a2e 	bgeu	r5,fp,5089668 <___vfprintf_internal_r+0x21d0>
 50894c0:	d9c02384 	addi	r7,sp,142
 50894c4:	3ccfc83a 	sub	r7,r7,r19
 50894c8:	d9002344 	addi	r4,sp,141
 50894cc:	e1cf883a 	add	r7,fp,r7
 50894d0:	00000106 	br	50894d8 <___vfprintf_internal_r+0x2040>
 50894d4:	28800003 	ldbu	r2,0(r5)
 50894d8:	20800005 	stb	r2,0(r4)
 50894dc:	21000044 	addi	r4,r4,1
 50894e0:	29400044 	addi	r5,r5,1
 50894e4:	393ffb1e 	bne	r7,r4,50894d4 <__alt_data_end+0xfffbb2d4>
 50894e8:	d8802304 	addi	r2,sp,140
 50894ec:	14c5c83a 	sub	r2,r2,r19
 50894f0:	d8c02344 	addi	r3,sp,141
 50894f4:	1885883a 	add	r2,r3,r2
 50894f8:	003f7006 	br	50892bc <__alt_data_end+0xfffbb0bc>
 50894fc:	0005883a 	mov	r2,zero
 5089500:	003f0f06 	br	5089140 <__alt_data_end+0xfffbaf40>
 5089504:	d8c03217 	ldw	r3,200(sp)
 5089508:	18c00044 	addi	r3,r3,1
 508950c:	d8c02e15 	stw	r3,184(sp)
 5089510:	1805883a 	mov	r2,r3
 5089514:	183fb20e 	bge	r3,zero,50893e0 <__alt_data_end+0xfffbb1e0>
 5089518:	0005883a 	mov	r2,zero
 508951c:	003fb006 	br	50893e0 <__alt_data_end+0xfffbb1e0>
 5089520:	d9003617 	ldw	r4,216(sp)
 5089524:	000d883a 	mov	r6,zero
 5089528:	000f883a 	mov	r7,zero
 508952c:	980b883a 	mov	r5,r19
 5089530:	d8c03c15 	stw	r3,240(sp)
 5089534:	da003d15 	stw	r8,244(sp)
 5089538:	5085d500 	call	5085d50 <__eqdf2>
 508953c:	d8c03c17 	ldw	r3,240(sp)
 5089540:	da003d17 	ldw	r8,244(sp)
 5089544:	103f9826 	beq	r2,zero,50893a8 <__alt_data_end+0xfffbb1a8>
 5089548:	00800044 	movi	r2,1
 508954c:	10c7c83a 	sub	r3,r2,r3
 5089550:	d8c02615 	stw	r3,152(sp)
 5089554:	003f9506 	br	50893ac <__alt_data_end+0xfffbb1ac>
 5089558:	d9002917 	ldw	r4,164(sp)
 508955c:	d8c03217 	ldw	r3,200(sp)
 5089560:	20800044 	addi	r2,r4,1
 5089564:	1885883a 	add	r2,r3,r2
 5089568:	d8802e15 	stw	r2,184(sp)
 508956c:	103dbf0e 	bge	r2,zero,5088c6c <__alt_data_end+0xfffbaa6c>
 5089570:	0005883a 	mov	r2,zero
 5089574:	003dbd06 	br	5088c6c <__alt_data_end+0xfffbaa6c>
 5089578:	2000211e 	bne	r4,zero,5089600 <___vfprintf_internal_r+0x2168>
 508957c:	9480004c 	andi	r18,r18,1
 5089580:	90001f1e 	bne	r18,zero,5089600 <___vfprintf_internal_r+0x2168>
 5089584:	00800044 	movi	r2,1
 5089588:	d8802e15 	stw	r2,184(sp)
 508958c:	003db706 	br	5088c6c <__alt_data_end+0xfffbaa6c>
 5089590:	00800b44 	movi	r2,45
 5089594:	05adc83a 	sub	r22,zero,r22
 5089598:	d8802305 	stb	r2,140(sp)
 508959c:	003f3f06 	br	508929c <__alt_data_end+0xfffbb09c>
 50895a0:	0005883a 	mov	r2,zero
 50895a4:	003f5206 	br	50892f0 <__alt_data_end+0xfffbb0f0>
 50895a8:	90a4703a 	and	r18,r18,r2
 50895ac:	903f4e26 	beq	r18,zero,50892e8 <__alt_data_end+0xfffbb0e8>
 50895b0:	003f4a06 	br	50892dc <__alt_data_end+0xfffbb0dc>
 50895b4:	00800084 	movi	r2,2
 50895b8:	10c5c83a 	sub	r2,r2,r3
 50895bc:	003f8406 	br	50893d0 <__alt_data_end+0xfffbb1d0>
 50895c0:	d8802d17 	ldw	r2,180(sp)
 50895c4:	d9002d17 	ldw	r4,180(sp)
 50895c8:	ac400043 	ldbu	r17,1(r21)
 50895cc:	10800017 	ldw	r2,0(r2)
 50895d0:	582b883a 	mov	r21,r11
 50895d4:	d8802915 	stw	r2,164(sp)
 50895d8:	20800104 	addi	r2,r4,4
 50895dc:	d9002917 	ldw	r4,164(sp)
 50895e0:	d8802d15 	stw	r2,180(sp)
 50895e4:	203e7a0e 	bge	r4,zero,5088fd0 <__alt_data_end+0xfffbadd0>
 50895e8:	8c403fcc 	andi	r17,r17,255
 50895ec:	00bfffc4 	movi	r2,-1
 50895f0:	8c40201c 	xori	r17,r17,128
 50895f4:	d8802915 	stw	r2,164(sp)
 50895f8:	8c7fe004 	addi	r17,r17,-128
 50895fc:	00380706 	br	508761c <__alt_data_end+0xfffb941c>
 5089600:	d8c02917 	ldw	r3,164(sp)
 5089604:	18c00084 	addi	r3,r3,2
 5089608:	d8c02e15 	stw	r3,184(sp)
 508960c:	1805883a 	mov	r2,r3
 5089610:	183d960e 	bge	r3,zero,5088c6c <__alt_data_end+0xfffbaa6c>
 5089614:	003fd606 	br	5089570 <__alt_data_end+0xfffbb370>
 5089618:	0005883a 	mov	r2,zero
 508961c:	003f8e06 	br	5089458 <__alt_data_end+0xfffbb258>
 5089620:	9080004c 	andi	r2,r18,1
 5089624:	103f811e 	bne	r2,zero,508942c <__alt_data_end+0xfffbb22c>
 5089628:	d8802117 	ldw	r2,132(sp)
 508962c:	1405c83a 	sub	r2,r2,r16
 5089630:	d8803315 	stw	r2,204(sp)
 5089634:	b47ef326 	beq	r22,r17,5089204 <__alt_data_end+0xfffbb004>
 5089638:	dd802617 	ldw	r22,152(sp)
 508963c:	003f1106 	br	5089284 <__alt_data_end+0xfffbb084>
 5089640:	d9c02785 	stb	r7,158(sp)
 5089644:	00390406 	br	5087a58 <__alt_data_end+0xfffb9858>
 5089648:	d9c02785 	stb	r7,158(sp)
 508964c:	0038d306 	br	508799c <__alt_data_end+0xfffb979c>
 5089650:	d9c02785 	stb	r7,158(sp)
 5089654:	003a6106 	br	5087fdc <__alt_data_end+0xfffb9ddc>
 5089658:	d9c02785 	stb	r7,158(sp)
 508965c:	003af806 	br	5088240 <__alt_data_end+0xfffba040>
 5089660:	0005883a 	mov	r2,zero
 5089664:	003d7e06 	br	5088c60 <__alt_data_end+0xfffbaa60>
 5089668:	d8802344 	addi	r2,sp,141
 508966c:	003f1306 	br	50892bc <__alt_data_end+0xfffbb0bc>
 5089670:	d9c02785 	stb	r7,158(sp)
 5089674:	00392306 	br	5087b04 <__alt_data_end+0xfffb9904>
 5089678:	d9c02785 	stb	r7,158(sp)
 508967c:	003aa906 	br	5088124 <__alt_data_end+0xfffb9f24>
 5089680:	d9c02785 	stb	r7,158(sp)
 5089684:	003a3d06 	br	5087f7c <__alt_data_end+0xfffb9d7c>
 5089688:	d9c02785 	stb	r7,158(sp)
 508968c:	003aca06 	br	50881b8 <__alt_data_end+0xfffb9fb8>

05089690 <__vfprintf_internal>:
 5089690:	00814274 	movhi	r2,1289
 5089694:	10986204 	addi	r2,r2,24968
 5089698:	300f883a 	mov	r7,r6
 508969c:	280d883a 	mov	r6,r5
 50896a0:	200b883a 	mov	r5,r4
 50896a4:	11000017 	ldw	r4,0(r2)
 50896a8:	50874981 	jmpi	5087498 <___vfprintf_internal_r>

050896ac <__sbprintf>:
 50896ac:	2880030b 	ldhu	r2,12(r5)
 50896b0:	2ac01917 	ldw	r11,100(r5)
 50896b4:	2a80038b 	ldhu	r10,14(r5)
 50896b8:	2a400717 	ldw	r9,28(r5)
 50896bc:	2a000917 	ldw	r8,36(r5)
 50896c0:	defee204 	addi	sp,sp,-1144
 50896c4:	00c10004 	movi	r3,1024
 50896c8:	dc011a15 	stw	r16,1128(sp)
 50896cc:	10bfff4c 	andi	r2,r2,65533
 50896d0:	2821883a 	mov	r16,r5
 50896d4:	d8cb883a 	add	r5,sp,r3
 50896d8:	dc811c15 	stw	r18,1136(sp)
 50896dc:	dc411b15 	stw	r17,1132(sp)
 50896e0:	dfc11d15 	stw	ra,1140(sp)
 50896e4:	2025883a 	mov	r18,r4
 50896e8:	d881030d 	sth	r2,1036(sp)
 50896ec:	dac11915 	stw	r11,1124(sp)
 50896f0:	da81038d 	sth	r10,1038(sp)
 50896f4:	da410715 	stw	r9,1052(sp)
 50896f8:	da010915 	stw	r8,1060(sp)
 50896fc:	dec10015 	stw	sp,1024(sp)
 5089700:	dec10415 	stw	sp,1040(sp)
 5089704:	d8c10215 	stw	r3,1032(sp)
 5089708:	d8c10515 	stw	r3,1044(sp)
 508970c:	d8010615 	stw	zero,1048(sp)
 5089710:	50874980 	call	5087498 <___vfprintf_internal_r>
 5089714:	1023883a 	mov	r17,r2
 5089718:	10000416 	blt	r2,zero,508972c <__sbprintf+0x80>
 508971c:	d9410004 	addi	r5,sp,1024
 5089720:	9009883a 	mov	r4,r18
 5089724:	508b3600 	call	508b360 <_fflush_r>
 5089728:	10000d1e 	bne	r2,zero,5089760 <__sbprintf+0xb4>
 508972c:	d881030b 	ldhu	r2,1036(sp)
 5089730:	1080100c 	andi	r2,r2,64
 5089734:	10000326 	beq	r2,zero,5089744 <__sbprintf+0x98>
 5089738:	8080030b 	ldhu	r2,12(r16)
 508973c:	10801014 	ori	r2,r2,64
 5089740:	8080030d 	sth	r2,12(r16)
 5089744:	8805883a 	mov	r2,r17
 5089748:	dfc11d17 	ldw	ra,1140(sp)
 508974c:	dc811c17 	ldw	r18,1136(sp)
 5089750:	dc411b17 	ldw	r17,1132(sp)
 5089754:	dc011a17 	ldw	r16,1128(sp)
 5089758:	dec11e04 	addi	sp,sp,1144
 508975c:	f800283a 	ret
 5089760:	047fffc4 	movi	r17,-1
 5089764:	003ff106 	br	508972c <__alt_data_end+0xfffbb52c>

05089768 <__swsetup_r>:
 5089768:	00814274 	movhi	r2,1289
 508976c:	defffd04 	addi	sp,sp,-12
 5089770:	10986204 	addi	r2,r2,24968
 5089774:	dc400115 	stw	r17,4(sp)
 5089778:	2023883a 	mov	r17,r4
 508977c:	11000017 	ldw	r4,0(r2)
 5089780:	dc000015 	stw	r16,0(sp)
 5089784:	dfc00215 	stw	ra,8(sp)
 5089788:	2821883a 	mov	r16,r5
 508978c:	20000226 	beq	r4,zero,5089798 <__swsetup_r+0x30>
 5089790:	20800e17 	ldw	r2,56(r4)
 5089794:	10003126 	beq	r2,zero,508985c <__swsetup_r+0xf4>
 5089798:	8080030b 	ldhu	r2,12(r16)
 508979c:	10c0020c 	andi	r3,r2,8
 50897a0:	1009883a 	mov	r4,r2
 50897a4:	18000f26 	beq	r3,zero,50897e4 <__swsetup_r+0x7c>
 50897a8:	80c00417 	ldw	r3,16(r16)
 50897ac:	18001526 	beq	r3,zero,5089804 <__swsetup_r+0x9c>
 50897b0:	1100004c 	andi	r4,r2,1
 50897b4:	20001c1e 	bne	r4,zero,5089828 <__swsetup_r+0xc0>
 50897b8:	1080008c 	andi	r2,r2,2
 50897bc:	1000291e 	bne	r2,zero,5089864 <__swsetup_r+0xfc>
 50897c0:	80800517 	ldw	r2,20(r16)
 50897c4:	80800215 	stw	r2,8(r16)
 50897c8:	18001c26 	beq	r3,zero,508983c <__swsetup_r+0xd4>
 50897cc:	0005883a 	mov	r2,zero
 50897d0:	dfc00217 	ldw	ra,8(sp)
 50897d4:	dc400117 	ldw	r17,4(sp)
 50897d8:	dc000017 	ldw	r16,0(sp)
 50897dc:	dec00304 	addi	sp,sp,12
 50897e0:	f800283a 	ret
 50897e4:	2080040c 	andi	r2,r4,16
 50897e8:	10002e26 	beq	r2,zero,50898a4 <__swsetup_r+0x13c>
 50897ec:	2080010c 	andi	r2,r4,4
 50897f0:	10001e1e 	bne	r2,zero,508986c <__swsetup_r+0x104>
 50897f4:	80c00417 	ldw	r3,16(r16)
 50897f8:	20800214 	ori	r2,r4,8
 50897fc:	8080030d 	sth	r2,12(r16)
 5089800:	183feb1e 	bne	r3,zero,50897b0 <__alt_data_end+0xfffbb5b0>
 5089804:	1100a00c 	andi	r4,r2,640
 5089808:	01408004 	movi	r5,512
 508980c:	217fe826 	beq	r4,r5,50897b0 <__alt_data_end+0xfffbb5b0>
 5089810:	800b883a 	mov	r5,r16
 5089814:	8809883a 	mov	r4,r17
 5089818:	508c2e00 	call	508c2e0 <__smakebuf_r>
 508981c:	8080030b 	ldhu	r2,12(r16)
 5089820:	80c00417 	ldw	r3,16(r16)
 5089824:	003fe206 	br	50897b0 <__alt_data_end+0xfffbb5b0>
 5089828:	80800517 	ldw	r2,20(r16)
 508982c:	80000215 	stw	zero,8(r16)
 5089830:	0085c83a 	sub	r2,zero,r2
 5089834:	80800615 	stw	r2,24(r16)
 5089838:	183fe41e 	bne	r3,zero,50897cc <__alt_data_end+0xfffbb5cc>
 508983c:	80c0030b 	ldhu	r3,12(r16)
 5089840:	0005883a 	mov	r2,zero
 5089844:	1900200c 	andi	r4,r3,128
 5089848:	203fe126 	beq	r4,zero,50897d0 <__alt_data_end+0xfffbb5d0>
 508984c:	18c01014 	ori	r3,r3,64
 5089850:	80c0030d 	sth	r3,12(r16)
 5089854:	00bfffc4 	movi	r2,-1
 5089858:	003fdd06 	br	50897d0 <__alt_data_end+0xfffbb5d0>
 508985c:	508b73c0 	call	508b73c <__sinit>
 5089860:	003fcd06 	br	5089798 <__alt_data_end+0xfffbb598>
 5089864:	0005883a 	mov	r2,zero
 5089868:	003fd606 	br	50897c4 <__alt_data_end+0xfffbb5c4>
 508986c:	81400c17 	ldw	r5,48(r16)
 5089870:	28000626 	beq	r5,zero,508988c <__swsetup_r+0x124>
 5089874:	80801004 	addi	r2,r16,64
 5089878:	28800326 	beq	r5,r2,5089888 <__swsetup_r+0x120>
 508987c:	8809883a 	mov	r4,r17
 5089880:	508b8b00 	call	508b8b0 <_free_r>
 5089884:	8100030b 	ldhu	r4,12(r16)
 5089888:	80000c15 	stw	zero,48(r16)
 508988c:	80c00417 	ldw	r3,16(r16)
 5089890:	00bff6c4 	movi	r2,-37
 5089894:	1108703a 	and	r4,r2,r4
 5089898:	80000115 	stw	zero,4(r16)
 508989c:	80c00015 	stw	r3,0(r16)
 50898a0:	003fd506 	br	50897f8 <__alt_data_end+0xfffbb5f8>
 50898a4:	00800244 	movi	r2,9
 50898a8:	88800015 	stw	r2,0(r17)
 50898ac:	20801014 	ori	r2,r4,64
 50898b0:	8080030d 	sth	r2,12(r16)
 50898b4:	00bfffc4 	movi	r2,-1
 50898b8:	003fc506 	br	50897d0 <__alt_data_end+0xfffbb5d0>

050898bc <quorem>:
 50898bc:	defff704 	addi	sp,sp,-36
 50898c0:	dc800215 	stw	r18,8(sp)
 50898c4:	20800417 	ldw	r2,16(r4)
 50898c8:	2c800417 	ldw	r18,16(r5)
 50898cc:	dfc00815 	stw	ra,32(sp)
 50898d0:	ddc00715 	stw	r23,28(sp)
 50898d4:	dd800615 	stw	r22,24(sp)
 50898d8:	dd400515 	stw	r21,20(sp)
 50898dc:	dd000415 	stw	r20,16(sp)
 50898e0:	dcc00315 	stw	r19,12(sp)
 50898e4:	dc400115 	stw	r17,4(sp)
 50898e8:	dc000015 	stw	r16,0(sp)
 50898ec:	14807116 	blt	r2,r18,5089ab4 <quorem+0x1f8>
 50898f0:	94bfffc4 	addi	r18,r18,-1
 50898f4:	94ad883a 	add	r22,r18,r18
 50898f8:	b5ad883a 	add	r22,r22,r22
 50898fc:	2c400504 	addi	r17,r5,20
 5089900:	8da9883a 	add	r20,r17,r22
 5089904:	25400504 	addi	r21,r4,20
 5089908:	282f883a 	mov	r23,r5
 508990c:	adad883a 	add	r22,r21,r22
 5089910:	a1400017 	ldw	r5,0(r20)
 5089914:	2021883a 	mov	r16,r4
 5089918:	b1000017 	ldw	r4,0(r22)
 508991c:	29400044 	addi	r5,r5,1
 5089920:	5084b000 	call	5084b00 <__udivsi3>
 5089924:	1027883a 	mov	r19,r2
 5089928:	10002c26 	beq	r2,zero,50899dc <quorem+0x120>
 508992c:	a813883a 	mov	r9,r21
 5089930:	880b883a 	mov	r5,r17
 5089934:	0009883a 	mov	r4,zero
 5089938:	000d883a 	mov	r6,zero
 508993c:	2a000017 	ldw	r8,0(r5)
 5089940:	49c00017 	ldw	r7,0(r9)
 5089944:	29400104 	addi	r5,r5,4
 5089948:	40bfffcc 	andi	r2,r8,65535
 508994c:	14c5383a 	mul	r2,r2,r19
 5089950:	4010d43a 	srli	r8,r8,16
 5089954:	38ffffcc 	andi	r3,r7,65535
 5089958:	1105883a 	add	r2,r2,r4
 508995c:	1008d43a 	srli	r4,r2,16
 5089960:	44d1383a 	mul	r8,r8,r19
 5089964:	198d883a 	add	r6,r3,r6
 5089968:	10ffffcc 	andi	r3,r2,65535
 508996c:	30c7c83a 	sub	r3,r6,r3
 5089970:	380ed43a 	srli	r7,r7,16
 5089974:	4105883a 	add	r2,r8,r4
 5089978:	180dd43a 	srai	r6,r3,16
 508997c:	113fffcc 	andi	r4,r2,65535
 5089980:	390fc83a 	sub	r7,r7,r4
 5089984:	398d883a 	add	r6,r7,r6
 5089988:	300e943a 	slli	r7,r6,16
 508998c:	18ffffcc 	andi	r3,r3,65535
 5089990:	1008d43a 	srli	r4,r2,16
 5089994:	38ceb03a 	or	r7,r7,r3
 5089998:	49c00015 	stw	r7,0(r9)
 508999c:	300dd43a 	srai	r6,r6,16
 50899a0:	4a400104 	addi	r9,r9,4
 50899a4:	a17fe52e 	bgeu	r20,r5,508993c <__alt_data_end+0xfffbb73c>
 50899a8:	b0800017 	ldw	r2,0(r22)
 50899ac:	10000b1e 	bne	r2,zero,50899dc <quorem+0x120>
 50899b0:	b0bfff04 	addi	r2,r22,-4
 50899b4:	a880082e 	bgeu	r21,r2,50899d8 <quorem+0x11c>
 50899b8:	b0ffff17 	ldw	r3,-4(r22)
 50899bc:	18000326 	beq	r3,zero,50899cc <quorem+0x110>
 50899c0:	00000506 	br	50899d8 <quorem+0x11c>
 50899c4:	10c00017 	ldw	r3,0(r2)
 50899c8:	1800031e 	bne	r3,zero,50899d8 <quorem+0x11c>
 50899cc:	10bfff04 	addi	r2,r2,-4
 50899d0:	94bfffc4 	addi	r18,r18,-1
 50899d4:	a8bffb36 	bltu	r21,r2,50899c4 <__alt_data_end+0xfffbb7c4>
 50899d8:	84800415 	stw	r18,16(r16)
 50899dc:	b80b883a 	mov	r5,r23
 50899e0:	8009883a 	mov	r4,r16
 50899e4:	508da200 	call	508da20 <__mcmp>
 50899e8:	10002616 	blt	r2,zero,5089a84 <quorem+0x1c8>
 50899ec:	9cc00044 	addi	r19,r19,1
 50899f0:	a805883a 	mov	r2,r21
 50899f4:	000b883a 	mov	r5,zero
 50899f8:	11000017 	ldw	r4,0(r2)
 50899fc:	89800017 	ldw	r6,0(r17)
 5089a00:	10800104 	addi	r2,r2,4
 5089a04:	20ffffcc 	andi	r3,r4,65535
 5089a08:	194b883a 	add	r5,r3,r5
 5089a0c:	30ffffcc 	andi	r3,r6,65535
 5089a10:	28c7c83a 	sub	r3,r5,r3
 5089a14:	300cd43a 	srli	r6,r6,16
 5089a18:	2008d43a 	srli	r4,r4,16
 5089a1c:	180bd43a 	srai	r5,r3,16
 5089a20:	18ffffcc 	andi	r3,r3,65535
 5089a24:	2189c83a 	sub	r4,r4,r6
 5089a28:	2149883a 	add	r4,r4,r5
 5089a2c:	200c943a 	slli	r6,r4,16
 5089a30:	8c400104 	addi	r17,r17,4
 5089a34:	200bd43a 	srai	r5,r4,16
 5089a38:	30c6b03a 	or	r3,r6,r3
 5089a3c:	10ffff15 	stw	r3,-4(r2)
 5089a40:	a47fed2e 	bgeu	r20,r17,50899f8 <__alt_data_end+0xfffbb7f8>
 5089a44:	9485883a 	add	r2,r18,r18
 5089a48:	1085883a 	add	r2,r2,r2
 5089a4c:	a887883a 	add	r3,r21,r2
 5089a50:	18800017 	ldw	r2,0(r3)
 5089a54:	10000b1e 	bne	r2,zero,5089a84 <quorem+0x1c8>
 5089a58:	18bfff04 	addi	r2,r3,-4
 5089a5c:	a880082e 	bgeu	r21,r2,5089a80 <quorem+0x1c4>
 5089a60:	18ffff17 	ldw	r3,-4(r3)
 5089a64:	18000326 	beq	r3,zero,5089a74 <quorem+0x1b8>
 5089a68:	00000506 	br	5089a80 <quorem+0x1c4>
 5089a6c:	10c00017 	ldw	r3,0(r2)
 5089a70:	1800031e 	bne	r3,zero,5089a80 <quorem+0x1c4>
 5089a74:	10bfff04 	addi	r2,r2,-4
 5089a78:	94bfffc4 	addi	r18,r18,-1
 5089a7c:	a8bffb36 	bltu	r21,r2,5089a6c <__alt_data_end+0xfffbb86c>
 5089a80:	84800415 	stw	r18,16(r16)
 5089a84:	9805883a 	mov	r2,r19
 5089a88:	dfc00817 	ldw	ra,32(sp)
 5089a8c:	ddc00717 	ldw	r23,28(sp)
 5089a90:	dd800617 	ldw	r22,24(sp)
 5089a94:	dd400517 	ldw	r21,20(sp)
 5089a98:	dd000417 	ldw	r20,16(sp)
 5089a9c:	dcc00317 	ldw	r19,12(sp)
 5089aa0:	dc800217 	ldw	r18,8(sp)
 5089aa4:	dc400117 	ldw	r17,4(sp)
 5089aa8:	dc000017 	ldw	r16,0(sp)
 5089aac:	dec00904 	addi	sp,sp,36
 5089ab0:	f800283a 	ret
 5089ab4:	0005883a 	mov	r2,zero
 5089ab8:	003ff306 	br	5089a88 <__alt_data_end+0xfffbb888>

05089abc <_dtoa_r>:
 5089abc:	20801017 	ldw	r2,64(r4)
 5089ac0:	deffde04 	addi	sp,sp,-136
 5089ac4:	df002015 	stw	fp,128(sp)
 5089ac8:	dcc01b15 	stw	r19,108(sp)
 5089acc:	dc801a15 	stw	r18,104(sp)
 5089ad0:	dc401915 	stw	r17,100(sp)
 5089ad4:	dc001815 	stw	r16,96(sp)
 5089ad8:	dfc02115 	stw	ra,132(sp)
 5089adc:	ddc01f15 	stw	r23,124(sp)
 5089ae0:	dd801e15 	stw	r22,120(sp)
 5089ae4:	dd401d15 	stw	r21,116(sp)
 5089ae8:	dd001c15 	stw	r20,112(sp)
 5089aec:	d9c00315 	stw	r7,12(sp)
 5089af0:	2039883a 	mov	fp,r4
 5089af4:	3023883a 	mov	r17,r6
 5089af8:	2825883a 	mov	r18,r5
 5089afc:	dc002417 	ldw	r16,144(sp)
 5089b00:	3027883a 	mov	r19,r6
 5089b04:	10000826 	beq	r2,zero,5089b28 <_dtoa_r+0x6c>
 5089b08:	21801117 	ldw	r6,68(r4)
 5089b0c:	00c00044 	movi	r3,1
 5089b10:	100b883a 	mov	r5,r2
 5089b14:	1986983a 	sll	r3,r3,r6
 5089b18:	11800115 	stw	r6,4(r2)
 5089b1c:	10c00215 	stw	r3,8(r2)
 5089b20:	508d2000 	call	508d200 <_Bfree>
 5089b24:	e0001015 	stw	zero,64(fp)
 5089b28:	88002e16 	blt	r17,zero,5089be4 <_dtoa_r+0x128>
 5089b2c:	80000015 	stw	zero,0(r16)
 5089b30:	889ffc2c 	andhi	r2,r17,32752
 5089b34:	00dffc34 	movhi	r3,32752
 5089b38:	10c01c26 	beq	r2,r3,5089bac <_dtoa_r+0xf0>
 5089b3c:	000d883a 	mov	r6,zero
 5089b40:	000f883a 	mov	r7,zero
 5089b44:	9009883a 	mov	r4,r18
 5089b48:	980b883a 	mov	r5,r19
 5089b4c:	5085d500 	call	5085d50 <__eqdf2>
 5089b50:	10002b1e 	bne	r2,zero,5089c00 <_dtoa_r+0x144>
 5089b54:	d9c02317 	ldw	r7,140(sp)
 5089b58:	00800044 	movi	r2,1
 5089b5c:	38800015 	stw	r2,0(r7)
 5089b60:	d8802517 	ldw	r2,148(sp)
 5089b64:	10019e26 	beq	r2,zero,508a1e0 <_dtoa_r+0x724>
 5089b68:	d8c02517 	ldw	r3,148(sp)
 5089b6c:	00814274 	movhi	r2,1289
 5089b70:	10913644 	addi	r2,r2,17625
 5089b74:	18800015 	stw	r2,0(r3)
 5089b78:	10bfffc4 	addi	r2,r2,-1
 5089b7c:	dfc02117 	ldw	ra,132(sp)
 5089b80:	df002017 	ldw	fp,128(sp)
 5089b84:	ddc01f17 	ldw	r23,124(sp)
 5089b88:	dd801e17 	ldw	r22,120(sp)
 5089b8c:	dd401d17 	ldw	r21,116(sp)
 5089b90:	dd001c17 	ldw	r20,112(sp)
 5089b94:	dcc01b17 	ldw	r19,108(sp)
 5089b98:	dc801a17 	ldw	r18,104(sp)
 5089b9c:	dc401917 	ldw	r17,100(sp)
 5089ba0:	dc001817 	ldw	r16,96(sp)
 5089ba4:	dec02204 	addi	sp,sp,136
 5089ba8:	f800283a 	ret
 5089bac:	d8c02317 	ldw	r3,140(sp)
 5089bb0:	0089c3c4 	movi	r2,9999
 5089bb4:	18800015 	stw	r2,0(r3)
 5089bb8:	90017726 	beq	r18,zero,508a198 <_dtoa_r+0x6dc>
 5089bbc:	00814274 	movhi	r2,1289
 5089bc0:	10914204 	addi	r2,r2,17672
 5089bc4:	d9002517 	ldw	r4,148(sp)
 5089bc8:	203fec26 	beq	r4,zero,5089b7c <__alt_data_end+0xfffbb97c>
 5089bcc:	10c000c7 	ldb	r3,3(r2)
 5089bd0:	1801781e 	bne	r3,zero,508a1b4 <_dtoa_r+0x6f8>
 5089bd4:	10c000c4 	addi	r3,r2,3
 5089bd8:	d9802517 	ldw	r6,148(sp)
 5089bdc:	30c00015 	stw	r3,0(r6)
 5089be0:	003fe606 	br	5089b7c <__alt_data_end+0xfffbb97c>
 5089be4:	04e00034 	movhi	r19,32768
 5089be8:	9cffffc4 	addi	r19,r19,-1
 5089bec:	00800044 	movi	r2,1
 5089bf0:	8ce6703a 	and	r19,r17,r19
 5089bf4:	80800015 	stw	r2,0(r16)
 5089bf8:	9823883a 	mov	r17,r19
 5089bfc:	003fcc06 	br	5089b30 <__alt_data_end+0xfffbb930>
 5089c00:	d8800204 	addi	r2,sp,8
 5089c04:	d8800015 	stw	r2,0(sp)
 5089c08:	d9c00104 	addi	r7,sp,4
 5089c0c:	900b883a 	mov	r5,r18
 5089c10:	980d883a 	mov	r6,r19
 5089c14:	e009883a 	mov	r4,fp
 5089c18:	8820d53a 	srli	r16,r17,20
 5089c1c:	508ddec0 	call	508ddec <__d2b>
 5089c20:	d8800915 	stw	r2,36(sp)
 5089c24:	8001651e 	bne	r16,zero,508a1bc <_dtoa_r+0x700>
 5089c28:	dd800217 	ldw	r22,8(sp)
 5089c2c:	dc000117 	ldw	r16,4(sp)
 5089c30:	00800804 	movi	r2,32
 5089c34:	b421883a 	add	r16,r22,r16
 5089c38:	80c10c84 	addi	r3,r16,1074
 5089c3c:	10c2d10e 	bge	r2,r3,508a784 <_dtoa_r+0xcc8>
 5089c40:	00801004 	movi	r2,64
 5089c44:	81010484 	addi	r4,r16,1042
 5089c48:	10c7c83a 	sub	r3,r2,r3
 5089c4c:	9108d83a 	srl	r4,r18,r4
 5089c50:	88e2983a 	sll	r17,r17,r3
 5089c54:	2448b03a 	or	r4,r4,r17
 5089c58:	50914b80 	call	50914b8 <__floatunsidf>
 5089c5c:	017f8434 	movhi	r5,65040
 5089c60:	01800044 	movi	r6,1
 5089c64:	1009883a 	mov	r4,r2
 5089c68:	194b883a 	add	r5,r3,r5
 5089c6c:	843fffc4 	addi	r16,r16,-1
 5089c70:	d9801115 	stw	r6,68(sp)
 5089c74:	000d883a 	mov	r6,zero
 5089c78:	01cffe34 	movhi	r7,16376
 5089c7c:	50866c00 	call	50866c0 <__subdf3>
 5089c80:	0198dbf4 	movhi	r6,25455
 5089c84:	01cff4f4 	movhi	r7,16339
 5089c88:	3190d844 	addi	r6,r6,17249
 5089c8c:	39e1e9c4 	addi	r7,r7,-30809
 5089c90:	1009883a 	mov	r4,r2
 5089c94:	180b883a 	mov	r5,r3
 5089c98:	5085fa80 	call	5085fa8 <__muldf3>
 5089c9c:	01a2d874 	movhi	r6,35681
 5089ca0:	01cff1f4 	movhi	r7,16327
 5089ca4:	31b22cc4 	addi	r6,r6,-14157
 5089ca8:	39e28a04 	addi	r7,r7,-30168
 5089cac:	180b883a 	mov	r5,r3
 5089cb0:	1009883a 	mov	r4,r2
 5089cb4:	5084bbc0 	call	5084bbc <__adddf3>
 5089cb8:	8009883a 	mov	r4,r16
 5089cbc:	1029883a 	mov	r20,r2
 5089cc0:	1823883a 	mov	r17,r3
 5089cc4:	508703c0 	call	508703c <__floatsidf>
 5089cc8:	019427f4 	movhi	r6,20639
 5089ccc:	01cff4f4 	movhi	r7,16339
 5089cd0:	319e7ec4 	addi	r6,r6,31227
 5089cd4:	39d104c4 	addi	r7,r7,17427
 5089cd8:	1009883a 	mov	r4,r2
 5089cdc:	180b883a 	mov	r5,r3
 5089ce0:	5085fa80 	call	5085fa8 <__muldf3>
 5089ce4:	100d883a 	mov	r6,r2
 5089ce8:	180f883a 	mov	r7,r3
 5089cec:	a009883a 	mov	r4,r20
 5089cf0:	880b883a 	mov	r5,r17
 5089cf4:	5084bbc0 	call	5084bbc <__adddf3>
 5089cf8:	1009883a 	mov	r4,r2
 5089cfc:	180b883a 	mov	r5,r3
 5089d00:	1029883a 	mov	r20,r2
 5089d04:	1823883a 	mov	r17,r3
 5089d08:	5086fbc0 	call	5086fbc <__fixdfsi>
 5089d0c:	000d883a 	mov	r6,zero
 5089d10:	000f883a 	mov	r7,zero
 5089d14:	a009883a 	mov	r4,r20
 5089d18:	880b883a 	mov	r5,r17
 5089d1c:	d8800515 	stw	r2,20(sp)
 5089d20:	5085eb40 	call	5085eb4 <__ledf2>
 5089d24:	10028716 	blt	r2,zero,508a744 <_dtoa_r+0xc88>
 5089d28:	d8c00517 	ldw	r3,20(sp)
 5089d2c:	00800584 	movi	r2,22
 5089d30:	10c27536 	bltu	r2,r3,508a708 <_dtoa_r+0xc4c>
 5089d34:	180490fa 	slli	r2,r3,3
 5089d38:	00c14274 	movhi	r3,1289
 5089d3c:	18d15d04 	addi	r3,r3,17780
 5089d40:	1885883a 	add	r2,r3,r2
 5089d44:	11000017 	ldw	r4,0(r2)
 5089d48:	11400117 	ldw	r5,4(r2)
 5089d4c:	900d883a 	mov	r6,r18
 5089d50:	980f883a 	mov	r7,r19
 5089d54:	5085dd80 	call	5085dd8 <__gedf2>
 5089d58:	00828d0e 	bge	zero,r2,508a790 <_dtoa_r+0xcd4>
 5089d5c:	d9000517 	ldw	r4,20(sp)
 5089d60:	d8000e15 	stw	zero,56(sp)
 5089d64:	213fffc4 	addi	r4,r4,-1
 5089d68:	d9000515 	stw	r4,20(sp)
 5089d6c:	b42dc83a 	sub	r22,r22,r16
 5089d70:	b5bfffc4 	addi	r22,r22,-1
 5089d74:	b0026f16 	blt	r22,zero,508a734 <_dtoa_r+0xc78>
 5089d78:	d8000815 	stw	zero,32(sp)
 5089d7c:	d9c00517 	ldw	r7,20(sp)
 5089d80:	38026416 	blt	r7,zero,508a714 <_dtoa_r+0xc58>
 5089d84:	b1ed883a 	add	r22,r22,r7
 5089d88:	d9c00d15 	stw	r7,52(sp)
 5089d8c:	d8000a15 	stw	zero,40(sp)
 5089d90:	d9800317 	ldw	r6,12(sp)
 5089d94:	00800244 	movi	r2,9
 5089d98:	11811436 	bltu	r2,r6,508a1ec <_dtoa_r+0x730>
 5089d9c:	00800144 	movi	r2,5
 5089da0:	1184e10e 	bge	r2,r6,508b128 <_dtoa_r+0x166c>
 5089da4:	31bfff04 	addi	r6,r6,-4
 5089da8:	d9800315 	stw	r6,12(sp)
 5089dac:	0023883a 	mov	r17,zero
 5089db0:	d9800317 	ldw	r6,12(sp)
 5089db4:	008000c4 	movi	r2,3
 5089db8:	30836726 	beq	r6,r2,508ab58 <_dtoa_r+0x109c>
 5089dbc:	1183410e 	bge	r2,r6,508aac4 <_dtoa_r+0x1008>
 5089dc0:	d9c00317 	ldw	r7,12(sp)
 5089dc4:	00800104 	movi	r2,4
 5089dc8:	38827c26 	beq	r7,r2,508a7bc <_dtoa_r+0xd00>
 5089dcc:	00800144 	movi	r2,5
 5089dd0:	3884c41e 	bne	r7,r2,508b0e4 <_dtoa_r+0x1628>
 5089dd4:	00800044 	movi	r2,1
 5089dd8:	d8800b15 	stw	r2,44(sp)
 5089ddc:	d8c00517 	ldw	r3,20(sp)
 5089de0:	d9002217 	ldw	r4,136(sp)
 5089de4:	1907883a 	add	r3,r3,r4
 5089de8:	19800044 	addi	r6,r3,1
 5089dec:	d8c00c15 	stw	r3,48(sp)
 5089df0:	d9800615 	stw	r6,24(sp)
 5089df4:	0183a40e 	bge	zero,r6,508ac88 <_dtoa_r+0x11cc>
 5089df8:	d9800617 	ldw	r6,24(sp)
 5089dfc:	3021883a 	mov	r16,r6
 5089e00:	e0001115 	stw	zero,68(fp)
 5089e04:	008005c4 	movi	r2,23
 5089e08:	1184c92e 	bgeu	r2,r6,508b130 <_dtoa_r+0x1674>
 5089e0c:	00c00044 	movi	r3,1
 5089e10:	00800104 	movi	r2,4
 5089e14:	1085883a 	add	r2,r2,r2
 5089e18:	11000504 	addi	r4,r2,20
 5089e1c:	180b883a 	mov	r5,r3
 5089e20:	18c00044 	addi	r3,r3,1
 5089e24:	313ffb2e 	bgeu	r6,r4,5089e14 <__alt_data_end+0xfffbbc14>
 5089e28:	e1401115 	stw	r5,68(fp)
 5089e2c:	e009883a 	mov	r4,fp
 5089e30:	508d1580 	call	508d158 <_Balloc>
 5089e34:	d8800715 	stw	r2,28(sp)
 5089e38:	e0801015 	stw	r2,64(fp)
 5089e3c:	00800384 	movi	r2,14
 5089e40:	1400f736 	bltu	r2,r16,508a220 <_dtoa_r+0x764>
 5089e44:	8800f626 	beq	r17,zero,508a220 <_dtoa_r+0x764>
 5089e48:	d9c00517 	ldw	r7,20(sp)
 5089e4c:	01c39a0e 	bge	zero,r7,508acb8 <_dtoa_r+0x11fc>
 5089e50:	388003cc 	andi	r2,r7,15
 5089e54:	100490fa 	slli	r2,r2,3
 5089e58:	382bd13a 	srai	r21,r7,4
 5089e5c:	00c14274 	movhi	r3,1289
 5089e60:	18d15d04 	addi	r3,r3,17780
 5089e64:	1885883a 	add	r2,r3,r2
 5089e68:	a8c0040c 	andi	r3,r21,16
 5089e6c:	12400017 	ldw	r9,0(r2)
 5089e70:	12000117 	ldw	r8,4(r2)
 5089e74:	18037926 	beq	r3,zero,508ac5c <_dtoa_r+0x11a0>
 5089e78:	00814274 	movhi	r2,1289
 5089e7c:	10915304 	addi	r2,r2,17740
 5089e80:	11800817 	ldw	r6,32(r2)
 5089e84:	11c00917 	ldw	r7,36(r2)
 5089e88:	9009883a 	mov	r4,r18
 5089e8c:	980b883a 	mov	r5,r19
 5089e90:	da001715 	stw	r8,92(sp)
 5089e94:	da401615 	stw	r9,88(sp)
 5089e98:	50854680 	call	5085468 <__divdf3>
 5089e9c:	da001717 	ldw	r8,92(sp)
 5089ea0:	da401617 	ldw	r9,88(sp)
 5089ea4:	ad4003cc 	andi	r21,r21,15
 5089ea8:	040000c4 	movi	r16,3
 5089eac:	1023883a 	mov	r17,r2
 5089eb0:	1829883a 	mov	r20,r3
 5089eb4:	a8001126 	beq	r21,zero,5089efc <_dtoa_r+0x440>
 5089eb8:	05c14274 	movhi	r23,1289
 5089ebc:	bdd15304 	addi	r23,r23,17740
 5089ec0:	4805883a 	mov	r2,r9
 5089ec4:	4007883a 	mov	r3,r8
 5089ec8:	a980004c 	andi	r6,r21,1
 5089ecc:	1009883a 	mov	r4,r2
 5089ed0:	a82bd07a 	srai	r21,r21,1
 5089ed4:	180b883a 	mov	r5,r3
 5089ed8:	30000426 	beq	r6,zero,5089eec <_dtoa_r+0x430>
 5089edc:	b9800017 	ldw	r6,0(r23)
 5089ee0:	b9c00117 	ldw	r7,4(r23)
 5089ee4:	84000044 	addi	r16,r16,1
 5089ee8:	5085fa80 	call	5085fa8 <__muldf3>
 5089eec:	bdc00204 	addi	r23,r23,8
 5089ef0:	a83ff51e 	bne	r21,zero,5089ec8 <__alt_data_end+0xfffbbcc8>
 5089ef4:	1013883a 	mov	r9,r2
 5089ef8:	1811883a 	mov	r8,r3
 5089efc:	480d883a 	mov	r6,r9
 5089f00:	400f883a 	mov	r7,r8
 5089f04:	8809883a 	mov	r4,r17
 5089f08:	a00b883a 	mov	r5,r20
 5089f0c:	50854680 	call	5085468 <__divdf3>
 5089f10:	d8800f15 	stw	r2,60(sp)
 5089f14:	d8c01015 	stw	r3,64(sp)
 5089f18:	d8c00e17 	ldw	r3,56(sp)
 5089f1c:	18000626 	beq	r3,zero,5089f38 <_dtoa_r+0x47c>
 5089f20:	d9000f17 	ldw	r4,60(sp)
 5089f24:	d9401017 	ldw	r5,64(sp)
 5089f28:	000d883a 	mov	r6,zero
 5089f2c:	01cffc34 	movhi	r7,16368
 5089f30:	5085eb40 	call	5085eb4 <__ledf2>
 5089f34:	10040b16 	blt	r2,zero,508af64 <_dtoa_r+0x14a8>
 5089f38:	8009883a 	mov	r4,r16
 5089f3c:	508703c0 	call	508703c <__floatsidf>
 5089f40:	d9800f17 	ldw	r6,60(sp)
 5089f44:	d9c01017 	ldw	r7,64(sp)
 5089f48:	1009883a 	mov	r4,r2
 5089f4c:	180b883a 	mov	r5,r3
 5089f50:	5085fa80 	call	5085fa8 <__muldf3>
 5089f54:	000d883a 	mov	r6,zero
 5089f58:	01d00734 	movhi	r7,16412
 5089f5c:	1009883a 	mov	r4,r2
 5089f60:	180b883a 	mov	r5,r3
 5089f64:	5084bbc0 	call	5084bbc <__adddf3>
 5089f68:	1021883a 	mov	r16,r2
 5089f6c:	d8800617 	ldw	r2,24(sp)
 5089f70:	047f3034 	movhi	r17,64704
 5089f74:	1c63883a 	add	r17,r3,r17
 5089f78:	10031826 	beq	r2,zero,508abdc <_dtoa_r+0x1120>
 5089f7c:	d8c00517 	ldw	r3,20(sp)
 5089f80:	db000617 	ldw	r12,24(sp)
 5089f84:	d8c01315 	stw	r3,76(sp)
 5089f88:	d9000b17 	ldw	r4,44(sp)
 5089f8c:	20038f26 	beq	r4,zero,508adcc <_dtoa_r+0x1310>
 5089f90:	60bfffc4 	addi	r2,r12,-1
 5089f94:	100490fa 	slli	r2,r2,3
 5089f98:	00c14274 	movhi	r3,1289
 5089f9c:	18d15d04 	addi	r3,r3,17780
 5089fa0:	1885883a 	add	r2,r3,r2
 5089fa4:	11800017 	ldw	r6,0(r2)
 5089fa8:	11c00117 	ldw	r7,4(r2)
 5089fac:	d8800717 	ldw	r2,28(sp)
 5089fb0:	0009883a 	mov	r4,zero
 5089fb4:	014ff834 	movhi	r5,16352
 5089fb8:	db001615 	stw	r12,88(sp)
 5089fbc:	15c00044 	addi	r23,r2,1
 5089fc0:	50854680 	call	5085468 <__divdf3>
 5089fc4:	800d883a 	mov	r6,r16
 5089fc8:	880f883a 	mov	r7,r17
 5089fcc:	1009883a 	mov	r4,r2
 5089fd0:	180b883a 	mov	r5,r3
 5089fd4:	50866c00 	call	50866c0 <__subdf3>
 5089fd8:	d9401017 	ldw	r5,64(sp)
 5089fdc:	d9000f17 	ldw	r4,60(sp)
 5089fe0:	102b883a 	mov	r21,r2
 5089fe4:	d8c01215 	stw	r3,72(sp)
 5089fe8:	5086fbc0 	call	5086fbc <__fixdfsi>
 5089fec:	1009883a 	mov	r4,r2
 5089ff0:	1029883a 	mov	r20,r2
 5089ff4:	508703c0 	call	508703c <__floatsidf>
 5089ff8:	d9000f17 	ldw	r4,60(sp)
 5089ffc:	d9401017 	ldw	r5,64(sp)
 508a000:	100d883a 	mov	r6,r2
 508a004:	180f883a 	mov	r7,r3
 508a008:	50866c00 	call	50866c0 <__subdf3>
 508a00c:	1823883a 	mov	r17,r3
 508a010:	d8c00717 	ldw	r3,28(sp)
 508a014:	d9401217 	ldw	r5,72(sp)
 508a018:	a2000c04 	addi	r8,r20,48
 508a01c:	1021883a 	mov	r16,r2
 508a020:	1a000005 	stb	r8,0(r3)
 508a024:	800d883a 	mov	r6,r16
 508a028:	880f883a 	mov	r7,r17
 508a02c:	a809883a 	mov	r4,r21
 508a030:	4029883a 	mov	r20,r8
 508a034:	5085dd80 	call	5085dd8 <__gedf2>
 508a038:	00841d16 	blt	zero,r2,508b0b0 <_dtoa_r+0x15f4>
 508a03c:	800d883a 	mov	r6,r16
 508a040:	880f883a 	mov	r7,r17
 508a044:	0009883a 	mov	r4,zero
 508a048:	014ffc34 	movhi	r5,16368
 508a04c:	50866c00 	call	50866c0 <__subdf3>
 508a050:	d9401217 	ldw	r5,72(sp)
 508a054:	100d883a 	mov	r6,r2
 508a058:	180f883a 	mov	r7,r3
 508a05c:	a809883a 	mov	r4,r21
 508a060:	5085dd80 	call	5085dd8 <__gedf2>
 508a064:	db001617 	ldw	r12,88(sp)
 508a068:	00840e16 	blt	zero,r2,508b0a4 <_dtoa_r+0x15e8>
 508a06c:	00800044 	movi	r2,1
 508a070:	13006b0e 	bge	r2,r12,508a220 <_dtoa_r+0x764>
 508a074:	d9000717 	ldw	r4,28(sp)
 508a078:	dd800f15 	stw	r22,60(sp)
 508a07c:	dcc01015 	stw	r19,64(sp)
 508a080:	2319883a 	add	r12,r4,r12
 508a084:	dcc01217 	ldw	r19,72(sp)
 508a088:	602d883a 	mov	r22,r12
 508a08c:	dc801215 	stw	r18,72(sp)
 508a090:	b825883a 	mov	r18,r23
 508a094:	00000906 	br	508a0bc <_dtoa_r+0x600>
 508a098:	50866c00 	call	50866c0 <__subdf3>
 508a09c:	a80d883a 	mov	r6,r21
 508a0a0:	980f883a 	mov	r7,r19
 508a0a4:	1009883a 	mov	r4,r2
 508a0a8:	180b883a 	mov	r5,r3
 508a0ac:	5085eb40 	call	5085eb4 <__ledf2>
 508a0b0:	1003e816 	blt	r2,zero,508b054 <_dtoa_r+0x1598>
 508a0b4:	b825883a 	mov	r18,r23
 508a0b8:	bd83e926 	beq	r23,r22,508b060 <_dtoa_r+0x15a4>
 508a0bc:	a809883a 	mov	r4,r21
 508a0c0:	980b883a 	mov	r5,r19
 508a0c4:	000d883a 	mov	r6,zero
 508a0c8:	01d00934 	movhi	r7,16420
 508a0cc:	5085fa80 	call	5085fa8 <__muldf3>
 508a0d0:	000d883a 	mov	r6,zero
 508a0d4:	01d00934 	movhi	r7,16420
 508a0d8:	8009883a 	mov	r4,r16
 508a0dc:	880b883a 	mov	r5,r17
 508a0e0:	102b883a 	mov	r21,r2
 508a0e4:	1827883a 	mov	r19,r3
 508a0e8:	5085fa80 	call	5085fa8 <__muldf3>
 508a0ec:	180b883a 	mov	r5,r3
 508a0f0:	1009883a 	mov	r4,r2
 508a0f4:	1821883a 	mov	r16,r3
 508a0f8:	1023883a 	mov	r17,r2
 508a0fc:	5086fbc0 	call	5086fbc <__fixdfsi>
 508a100:	1009883a 	mov	r4,r2
 508a104:	1029883a 	mov	r20,r2
 508a108:	508703c0 	call	508703c <__floatsidf>
 508a10c:	8809883a 	mov	r4,r17
 508a110:	800b883a 	mov	r5,r16
 508a114:	100d883a 	mov	r6,r2
 508a118:	180f883a 	mov	r7,r3
 508a11c:	50866c00 	call	50866c0 <__subdf3>
 508a120:	a5000c04 	addi	r20,r20,48
 508a124:	a80d883a 	mov	r6,r21
 508a128:	980f883a 	mov	r7,r19
 508a12c:	1009883a 	mov	r4,r2
 508a130:	180b883a 	mov	r5,r3
 508a134:	95000005 	stb	r20,0(r18)
 508a138:	1021883a 	mov	r16,r2
 508a13c:	1823883a 	mov	r17,r3
 508a140:	5085eb40 	call	5085eb4 <__ledf2>
 508a144:	bdc00044 	addi	r23,r23,1
 508a148:	800d883a 	mov	r6,r16
 508a14c:	880f883a 	mov	r7,r17
 508a150:	0009883a 	mov	r4,zero
 508a154:	014ffc34 	movhi	r5,16368
 508a158:	103fcf0e 	bge	r2,zero,508a098 <__alt_data_end+0xfffbbe98>
 508a15c:	d8c01317 	ldw	r3,76(sp)
 508a160:	d8c00515 	stw	r3,20(sp)
 508a164:	d9400917 	ldw	r5,36(sp)
 508a168:	e009883a 	mov	r4,fp
 508a16c:	508d2000 	call	508d200 <_Bfree>
 508a170:	d9000517 	ldw	r4,20(sp)
 508a174:	d9802317 	ldw	r6,140(sp)
 508a178:	d9c02517 	ldw	r7,148(sp)
 508a17c:	b8000005 	stb	zero,0(r23)
 508a180:	20800044 	addi	r2,r4,1
 508a184:	30800015 	stw	r2,0(r6)
 508a188:	3802aa26 	beq	r7,zero,508ac34 <_dtoa_r+0x1178>
 508a18c:	3dc00015 	stw	r23,0(r7)
 508a190:	d8800717 	ldw	r2,28(sp)
 508a194:	003e7906 	br	5089b7c <__alt_data_end+0xfffbb97c>
 508a198:	00800434 	movhi	r2,16
 508a19c:	10bfffc4 	addi	r2,r2,-1
 508a1a0:	88a2703a 	and	r17,r17,r2
 508a1a4:	883e851e 	bne	r17,zero,5089bbc <__alt_data_end+0xfffbb9bc>
 508a1a8:	00814274 	movhi	r2,1289
 508a1ac:	10913f04 	addi	r2,r2,17660
 508a1b0:	003e8406 	br	5089bc4 <__alt_data_end+0xfffbb9c4>
 508a1b4:	10c00204 	addi	r3,r2,8
 508a1b8:	003e8706 	br	5089bd8 <__alt_data_end+0xfffbb9d8>
 508a1bc:	01400434 	movhi	r5,16
 508a1c0:	297fffc4 	addi	r5,r5,-1
 508a1c4:	994a703a 	and	r5,r19,r5
 508a1c8:	9009883a 	mov	r4,r18
 508a1cc:	843f0044 	addi	r16,r16,-1023
 508a1d0:	294ffc34 	orhi	r5,r5,16368
 508a1d4:	dd800217 	ldw	r22,8(sp)
 508a1d8:	d8001115 	stw	zero,68(sp)
 508a1dc:	003ea506 	br	5089c74 <__alt_data_end+0xfffbba74>
 508a1e0:	00814274 	movhi	r2,1289
 508a1e4:	10913604 	addi	r2,r2,17624
 508a1e8:	003e6406 	br	5089b7c <__alt_data_end+0xfffbb97c>
 508a1ec:	e0001115 	stw	zero,68(fp)
 508a1f0:	000b883a 	mov	r5,zero
 508a1f4:	e009883a 	mov	r4,fp
 508a1f8:	508d1580 	call	508d158 <_Balloc>
 508a1fc:	01bfffc4 	movi	r6,-1
 508a200:	01c00044 	movi	r7,1
 508a204:	d8800715 	stw	r2,28(sp)
 508a208:	d9800c15 	stw	r6,48(sp)
 508a20c:	e0801015 	stw	r2,64(fp)
 508a210:	d8000315 	stw	zero,12(sp)
 508a214:	d9c00b15 	stw	r7,44(sp)
 508a218:	d9800615 	stw	r6,24(sp)
 508a21c:	d8002215 	stw	zero,136(sp)
 508a220:	d8800117 	ldw	r2,4(sp)
 508a224:	10008916 	blt	r2,zero,508a44c <_dtoa_r+0x990>
 508a228:	d9000517 	ldw	r4,20(sp)
 508a22c:	00c00384 	movi	r3,14
 508a230:	19008616 	blt	r3,r4,508a44c <_dtoa_r+0x990>
 508a234:	200490fa 	slli	r2,r4,3
 508a238:	00c14274 	movhi	r3,1289
 508a23c:	d9802217 	ldw	r6,136(sp)
 508a240:	18d15d04 	addi	r3,r3,17780
 508a244:	1885883a 	add	r2,r3,r2
 508a248:	14000017 	ldw	r16,0(r2)
 508a24c:	14400117 	ldw	r17,4(r2)
 508a250:	30016316 	blt	r6,zero,508a7e0 <_dtoa_r+0xd24>
 508a254:	800d883a 	mov	r6,r16
 508a258:	880f883a 	mov	r7,r17
 508a25c:	9009883a 	mov	r4,r18
 508a260:	980b883a 	mov	r5,r19
 508a264:	50854680 	call	5085468 <__divdf3>
 508a268:	180b883a 	mov	r5,r3
 508a26c:	1009883a 	mov	r4,r2
 508a270:	5086fbc0 	call	5086fbc <__fixdfsi>
 508a274:	1009883a 	mov	r4,r2
 508a278:	102b883a 	mov	r21,r2
 508a27c:	508703c0 	call	508703c <__floatsidf>
 508a280:	800d883a 	mov	r6,r16
 508a284:	880f883a 	mov	r7,r17
 508a288:	1009883a 	mov	r4,r2
 508a28c:	180b883a 	mov	r5,r3
 508a290:	5085fa80 	call	5085fa8 <__muldf3>
 508a294:	100d883a 	mov	r6,r2
 508a298:	180f883a 	mov	r7,r3
 508a29c:	9009883a 	mov	r4,r18
 508a2a0:	980b883a 	mov	r5,r19
 508a2a4:	50866c00 	call	50866c0 <__subdf3>
 508a2a8:	d9c00717 	ldw	r7,28(sp)
 508a2ac:	1009883a 	mov	r4,r2
 508a2b0:	a8800c04 	addi	r2,r21,48
 508a2b4:	38800005 	stb	r2,0(r7)
 508a2b8:	3dc00044 	addi	r23,r7,1
 508a2bc:	d9c00617 	ldw	r7,24(sp)
 508a2c0:	01800044 	movi	r6,1
 508a2c4:	180b883a 	mov	r5,r3
 508a2c8:	2005883a 	mov	r2,r4
 508a2cc:	39803826 	beq	r7,r6,508a3b0 <_dtoa_r+0x8f4>
 508a2d0:	000d883a 	mov	r6,zero
 508a2d4:	01d00934 	movhi	r7,16420
 508a2d8:	5085fa80 	call	5085fa8 <__muldf3>
 508a2dc:	000d883a 	mov	r6,zero
 508a2e0:	000f883a 	mov	r7,zero
 508a2e4:	1009883a 	mov	r4,r2
 508a2e8:	180b883a 	mov	r5,r3
 508a2ec:	1025883a 	mov	r18,r2
 508a2f0:	1827883a 	mov	r19,r3
 508a2f4:	5085d500 	call	5085d50 <__eqdf2>
 508a2f8:	103f9a26 	beq	r2,zero,508a164 <__alt_data_end+0xfffbbf64>
 508a2fc:	d9c00617 	ldw	r7,24(sp)
 508a300:	d8c00717 	ldw	r3,28(sp)
 508a304:	b829883a 	mov	r20,r23
 508a308:	38bfffc4 	addi	r2,r7,-1
 508a30c:	18ad883a 	add	r22,r3,r2
 508a310:	00000a06 	br	508a33c <_dtoa_r+0x880>
 508a314:	5085fa80 	call	5085fa8 <__muldf3>
 508a318:	000d883a 	mov	r6,zero
 508a31c:	000f883a 	mov	r7,zero
 508a320:	1009883a 	mov	r4,r2
 508a324:	180b883a 	mov	r5,r3
 508a328:	1025883a 	mov	r18,r2
 508a32c:	1827883a 	mov	r19,r3
 508a330:	b829883a 	mov	r20,r23
 508a334:	5085d500 	call	5085d50 <__eqdf2>
 508a338:	103f8a26 	beq	r2,zero,508a164 <__alt_data_end+0xfffbbf64>
 508a33c:	800d883a 	mov	r6,r16
 508a340:	880f883a 	mov	r7,r17
 508a344:	9009883a 	mov	r4,r18
 508a348:	980b883a 	mov	r5,r19
 508a34c:	50854680 	call	5085468 <__divdf3>
 508a350:	180b883a 	mov	r5,r3
 508a354:	1009883a 	mov	r4,r2
 508a358:	5086fbc0 	call	5086fbc <__fixdfsi>
 508a35c:	1009883a 	mov	r4,r2
 508a360:	102b883a 	mov	r21,r2
 508a364:	508703c0 	call	508703c <__floatsidf>
 508a368:	800d883a 	mov	r6,r16
 508a36c:	880f883a 	mov	r7,r17
 508a370:	1009883a 	mov	r4,r2
 508a374:	180b883a 	mov	r5,r3
 508a378:	5085fa80 	call	5085fa8 <__muldf3>
 508a37c:	100d883a 	mov	r6,r2
 508a380:	180f883a 	mov	r7,r3
 508a384:	9009883a 	mov	r4,r18
 508a388:	980b883a 	mov	r5,r19
 508a38c:	50866c00 	call	50866c0 <__subdf3>
 508a390:	aa000c04 	addi	r8,r21,48
 508a394:	a2000005 	stb	r8,0(r20)
 508a398:	000d883a 	mov	r6,zero
 508a39c:	01d00934 	movhi	r7,16420
 508a3a0:	1009883a 	mov	r4,r2
 508a3a4:	180b883a 	mov	r5,r3
 508a3a8:	a5c00044 	addi	r23,r20,1
 508a3ac:	b53fd91e 	bne	r22,r20,508a314 <__alt_data_end+0xfffbc114>
 508a3b0:	100d883a 	mov	r6,r2
 508a3b4:	180f883a 	mov	r7,r3
 508a3b8:	1009883a 	mov	r4,r2
 508a3bc:	180b883a 	mov	r5,r3
 508a3c0:	5084bbc0 	call	5084bbc <__adddf3>
 508a3c4:	100d883a 	mov	r6,r2
 508a3c8:	180f883a 	mov	r7,r3
 508a3cc:	8009883a 	mov	r4,r16
 508a3d0:	880b883a 	mov	r5,r17
 508a3d4:	1027883a 	mov	r19,r2
 508a3d8:	1825883a 	mov	r18,r3
 508a3dc:	5085eb40 	call	5085eb4 <__ledf2>
 508a3e0:	10000816 	blt	r2,zero,508a404 <_dtoa_r+0x948>
 508a3e4:	980d883a 	mov	r6,r19
 508a3e8:	900f883a 	mov	r7,r18
 508a3ec:	8009883a 	mov	r4,r16
 508a3f0:	880b883a 	mov	r5,r17
 508a3f4:	5085d500 	call	5085d50 <__eqdf2>
 508a3f8:	103f5a1e 	bne	r2,zero,508a164 <__alt_data_end+0xfffbbf64>
 508a3fc:	ad40004c 	andi	r21,r21,1
 508a400:	a83f5826 	beq	r21,zero,508a164 <__alt_data_end+0xfffbbf64>
 508a404:	bd3fffc3 	ldbu	r20,-1(r23)
 508a408:	b8bfffc4 	addi	r2,r23,-1
 508a40c:	1007883a 	mov	r3,r2
 508a410:	01400e44 	movi	r5,57
 508a414:	d9800717 	ldw	r6,28(sp)
 508a418:	00000506 	br	508a430 <_dtoa_r+0x974>
 508a41c:	18ffffc4 	addi	r3,r3,-1
 508a420:	11824726 	beq	r2,r6,508ad40 <_dtoa_r+0x1284>
 508a424:	1d000003 	ldbu	r20,0(r3)
 508a428:	102f883a 	mov	r23,r2
 508a42c:	10bfffc4 	addi	r2,r2,-1
 508a430:	a1003fcc 	andi	r4,r20,255
 508a434:	2100201c 	xori	r4,r4,128
 508a438:	213fe004 	addi	r4,r4,-128
 508a43c:	217ff726 	beq	r4,r5,508a41c <__alt_data_end+0xfffbc21c>
 508a440:	a2000044 	addi	r8,r20,1
 508a444:	12000005 	stb	r8,0(r2)
 508a448:	003f4606 	br	508a164 <__alt_data_end+0xfffbbf64>
 508a44c:	d9000b17 	ldw	r4,44(sp)
 508a450:	2000c826 	beq	r4,zero,508a774 <_dtoa_r+0xcb8>
 508a454:	d9800317 	ldw	r6,12(sp)
 508a458:	00c00044 	movi	r3,1
 508a45c:	1980f90e 	bge	r3,r6,508a844 <_dtoa_r+0xd88>
 508a460:	d8800617 	ldw	r2,24(sp)
 508a464:	d8c00a17 	ldw	r3,40(sp)
 508a468:	157fffc4 	addi	r21,r2,-1
 508a46c:	1d41f316 	blt	r3,r21,508ac3c <_dtoa_r+0x1180>
 508a470:	1d6bc83a 	sub	r21,r3,r21
 508a474:	d9c00617 	ldw	r7,24(sp)
 508a478:	3802aa16 	blt	r7,zero,508af24 <_dtoa_r+0x1468>
 508a47c:	dd000817 	ldw	r20,32(sp)
 508a480:	d8800617 	ldw	r2,24(sp)
 508a484:	d8c00817 	ldw	r3,32(sp)
 508a488:	01400044 	movi	r5,1
 508a48c:	e009883a 	mov	r4,fp
 508a490:	1887883a 	add	r3,r3,r2
 508a494:	d8c00815 	stw	r3,32(sp)
 508a498:	b0ad883a 	add	r22,r22,r2
 508a49c:	508d5640 	call	508d564 <__i2b>
 508a4a0:	1023883a 	mov	r17,r2
 508a4a4:	a0000826 	beq	r20,zero,508a4c8 <_dtoa_r+0xa0c>
 508a4a8:	0580070e 	bge	zero,r22,508a4c8 <_dtoa_r+0xa0c>
 508a4ac:	a005883a 	mov	r2,r20
 508a4b0:	b500b916 	blt	r22,r20,508a798 <_dtoa_r+0xcdc>
 508a4b4:	d9000817 	ldw	r4,32(sp)
 508a4b8:	a0a9c83a 	sub	r20,r20,r2
 508a4bc:	b0adc83a 	sub	r22,r22,r2
 508a4c0:	2089c83a 	sub	r4,r4,r2
 508a4c4:	d9000815 	stw	r4,32(sp)
 508a4c8:	d9800a17 	ldw	r6,40(sp)
 508a4cc:	0181810e 	bge	zero,r6,508aad4 <_dtoa_r+0x1018>
 508a4d0:	d9c00b17 	ldw	r7,44(sp)
 508a4d4:	3800b326 	beq	r7,zero,508a7a4 <_dtoa_r+0xce8>
 508a4d8:	a800b226 	beq	r21,zero,508a7a4 <_dtoa_r+0xce8>
 508a4dc:	880b883a 	mov	r5,r17
 508a4e0:	a80d883a 	mov	r6,r21
 508a4e4:	e009883a 	mov	r4,fp
 508a4e8:	508d7980 	call	508d798 <__pow5mult>
 508a4ec:	d9800917 	ldw	r6,36(sp)
 508a4f0:	100b883a 	mov	r5,r2
 508a4f4:	e009883a 	mov	r4,fp
 508a4f8:	1023883a 	mov	r17,r2
 508a4fc:	508d5a00 	call	508d5a0 <__multiply>
 508a500:	1021883a 	mov	r16,r2
 508a504:	d8800a17 	ldw	r2,40(sp)
 508a508:	d9400917 	ldw	r5,36(sp)
 508a50c:	e009883a 	mov	r4,fp
 508a510:	1545c83a 	sub	r2,r2,r21
 508a514:	d8800a15 	stw	r2,40(sp)
 508a518:	508d2000 	call	508d200 <_Bfree>
 508a51c:	d8c00a17 	ldw	r3,40(sp)
 508a520:	18009f1e 	bne	r3,zero,508a7a0 <_dtoa_r+0xce4>
 508a524:	05c00044 	movi	r23,1
 508a528:	e009883a 	mov	r4,fp
 508a52c:	b80b883a 	mov	r5,r23
 508a530:	508d5640 	call	508d564 <__i2b>
 508a534:	d9000d17 	ldw	r4,52(sp)
 508a538:	102b883a 	mov	r21,r2
 508a53c:	2000ce26 	beq	r4,zero,508a878 <_dtoa_r+0xdbc>
 508a540:	200d883a 	mov	r6,r4
 508a544:	100b883a 	mov	r5,r2
 508a548:	e009883a 	mov	r4,fp
 508a54c:	508d7980 	call	508d798 <__pow5mult>
 508a550:	d9800317 	ldw	r6,12(sp)
 508a554:	102b883a 	mov	r21,r2
 508a558:	b981810e 	bge	r23,r6,508ab60 <_dtoa_r+0x10a4>
 508a55c:	0027883a 	mov	r19,zero
 508a560:	a8800417 	ldw	r2,16(r21)
 508a564:	05c00804 	movi	r23,32
 508a568:	10800104 	addi	r2,r2,4
 508a56c:	1085883a 	add	r2,r2,r2
 508a570:	1085883a 	add	r2,r2,r2
 508a574:	a885883a 	add	r2,r21,r2
 508a578:	11000017 	ldw	r4,0(r2)
 508a57c:	508d44c0 	call	508d44c <__hi0bits>
 508a580:	b885c83a 	sub	r2,r23,r2
 508a584:	1585883a 	add	r2,r2,r22
 508a588:	108007cc 	andi	r2,r2,31
 508a58c:	1000b326 	beq	r2,zero,508a85c <_dtoa_r+0xda0>
 508a590:	00c00804 	movi	r3,32
 508a594:	1887c83a 	sub	r3,r3,r2
 508a598:	01000104 	movi	r4,4
 508a59c:	20c2cd0e 	bge	r4,r3,508b0d4 <_dtoa_r+0x1618>
 508a5a0:	00c00704 	movi	r3,28
 508a5a4:	1885c83a 	sub	r2,r3,r2
 508a5a8:	d8c00817 	ldw	r3,32(sp)
 508a5ac:	a0a9883a 	add	r20,r20,r2
 508a5b0:	b0ad883a 	add	r22,r22,r2
 508a5b4:	1887883a 	add	r3,r3,r2
 508a5b8:	d8c00815 	stw	r3,32(sp)
 508a5bc:	d9800817 	ldw	r6,32(sp)
 508a5c0:	0180040e 	bge	zero,r6,508a5d4 <_dtoa_r+0xb18>
 508a5c4:	800b883a 	mov	r5,r16
 508a5c8:	e009883a 	mov	r4,fp
 508a5cc:	508d8d80 	call	508d8d8 <__lshift>
 508a5d0:	1021883a 	mov	r16,r2
 508a5d4:	0580050e 	bge	zero,r22,508a5ec <_dtoa_r+0xb30>
 508a5d8:	a80b883a 	mov	r5,r21
 508a5dc:	b00d883a 	mov	r6,r22
 508a5e0:	e009883a 	mov	r4,fp
 508a5e4:	508d8d80 	call	508d8d8 <__lshift>
 508a5e8:	102b883a 	mov	r21,r2
 508a5ec:	d9c00e17 	ldw	r7,56(sp)
 508a5f0:	3801211e 	bne	r7,zero,508aa78 <_dtoa_r+0xfbc>
 508a5f4:	d9800617 	ldw	r6,24(sp)
 508a5f8:	0181380e 	bge	zero,r6,508aadc <_dtoa_r+0x1020>
 508a5fc:	d8c00b17 	ldw	r3,44(sp)
 508a600:	1800ab1e 	bne	r3,zero,508a8b0 <_dtoa_r+0xdf4>
 508a604:	dc800717 	ldw	r18,28(sp)
 508a608:	dcc00617 	ldw	r19,24(sp)
 508a60c:	9029883a 	mov	r20,r18
 508a610:	00000206 	br	508a61c <_dtoa_r+0xb60>
 508a614:	508d2280 	call	508d228 <__multadd>
 508a618:	1021883a 	mov	r16,r2
 508a61c:	a80b883a 	mov	r5,r21
 508a620:	8009883a 	mov	r4,r16
 508a624:	50898bc0 	call	50898bc <quorem>
 508a628:	10800c04 	addi	r2,r2,48
 508a62c:	90800005 	stb	r2,0(r18)
 508a630:	94800044 	addi	r18,r18,1
 508a634:	9507c83a 	sub	r3,r18,r20
 508a638:	000f883a 	mov	r7,zero
 508a63c:	01800284 	movi	r6,10
 508a640:	800b883a 	mov	r5,r16
 508a644:	e009883a 	mov	r4,fp
 508a648:	1cfff216 	blt	r3,r19,508a614 <__alt_data_end+0xfffbc414>
 508a64c:	1011883a 	mov	r8,r2
 508a650:	d8800617 	ldw	r2,24(sp)
 508a654:	0082370e 	bge	zero,r2,508af34 <_dtoa_r+0x1478>
 508a658:	d9000717 	ldw	r4,28(sp)
 508a65c:	0025883a 	mov	r18,zero
 508a660:	20af883a 	add	r23,r4,r2
 508a664:	01800044 	movi	r6,1
 508a668:	800b883a 	mov	r5,r16
 508a66c:	e009883a 	mov	r4,fp
 508a670:	da001715 	stw	r8,92(sp)
 508a674:	508d8d80 	call	508d8d8 <__lshift>
 508a678:	a80b883a 	mov	r5,r21
 508a67c:	1009883a 	mov	r4,r2
 508a680:	d8800915 	stw	r2,36(sp)
 508a684:	508da200 	call	508da20 <__mcmp>
 508a688:	da001717 	ldw	r8,92(sp)
 508a68c:	0081800e 	bge	zero,r2,508ac90 <_dtoa_r+0x11d4>
 508a690:	b93fffc3 	ldbu	r4,-1(r23)
 508a694:	b8bfffc4 	addi	r2,r23,-1
 508a698:	1007883a 	mov	r3,r2
 508a69c:	01800e44 	movi	r6,57
 508a6a0:	d9c00717 	ldw	r7,28(sp)
 508a6a4:	00000506 	br	508a6bc <_dtoa_r+0xc00>
 508a6a8:	18ffffc4 	addi	r3,r3,-1
 508a6ac:	11c12326 	beq	r2,r7,508ab3c <_dtoa_r+0x1080>
 508a6b0:	19000003 	ldbu	r4,0(r3)
 508a6b4:	102f883a 	mov	r23,r2
 508a6b8:	10bfffc4 	addi	r2,r2,-1
 508a6bc:	21403fcc 	andi	r5,r4,255
 508a6c0:	2940201c 	xori	r5,r5,128
 508a6c4:	297fe004 	addi	r5,r5,-128
 508a6c8:	29bff726 	beq	r5,r6,508a6a8 <__alt_data_end+0xfffbc4a8>
 508a6cc:	21000044 	addi	r4,r4,1
 508a6d0:	11000005 	stb	r4,0(r2)
 508a6d4:	a80b883a 	mov	r5,r21
 508a6d8:	e009883a 	mov	r4,fp
 508a6dc:	508d2000 	call	508d200 <_Bfree>
 508a6e0:	883ea026 	beq	r17,zero,508a164 <__alt_data_end+0xfffbbf64>
 508a6e4:	90000426 	beq	r18,zero,508a6f8 <_dtoa_r+0xc3c>
 508a6e8:	94400326 	beq	r18,r17,508a6f8 <_dtoa_r+0xc3c>
 508a6ec:	900b883a 	mov	r5,r18
 508a6f0:	e009883a 	mov	r4,fp
 508a6f4:	508d2000 	call	508d200 <_Bfree>
 508a6f8:	880b883a 	mov	r5,r17
 508a6fc:	e009883a 	mov	r4,fp
 508a700:	508d2000 	call	508d200 <_Bfree>
 508a704:	003e9706 	br	508a164 <__alt_data_end+0xfffbbf64>
 508a708:	01800044 	movi	r6,1
 508a70c:	d9800e15 	stw	r6,56(sp)
 508a710:	003d9606 	br	5089d6c <__alt_data_end+0xfffbbb6c>
 508a714:	d8800817 	ldw	r2,32(sp)
 508a718:	d8c00517 	ldw	r3,20(sp)
 508a71c:	d8000d15 	stw	zero,52(sp)
 508a720:	10c5c83a 	sub	r2,r2,r3
 508a724:	00c9c83a 	sub	r4,zero,r3
 508a728:	d8800815 	stw	r2,32(sp)
 508a72c:	d9000a15 	stw	r4,40(sp)
 508a730:	003d9706 	br	5089d90 <__alt_data_end+0xfffbbb90>
 508a734:	05adc83a 	sub	r22,zero,r22
 508a738:	dd800815 	stw	r22,32(sp)
 508a73c:	002d883a 	mov	r22,zero
 508a740:	003d8e06 	br	5089d7c <__alt_data_end+0xfffbbb7c>
 508a744:	d9000517 	ldw	r4,20(sp)
 508a748:	508703c0 	call	508703c <__floatsidf>
 508a74c:	100d883a 	mov	r6,r2
 508a750:	180f883a 	mov	r7,r3
 508a754:	a009883a 	mov	r4,r20
 508a758:	880b883a 	mov	r5,r17
 508a75c:	5085d500 	call	5085d50 <__eqdf2>
 508a760:	103d7126 	beq	r2,zero,5089d28 <__alt_data_end+0xfffbbb28>
 508a764:	d9c00517 	ldw	r7,20(sp)
 508a768:	39ffffc4 	addi	r7,r7,-1
 508a76c:	d9c00515 	stw	r7,20(sp)
 508a770:	003d6d06 	br	5089d28 <__alt_data_end+0xfffbbb28>
 508a774:	dd400a17 	ldw	r21,40(sp)
 508a778:	dd000817 	ldw	r20,32(sp)
 508a77c:	0023883a 	mov	r17,zero
 508a780:	003f4806 	br	508a4a4 <__alt_data_end+0xfffbc2a4>
 508a784:	10e3c83a 	sub	r17,r2,r3
 508a788:	9448983a 	sll	r4,r18,r17
 508a78c:	003d3206 	br	5089c58 <__alt_data_end+0xfffbba58>
 508a790:	d8000e15 	stw	zero,56(sp)
 508a794:	003d7506 	br	5089d6c <__alt_data_end+0xfffbbb6c>
 508a798:	b005883a 	mov	r2,r22
 508a79c:	003f4506 	br	508a4b4 <__alt_data_end+0xfffbc2b4>
 508a7a0:	dc000915 	stw	r16,36(sp)
 508a7a4:	d9800a17 	ldw	r6,40(sp)
 508a7a8:	d9400917 	ldw	r5,36(sp)
 508a7ac:	e009883a 	mov	r4,fp
 508a7b0:	508d7980 	call	508d798 <__pow5mult>
 508a7b4:	1021883a 	mov	r16,r2
 508a7b8:	003f5a06 	br	508a524 <__alt_data_end+0xfffbc324>
 508a7bc:	01c00044 	movi	r7,1
 508a7c0:	d9c00b15 	stw	r7,44(sp)
 508a7c4:	d8802217 	ldw	r2,136(sp)
 508a7c8:	0081280e 	bge	zero,r2,508ac6c <_dtoa_r+0x11b0>
 508a7cc:	100d883a 	mov	r6,r2
 508a7d0:	1021883a 	mov	r16,r2
 508a7d4:	d8800c15 	stw	r2,48(sp)
 508a7d8:	d8800615 	stw	r2,24(sp)
 508a7dc:	003d8806 	br	5089e00 <__alt_data_end+0xfffbbc00>
 508a7e0:	d8800617 	ldw	r2,24(sp)
 508a7e4:	00be9b16 	blt	zero,r2,508a254 <__alt_data_end+0xfffbc054>
 508a7e8:	10010f1e 	bne	r2,zero,508ac28 <_dtoa_r+0x116c>
 508a7ec:	880b883a 	mov	r5,r17
 508a7f0:	000d883a 	mov	r6,zero
 508a7f4:	01d00534 	movhi	r7,16404
 508a7f8:	8009883a 	mov	r4,r16
 508a7fc:	5085fa80 	call	5085fa8 <__muldf3>
 508a800:	900d883a 	mov	r6,r18
 508a804:	980f883a 	mov	r7,r19
 508a808:	1009883a 	mov	r4,r2
 508a80c:	180b883a 	mov	r5,r3
 508a810:	5085dd80 	call	5085dd8 <__gedf2>
 508a814:	002b883a 	mov	r21,zero
 508a818:	0023883a 	mov	r17,zero
 508a81c:	1000bf16 	blt	r2,zero,508ab1c <_dtoa_r+0x1060>
 508a820:	d9802217 	ldw	r6,136(sp)
 508a824:	ddc00717 	ldw	r23,28(sp)
 508a828:	018c303a 	nor	r6,zero,r6
 508a82c:	d9800515 	stw	r6,20(sp)
 508a830:	a80b883a 	mov	r5,r21
 508a834:	e009883a 	mov	r4,fp
 508a838:	508d2000 	call	508d200 <_Bfree>
 508a83c:	883e4926 	beq	r17,zero,508a164 <__alt_data_end+0xfffbbf64>
 508a840:	003fad06 	br	508a6f8 <__alt_data_end+0xfffbc4f8>
 508a844:	d9c01117 	ldw	r7,68(sp)
 508a848:	3801bc26 	beq	r7,zero,508af3c <_dtoa_r+0x1480>
 508a84c:	10810cc4 	addi	r2,r2,1075
 508a850:	dd400a17 	ldw	r21,40(sp)
 508a854:	dd000817 	ldw	r20,32(sp)
 508a858:	003f0a06 	br	508a484 <__alt_data_end+0xfffbc284>
 508a85c:	00800704 	movi	r2,28
 508a860:	d9000817 	ldw	r4,32(sp)
 508a864:	a0a9883a 	add	r20,r20,r2
 508a868:	b0ad883a 	add	r22,r22,r2
 508a86c:	2089883a 	add	r4,r4,r2
 508a870:	d9000815 	stw	r4,32(sp)
 508a874:	003f5106 	br	508a5bc <__alt_data_end+0xfffbc3bc>
 508a878:	d8c00317 	ldw	r3,12(sp)
 508a87c:	b8c1fc0e 	bge	r23,r3,508b070 <_dtoa_r+0x15b4>
 508a880:	0027883a 	mov	r19,zero
 508a884:	b805883a 	mov	r2,r23
 508a888:	003f3e06 	br	508a584 <__alt_data_end+0xfffbc384>
 508a88c:	880b883a 	mov	r5,r17
 508a890:	e009883a 	mov	r4,fp
 508a894:	000f883a 	mov	r7,zero
 508a898:	01800284 	movi	r6,10
 508a89c:	508d2280 	call	508d228 <__multadd>
 508a8a0:	d9000c17 	ldw	r4,48(sp)
 508a8a4:	1023883a 	mov	r17,r2
 508a8a8:	0102040e 	bge	zero,r4,508b0bc <_dtoa_r+0x1600>
 508a8ac:	d9000615 	stw	r4,24(sp)
 508a8b0:	0500050e 	bge	zero,r20,508a8c8 <_dtoa_r+0xe0c>
 508a8b4:	880b883a 	mov	r5,r17
 508a8b8:	a00d883a 	mov	r6,r20
 508a8bc:	e009883a 	mov	r4,fp
 508a8c0:	508d8d80 	call	508d8d8 <__lshift>
 508a8c4:	1023883a 	mov	r17,r2
 508a8c8:	9801241e 	bne	r19,zero,508ad5c <_dtoa_r+0x12a0>
 508a8cc:	8829883a 	mov	r20,r17
 508a8d0:	d9000617 	ldw	r4,24(sp)
 508a8d4:	dcc00717 	ldw	r19,28(sp)
 508a8d8:	9480004c 	andi	r18,r18,1
 508a8dc:	20bfffc4 	addi	r2,r4,-1
 508a8e0:	9885883a 	add	r2,r19,r2
 508a8e4:	d8800415 	stw	r2,16(sp)
 508a8e8:	dc800615 	stw	r18,24(sp)
 508a8ec:	a80b883a 	mov	r5,r21
 508a8f0:	8009883a 	mov	r4,r16
 508a8f4:	50898bc0 	call	50898bc <quorem>
 508a8f8:	880b883a 	mov	r5,r17
 508a8fc:	8009883a 	mov	r4,r16
 508a900:	102f883a 	mov	r23,r2
 508a904:	508da200 	call	508da20 <__mcmp>
 508a908:	a80b883a 	mov	r5,r21
 508a90c:	a00d883a 	mov	r6,r20
 508a910:	e009883a 	mov	r4,fp
 508a914:	102d883a 	mov	r22,r2
 508a918:	508da800 	call	508da80 <__mdiff>
 508a91c:	1007883a 	mov	r3,r2
 508a920:	10800317 	ldw	r2,12(r2)
 508a924:	bc800c04 	addi	r18,r23,48
 508a928:	180b883a 	mov	r5,r3
 508a92c:	10004e1e 	bne	r2,zero,508aa68 <_dtoa_r+0xfac>
 508a930:	8009883a 	mov	r4,r16
 508a934:	d8c01615 	stw	r3,88(sp)
 508a938:	508da200 	call	508da20 <__mcmp>
 508a93c:	d8c01617 	ldw	r3,88(sp)
 508a940:	e009883a 	mov	r4,fp
 508a944:	d8801615 	stw	r2,88(sp)
 508a948:	180b883a 	mov	r5,r3
 508a94c:	508d2000 	call	508d200 <_Bfree>
 508a950:	d8801617 	ldw	r2,88(sp)
 508a954:	1000041e 	bne	r2,zero,508a968 <_dtoa_r+0xeac>
 508a958:	d9800317 	ldw	r6,12(sp)
 508a95c:	3000021e 	bne	r6,zero,508a968 <_dtoa_r+0xeac>
 508a960:	d8c00617 	ldw	r3,24(sp)
 508a964:	18003726 	beq	r3,zero,508aa44 <_dtoa_r+0xf88>
 508a968:	b0002016 	blt	r22,zero,508a9ec <_dtoa_r+0xf30>
 508a96c:	b000041e 	bne	r22,zero,508a980 <_dtoa_r+0xec4>
 508a970:	d9000317 	ldw	r4,12(sp)
 508a974:	2000021e 	bne	r4,zero,508a980 <_dtoa_r+0xec4>
 508a978:	d8c00617 	ldw	r3,24(sp)
 508a97c:	18001b26 	beq	r3,zero,508a9ec <_dtoa_r+0xf30>
 508a980:	00810716 	blt	zero,r2,508ada0 <_dtoa_r+0x12e4>
 508a984:	d8c00417 	ldw	r3,16(sp)
 508a988:	9d800044 	addi	r22,r19,1
 508a98c:	9c800005 	stb	r18,0(r19)
 508a990:	b02f883a 	mov	r23,r22
 508a994:	98c10626 	beq	r19,r3,508adb0 <_dtoa_r+0x12f4>
 508a998:	800b883a 	mov	r5,r16
 508a99c:	000f883a 	mov	r7,zero
 508a9a0:	01800284 	movi	r6,10
 508a9a4:	e009883a 	mov	r4,fp
 508a9a8:	508d2280 	call	508d228 <__multadd>
 508a9ac:	1021883a 	mov	r16,r2
 508a9b0:	000f883a 	mov	r7,zero
 508a9b4:	01800284 	movi	r6,10
 508a9b8:	880b883a 	mov	r5,r17
 508a9bc:	e009883a 	mov	r4,fp
 508a9c0:	8d002526 	beq	r17,r20,508aa58 <_dtoa_r+0xf9c>
 508a9c4:	508d2280 	call	508d228 <__multadd>
 508a9c8:	a00b883a 	mov	r5,r20
 508a9cc:	000f883a 	mov	r7,zero
 508a9d0:	01800284 	movi	r6,10
 508a9d4:	e009883a 	mov	r4,fp
 508a9d8:	1023883a 	mov	r17,r2
 508a9dc:	508d2280 	call	508d228 <__multadd>
 508a9e0:	1029883a 	mov	r20,r2
 508a9e4:	b027883a 	mov	r19,r22
 508a9e8:	003fc006 	br	508a8ec <__alt_data_end+0xfffbc6ec>
 508a9ec:	9011883a 	mov	r8,r18
 508a9f0:	00800e0e 	bge	zero,r2,508aa2c <_dtoa_r+0xf70>
 508a9f4:	800b883a 	mov	r5,r16
 508a9f8:	01800044 	movi	r6,1
 508a9fc:	e009883a 	mov	r4,fp
 508aa00:	da001715 	stw	r8,92(sp)
 508aa04:	508d8d80 	call	508d8d8 <__lshift>
 508aa08:	a80b883a 	mov	r5,r21
 508aa0c:	1009883a 	mov	r4,r2
 508aa10:	1021883a 	mov	r16,r2
 508aa14:	508da200 	call	508da20 <__mcmp>
 508aa18:	da001717 	ldw	r8,92(sp)
 508aa1c:	0081960e 	bge	zero,r2,508b078 <_dtoa_r+0x15bc>
 508aa20:	00800e44 	movi	r2,57
 508aa24:	40817026 	beq	r8,r2,508afe8 <_dtoa_r+0x152c>
 508aa28:	ba000c44 	addi	r8,r23,49
 508aa2c:	8825883a 	mov	r18,r17
 508aa30:	9dc00044 	addi	r23,r19,1
 508aa34:	9a000005 	stb	r8,0(r19)
 508aa38:	a023883a 	mov	r17,r20
 508aa3c:	dc000915 	stw	r16,36(sp)
 508aa40:	003f2406 	br	508a6d4 <__alt_data_end+0xfffbc4d4>
 508aa44:	00800e44 	movi	r2,57
 508aa48:	9011883a 	mov	r8,r18
 508aa4c:	90816626 	beq	r18,r2,508afe8 <_dtoa_r+0x152c>
 508aa50:	05bff516 	blt	zero,r22,508aa28 <__alt_data_end+0xfffbc828>
 508aa54:	003ff506 	br	508aa2c <__alt_data_end+0xfffbc82c>
 508aa58:	508d2280 	call	508d228 <__multadd>
 508aa5c:	1023883a 	mov	r17,r2
 508aa60:	1029883a 	mov	r20,r2
 508aa64:	003fdf06 	br	508a9e4 <__alt_data_end+0xfffbc7e4>
 508aa68:	e009883a 	mov	r4,fp
 508aa6c:	508d2000 	call	508d200 <_Bfree>
 508aa70:	00800044 	movi	r2,1
 508aa74:	003fbc06 	br	508a968 <__alt_data_end+0xfffbc768>
 508aa78:	a80b883a 	mov	r5,r21
 508aa7c:	8009883a 	mov	r4,r16
 508aa80:	508da200 	call	508da20 <__mcmp>
 508aa84:	103edb0e 	bge	r2,zero,508a5f4 <__alt_data_end+0xfffbc3f4>
 508aa88:	800b883a 	mov	r5,r16
 508aa8c:	000f883a 	mov	r7,zero
 508aa90:	01800284 	movi	r6,10
 508aa94:	e009883a 	mov	r4,fp
 508aa98:	508d2280 	call	508d228 <__multadd>
 508aa9c:	1021883a 	mov	r16,r2
 508aaa0:	d8800517 	ldw	r2,20(sp)
 508aaa4:	d8c00b17 	ldw	r3,44(sp)
 508aaa8:	10bfffc4 	addi	r2,r2,-1
 508aaac:	d8800515 	stw	r2,20(sp)
 508aab0:	183f761e 	bne	r3,zero,508a88c <__alt_data_end+0xfffbc68c>
 508aab4:	d9000c17 	ldw	r4,48(sp)
 508aab8:	0101730e 	bge	zero,r4,508b088 <_dtoa_r+0x15cc>
 508aabc:	d9000615 	stw	r4,24(sp)
 508aac0:	003ed006 	br	508a604 <__alt_data_end+0xfffbc404>
 508aac4:	00800084 	movi	r2,2
 508aac8:	3081861e 	bne	r6,r2,508b0e4 <_dtoa_r+0x1628>
 508aacc:	d8000b15 	stw	zero,44(sp)
 508aad0:	003f3c06 	br	508a7c4 <__alt_data_end+0xfffbc5c4>
 508aad4:	dc000917 	ldw	r16,36(sp)
 508aad8:	003e9206 	br	508a524 <__alt_data_end+0xfffbc324>
 508aadc:	d9c00317 	ldw	r7,12(sp)
 508aae0:	00800084 	movi	r2,2
 508aae4:	11fec50e 	bge	r2,r7,508a5fc <__alt_data_end+0xfffbc3fc>
 508aae8:	d9000617 	ldw	r4,24(sp)
 508aaec:	20013c1e 	bne	r4,zero,508afe0 <_dtoa_r+0x1524>
 508aaf0:	a80b883a 	mov	r5,r21
 508aaf4:	000f883a 	mov	r7,zero
 508aaf8:	01800144 	movi	r6,5
 508aafc:	e009883a 	mov	r4,fp
 508ab00:	508d2280 	call	508d228 <__multadd>
 508ab04:	100b883a 	mov	r5,r2
 508ab08:	8009883a 	mov	r4,r16
 508ab0c:	102b883a 	mov	r21,r2
 508ab10:	508da200 	call	508da20 <__mcmp>
 508ab14:	dc000915 	stw	r16,36(sp)
 508ab18:	00bf410e 	bge	zero,r2,508a820 <__alt_data_end+0xfffbc620>
 508ab1c:	d9c00717 	ldw	r7,28(sp)
 508ab20:	00800c44 	movi	r2,49
 508ab24:	38800005 	stb	r2,0(r7)
 508ab28:	d8800517 	ldw	r2,20(sp)
 508ab2c:	3dc00044 	addi	r23,r7,1
 508ab30:	10800044 	addi	r2,r2,1
 508ab34:	d8800515 	stw	r2,20(sp)
 508ab38:	003f3d06 	br	508a830 <__alt_data_end+0xfffbc630>
 508ab3c:	d9800517 	ldw	r6,20(sp)
 508ab40:	d9c00717 	ldw	r7,28(sp)
 508ab44:	00800c44 	movi	r2,49
 508ab48:	31800044 	addi	r6,r6,1
 508ab4c:	d9800515 	stw	r6,20(sp)
 508ab50:	38800005 	stb	r2,0(r7)
 508ab54:	003edf06 	br	508a6d4 <__alt_data_end+0xfffbc4d4>
 508ab58:	d8000b15 	stw	zero,44(sp)
 508ab5c:	003c9f06 	br	5089ddc <__alt_data_end+0xfffbbbdc>
 508ab60:	903e7e1e 	bne	r18,zero,508a55c <__alt_data_end+0xfffbc35c>
 508ab64:	00800434 	movhi	r2,16
 508ab68:	10bfffc4 	addi	r2,r2,-1
 508ab6c:	9884703a 	and	r2,r19,r2
 508ab70:	1000ea1e 	bne	r2,zero,508af1c <_dtoa_r+0x1460>
 508ab74:	9cdffc2c 	andhi	r19,r19,32752
 508ab78:	9800e826 	beq	r19,zero,508af1c <_dtoa_r+0x1460>
 508ab7c:	d9c00817 	ldw	r7,32(sp)
 508ab80:	b5800044 	addi	r22,r22,1
 508ab84:	04c00044 	movi	r19,1
 508ab88:	39c00044 	addi	r7,r7,1
 508ab8c:	d9c00815 	stw	r7,32(sp)
 508ab90:	d8800d17 	ldw	r2,52(sp)
 508ab94:	103e721e 	bne	r2,zero,508a560 <__alt_data_end+0xfffbc360>
 508ab98:	00800044 	movi	r2,1
 508ab9c:	003e7906 	br	508a584 <__alt_data_end+0xfffbc384>
 508aba0:	8009883a 	mov	r4,r16
 508aba4:	508703c0 	call	508703c <__floatsidf>
 508aba8:	d9800f17 	ldw	r6,60(sp)
 508abac:	d9c01017 	ldw	r7,64(sp)
 508abb0:	1009883a 	mov	r4,r2
 508abb4:	180b883a 	mov	r5,r3
 508abb8:	5085fa80 	call	5085fa8 <__muldf3>
 508abbc:	000d883a 	mov	r6,zero
 508abc0:	01d00734 	movhi	r7,16412
 508abc4:	1009883a 	mov	r4,r2
 508abc8:	180b883a 	mov	r5,r3
 508abcc:	5084bbc0 	call	5084bbc <__adddf3>
 508abd0:	047f3034 	movhi	r17,64704
 508abd4:	1021883a 	mov	r16,r2
 508abd8:	1c63883a 	add	r17,r3,r17
 508abdc:	d9000f17 	ldw	r4,60(sp)
 508abe0:	d9401017 	ldw	r5,64(sp)
 508abe4:	000d883a 	mov	r6,zero
 508abe8:	01d00534 	movhi	r7,16404
 508abec:	50866c00 	call	50866c0 <__subdf3>
 508abf0:	800d883a 	mov	r6,r16
 508abf4:	880f883a 	mov	r7,r17
 508abf8:	1009883a 	mov	r4,r2
 508abfc:	180b883a 	mov	r5,r3
 508ac00:	102b883a 	mov	r21,r2
 508ac04:	1829883a 	mov	r20,r3
 508ac08:	5085dd80 	call	5085dd8 <__gedf2>
 508ac0c:	00806c16 	blt	zero,r2,508adc0 <_dtoa_r+0x1304>
 508ac10:	89e0003c 	xorhi	r7,r17,32768
 508ac14:	800d883a 	mov	r6,r16
 508ac18:	a809883a 	mov	r4,r21
 508ac1c:	a00b883a 	mov	r5,r20
 508ac20:	5085eb40 	call	5085eb4 <__ledf2>
 508ac24:	103d7e0e 	bge	r2,zero,508a220 <__alt_data_end+0xfffbc020>
 508ac28:	002b883a 	mov	r21,zero
 508ac2c:	0023883a 	mov	r17,zero
 508ac30:	003efb06 	br	508a820 <__alt_data_end+0xfffbc620>
 508ac34:	d8800717 	ldw	r2,28(sp)
 508ac38:	003bd006 	br	5089b7c <__alt_data_end+0xfffbb97c>
 508ac3c:	d9000a17 	ldw	r4,40(sp)
 508ac40:	d9800d17 	ldw	r6,52(sp)
 508ac44:	dd400a15 	stw	r21,40(sp)
 508ac48:	a905c83a 	sub	r2,r21,r4
 508ac4c:	308d883a 	add	r6,r6,r2
 508ac50:	d9800d15 	stw	r6,52(sp)
 508ac54:	002b883a 	mov	r21,zero
 508ac58:	003e0606 	br	508a474 <__alt_data_end+0xfffbc274>
 508ac5c:	9023883a 	mov	r17,r18
 508ac60:	9829883a 	mov	r20,r19
 508ac64:	04000084 	movi	r16,2
 508ac68:	003c9206 	br	5089eb4 <__alt_data_end+0xfffbbcb4>
 508ac6c:	04000044 	movi	r16,1
 508ac70:	dc000c15 	stw	r16,48(sp)
 508ac74:	dc000615 	stw	r16,24(sp)
 508ac78:	dc002215 	stw	r16,136(sp)
 508ac7c:	e0001115 	stw	zero,68(fp)
 508ac80:	000b883a 	mov	r5,zero
 508ac84:	003c6906 	br	5089e2c <__alt_data_end+0xfffbbc2c>
 508ac88:	3021883a 	mov	r16,r6
 508ac8c:	003ffb06 	br	508ac7c <__alt_data_end+0xfffbca7c>
 508ac90:	1000021e 	bne	r2,zero,508ac9c <_dtoa_r+0x11e0>
 508ac94:	4200004c 	andi	r8,r8,1
 508ac98:	403e7d1e 	bne	r8,zero,508a690 <__alt_data_end+0xfffbc490>
 508ac9c:	01000c04 	movi	r4,48
 508aca0:	00000106 	br	508aca8 <_dtoa_r+0x11ec>
 508aca4:	102f883a 	mov	r23,r2
 508aca8:	b8bfffc4 	addi	r2,r23,-1
 508acac:	10c00007 	ldb	r3,0(r2)
 508acb0:	193ffc26 	beq	r3,r4,508aca4 <__alt_data_end+0xfffbcaa4>
 508acb4:	003e8706 	br	508a6d4 <__alt_data_end+0xfffbc4d4>
 508acb8:	d8800517 	ldw	r2,20(sp)
 508acbc:	00a3c83a 	sub	r17,zero,r2
 508acc0:	8800a426 	beq	r17,zero,508af54 <_dtoa_r+0x1498>
 508acc4:	888003cc 	andi	r2,r17,15
 508acc8:	100490fa 	slli	r2,r2,3
 508accc:	00c14274 	movhi	r3,1289
 508acd0:	18d15d04 	addi	r3,r3,17780
 508acd4:	1885883a 	add	r2,r3,r2
 508acd8:	11800017 	ldw	r6,0(r2)
 508acdc:	11c00117 	ldw	r7,4(r2)
 508ace0:	9009883a 	mov	r4,r18
 508ace4:	980b883a 	mov	r5,r19
 508ace8:	8823d13a 	srai	r17,r17,4
 508acec:	5085fa80 	call	5085fa8 <__muldf3>
 508acf0:	d8800f15 	stw	r2,60(sp)
 508acf4:	d8c01015 	stw	r3,64(sp)
 508acf8:	8800e826 	beq	r17,zero,508b09c <_dtoa_r+0x15e0>
 508acfc:	05014274 	movhi	r20,1289
 508ad00:	a5115304 	addi	r20,r20,17740
 508ad04:	04000084 	movi	r16,2
 508ad08:	8980004c 	andi	r6,r17,1
 508ad0c:	1009883a 	mov	r4,r2
 508ad10:	8823d07a 	srai	r17,r17,1
 508ad14:	180b883a 	mov	r5,r3
 508ad18:	30000426 	beq	r6,zero,508ad2c <_dtoa_r+0x1270>
 508ad1c:	a1800017 	ldw	r6,0(r20)
 508ad20:	a1c00117 	ldw	r7,4(r20)
 508ad24:	84000044 	addi	r16,r16,1
 508ad28:	5085fa80 	call	5085fa8 <__muldf3>
 508ad2c:	a5000204 	addi	r20,r20,8
 508ad30:	883ff51e 	bne	r17,zero,508ad08 <__alt_data_end+0xfffbcb08>
 508ad34:	d8800f15 	stw	r2,60(sp)
 508ad38:	d8c01015 	stw	r3,64(sp)
 508ad3c:	003c7606 	br	5089f18 <__alt_data_end+0xfffbbd18>
 508ad40:	00c00c04 	movi	r3,48
 508ad44:	10c00005 	stb	r3,0(r2)
 508ad48:	d8c00517 	ldw	r3,20(sp)
 508ad4c:	bd3fffc3 	ldbu	r20,-1(r23)
 508ad50:	18c00044 	addi	r3,r3,1
 508ad54:	d8c00515 	stw	r3,20(sp)
 508ad58:	003db906 	br	508a440 <__alt_data_end+0xfffbc240>
 508ad5c:	89400117 	ldw	r5,4(r17)
 508ad60:	e009883a 	mov	r4,fp
 508ad64:	508d1580 	call	508d158 <_Balloc>
 508ad68:	89800417 	ldw	r6,16(r17)
 508ad6c:	89400304 	addi	r5,r17,12
 508ad70:	11000304 	addi	r4,r2,12
 508ad74:	31800084 	addi	r6,r6,2
 508ad78:	318d883a 	add	r6,r6,r6
 508ad7c:	318d883a 	add	r6,r6,r6
 508ad80:	1027883a 	mov	r19,r2
 508ad84:	508cd8c0 	call	508cd8c <memcpy>
 508ad88:	01800044 	movi	r6,1
 508ad8c:	980b883a 	mov	r5,r19
 508ad90:	e009883a 	mov	r4,fp
 508ad94:	508d8d80 	call	508d8d8 <__lshift>
 508ad98:	1029883a 	mov	r20,r2
 508ad9c:	003ecc06 	br	508a8d0 <__alt_data_end+0xfffbc6d0>
 508ada0:	00800e44 	movi	r2,57
 508ada4:	90809026 	beq	r18,r2,508afe8 <_dtoa_r+0x152c>
 508ada8:	92000044 	addi	r8,r18,1
 508adac:	003f1f06 	br	508aa2c <__alt_data_end+0xfffbc82c>
 508adb0:	9011883a 	mov	r8,r18
 508adb4:	8825883a 	mov	r18,r17
 508adb8:	a023883a 	mov	r17,r20
 508adbc:	003e2906 	br	508a664 <__alt_data_end+0xfffbc464>
 508adc0:	002b883a 	mov	r21,zero
 508adc4:	0023883a 	mov	r17,zero
 508adc8:	003f5406 	br	508ab1c <__alt_data_end+0xfffbc91c>
 508adcc:	61bfffc4 	addi	r6,r12,-1
 508add0:	300490fa 	slli	r2,r6,3
 508add4:	00c14274 	movhi	r3,1289
 508add8:	18d15d04 	addi	r3,r3,17780
 508addc:	1885883a 	add	r2,r3,r2
 508ade0:	11000017 	ldw	r4,0(r2)
 508ade4:	11400117 	ldw	r5,4(r2)
 508ade8:	d8800717 	ldw	r2,28(sp)
 508adec:	880f883a 	mov	r7,r17
 508adf0:	d9801215 	stw	r6,72(sp)
 508adf4:	800d883a 	mov	r6,r16
 508adf8:	db001615 	stw	r12,88(sp)
 508adfc:	15c00044 	addi	r23,r2,1
 508ae00:	5085fa80 	call	5085fa8 <__muldf3>
 508ae04:	d9401017 	ldw	r5,64(sp)
 508ae08:	d9000f17 	ldw	r4,60(sp)
 508ae0c:	d8c01515 	stw	r3,84(sp)
 508ae10:	d8801415 	stw	r2,80(sp)
 508ae14:	5086fbc0 	call	5086fbc <__fixdfsi>
 508ae18:	1009883a 	mov	r4,r2
 508ae1c:	1021883a 	mov	r16,r2
 508ae20:	508703c0 	call	508703c <__floatsidf>
 508ae24:	d9000f17 	ldw	r4,60(sp)
 508ae28:	d9401017 	ldw	r5,64(sp)
 508ae2c:	100d883a 	mov	r6,r2
 508ae30:	180f883a 	mov	r7,r3
 508ae34:	50866c00 	call	50866c0 <__subdf3>
 508ae38:	1829883a 	mov	r20,r3
 508ae3c:	d8c00717 	ldw	r3,28(sp)
 508ae40:	84000c04 	addi	r16,r16,48
 508ae44:	1023883a 	mov	r17,r2
 508ae48:	1c000005 	stb	r16,0(r3)
 508ae4c:	db001617 	ldw	r12,88(sp)
 508ae50:	00800044 	movi	r2,1
 508ae54:	60802226 	beq	r12,r2,508aee0 <_dtoa_r+0x1424>
 508ae58:	d9c00717 	ldw	r7,28(sp)
 508ae5c:	8805883a 	mov	r2,r17
 508ae60:	b82b883a 	mov	r21,r23
 508ae64:	3b19883a 	add	r12,r7,r12
 508ae68:	6023883a 	mov	r17,r12
 508ae6c:	a007883a 	mov	r3,r20
 508ae70:	dc800f15 	stw	r18,60(sp)
 508ae74:	000d883a 	mov	r6,zero
 508ae78:	01d00934 	movhi	r7,16420
 508ae7c:	1009883a 	mov	r4,r2
 508ae80:	180b883a 	mov	r5,r3
 508ae84:	5085fa80 	call	5085fa8 <__muldf3>
 508ae88:	180b883a 	mov	r5,r3
 508ae8c:	1009883a 	mov	r4,r2
 508ae90:	1829883a 	mov	r20,r3
 508ae94:	1025883a 	mov	r18,r2
 508ae98:	5086fbc0 	call	5086fbc <__fixdfsi>
 508ae9c:	1009883a 	mov	r4,r2
 508aea0:	1021883a 	mov	r16,r2
 508aea4:	508703c0 	call	508703c <__floatsidf>
 508aea8:	100d883a 	mov	r6,r2
 508aeac:	180f883a 	mov	r7,r3
 508aeb0:	9009883a 	mov	r4,r18
 508aeb4:	a00b883a 	mov	r5,r20
 508aeb8:	84000c04 	addi	r16,r16,48
 508aebc:	50866c00 	call	50866c0 <__subdf3>
 508aec0:	ad400044 	addi	r21,r21,1
 508aec4:	ac3fffc5 	stb	r16,-1(r21)
 508aec8:	ac7fea1e 	bne	r21,r17,508ae74 <__alt_data_end+0xfffbcc74>
 508aecc:	1023883a 	mov	r17,r2
 508aed0:	d8801217 	ldw	r2,72(sp)
 508aed4:	dc800f17 	ldw	r18,60(sp)
 508aed8:	1829883a 	mov	r20,r3
 508aedc:	b8af883a 	add	r23,r23,r2
 508aee0:	d9001417 	ldw	r4,80(sp)
 508aee4:	d9401517 	ldw	r5,84(sp)
 508aee8:	000d883a 	mov	r6,zero
 508aeec:	01cff834 	movhi	r7,16352
 508aef0:	5084bbc0 	call	5084bbc <__adddf3>
 508aef4:	880d883a 	mov	r6,r17
 508aef8:	a00f883a 	mov	r7,r20
 508aefc:	1009883a 	mov	r4,r2
 508af00:	180b883a 	mov	r5,r3
 508af04:	5085eb40 	call	5085eb4 <__ledf2>
 508af08:	10003e0e 	bge	r2,zero,508b004 <_dtoa_r+0x1548>
 508af0c:	d9001317 	ldw	r4,76(sp)
 508af10:	bd3fffc3 	ldbu	r20,-1(r23)
 508af14:	d9000515 	stw	r4,20(sp)
 508af18:	003d3b06 	br	508a408 <__alt_data_end+0xfffbc208>
 508af1c:	0027883a 	mov	r19,zero
 508af20:	003f1b06 	br	508ab90 <__alt_data_end+0xfffbc990>
 508af24:	d8800817 	ldw	r2,32(sp)
 508af28:	11e9c83a 	sub	r20,r2,r7
 508af2c:	0005883a 	mov	r2,zero
 508af30:	003d5406 	br	508a484 <__alt_data_end+0xfffbc284>
 508af34:	00800044 	movi	r2,1
 508af38:	003dc706 	br	508a658 <__alt_data_end+0xfffbc458>
 508af3c:	d8c00217 	ldw	r3,8(sp)
 508af40:	00800d84 	movi	r2,54
 508af44:	dd400a17 	ldw	r21,40(sp)
 508af48:	10c5c83a 	sub	r2,r2,r3
 508af4c:	dd000817 	ldw	r20,32(sp)
 508af50:	003d4c06 	br	508a484 <__alt_data_end+0xfffbc284>
 508af54:	dc800f15 	stw	r18,60(sp)
 508af58:	dcc01015 	stw	r19,64(sp)
 508af5c:	04000084 	movi	r16,2
 508af60:	003bed06 	br	5089f18 <__alt_data_end+0xfffbbd18>
 508af64:	d9000617 	ldw	r4,24(sp)
 508af68:	203f0d26 	beq	r4,zero,508aba0 <__alt_data_end+0xfffbc9a0>
 508af6c:	d9800c17 	ldw	r6,48(sp)
 508af70:	01bcab0e 	bge	zero,r6,508a220 <__alt_data_end+0xfffbc020>
 508af74:	d9401017 	ldw	r5,64(sp)
 508af78:	d9000f17 	ldw	r4,60(sp)
 508af7c:	000d883a 	mov	r6,zero
 508af80:	01d00934 	movhi	r7,16420
 508af84:	5085fa80 	call	5085fa8 <__muldf3>
 508af88:	81000044 	addi	r4,r16,1
 508af8c:	d8800f15 	stw	r2,60(sp)
 508af90:	d8c01015 	stw	r3,64(sp)
 508af94:	508703c0 	call	508703c <__floatsidf>
 508af98:	d9800f17 	ldw	r6,60(sp)
 508af9c:	d9c01017 	ldw	r7,64(sp)
 508afa0:	1009883a 	mov	r4,r2
 508afa4:	180b883a 	mov	r5,r3
 508afa8:	5085fa80 	call	5085fa8 <__muldf3>
 508afac:	01d00734 	movhi	r7,16412
 508afb0:	000d883a 	mov	r6,zero
 508afb4:	1009883a 	mov	r4,r2
 508afb8:	180b883a 	mov	r5,r3
 508afbc:	5084bbc0 	call	5084bbc <__adddf3>
 508afc0:	d9c00517 	ldw	r7,20(sp)
 508afc4:	047f3034 	movhi	r17,64704
 508afc8:	1021883a 	mov	r16,r2
 508afcc:	39ffffc4 	addi	r7,r7,-1
 508afd0:	d9c01315 	stw	r7,76(sp)
 508afd4:	1c63883a 	add	r17,r3,r17
 508afd8:	db000c17 	ldw	r12,48(sp)
 508afdc:	003bea06 	br	5089f88 <__alt_data_end+0xfffbbd88>
 508afe0:	dc000915 	stw	r16,36(sp)
 508afe4:	003e0e06 	br	508a820 <__alt_data_end+0xfffbc620>
 508afe8:	01000e44 	movi	r4,57
 508afec:	8825883a 	mov	r18,r17
 508aff0:	9dc00044 	addi	r23,r19,1
 508aff4:	99000005 	stb	r4,0(r19)
 508aff8:	a023883a 	mov	r17,r20
 508affc:	dc000915 	stw	r16,36(sp)
 508b000:	003da406 	br	508a694 <__alt_data_end+0xfffbc494>
 508b004:	d9801417 	ldw	r6,80(sp)
 508b008:	d9c01517 	ldw	r7,84(sp)
 508b00c:	0009883a 	mov	r4,zero
 508b010:	014ff834 	movhi	r5,16352
 508b014:	50866c00 	call	50866c0 <__subdf3>
 508b018:	880d883a 	mov	r6,r17
 508b01c:	a00f883a 	mov	r7,r20
 508b020:	1009883a 	mov	r4,r2
 508b024:	180b883a 	mov	r5,r3
 508b028:	5085dd80 	call	5085dd8 <__gedf2>
 508b02c:	00bc7c0e 	bge	zero,r2,508a220 <__alt_data_end+0xfffbc020>
 508b030:	01000c04 	movi	r4,48
 508b034:	00000106 	br	508b03c <_dtoa_r+0x1580>
 508b038:	102f883a 	mov	r23,r2
 508b03c:	b8bfffc4 	addi	r2,r23,-1
 508b040:	10c00007 	ldb	r3,0(r2)
 508b044:	193ffc26 	beq	r3,r4,508b038 <__alt_data_end+0xfffbce38>
 508b048:	d9801317 	ldw	r6,76(sp)
 508b04c:	d9800515 	stw	r6,20(sp)
 508b050:	003c4406 	br	508a164 <__alt_data_end+0xfffbbf64>
 508b054:	d9801317 	ldw	r6,76(sp)
 508b058:	d9800515 	stw	r6,20(sp)
 508b05c:	003cea06 	br	508a408 <__alt_data_end+0xfffbc208>
 508b060:	dd800f17 	ldw	r22,60(sp)
 508b064:	dcc01017 	ldw	r19,64(sp)
 508b068:	dc801217 	ldw	r18,72(sp)
 508b06c:	003c6c06 	br	508a220 <__alt_data_end+0xfffbc020>
 508b070:	903e031e 	bne	r18,zero,508a880 <__alt_data_end+0xfffbc680>
 508b074:	003ebb06 	br	508ab64 <__alt_data_end+0xfffbc964>
 508b078:	103e6c1e 	bne	r2,zero,508aa2c <__alt_data_end+0xfffbc82c>
 508b07c:	4080004c 	andi	r2,r8,1
 508b080:	103e6a26 	beq	r2,zero,508aa2c <__alt_data_end+0xfffbc82c>
 508b084:	003e6606 	br	508aa20 <__alt_data_end+0xfffbc820>
 508b088:	d8c00317 	ldw	r3,12(sp)
 508b08c:	00800084 	movi	r2,2
 508b090:	10c02916 	blt	r2,r3,508b138 <_dtoa_r+0x167c>
 508b094:	d9000c17 	ldw	r4,48(sp)
 508b098:	003e8806 	br	508aabc <__alt_data_end+0xfffbc8bc>
 508b09c:	04000084 	movi	r16,2
 508b0a0:	003b9d06 	br	5089f18 <__alt_data_end+0xfffbbd18>
 508b0a4:	d9001317 	ldw	r4,76(sp)
 508b0a8:	d9000515 	stw	r4,20(sp)
 508b0ac:	003cd606 	br	508a408 <__alt_data_end+0xfffbc208>
 508b0b0:	d8801317 	ldw	r2,76(sp)
 508b0b4:	d8800515 	stw	r2,20(sp)
 508b0b8:	003c2a06 	br	508a164 <__alt_data_end+0xfffbbf64>
 508b0bc:	d9800317 	ldw	r6,12(sp)
 508b0c0:	00800084 	movi	r2,2
 508b0c4:	11801516 	blt	r2,r6,508b11c <_dtoa_r+0x1660>
 508b0c8:	d9c00c17 	ldw	r7,48(sp)
 508b0cc:	d9c00615 	stw	r7,24(sp)
 508b0d0:	003df706 	br	508a8b0 <__alt_data_end+0xfffbc6b0>
 508b0d4:	193d3926 	beq	r3,r4,508a5bc <__alt_data_end+0xfffbc3bc>
 508b0d8:	00c00f04 	movi	r3,60
 508b0dc:	1885c83a 	sub	r2,r3,r2
 508b0e0:	003ddf06 	br	508a860 <__alt_data_end+0xfffbc660>
 508b0e4:	e009883a 	mov	r4,fp
 508b0e8:	e0001115 	stw	zero,68(fp)
 508b0ec:	000b883a 	mov	r5,zero
 508b0f0:	508d1580 	call	508d158 <_Balloc>
 508b0f4:	d8800715 	stw	r2,28(sp)
 508b0f8:	d8c00717 	ldw	r3,28(sp)
 508b0fc:	00bfffc4 	movi	r2,-1
 508b100:	01000044 	movi	r4,1
 508b104:	d8800c15 	stw	r2,48(sp)
 508b108:	e0c01015 	stw	r3,64(fp)
 508b10c:	d9000b15 	stw	r4,44(sp)
 508b110:	d8800615 	stw	r2,24(sp)
 508b114:	d8002215 	stw	zero,136(sp)
 508b118:	003c4106 	br	508a220 <__alt_data_end+0xfffbc020>
 508b11c:	d8c00c17 	ldw	r3,48(sp)
 508b120:	d8c00615 	stw	r3,24(sp)
 508b124:	003e7006 	br	508aae8 <__alt_data_end+0xfffbc8e8>
 508b128:	04400044 	movi	r17,1
 508b12c:	003b2006 	br	5089db0 <__alt_data_end+0xfffbbbb0>
 508b130:	000b883a 	mov	r5,zero
 508b134:	003b3d06 	br	5089e2c <__alt_data_end+0xfffbbc2c>
 508b138:	d8800c17 	ldw	r2,48(sp)
 508b13c:	d8800615 	stw	r2,24(sp)
 508b140:	003e6906 	br	508aae8 <__alt_data_end+0xfffbc8e8>

0508b144 <__sflush_r>:
 508b144:	2880030b 	ldhu	r2,12(r5)
 508b148:	defffb04 	addi	sp,sp,-20
 508b14c:	dcc00315 	stw	r19,12(sp)
 508b150:	dc400115 	stw	r17,4(sp)
 508b154:	dfc00415 	stw	ra,16(sp)
 508b158:	dc800215 	stw	r18,8(sp)
 508b15c:	dc000015 	stw	r16,0(sp)
 508b160:	10c0020c 	andi	r3,r2,8
 508b164:	2823883a 	mov	r17,r5
 508b168:	2027883a 	mov	r19,r4
 508b16c:	1800311e 	bne	r3,zero,508b234 <__sflush_r+0xf0>
 508b170:	28c00117 	ldw	r3,4(r5)
 508b174:	10820014 	ori	r2,r2,2048
 508b178:	2880030d 	sth	r2,12(r5)
 508b17c:	00c04b0e 	bge	zero,r3,508b2ac <__sflush_r+0x168>
 508b180:	8a000a17 	ldw	r8,40(r17)
 508b184:	40002326 	beq	r8,zero,508b214 <__sflush_r+0xd0>
 508b188:	9c000017 	ldw	r16,0(r19)
 508b18c:	10c4000c 	andi	r3,r2,4096
 508b190:	98000015 	stw	zero,0(r19)
 508b194:	18004826 	beq	r3,zero,508b2b8 <__sflush_r+0x174>
 508b198:	89801417 	ldw	r6,80(r17)
 508b19c:	10c0010c 	andi	r3,r2,4
 508b1a0:	18000626 	beq	r3,zero,508b1bc <__sflush_r+0x78>
 508b1a4:	88c00117 	ldw	r3,4(r17)
 508b1a8:	88800c17 	ldw	r2,48(r17)
 508b1ac:	30cdc83a 	sub	r6,r6,r3
 508b1b0:	10000226 	beq	r2,zero,508b1bc <__sflush_r+0x78>
 508b1b4:	88800f17 	ldw	r2,60(r17)
 508b1b8:	308dc83a 	sub	r6,r6,r2
 508b1bc:	89400717 	ldw	r5,28(r17)
 508b1c0:	000f883a 	mov	r7,zero
 508b1c4:	9809883a 	mov	r4,r19
 508b1c8:	403ee83a 	callr	r8
 508b1cc:	00ffffc4 	movi	r3,-1
 508b1d0:	10c04426 	beq	r2,r3,508b2e4 <__sflush_r+0x1a0>
 508b1d4:	88c0030b 	ldhu	r3,12(r17)
 508b1d8:	89000417 	ldw	r4,16(r17)
 508b1dc:	88000115 	stw	zero,4(r17)
 508b1e0:	197dffcc 	andi	r5,r3,63487
 508b1e4:	8940030d 	sth	r5,12(r17)
 508b1e8:	89000015 	stw	r4,0(r17)
 508b1ec:	18c4000c 	andi	r3,r3,4096
 508b1f0:	18002c1e 	bne	r3,zero,508b2a4 <__sflush_r+0x160>
 508b1f4:	89400c17 	ldw	r5,48(r17)
 508b1f8:	9c000015 	stw	r16,0(r19)
 508b1fc:	28000526 	beq	r5,zero,508b214 <__sflush_r+0xd0>
 508b200:	88801004 	addi	r2,r17,64
 508b204:	28800226 	beq	r5,r2,508b210 <__sflush_r+0xcc>
 508b208:	9809883a 	mov	r4,r19
 508b20c:	508b8b00 	call	508b8b0 <_free_r>
 508b210:	88000c15 	stw	zero,48(r17)
 508b214:	0005883a 	mov	r2,zero
 508b218:	dfc00417 	ldw	ra,16(sp)
 508b21c:	dcc00317 	ldw	r19,12(sp)
 508b220:	dc800217 	ldw	r18,8(sp)
 508b224:	dc400117 	ldw	r17,4(sp)
 508b228:	dc000017 	ldw	r16,0(sp)
 508b22c:	dec00504 	addi	sp,sp,20
 508b230:	f800283a 	ret
 508b234:	2c800417 	ldw	r18,16(r5)
 508b238:	903ff626 	beq	r18,zero,508b214 <__alt_data_end+0xfffbd014>
 508b23c:	2c000017 	ldw	r16,0(r5)
 508b240:	108000cc 	andi	r2,r2,3
 508b244:	2c800015 	stw	r18,0(r5)
 508b248:	84a1c83a 	sub	r16,r16,r18
 508b24c:	1000131e 	bne	r2,zero,508b29c <__sflush_r+0x158>
 508b250:	28800517 	ldw	r2,20(r5)
 508b254:	88800215 	stw	r2,8(r17)
 508b258:	04000316 	blt	zero,r16,508b268 <__sflush_r+0x124>
 508b25c:	003fed06 	br	508b214 <__alt_data_end+0xfffbd014>
 508b260:	90a5883a 	add	r18,r18,r2
 508b264:	043feb0e 	bge	zero,r16,508b214 <__alt_data_end+0xfffbd014>
 508b268:	88800917 	ldw	r2,36(r17)
 508b26c:	89400717 	ldw	r5,28(r17)
 508b270:	800f883a 	mov	r7,r16
 508b274:	900d883a 	mov	r6,r18
 508b278:	9809883a 	mov	r4,r19
 508b27c:	103ee83a 	callr	r2
 508b280:	80a1c83a 	sub	r16,r16,r2
 508b284:	00bff616 	blt	zero,r2,508b260 <__alt_data_end+0xfffbd060>
 508b288:	88c0030b 	ldhu	r3,12(r17)
 508b28c:	00bfffc4 	movi	r2,-1
 508b290:	18c01014 	ori	r3,r3,64
 508b294:	88c0030d 	sth	r3,12(r17)
 508b298:	003fdf06 	br	508b218 <__alt_data_end+0xfffbd018>
 508b29c:	0005883a 	mov	r2,zero
 508b2a0:	003fec06 	br	508b254 <__alt_data_end+0xfffbd054>
 508b2a4:	88801415 	stw	r2,80(r17)
 508b2a8:	003fd206 	br	508b1f4 <__alt_data_end+0xfffbcff4>
 508b2ac:	28c00f17 	ldw	r3,60(r5)
 508b2b0:	00ffb316 	blt	zero,r3,508b180 <__alt_data_end+0xfffbcf80>
 508b2b4:	003fd706 	br	508b214 <__alt_data_end+0xfffbd014>
 508b2b8:	89400717 	ldw	r5,28(r17)
 508b2bc:	000d883a 	mov	r6,zero
 508b2c0:	01c00044 	movi	r7,1
 508b2c4:	9809883a 	mov	r4,r19
 508b2c8:	403ee83a 	callr	r8
 508b2cc:	100d883a 	mov	r6,r2
 508b2d0:	00bfffc4 	movi	r2,-1
 508b2d4:	30801426 	beq	r6,r2,508b328 <__sflush_r+0x1e4>
 508b2d8:	8880030b 	ldhu	r2,12(r17)
 508b2dc:	8a000a17 	ldw	r8,40(r17)
 508b2e0:	003fae06 	br	508b19c <__alt_data_end+0xfffbcf9c>
 508b2e4:	98c00017 	ldw	r3,0(r19)
 508b2e8:	183fba26 	beq	r3,zero,508b1d4 <__alt_data_end+0xfffbcfd4>
 508b2ec:	01000744 	movi	r4,29
 508b2f0:	19000626 	beq	r3,r4,508b30c <__sflush_r+0x1c8>
 508b2f4:	01000584 	movi	r4,22
 508b2f8:	19000426 	beq	r3,r4,508b30c <__sflush_r+0x1c8>
 508b2fc:	88c0030b 	ldhu	r3,12(r17)
 508b300:	18c01014 	ori	r3,r3,64
 508b304:	88c0030d 	sth	r3,12(r17)
 508b308:	003fc306 	br	508b218 <__alt_data_end+0xfffbd018>
 508b30c:	8880030b 	ldhu	r2,12(r17)
 508b310:	88c00417 	ldw	r3,16(r17)
 508b314:	88000115 	stw	zero,4(r17)
 508b318:	10bdffcc 	andi	r2,r2,63487
 508b31c:	8880030d 	sth	r2,12(r17)
 508b320:	88c00015 	stw	r3,0(r17)
 508b324:	003fb306 	br	508b1f4 <__alt_data_end+0xfffbcff4>
 508b328:	98800017 	ldw	r2,0(r19)
 508b32c:	103fea26 	beq	r2,zero,508b2d8 <__alt_data_end+0xfffbd0d8>
 508b330:	00c00744 	movi	r3,29
 508b334:	10c00226 	beq	r2,r3,508b340 <__sflush_r+0x1fc>
 508b338:	00c00584 	movi	r3,22
 508b33c:	10c0031e 	bne	r2,r3,508b34c <__sflush_r+0x208>
 508b340:	9c000015 	stw	r16,0(r19)
 508b344:	0005883a 	mov	r2,zero
 508b348:	003fb306 	br	508b218 <__alt_data_end+0xfffbd018>
 508b34c:	88c0030b 	ldhu	r3,12(r17)
 508b350:	3005883a 	mov	r2,r6
 508b354:	18c01014 	ori	r3,r3,64
 508b358:	88c0030d 	sth	r3,12(r17)
 508b35c:	003fae06 	br	508b218 <__alt_data_end+0xfffbd018>

0508b360 <_fflush_r>:
 508b360:	defffd04 	addi	sp,sp,-12
 508b364:	dc000115 	stw	r16,4(sp)
 508b368:	dfc00215 	stw	ra,8(sp)
 508b36c:	2021883a 	mov	r16,r4
 508b370:	20000226 	beq	r4,zero,508b37c <_fflush_r+0x1c>
 508b374:	20800e17 	ldw	r2,56(r4)
 508b378:	10000c26 	beq	r2,zero,508b3ac <_fflush_r+0x4c>
 508b37c:	2880030f 	ldh	r2,12(r5)
 508b380:	1000051e 	bne	r2,zero,508b398 <_fflush_r+0x38>
 508b384:	0005883a 	mov	r2,zero
 508b388:	dfc00217 	ldw	ra,8(sp)
 508b38c:	dc000117 	ldw	r16,4(sp)
 508b390:	dec00304 	addi	sp,sp,12
 508b394:	f800283a 	ret
 508b398:	8009883a 	mov	r4,r16
 508b39c:	dfc00217 	ldw	ra,8(sp)
 508b3a0:	dc000117 	ldw	r16,4(sp)
 508b3a4:	dec00304 	addi	sp,sp,12
 508b3a8:	508b1441 	jmpi	508b144 <__sflush_r>
 508b3ac:	d9400015 	stw	r5,0(sp)
 508b3b0:	508b73c0 	call	508b73c <__sinit>
 508b3b4:	d9400017 	ldw	r5,0(sp)
 508b3b8:	003ff006 	br	508b37c <__alt_data_end+0xfffbd17c>

0508b3bc <fflush>:
 508b3bc:	20000526 	beq	r4,zero,508b3d4 <fflush+0x18>
 508b3c0:	00814274 	movhi	r2,1289
 508b3c4:	10986204 	addi	r2,r2,24968
 508b3c8:	200b883a 	mov	r5,r4
 508b3cc:	11000017 	ldw	r4,0(r2)
 508b3d0:	508b3601 	jmpi	508b360 <_fflush_r>
 508b3d4:	00814274 	movhi	r2,1289
 508b3d8:	10986104 	addi	r2,r2,24964
 508b3dc:	11000017 	ldw	r4,0(r2)
 508b3e0:	01414274 	movhi	r5,1289
 508b3e4:	296cd804 	addi	r5,r5,-19616
 508b3e8:	508c1401 	jmpi	508c140 <_fwalk_reent>

0508b3ec <__fp_unlock>:
 508b3ec:	0005883a 	mov	r2,zero
 508b3f0:	f800283a 	ret

0508b3f4 <_cleanup_r>:
 508b3f4:	01414274 	movhi	r5,1289
 508b3f8:	2940e904 	addi	r5,r5,932
 508b3fc:	508c1401 	jmpi	508c140 <_fwalk_reent>

0508b400 <__sinit.part.1>:
 508b400:	defff704 	addi	sp,sp,-36
 508b404:	00c14274 	movhi	r3,1289
 508b408:	dfc00815 	stw	ra,32(sp)
 508b40c:	ddc00715 	stw	r23,28(sp)
 508b410:	dd800615 	stw	r22,24(sp)
 508b414:	dd400515 	stw	r21,20(sp)
 508b418:	dd000415 	stw	r20,16(sp)
 508b41c:	dcc00315 	stw	r19,12(sp)
 508b420:	dc800215 	stw	r18,8(sp)
 508b424:	dc400115 	stw	r17,4(sp)
 508b428:	dc000015 	stw	r16,0(sp)
 508b42c:	18ecfd04 	addi	r3,r3,-19468
 508b430:	24000117 	ldw	r16,4(r4)
 508b434:	20c00f15 	stw	r3,60(r4)
 508b438:	2080bb04 	addi	r2,r4,748
 508b43c:	00c000c4 	movi	r3,3
 508b440:	20c0b915 	stw	r3,740(r4)
 508b444:	2080ba15 	stw	r2,744(r4)
 508b448:	2000b815 	stw	zero,736(r4)
 508b44c:	05c00204 	movi	r23,8
 508b450:	00800104 	movi	r2,4
 508b454:	2025883a 	mov	r18,r4
 508b458:	b80d883a 	mov	r6,r23
 508b45c:	81001704 	addi	r4,r16,92
 508b460:	000b883a 	mov	r5,zero
 508b464:	80000015 	stw	zero,0(r16)
 508b468:	80000115 	stw	zero,4(r16)
 508b46c:	80000215 	stw	zero,8(r16)
 508b470:	8080030d 	sth	r2,12(r16)
 508b474:	80001915 	stw	zero,100(r16)
 508b478:	8000038d 	sth	zero,14(r16)
 508b47c:	80000415 	stw	zero,16(r16)
 508b480:	80000515 	stw	zero,20(r16)
 508b484:	80000615 	stw	zero,24(r16)
 508b488:	508d0300 	call	508d030 <memset>
 508b48c:	05814274 	movhi	r22,1289
 508b490:	94400217 	ldw	r17,8(r18)
 508b494:	05414274 	movhi	r21,1289
 508b498:	05014274 	movhi	r20,1289
 508b49c:	04c14274 	movhi	r19,1289
 508b4a0:	b5ba1d04 	addi	r22,r22,-6028
 508b4a4:	ad7a3404 	addi	r21,r21,-5936
 508b4a8:	a53a5304 	addi	r20,r20,-5812
 508b4ac:	9cfa6a04 	addi	r19,r19,-5720
 508b4b0:	85800815 	stw	r22,32(r16)
 508b4b4:	85400915 	stw	r21,36(r16)
 508b4b8:	85000a15 	stw	r20,40(r16)
 508b4bc:	84c00b15 	stw	r19,44(r16)
 508b4c0:	84000715 	stw	r16,28(r16)
 508b4c4:	00800284 	movi	r2,10
 508b4c8:	8880030d 	sth	r2,12(r17)
 508b4cc:	00800044 	movi	r2,1
 508b4d0:	b80d883a 	mov	r6,r23
 508b4d4:	89001704 	addi	r4,r17,92
 508b4d8:	000b883a 	mov	r5,zero
 508b4dc:	88000015 	stw	zero,0(r17)
 508b4e0:	88000115 	stw	zero,4(r17)
 508b4e4:	88000215 	stw	zero,8(r17)
 508b4e8:	88001915 	stw	zero,100(r17)
 508b4ec:	8880038d 	sth	r2,14(r17)
 508b4f0:	88000415 	stw	zero,16(r17)
 508b4f4:	88000515 	stw	zero,20(r17)
 508b4f8:	88000615 	stw	zero,24(r17)
 508b4fc:	508d0300 	call	508d030 <memset>
 508b500:	94000317 	ldw	r16,12(r18)
 508b504:	00800484 	movi	r2,18
 508b508:	8c400715 	stw	r17,28(r17)
 508b50c:	8d800815 	stw	r22,32(r17)
 508b510:	8d400915 	stw	r21,36(r17)
 508b514:	8d000a15 	stw	r20,40(r17)
 508b518:	8cc00b15 	stw	r19,44(r17)
 508b51c:	8080030d 	sth	r2,12(r16)
 508b520:	00800084 	movi	r2,2
 508b524:	80000015 	stw	zero,0(r16)
 508b528:	80000115 	stw	zero,4(r16)
 508b52c:	80000215 	stw	zero,8(r16)
 508b530:	80001915 	stw	zero,100(r16)
 508b534:	8080038d 	sth	r2,14(r16)
 508b538:	80000415 	stw	zero,16(r16)
 508b53c:	80000515 	stw	zero,20(r16)
 508b540:	80000615 	stw	zero,24(r16)
 508b544:	b80d883a 	mov	r6,r23
 508b548:	000b883a 	mov	r5,zero
 508b54c:	81001704 	addi	r4,r16,92
 508b550:	508d0300 	call	508d030 <memset>
 508b554:	00800044 	movi	r2,1
 508b558:	84000715 	stw	r16,28(r16)
 508b55c:	85800815 	stw	r22,32(r16)
 508b560:	85400915 	stw	r21,36(r16)
 508b564:	85000a15 	stw	r20,40(r16)
 508b568:	84c00b15 	stw	r19,44(r16)
 508b56c:	90800e15 	stw	r2,56(r18)
 508b570:	dfc00817 	ldw	ra,32(sp)
 508b574:	ddc00717 	ldw	r23,28(sp)
 508b578:	dd800617 	ldw	r22,24(sp)
 508b57c:	dd400517 	ldw	r21,20(sp)
 508b580:	dd000417 	ldw	r20,16(sp)
 508b584:	dcc00317 	ldw	r19,12(sp)
 508b588:	dc800217 	ldw	r18,8(sp)
 508b58c:	dc400117 	ldw	r17,4(sp)
 508b590:	dc000017 	ldw	r16,0(sp)
 508b594:	dec00904 	addi	sp,sp,36
 508b598:	f800283a 	ret

0508b59c <__fp_lock>:
 508b59c:	0005883a 	mov	r2,zero
 508b5a0:	f800283a 	ret

0508b5a4 <__sfmoreglue>:
 508b5a4:	defffc04 	addi	sp,sp,-16
 508b5a8:	dc400115 	stw	r17,4(sp)
 508b5ac:	2c7fffc4 	addi	r17,r5,-1
 508b5b0:	8c401a24 	muli	r17,r17,104
 508b5b4:	dc800215 	stw	r18,8(sp)
 508b5b8:	2825883a 	mov	r18,r5
 508b5bc:	89401d04 	addi	r5,r17,116
 508b5c0:	dc000015 	stw	r16,0(sp)
 508b5c4:	dfc00315 	stw	ra,12(sp)
 508b5c8:	508c49c0 	call	508c49c <_malloc_r>
 508b5cc:	1021883a 	mov	r16,r2
 508b5d0:	10000726 	beq	r2,zero,508b5f0 <__sfmoreglue+0x4c>
 508b5d4:	11000304 	addi	r4,r2,12
 508b5d8:	10000015 	stw	zero,0(r2)
 508b5dc:	14800115 	stw	r18,4(r2)
 508b5e0:	11000215 	stw	r4,8(r2)
 508b5e4:	89801a04 	addi	r6,r17,104
 508b5e8:	000b883a 	mov	r5,zero
 508b5ec:	508d0300 	call	508d030 <memset>
 508b5f0:	8005883a 	mov	r2,r16
 508b5f4:	dfc00317 	ldw	ra,12(sp)
 508b5f8:	dc800217 	ldw	r18,8(sp)
 508b5fc:	dc400117 	ldw	r17,4(sp)
 508b600:	dc000017 	ldw	r16,0(sp)
 508b604:	dec00404 	addi	sp,sp,16
 508b608:	f800283a 	ret

0508b60c <__sfp>:
 508b60c:	defffb04 	addi	sp,sp,-20
 508b610:	dc000015 	stw	r16,0(sp)
 508b614:	04014274 	movhi	r16,1289
 508b618:	84186104 	addi	r16,r16,24964
 508b61c:	dcc00315 	stw	r19,12(sp)
 508b620:	2027883a 	mov	r19,r4
 508b624:	81000017 	ldw	r4,0(r16)
 508b628:	dfc00415 	stw	ra,16(sp)
 508b62c:	dc800215 	stw	r18,8(sp)
 508b630:	20800e17 	ldw	r2,56(r4)
 508b634:	dc400115 	stw	r17,4(sp)
 508b638:	1000021e 	bne	r2,zero,508b644 <__sfp+0x38>
 508b63c:	508b4000 	call	508b400 <__sinit.part.1>
 508b640:	81000017 	ldw	r4,0(r16)
 508b644:	2480b804 	addi	r18,r4,736
 508b648:	047fffc4 	movi	r17,-1
 508b64c:	91000117 	ldw	r4,4(r18)
 508b650:	94000217 	ldw	r16,8(r18)
 508b654:	213fffc4 	addi	r4,r4,-1
 508b658:	20000a16 	blt	r4,zero,508b684 <__sfp+0x78>
 508b65c:	8080030f 	ldh	r2,12(r16)
 508b660:	10000c26 	beq	r2,zero,508b694 <__sfp+0x88>
 508b664:	80c01d04 	addi	r3,r16,116
 508b668:	00000206 	br	508b674 <__sfp+0x68>
 508b66c:	18bfe60f 	ldh	r2,-104(r3)
 508b670:	10000826 	beq	r2,zero,508b694 <__sfp+0x88>
 508b674:	213fffc4 	addi	r4,r4,-1
 508b678:	1c3ffd04 	addi	r16,r3,-12
 508b67c:	18c01a04 	addi	r3,r3,104
 508b680:	247ffa1e 	bne	r4,r17,508b66c <__alt_data_end+0xfffbd46c>
 508b684:	90800017 	ldw	r2,0(r18)
 508b688:	10001d26 	beq	r2,zero,508b700 <__sfp+0xf4>
 508b68c:	1025883a 	mov	r18,r2
 508b690:	003fee06 	br	508b64c <__alt_data_end+0xfffbd44c>
 508b694:	00bfffc4 	movi	r2,-1
 508b698:	8080038d 	sth	r2,14(r16)
 508b69c:	00800044 	movi	r2,1
 508b6a0:	8080030d 	sth	r2,12(r16)
 508b6a4:	80001915 	stw	zero,100(r16)
 508b6a8:	80000015 	stw	zero,0(r16)
 508b6ac:	80000215 	stw	zero,8(r16)
 508b6b0:	80000115 	stw	zero,4(r16)
 508b6b4:	80000415 	stw	zero,16(r16)
 508b6b8:	80000515 	stw	zero,20(r16)
 508b6bc:	80000615 	stw	zero,24(r16)
 508b6c0:	01800204 	movi	r6,8
 508b6c4:	000b883a 	mov	r5,zero
 508b6c8:	81001704 	addi	r4,r16,92
 508b6cc:	508d0300 	call	508d030 <memset>
 508b6d0:	8005883a 	mov	r2,r16
 508b6d4:	80000c15 	stw	zero,48(r16)
 508b6d8:	80000d15 	stw	zero,52(r16)
 508b6dc:	80001115 	stw	zero,68(r16)
 508b6e0:	80001215 	stw	zero,72(r16)
 508b6e4:	dfc00417 	ldw	ra,16(sp)
 508b6e8:	dcc00317 	ldw	r19,12(sp)
 508b6ec:	dc800217 	ldw	r18,8(sp)
 508b6f0:	dc400117 	ldw	r17,4(sp)
 508b6f4:	dc000017 	ldw	r16,0(sp)
 508b6f8:	dec00504 	addi	sp,sp,20
 508b6fc:	f800283a 	ret
 508b700:	01400104 	movi	r5,4
 508b704:	9809883a 	mov	r4,r19
 508b708:	508b5a40 	call	508b5a4 <__sfmoreglue>
 508b70c:	90800015 	stw	r2,0(r18)
 508b710:	103fde1e 	bne	r2,zero,508b68c <__alt_data_end+0xfffbd48c>
 508b714:	00800304 	movi	r2,12
 508b718:	98800015 	stw	r2,0(r19)
 508b71c:	0005883a 	mov	r2,zero
 508b720:	003ff006 	br	508b6e4 <__alt_data_end+0xfffbd4e4>

0508b724 <_cleanup>:
 508b724:	00814274 	movhi	r2,1289
 508b728:	10986104 	addi	r2,r2,24964
 508b72c:	11000017 	ldw	r4,0(r2)
 508b730:	01414274 	movhi	r5,1289
 508b734:	2940e904 	addi	r5,r5,932
 508b738:	508c1401 	jmpi	508c140 <_fwalk_reent>

0508b73c <__sinit>:
 508b73c:	20800e17 	ldw	r2,56(r4)
 508b740:	10000126 	beq	r2,zero,508b748 <__sinit+0xc>
 508b744:	f800283a 	ret
 508b748:	508b4001 	jmpi	508b400 <__sinit.part.1>

0508b74c <__sfp_lock_acquire>:
 508b74c:	f800283a 	ret

0508b750 <__sfp_lock_release>:
 508b750:	f800283a 	ret

0508b754 <__sinit_lock_acquire>:
 508b754:	f800283a 	ret

0508b758 <__sinit_lock_release>:
 508b758:	f800283a 	ret

0508b75c <__fp_lock_all>:
 508b75c:	00814274 	movhi	r2,1289
 508b760:	10986204 	addi	r2,r2,24968
 508b764:	11000017 	ldw	r4,0(r2)
 508b768:	01414274 	movhi	r5,1289
 508b76c:	296d6704 	addi	r5,r5,-19044
 508b770:	508c07c1 	jmpi	508c07c <_fwalk>

0508b774 <__fp_unlock_all>:
 508b774:	00814274 	movhi	r2,1289
 508b778:	10986204 	addi	r2,r2,24968
 508b77c:	11000017 	ldw	r4,0(r2)
 508b780:	01414274 	movhi	r5,1289
 508b784:	296cfb04 	addi	r5,r5,-19476
 508b788:	508c07c1 	jmpi	508c07c <_fwalk>

0508b78c <_malloc_trim_r>:
 508b78c:	defffb04 	addi	sp,sp,-20
 508b790:	dcc00315 	stw	r19,12(sp)
 508b794:	04c14274 	movhi	r19,1289
 508b798:	dc800215 	stw	r18,8(sp)
 508b79c:	dc400115 	stw	r17,4(sp)
 508b7a0:	dc000015 	stw	r16,0(sp)
 508b7a4:	dfc00415 	stw	ra,16(sp)
 508b7a8:	2821883a 	mov	r16,r5
 508b7ac:	9cd2cc04 	addi	r19,r19,19248
 508b7b0:	2025883a 	mov	r18,r4
 508b7b4:	5091cdc0 	call	5091cdc <__malloc_lock>
 508b7b8:	98800217 	ldw	r2,8(r19)
 508b7bc:	14400117 	ldw	r17,4(r2)
 508b7c0:	00bfff04 	movi	r2,-4
 508b7c4:	88a2703a 	and	r17,r17,r2
 508b7c8:	8c21c83a 	sub	r16,r17,r16
 508b7cc:	8403fbc4 	addi	r16,r16,4079
 508b7d0:	8020d33a 	srli	r16,r16,12
 508b7d4:	0083ffc4 	movi	r2,4095
 508b7d8:	843fffc4 	addi	r16,r16,-1
 508b7dc:	8020933a 	slli	r16,r16,12
 508b7e0:	1400060e 	bge	r2,r16,508b7fc <_malloc_trim_r+0x70>
 508b7e4:	000b883a 	mov	r5,zero
 508b7e8:	9009883a 	mov	r4,r18
 508b7ec:	508e8200 	call	508e820 <_sbrk_r>
 508b7f0:	98c00217 	ldw	r3,8(r19)
 508b7f4:	1c47883a 	add	r3,r3,r17
 508b7f8:	10c00a26 	beq	r2,r3,508b824 <_malloc_trim_r+0x98>
 508b7fc:	9009883a 	mov	r4,r18
 508b800:	5091d000 	call	5091d00 <__malloc_unlock>
 508b804:	0005883a 	mov	r2,zero
 508b808:	dfc00417 	ldw	ra,16(sp)
 508b80c:	dcc00317 	ldw	r19,12(sp)
 508b810:	dc800217 	ldw	r18,8(sp)
 508b814:	dc400117 	ldw	r17,4(sp)
 508b818:	dc000017 	ldw	r16,0(sp)
 508b81c:	dec00504 	addi	sp,sp,20
 508b820:	f800283a 	ret
 508b824:	040bc83a 	sub	r5,zero,r16
 508b828:	9009883a 	mov	r4,r18
 508b82c:	508e8200 	call	508e820 <_sbrk_r>
 508b830:	00ffffc4 	movi	r3,-1
 508b834:	10c00d26 	beq	r2,r3,508b86c <_malloc_trim_r+0xe0>
 508b838:	00c14274 	movhi	r3,1289
 508b83c:	18df6f04 	addi	r3,r3,32188
 508b840:	18800017 	ldw	r2,0(r3)
 508b844:	99000217 	ldw	r4,8(r19)
 508b848:	8c23c83a 	sub	r17,r17,r16
 508b84c:	8c400054 	ori	r17,r17,1
 508b850:	1421c83a 	sub	r16,r2,r16
 508b854:	24400115 	stw	r17,4(r4)
 508b858:	9009883a 	mov	r4,r18
 508b85c:	1c000015 	stw	r16,0(r3)
 508b860:	5091d000 	call	5091d00 <__malloc_unlock>
 508b864:	00800044 	movi	r2,1
 508b868:	003fe706 	br	508b808 <__alt_data_end+0xfffbd608>
 508b86c:	000b883a 	mov	r5,zero
 508b870:	9009883a 	mov	r4,r18
 508b874:	508e8200 	call	508e820 <_sbrk_r>
 508b878:	99000217 	ldw	r4,8(r19)
 508b87c:	014003c4 	movi	r5,15
 508b880:	1107c83a 	sub	r3,r2,r4
 508b884:	28ffdd0e 	bge	r5,r3,508b7fc <__alt_data_end+0xfffbd5fc>
 508b888:	01414274 	movhi	r5,1289
 508b88c:	29586404 	addi	r5,r5,24976
 508b890:	29400017 	ldw	r5,0(r5)
 508b894:	18c00054 	ori	r3,r3,1
 508b898:	20c00115 	stw	r3,4(r4)
 508b89c:	00c14274 	movhi	r3,1289
 508b8a0:	1145c83a 	sub	r2,r2,r5
 508b8a4:	18df6f04 	addi	r3,r3,32188
 508b8a8:	18800015 	stw	r2,0(r3)
 508b8ac:	003fd306 	br	508b7fc <__alt_data_end+0xfffbd5fc>

0508b8b0 <_free_r>:
 508b8b0:	28004126 	beq	r5,zero,508b9b8 <_free_r+0x108>
 508b8b4:	defffd04 	addi	sp,sp,-12
 508b8b8:	dc400115 	stw	r17,4(sp)
 508b8bc:	dc000015 	stw	r16,0(sp)
 508b8c0:	2023883a 	mov	r17,r4
 508b8c4:	2821883a 	mov	r16,r5
 508b8c8:	dfc00215 	stw	ra,8(sp)
 508b8cc:	5091cdc0 	call	5091cdc <__malloc_lock>
 508b8d0:	81ffff17 	ldw	r7,-4(r16)
 508b8d4:	00bfff84 	movi	r2,-2
 508b8d8:	01014274 	movhi	r4,1289
 508b8dc:	81bffe04 	addi	r6,r16,-8
 508b8e0:	3884703a 	and	r2,r7,r2
 508b8e4:	2112cc04 	addi	r4,r4,19248
 508b8e8:	308b883a 	add	r5,r6,r2
 508b8ec:	2a400117 	ldw	r9,4(r5)
 508b8f0:	22000217 	ldw	r8,8(r4)
 508b8f4:	00ffff04 	movi	r3,-4
 508b8f8:	48c6703a 	and	r3,r9,r3
 508b8fc:	2a005726 	beq	r5,r8,508ba5c <_free_r+0x1ac>
 508b900:	28c00115 	stw	r3,4(r5)
 508b904:	39c0004c 	andi	r7,r7,1
 508b908:	3800091e 	bne	r7,zero,508b930 <_free_r+0x80>
 508b90c:	823ffe17 	ldw	r8,-8(r16)
 508b910:	22400204 	addi	r9,r4,8
 508b914:	320dc83a 	sub	r6,r6,r8
 508b918:	31c00217 	ldw	r7,8(r6)
 508b91c:	1205883a 	add	r2,r2,r8
 508b920:	3a406526 	beq	r7,r9,508bab8 <_free_r+0x208>
 508b924:	32000317 	ldw	r8,12(r6)
 508b928:	3a000315 	stw	r8,12(r7)
 508b92c:	41c00215 	stw	r7,8(r8)
 508b930:	28cf883a 	add	r7,r5,r3
 508b934:	39c00117 	ldw	r7,4(r7)
 508b938:	39c0004c 	andi	r7,r7,1
 508b93c:	38003a26 	beq	r7,zero,508ba28 <_free_r+0x178>
 508b940:	10c00054 	ori	r3,r2,1
 508b944:	30c00115 	stw	r3,4(r6)
 508b948:	3087883a 	add	r3,r6,r2
 508b94c:	18800015 	stw	r2,0(r3)
 508b950:	00c07fc4 	movi	r3,511
 508b954:	18801936 	bltu	r3,r2,508b9bc <_free_r+0x10c>
 508b958:	1004d0fa 	srli	r2,r2,3
 508b95c:	01c00044 	movi	r7,1
 508b960:	21400117 	ldw	r5,4(r4)
 508b964:	10c00044 	addi	r3,r2,1
 508b968:	18c7883a 	add	r3,r3,r3
 508b96c:	1005d0ba 	srai	r2,r2,2
 508b970:	18c7883a 	add	r3,r3,r3
 508b974:	18c7883a 	add	r3,r3,r3
 508b978:	1907883a 	add	r3,r3,r4
 508b97c:	3884983a 	sll	r2,r7,r2
 508b980:	19c00017 	ldw	r7,0(r3)
 508b984:	1a3ffe04 	addi	r8,r3,-8
 508b988:	1144b03a 	or	r2,r2,r5
 508b98c:	32000315 	stw	r8,12(r6)
 508b990:	31c00215 	stw	r7,8(r6)
 508b994:	20800115 	stw	r2,4(r4)
 508b998:	19800015 	stw	r6,0(r3)
 508b99c:	39800315 	stw	r6,12(r7)
 508b9a0:	8809883a 	mov	r4,r17
 508b9a4:	dfc00217 	ldw	ra,8(sp)
 508b9a8:	dc400117 	ldw	r17,4(sp)
 508b9ac:	dc000017 	ldw	r16,0(sp)
 508b9b0:	dec00304 	addi	sp,sp,12
 508b9b4:	5091d001 	jmpi	5091d00 <__malloc_unlock>
 508b9b8:	f800283a 	ret
 508b9bc:	100ad27a 	srli	r5,r2,9
 508b9c0:	00c00104 	movi	r3,4
 508b9c4:	19404a36 	bltu	r3,r5,508baf0 <_free_r+0x240>
 508b9c8:	100ad1ba 	srli	r5,r2,6
 508b9cc:	28c00e44 	addi	r3,r5,57
 508b9d0:	18c7883a 	add	r3,r3,r3
 508b9d4:	29400e04 	addi	r5,r5,56
 508b9d8:	18c7883a 	add	r3,r3,r3
 508b9dc:	18c7883a 	add	r3,r3,r3
 508b9e0:	1909883a 	add	r4,r3,r4
 508b9e4:	20c00017 	ldw	r3,0(r4)
 508b9e8:	01c14274 	movhi	r7,1289
 508b9ec:	213ffe04 	addi	r4,r4,-8
 508b9f0:	39d2cc04 	addi	r7,r7,19248
 508b9f4:	20c04426 	beq	r4,r3,508bb08 <_free_r+0x258>
 508b9f8:	01ffff04 	movi	r7,-4
 508b9fc:	19400117 	ldw	r5,4(r3)
 508ba00:	29ca703a 	and	r5,r5,r7
 508ba04:	1140022e 	bgeu	r2,r5,508ba10 <_free_r+0x160>
 508ba08:	18c00217 	ldw	r3,8(r3)
 508ba0c:	20fffb1e 	bne	r4,r3,508b9fc <__alt_data_end+0xfffbd7fc>
 508ba10:	19000317 	ldw	r4,12(r3)
 508ba14:	31000315 	stw	r4,12(r6)
 508ba18:	30c00215 	stw	r3,8(r6)
 508ba1c:	21800215 	stw	r6,8(r4)
 508ba20:	19800315 	stw	r6,12(r3)
 508ba24:	003fde06 	br	508b9a0 <__alt_data_end+0xfffbd7a0>
 508ba28:	29c00217 	ldw	r7,8(r5)
 508ba2c:	10c5883a 	add	r2,r2,r3
 508ba30:	00c14274 	movhi	r3,1289
 508ba34:	18d2ce04 	addi	r3,r3,19256
 508ba38:	38c03b26 	beq	r7,r3,508bb28 <_free_r+0x278>
 508ba3c:	2a000317 	ldw	r8,12(r5)
 508ba40:	11400054 	ori	r5,r2,1
 508ba44:	3087883a 	add	r3,r6,r2
 508ba48:	3a000315 	stw	r8,12(r7)
 508ba4c:	41c00215 	stw	r7,8(r8)
 508ba50:	31400115 	stw	r5,4(r6)
 508ba54:	18800015 	stw	r2,0(r3)
 508ba58:	003fbd06 	br	508b950 <__alt_data_end+0xfffbd750>
 508ba5c:	39c0004c 	andi	r7,r7,1
 508ba60:	10c5883a 	add	r2,r2,r3
 508ba64:	3800071e 	bne	r7,zero,508ba84 <_free_r+0x1d4>
 508ba68:	81fffe17 	ldw	r7,-8(r16)
 508ba6c:	31cdc83a 	sub	r6,r6,r7
 508ba70:	30c00317 	ldw	r3,12(r6)
 508ba74:	31400217 	ldw	r5,8(r6)
 508ba78:	11c5883a 	add	r2,r2,r7
 508ba7c:	28c00315 	stw	r3,12(r5)
 508ba80:	19400215 	stw	r5,8(r3)
 508ba84:	10c00054 	ori	r3,r2,1
 508ba88:	30c00115 	stw	r3,4(r6)
 508ba8c:	00c14274 	movhi	r3,1289
 508ba90:	18d86504 	addi	r3,r3,24980
 508ba94:	18c00017 	ldw	r3,0(r3)
 508ba98:	21800215 	stw	r6,8(r4)
 508ba9c:	10ffc036 	bltu	r2,r3,508b9a0 <__alt_data_end+0xfffbd7a0>
 508baa0:	00814274 	movhi	r2,1289
 508baa4:	109f5d04 	addi	r2,r2,32116
 508baa8:	11400017 	ldw	r5,0(r2)
 508baac:	8809883a 	mov	r4,r17
 508bab0:	508b78c0 	call	508b78c <_malloc_trim_r>
 508bab4:	003fba06 	br	508b9a0 <__alt_data_end+0xfffbd7a0>
 508bab8:	28c9883a 	add	r4,r5,r3
 508babc:	21000117 	ldw	r4,4(r4)
 508bac0:	2100004c 	andi	r4,r4,1
 508bac4:	2000391e 	bne	r4,zero,508bbac <_free_r+0x2fc>
 508bac8:	29c00217 	ldw	r7,8(r5)
 508bacc:	29000317 	ldw	r4,12(r5)
 508bad0:	1885883a 	add	r2,r3,r2
 508bad4:	10c00054 	ori	r3,r2,1
 508bad8:	39000315 	stw	r4,12(r7)
 508badc:	21c00215 	stw	r7,8(r4)
 508bae0:	30c00115 	stw	r3,4(r6)
 508bae4:	308d883a 	add	r6,r6,r2
 508bae8:	30800015 	stw	r2,0(r6)
 508baec:	003fac06 	br	508b9a0 <__alt_data_end+0xfffbd7a0>
 508baf0:	00c00504 	movi	r3,20
 508baf4:	19401536 	bltu	r3,r5,508bb4c <_free_r+0x29c>
 508baf8:	28c01704 	addi	r3,r5,92
 508bafc:	18c7883a 	add	r3,r3,r3
 508bb00:	294016c4 	addi	r5,r5,91
 508bb04:	003fb406 	br	508b9d8 <__alt_data_end+0xfffbd7d8>
 508bb08:	280bd0ba 	srai	r5,r5,2
 508bb0c:	00c00044 	movi	r3,1
 508bb10:	38800117 	ldw	r2,4(r7)
 508bb14:	194a983a 	sll	r5,r3,r5
 508bb18:	2007883a 	mov	r3,r4
 508bb1c:	2884b03a 	or	r2,r5,r2
 508bb20:	38800115 	stw	r2,4(r7)
 508bb24:	003fbb06 	br	508ba14 <__alt_data_end+0xfffbd814>
 508bb28:	21800515 	stw	r6,20(r4)
 508bb2c:	21800415 	stw	r6,16(r4)
 508bb30:	10c00054 	ori	r3,r2,1
 508bb34:	31c00315 	stw	r7,12(r6)
 508bb38:	31c00215 	stw	r7,8(r6)
 508bb3c:	30c00115 	stw	r3,4(r6)
 508bb40:	308d883a 	add	r6,r6,r2
 508bb44:	30800015 	stw	r2,0(r6)
 508bb48:	003f9506 	br	508b9a0 <__alt_data_end+0xfffbd7a0>
 508bb4c:	00c01504 	movi	r3,84
 508bb50:	19400536 	bltu	r3,r5,508bb68 <_free_r+0x2b8>
 508bb54:	100ad33a 	srli	r5,r2,12
 508bb58:	28c01bc4 	addi	r3,r5,111
 508bb5c:	18c7883a 	add	r3,r3,r3
 508bb60:	29401b84 	addi	r5,r5,110
 508bb64:	003f9c06 	br	508b9d8 <__alt_data_end+0xfffbd7d8>
 508bb68:	00c05504 	movi	r3,340
 508bb6c:	19400536 	bltu	r3,r5,508bb84 <_free_r+0x2d4>
 508bb70:	100ad3fa 	srli	r5,r2,15
 508bb74:	28c01e04 	addi	r3,r5,120
 508bb78:	18c7883a 	add	r3,r3,r3
 508bb7c:	29401dc4 	addi	r5,r5,119
 508bb80:	003f9506 	br	508b9d8 <__alt_data_end+0xfffbd7d8>
 508bb84:	00c15504 	movi	r3,1364
 508bb88:	19400536 	bltu	r3,r5,508bba0 <_free_r+0x2f0>
 508bb8c:	100ad4ba 	srli	r5,r2,18
 508bb90:	28c01f44 	addi	r3,r5,125
 508bb94:	18c7883a 	add	r3,r3,r3
 508bb98:	29401f04 	addi	r5,r5,124
 508bb9c:	003f8e06 	br	508b9d8 <__alt_data_end+0xfffbd7d8>
 508bba0:	00c03f84 	movi	r3,254
 508bba4:	01401f84 	movi	r5,126
 508bba8:	003f8b06 	br	508b9d8 <__alt_data_end+0xfffbd7d8>
 508bbac:	10c00054 	ori	r3,r2,1
 508bbb0:	30c00115 	stw	r3,4(r6)
 508bbb4:	308d883a 	add	r6,r6,r2
 508bbb8:	30800015 	stw	r2,0(r6)
 508bbbc:	003f7806 	br	508b9a0 <__alt_data_end+0xfffbd7a0>

0508bbc0 <__sfvwrite_r>:
 508bbc0:	30800217 	ldw	r2,8(r6)
 508bbc4:	10006726 	beq	r2,zero,508bd64 <__sfvwrite_r+0x1a4>
 508bbc8:	28c0030b 	ldhu	r3,12(r5)
 508bbcc:	defff404 	addi	sp,sp,-48
 508bbd0:	dd400715 	stw	r21,28(sp)
 508bbd4:	dd000615 	stw	r20,24(sp)
 508bbd8:	dc000215 	stw	r16,8(sp)
 508bbdc:	dfc00b15 	stw	ra,44(sp)
 508bbe0:	df000a15 	stw	fp,40(sp)
 508bbe4:	ddc00915 	stw	r23,36(sp)
 508bbe8:	dd800815 	stw	r22,32(sp)
 508bbec:	dcc00515 	stw	r19,20(sp)
 508bbf0:	dc800415 	stw	r18,16(sp)
 508bbf4:	dc400315 	stw	r17,12(sp)
 508bbf8:	1880020c 	andi	r2,r3,8
 508bbfc:	2821883a 	mov	r16,r5
 508bc00:	202b883a 	mov	r21,r4
 508bc04:	3029883a 	mov	r20,r6
 508bc08:	10002726 	beq	r2,zero,508bca8 <__sfvwrite_r+0xe8>
 508bc0c:	28800417 	ldw	r2,16(r5)
 508bc10:	10002526 	beq	r2,zero,508bca8 <__sfvwrite_r+0xe8>
 508bc14:	1880008c 	andi	r2,r3,2
 508bc18:	a4400017 	ldw	r17,0(r20)
 508bc1c:	10002a26 	beq	r2,zero,508bcc8 <__sfvwrite_r+0x108>
 508bc20:	05a00034 	movhi	r22,32768
 508bc24:	0027883a 	mov	r19,zero
 508bc28:	0025883a 	mov	r18,zero
 508bc2c:	b5bf0004 	addi	r22,r22,-1024
 508bc30:	980d883a 	mov	r6,r19
 508bc34:	a809883a 	mov	r4,r21
 508bc38:	90004626 	beq	r18,zero,508bd54 <__sfvwrite_r+0x194>
 508bc3c:	900f883a 	mov	r7,r18
 508bc40:	b480022e 	bgeu	r22,r18,508bc4c <__sfvwrite_r+0x8c>
 508bc44:	01e00034 	movhi	r7,32768
 508bc48:	39ff0004 	addi	r7,r7,-1024
 508bc4c:	80800917 	ldw	r2,36(r16)
 508bc50:	81400717 	ldw	r5,28(r16)
 508bc54:	103ee83a 	callr	r2
 508bc58:	0080570e 	bge	zero,r2,508bdb8 <__sfvwrite_r+0x1f8>
 508bc5c:	a0c00217 	ldw	r3,8(r20)
 508bc60:	98a7883a 	add	r19,r19,r2
 508bc64:	90a5c83a 	sub	r18,r18,r2
 508bc68:	1885c83a 	sub	r2,r3,r2
 508bc6c:	a0800215 	stw	r2,8(r20)
 508bc70:	103fef1e 	bne	r2,zero,508bc30 <__alt_data_end+0xfffbda30>
 508bc74:	0005883a 	mov	r2,zero
 508bc78:	dfc00b17 	ldw	ra,44(sp)
 508bc7c:	df000a17 	ldw	fp,40(sp)
 508bc80:	ddc00917 	ldw	r23,36(sp)
 508bc84:	dd800817 	ldw	r22,32(sp)
 508bc88:	dd400717 	ldw	r21,28(sp)
 508bc8c:	dd000617 	ldw	r20,24(sp)
 508bc90:	dcc00517 	ldw	r19,20(sp)
 508bc94:	dc800417 	ldw	r18,16(sp)
 508bc98:	dc400317 	ldw	r17,12(sp)
 508bc9c:	dc000217 	ldw	r16,8(sp)
 508bca0:	dec00c04 	addi	sp,sp,48
 508bca4:	f800283a 	ret
 508bca8:	800b883a 	mov	r5,r16
 508bcac:	a809883a 	mov	r4,r21
 508bcb0:	50897680 	call	5089768 <__swsetup_r>
 508bcb4:	1000eb1e 	bne	r2,zero,508c064 <__sfvwrite_r+0x4a4>
 508bcb8:	80c0030b 	ldhu	r3,12(r16)
 508bcbc:	a4400017 	ldw	r17,0(r20)
 508bcc0:	1880008c 	andi	r2,r3,2
 508bcc4:	103fd61e 	bne	r2,zero,508bc20 <__alt_data_end+0xfffbda20>
 508bcc8:	1880004c 	andi	r2,r3,1
 508bccc:	10003f1e 	bne	r2,zero,508bdcc <__sfvwrite_r+0x20c>
 508bcd0:	0039883a 	mov	fp,zero
 508bcd4:	0025883a 	mov	r18,zero
 508bcd8:	90001a26 	beq	r18,zero,508bd44 <__sfvwrite_r+0x184>
 508bcdc:	1880800c 	andi	r2,r3,512
 508bce0:	84c00217 	ldw	r19,8(r16)
 508bce4:	10002126 	beq	r2,zero,508bd6c <__sfvwrite_r+0x1ac>
 508bce8:	982f883a 	mov	r23,r19
 508bcec:	94c09336 	bltu	r18,r19,508bf3c <__sfvwrite_r+0x37c>
 508bcf0:	1881200c 	andi	r2,r3,1152
 508bcf4:	10009e1e 	bne	r2,zero,508bf70 <__sfvwrite_r+0x3b0>
 508bcf8:	81000017 	ldw	r4,0(r16)
 508bcfc:	b80d883a 	mov	r6,r23
 508bd00:	e00b883a 	mov	r5,fp
 508bd04:	508ced40 	call	508ced4 <memmove>
 508bd08:	80c00217 	ldw	r3,8(r16)
 508bd0c:	81000017 	ldw	r4,0(r16)
 508bd10:	9005883a 	mov	r2,r18
 508bd14:	1ce7c83a 	sub	r19,r3,r19
 508bd18:	25cf883a 	add	r7,r4,r23
 508bd1c:	84c00215 	stw	r19,8(r16)
 508bd20:	81c00015 	stw	r7,0(r16)
 508bd24:	a0c00217 	ldw	r3,8(r20)
 508bd28:	e0b9883a 	add	fp,fp,r2
 508bd2c:	90a5c83a 	sub	r18,r18,r2
 508bd30:	18a7c83a 	sub	r19,r3,r2
 508bd34:	a4c00215 	stw	r19,8(r20)
 508bd38:	983fce26 	beq	r19,zero,508bc74 <__alt_data_end+0xfffbda74>
 508bd3c:	80c0030b 	ldhu	r3,12(r16)
 508bd40:	903fe61e 	bne	r18,zero,508bcdc <__alt_data_end+0xfffbdadc>
 508bd44:	8f000017 	ldw	fp,0(r17)
 508bd48:	8c800117 	ldw	r18,4(r17)
 508bd4c:	8c400204 	addi	r17,r17,8
 508bd50:	003fe106 	br	508bcd8 <__alt_data_end+0xfffbdad8>
 508bd54:	8cc00017 	ldw	r19,0(r17)
 508bd58:	8c800117 	ldw	r18,4(r17)
 508bd5c:	8c400204 	addi	r17,r17,8
 508bd60:	003fb306 	br	508bc30 <__alt_data_end+0xfffbda30>
 508bd64:	0005883a 	mov	r2,zero
 508bd68:	f800283a 	ret
 508bd6c:	81000017 	ldw	r4,0(r16)
 508bd70:	80800417 	ldw	r2,16(r16)
 508bd74:	11005736 	bltu	r2,r4,508bed4 <__sfvwrite_r+0x314>
 508bd78:	85c00517 	ldw	r23,20(r16)
 508bd7c:	95c05536 	bltu	r18,r23,508bed4 <__sfvwrite_r+0x314>
 508bd80:	00a00034 	movhi	r2,32768
 508bd84:	10bfffc4 	addi	r2,r2,-1
 508bd88:	9009883a 	mov	r4,r18
 508bd8c:	1480012e 	bgeu	r2,r18,508bd94 <__sfvwrite_r+0x1d4>
 508bd90:	1009883a 	mov	r4,r2
 508bd94:	b80b883a 	mov	r5,r23
 508bd98:	5084a080 	call	5084a08 <__divsi3>
 508bd9c:	15cf383a 	mul	r7,r2,r23
 508bda0:	81400717 	ldw	r5,28(r16)
 508bda4:	80800917 	ldw	r2,36(r16)
 508bda8:	e00d883a 	mov	r6,fp
 508bdac:	a809883a 	mov	r4,r21
 508bdb0:	103ee83a 	callr	r2
 508bdb4:	00bfdb16 	blt	zero,r2,508bd24 <__alt_data_end+0xfffbdb24>
 508bdb8:	8080030b 	ldhu	r2,12(r16)
 508bdbc:	10801014 	ori	r2,r2,64
 508bdc0:	8080030d 	sth	r2,12(r16)
 508bdc4:	00bfffc4 	movi	r2,-1
 508bdc8:	003fab06 	br	508bc78 <__alt_data_end+0xfffbda78>
 508bdcc:	0027883a 	mov	r19,zero
 508bdd0:	0011883a 	mov	r8,zero
 508bdd4:	0039883a 	mov	fp,zero
 508bdd8:	0025883a 	mov	r18,zero
 508bddc:	90001f26 	beq	r18,zero,508be5c <__sfvwrite_r+0x29c>
 508bde0:	40005a26 	beq	r8,zero,508bf4c <__sfvwrite_r+0x38c>
 508bde4:	982d883a 	mov	r22,r19
 508bde8:	94c0012e 	bgeu	r18,r19,508bdf0 <__sfvwrite_r+0x230>
 508bdec:	902d883a 	mov	r22,r18
 508bdf0:	81000017 	ldw	r4,0(r16)
 508bdf4:	80800417 	ldw	r2,16(r16)
 508bdf8:	b02f883a 	mov	r23,r22
 508bdfc:	81c00517 	ldw	r7,20(r16)
 508be00:	1100032e 	bgeu	r2,r4,508be10 <__sfvwrite_r+0x250>
 508be04:	80c00217 	ldw	r3,8(r16)
 508be08:	38c7883a 	add	r3,r7,r3
 508be0c:	1d801816 	blt	r3,r22,508be70 <__sfvwrite_r+0x2b0>
 508be10:	b1c03e16 	blt	r22,r7,508bf0c <__sfvwrite_r+0x34c>
 508be14:	80800917 	ldw	r2,36(r16)
 508be18:	81400717 	ldw	r5,28(r16)
 508be1c:	e00d883a 	mov	r6,fp
 508be20:	da000115 	stw	r8,4(sp)
 508be24:	a809883a 	mov	r4,r21
 508be28:	103ee83a 	callr	r2
 508be2c:	102f883a 	mov	r23,r2
 508be30:	da000117 	ldw	r8,4(sp)
 508be34:	00bfe00e 	bge	zero,r2,508bdb8 <__alt_data_end+0xfffbdbb8>
 508be38:	9de7c83a 	sub	r19,r19,r23
 508be3c:	98001f26 	beq	r19,zero,508bebc <__sfvwrite_r+0x2fc>
 508be40:	a0800217 	ldw	r2,8(r20)
 508be44:	e5f9883a 	add	fp,fp,r23
 508be48:	95e5c83a 	sub	r18,r18,r23
 508be4c:	15efc83a 	sub	r23,r2,r23
 508be50:	a5c00215 	stw	r23,8(r20)
 508be54:	b83f8726 	beq	r23,zero,508bc74 <__alt_data_end+0xfffbda74>
 508be58:	903fe11e 	bne	r18,zero,508bde0 <__alt_data_end+0xfffbdbe0>
 508be5c:	8f000017 	ldw	fp,0(r17)
 508be60:	8c800117 	ldw	r18,4(r17)
 508be64:	0011883a 	mov	r8,zero
 508be68:	8c400204 	addi	r17,r17,8
 508be6c:	003fdb06 	br	508bddc <__alt_data_end+0xfffbdbdc>
 508be70:	180d883a 	mov	r6,r3
 508be74:	e00b883a 	mov	r5,fp
 508be78:	da000115 	stw	r8,4(sp)
 508be7c:	d8c00015 	stw	r3,0(sp)
 508be80:	508ced40 	call	508ced4 <memmove>
 508be84:	d8c00017 	ldw	r3,0(sp)
 508be88:	80800017 	ldw	r2,0(r16)
 508be8c:	800b883a 	mov	r5,r16
 508be90:	a809883a 	mov	r4,r21
 508be94:	10c5883a 	add	r2,r2,r3
 508be98:	80800015 	stw	r2,0(r16)
 508be9c:	d8c00015 	stw	r3,0(sp)
 508bea0:	508b3600 	call	508b360 <_fflush_r>
 508bea4:	d8c00017 	ldw	r3,0(sp)
 508bea8:	da000117 	ldw	r8,4(sp)
 508beac:	103fc21e 	bne	r2,zero,508bdb8 <__alt_data_end+0xfffbdbb8>
 508beb0:	182f883a 	mov	r23,r3
 508beb4:	9de7c83a 	sub	r19,r19,r23
 508beb8:	983fe11e 	bne	r19,zero,508be40 <__alt_data_end+0xfffbdc40>
 508bebc:	800b883a 	mov	r5,r16
 508bec0:	a809883a 	mov	r4,r21
 508bec4:	508b3600 	call	508b360 <_fflush_r>
 508bec8:	103fbb1e 	bne	r2,zero,508bdb8 <__alt_data_end+0xfffbdbb8>
 508becc:	0011883a 	mov	r8,zero
 508bed0:	003fdb06 	br	508be40 <__alt_data_end+0xfffbdc40>
 508bed4:	94c0012e 	bgeu	r18,r19,508bedc <__sfvwrite_r+0x31c>
 508bed8:	9027883a 	mov	r19,r18
 508bedc:	980d883a 	mov	r6,r19
 508bee0:	e00b883a 	mov	r5,fp
 508bee4:	508ced40 	call	508ced4 <memmove>
 508bee8:	80800217 	ldw	r2,8(r16)
 508beec:	80c00017 	ldw	r3,0(r16)
 508bef0:	14c5c83a 	sub	r2,r2,r19
 508bef4:	1cc7883a 	add	r3,r3,r19
 508bef8:	80800215 	stw	r2,8(r16)
 508befc:	80c00015 	stw	r3,0(r16)
 508bf00:	10004326 	beq	r2,zero,508c010 <__sfvwrite_r+0x450>
 508bf04:	9805883a 	mov	r2,r19
 508bf08:	003f8606 	br	508bd24 <__alt_data_end+0xfffbdb24>
 508bf0c:	b00d883a 	mov	r6,r22
 508bf10:	e00b883a 	mov	r5,fp
 508bf14:	da000115 	stw	r8,4(sp)
 508bf18:	508ced40 	call	508ced4 <memmove>
 508bf1c:	80800217 	ldw	r2,8(r16)
 508bf20:	80c00017 	ldw	r3,0(r16)
 508bf24:	da000117 	ldw	r8,4(sp)
 508bf28:	1585c83a 	sub	r2,r2,r22
 508bf2c:	1dad883a 	add	r22,r3,r22
 508bf30:	80800215 	stw	r2,8(r16)
 508bf34:	85800015 	stw	r22,0(r16)
 508bf38:	003fbf06 	br	508be38 <__alt_data_end+0xfffbdc38>
 508bf3c:	81000017 	ldw	r4,0(r16)
 508bf40:	9027883a 	mov	r19,r18
 508bf44:	902f883a 	mov	r23,r18
 508bf48:	003f6c06 	br	508bcfc <__alt_data_end+0xfffbdafc>
 508bf4c:	900d883a 	mov	r6,r18
 508bf50:	01400284 	movi	r5,10
 508bf54:	e009883a 	mov	r4,fp
 508bf58:	508cca80 	call	508cca8 <memchr>
 508bf5c:	10003e26 	beq	r2,zero,508c058 <__sfvwrite_r+0x498>
 508bf60:	10800044 	addi	r2,r2,1
 508bf64:	1727c83a 	sub	r19,r2,fp
 508bf68:	02000044 	movi	r8,1
 508bf6c:	003f9d06 	br	508bde4 <__alt_data_end+0xfffbdbe4>
 508bf70:	80800517 	ldw	r2,20(r16)
 508bf74:	81400417 	ldw	r5,16(r16)
 508bf78:	81c00017 	ldw	r7,0(r16)
 508bf7c:	10a7883a 	add	r19,r2,r2
 508bf80:	9885883a 	add	r2,r19,r2
 508bf84:	1026d7fa 	srli	r19,r2,31
 508bf88:	396dc83a 	sub	r22,r7,r5
 508bf8c:	b1000044 	addi	r4,r22,1
 508bf90:	9885883a 	add	r2,r19,r2
 508bf94:	1027d07a 	srai	r19,r2,1
 508bf98:	2485883a 	add	r2,r4,r18
 508bf9c:	980d883a 	mov	r6,r19
 508bfa0:	9880022e 	bgeu	r19,r2,508bfac <__sfvwrite_r+0x3ec>
 508bfa4:	1027883a 	mov	r19,r2
 508bfa8:	100d883a 	mov	r6,r2
 508bfac:	18c1000c 	andi	r3,r3,1024
 508bfb0:	18001c26 	beq	r3,zero,508c024 <__sfvwrite_r+0x464>
 508bfb4:	300b883a 	mov	r5,r6
 508bfb8:	a809883a 	mov	r4,r21
 508bfbc:	508c49c0 	call	508c49c <_malloc_r>
 508bfc0:	102f883a 	mov	r23,r2
 508bfc4:	10002926 	beq	r2,zero,508c06c <__sfvwrite_r+0x4ac>
 508bfc8:	81400417 	ldw	r5,16(r16)
 508bfcc:	b00d883a 	mov	r6,r22
 508bfd0:	1009883a 	mov	r4,r2
 508bfd4:	508cd8c0 	call	508cd8c <memcpy>
 508bfd8:	8080030b 	ldhu	r2,12(r16)
 508bfdc:	00fedfc4 	movi	r3,-1153
 508bfe0:	10c4703a 	and	r2,r2,r3
 508bfe4:	10802014 	ori	r2,r2,128
 508bfe8:	8080030d 	sth	r2,12(r16)
 508bfec:	bd89883a 	add	r4,r23,r22
 508bff0:	9d8fc83a 	sub	r7,r19,r22
 508bff4:	85c00415 	stw	r23,16(r16)
 508bff8:	84c00515 	stw	r19,20(r16)
 508bffc:	81000015 	stw	r4,0(r16)
 508c000:	9027883a 	mov	r19,r18
 508c004:	81c00215 	stw	r7,8(r16)
 508c008:	902f883a 	mov	r23,r18
 508c00c:	003f3b06 	br	508bcfc <__alt_data_end+0xfffbdafc>
 508c010:	800b883a 	mov	r5,r16
 508c014:	a809883a 	mov	r4,r21
 508c018:	508b3600 	call	508b360 <_fflush_r>
 508c01c:	103fb926 	beq	r2,zero,508bf04 <__alt_data_end+0xfffbdd04>
 508c020:	003f6506 	br	508bdb8 <__alt_data_end+0xfffbdbb8>
 508c024:	a809883a 	mov	r4,r21
 508c028:	508e2bc0 	call	508e2bc <_realloc_r>
 508c02c:	102f883a 	mov	r23,r2
 508c030:	103fee1e 	bne	r2,zero,508bfec <__alt_data_end+0xfffbddec>
 508c034:	81400417 	ldw	r5,16(r16)
 508c038:	a809883a 	mov	r4,r21
 508c03c:	508b8b00 	call	508b8b0 <_free_r>
 508c040:	8080030b 	ldhu	r2,12(r16)
 508c044:	00ffdfc4 	movi	r3,-129
 508c048:	1884703a 	and	r2,r3,r2
 508c04c:	00c00304 	movi	r3,12
 508c050:	a8c00015 	stw	r3,0(r21)
 508c054:	003f5906 	br	508bdbc <__alt_data_end+0xfffbdbbc>
 508c058:	94c00044 	addi	r19,r18,1
 508c05c:	02000044 	movi	r8,1
 508c060:	003f6006 	br	508bde4 <__alt_data_end+0xfffbdbe4>
 508c064:	00bfffc4 	movi	r2,-1
 508c068:	003f0306 	br	508bc78 <__alt_data_end+0xfffbda78>
 508c06c:	00800304 	movi	r2,12
 508c070:	a8800015 	stw	r2,0(r21)
 508c074:	8080030b 	ldhu	r2,12(r16)
 508c078:	003f5006 	br	508bdbc <__alt_data_end+0xfffbdbbc>

0508c07c <_fwalk>:
 508c07c:	defff704 	addi	sp,sp,-36
 508c080:	dd000415 	stw	r20,16(sp)
 508c084:	dfc00815 	stw	ra,32(sp)
 508c088:	ddc00715 	stw	r23,28(sp)
 508c08c:	dd800615 	stw	r22,24(sp)
 508c090:	dd400515 	stw	r21,20(sp)
 508c094:	dcc00315 	stw	r19,12(sp)
 508c098:	dc800215 	stw	r18,8(sp)
 508c09c:	dc400115 	stw	r17,4(sp)
 508c0a0:	dc000015 	stw	r16,0(sp)
 508c0a4:	2500b804 	addi	r20,r4,736
 508c0a8:	a0002326 	beq	r20,zero,508c138 <_fwalk+0xbc>
 508c0ac:	282b883a 	mov	r21,r5
 508c0b0:	002f883a 	mov	r23,zero
 508c0b4:	05800044 	movi	r22,1
 508c0b8:	04ffffc4 	movi	r19,-1
 508c0bc:	a4400117 	ldw	r17,4(r20)
 508c0c0:	a4800217 	ldw	r18,8(r20)
 508c0c4:	8c7fffc4 	addi	r17,r17,-1
 508c0c8:	88000d16 	blt	r17,zero,508c100 <_fwalk+0x84>
 508c0cc:	94000304 	addi	r16,r18,12
 508c0d0:	94800384 	addi	r18,r18,14
 508c0d4:	8080000b 	ldhu	r2,0(r16)
 508c0d8:	8c7fffc4 	addi	r17,r17,-1
 508c0dc:	813ffd04 	addi	r4,r16,-12
 508c0e0:	b080042e 	bgeu	r22,r2,508c0f4 <_fwalk+0x78>
 508c0e4:	9080000f 	ldh	r2,0(r18)
 508c0e8:	14c00226 	beq	r2,r19,508c0f4 <_fwalk+0x78>
 508c0ec:	a83ee83a 	callr	r21
 508c0f0:	b8aeb03a 	or	r23,r23,r2
 508c0f4:	84001a04 	addi	r16,r16,104
 508c0f8:	94801a04 	addi	r18,r18,104
 508c0fc:	8cfff51e 	bne	r17,r19,508c0d4 <__alt_data_end+0xfffbded4>
 508c100:	a5000017 	ldw	r20,0(r20)
 508c104:	a03fed1e 	bne	r20,zero,508c0bc <__alt_data_end+0xfffbdebc>
 508c108:	b805883a 	mov	r2,r23
 508c10c:	dfc00817 	ldw	ra,32(sp)
 508c110:	ddc00717 	ldw	r23,28(sp)
 508c114:	dd800617 	ldw	r22,24(sp)
 508c118:	dd400517 	ldw	r21,20(sp)
 508c11c:	dd000417 	ldw	r20,16(sp)
 508c120:	dcc00317 	ldw	r19,12(sp)
 508c124:	dc800217 	ldw	r18,8(sp)
 508c128:	dc400117 	ldw	r17,4(sp)
 508c12c:	dc000017 	ldw	r16,0(sp)
 508c130:	dec00904 	addi	sp,sp,36
 508c134:	f800283a 	ret
 508c138:	002f883a 	mov	r23,zero
 508c13c:	003ff206 	br	508c108 <__alt_data_end+0xfffbdf08>

0508c140 <_fwalk_reent>:
 508c140:	defff704 	addi	sp,sp,-36
 508c144:	dd000415 	stw	r20,16(sp)
 508c148:	dfc00815 	stw	ra,32(sp)
 508c14c:	ddc00715 	stw	r23,28(sp)
 508c150:	dd800615 	stw	r22,24(sp)
 508c154:	dd400515 	stw	r21,20(sp)
 508c158:	dcc00315 	stw	r19,12(sp)
 508c15c:	dc800215 	stw	r18,8(sp)
 508c160:	dc400115 	stw	r17,4(sp)
 508c164:	dc000015 	stw	r16,0(sp)
 508c168:	2500b804 	addi	r20,r4,736
 508c16c:	a0002326 	beq	r20,zero,508c1fc <_fwalk_reent+0xbc>
 508c170:	282b883a 	mov	r21,r5
 508c174:	2027883a 	mov	r19,r4
 508c178:	002f883a 	mov	r23,zero
 508c17c:	05800044 	movi	r22,1
 508c180:	04bfffc4 	movi	r18,-1
 508c184:	a4400117 	ldw	r17,4(r20)
 508c188:	a4000217 	ldw	r16,8(r20)
 508c18c:	8c7fffc4 	addi	r17,r17,-1
 508c190:	88000c16 	blt	r17,zero,508c1c4 <_fwalk_reent+0x84>
 508c194:	84000304 	addi	r16,r16,12
 508c198:	8080000b 	ldhu	r2,0(r16)
 508c19c:	8c7fffc4 	addi	r17,r17,-1
 508c1a0:	817ffd04 	addi	r5,r16,-12
 508c1a4:	b080052e 	bgeu	r22,r2,508c1bc <_fwalk_reent+0x7c>
 508c1a8:	8080008f 	ldh	r2,2(r16)
 508c1ac:	9809883a 	mov	r4,r19
 508c1b0:	14800226 	beq	r2,r18,508c1bc <_fwalk_reent+0x7c>
 508c1b4:	a83ee83a 	callr	r21
 508c1b8:	b8aeb03a 	or	r23,r23,r2
 508c1bc:	84001a04 	addi	r16,r16,104
 508c1c0:	8cbff51e 	bne	r17,r18,508c198 <__alt_data_end+0xfffbdf98>
 508c1c4:	a5000017 	ldw	r20,0(r20)
 508c1c8:	a03fee1e 	bne	r20,zero,508c184 <__alt_data_end+0xfffbdf84>
 508c1cc:	b805883a 	mov	r2,r23
 508c1d0:	dfc00817 	ldw	ra,32(sp)
 508c1d4:	ddc00717 	ldw	r23,28(sp)
 508c1d8:	dd800617 	ldw	r22,24(sp)
 508c1dc:	dd400517 	ldw	r21,20(sp)
 508c1e0:	dd000417 	ldw	r20,16(sp)
 508c1e4:	dcc00317 	ldw	r19,12(sp)
 508c1e8:	dc800217 	ldw	r18,8(sp)
 508c1ec:	dc400117 	ldw	r17,4(sp)
 508c1f0:	dc000017 	ldw	r16,0(sp)
 508c1f4:	dec00904 	addi	sp,sp,36
 508c1f8:	f800283a 	ret
 508c1fc:	002f883a 	mov	r23,zero
 508c200:	003ff206 	br	508c1cc <__alt_data_end+0xfffbdfcc>

0508c204 <_setlocale_r>:
 508c204:	30001b26 	beq	r6,zero,508c274 <_setlocale_r+0x70>
 508c208:	01414274 	movhi	r5,1289
 508c20c:	defffe04 	addi	sp,sp,-8
 508c210:	29514304 	addi	r5,r5,17676
 508c214:	3009883a 	mov	r4,r6
 508c218:	dc000015 	stw	r16,0(sp)
 508c21c:	dfc00115 	stw	ra,4(sp)
 508c220:	3021883a 	mov	r16,r6
 508c224:	508e9b00 	call	508e9b0 <strcmp>
 508c228:	1000061e 	bne	r2,zero,508c244 <_setlocale_r+0x40>
 508c22c:	00814274 	movhi	r2,1289
 508c230:	10912404 	addi	r2,r2,17552
 508c234:	dfc00117 	ldw	ra,4(sp)
 508c238:	dc000017 	ldw	r16,0(sp)
 508c23c:	dec00204 	addi	sp,sp,8
 508c240:	f800283a 	ret
 508c244:	01414274 	movhi	r5,1289
 508c248:	29512404 	addi	r5,r5,17552
 508c24c:	8009883a 	mov	r4,r16
 508c250:	508e9b00 	call	508e9b0 <strcmp>
 508c254:	103ff526 	beq	r2,zero,508c22c <__alt_data_end+0xfffbe02c>
 508c258:	01414274 	movhi	r5,1289
 508c25c:	29512e04 	addi	r5,r5,17592
 508c260:	8009883a 	mov	r4,r16
 508c264:	508e9b00 	call	508e9b0 <strcmp>
 508c268:	103ff026 	beq	r2,zero,508c22c <__alt_data_end+0xfffbe02c>
 508c26c:	0005883a 	mov	r2,zero
 508c270:	003ff006 	br	508c234 <__alt_data_end+0xfffbe034>
 508c274:	00814274 	movhi	r2,1289
 508c278:	10912404 	addi	r2,r2,17552
 508c27c:	f800283a 	ret

0508c280 <__locale_charset>:
 508c280:	00814274 	movhi	r2,1289
 508c284:	1092b604 	addi	r2,r2,19160
 508c288:	f800283a 	ret

0508c28c <__locale_mb_cur_max>:
 508c28c:	00814274 	movhi	r2,1289
 508c290:	10986304 	addi	r2,r2,24972
 508c294:	10800017 	ldw	r2,0(r2)
 508c298:	f800283a 	ret

0508c29c <__locale_msgcharset>:
 508c29c:	00814274 	movhi	r2,1289
 508c2a0:	1092ae04 	addi	r2,r2,19128
 508c2a4:	f800283a 	ret

0508c2a8 <__locale_cjk_lang>:
 508c2a8:	0005883a 	mov	r2,zero
 508c2ac:	f800283a 	ret

0508c2b0 <_localeconv_r>:
 508c2b0:	00814274 	movhi	r2,1289
 508c2b4:	1092be04 	addi	r2,r2,19192
 508c2b8:	f800283a 	ret

0508c2bc <setlocale>:
 508c2bc:	00814274 	movhi	r2,1289
 508c2c0:	10986204 	addi	r2,r2,24968
 508c2c4:	280d883a 	mov	r6,r5
 508c2c8:	200b883a 	mov	r5,r4
 508c2cc:	11000017 	ldw	r4,0(r2)
 508c2d0:	508c2041 	jmpi	508c204 <_setlocale_r>

0508c2d4 <localeconv>:
 508c2d4:	00814274 	movhi	r2,1289
 508c2d8:	1092be04 	addi	r2,r2,19192
 508c2dc:	f800283a 	ret

0508c2e0 <__smakebuf_r>:
 508c2e0:	2880030b 	ldhu	r2,12(r5)
 508c2e4:	10c0008c 	andi	r3,r2,2
 508c2e8:	1800411e 	bne	r3,zero,508c3f0 <__smakebuf_r+0x110>
 508c2ec:	deffec04 	addi	sp,sp,-80
 508c2f0:	dc000f15 	stw	r16,60(sp)
 508c2f4:	2821883a 	mov	r16,r5
 508c2f8:	2940038f 	ldh	r5,14(r5)
 508c2fc:	dc401015 	stw	r17,64(sp)
 508c300:	dfc01315 	stw	ra,76(sp)
 508c304:	dcc01215 	stw	r19,72(sp)
 508c308:	dc801115 	stw	r18,68(sp)
 508c30c:	2023883a 	mov	r17,r4
 508c310:	28001c16 	blt	r5,zero,508c384 <__smakebuf_r+0xa4>
 508c314:	d80d883a 	mov	r6,sp
 508c318:	50906b00 	call	50906b0 <_fstat_r>
 508c31c:	10001816 	blt	r2,zero,508c380 <__smakebuf_r+0xa0>
 508c320:	d8800117 	ldw	r2,4(sp)
 508c324:	00e00014 	movui	r3,32768
 508c328:	10bc000c 	andi	r2,r2,61440
 508c32c:	14c80020 	cmpeqi	r19,r2,8192
 508c330:	10c03726 	beq	r2,r3,508c410 <__smakebuf_r+0x130>
 508c334:	80c0030b 	ldhu	r3,12(r16)
 508c338:	18c20014 	ori	r3,r3,2048
 508c33c:	80c0030d 	sth	r3,12(r16)
 508c340:	00c80004 	movi	r3,8192
 508c344:	10c0521e 	bne	r2,r3,508c490 <__smakebuf_r+0x1b0>
 508c348:	8140038f 	ldh	r5,14(r16)
 508c34c:	8809883a 	mov	r4,r17
 508c350:	509070c0 	call	509070c <_isatty_r>
 508c354:	10004c26 	beq	r2,zero,508c488 <__smakebuf_r+0x1a8>
 508c358:	8080030b 	ldhu	r2,12(r16)
 508c35c:	80c010c4 	addi	r3,r16,67
 508c360:	80c00015 	stw	r3,0(r16)
 508c364:	10800054 	ori	r2,r2,1
 508c368:	8080030d 	sth	r2,12(r16)
 508c36c:	00800044 	movi	r2,1
 508c370:	80c00415 	stw	r3,16(r16)
 508c374:	80800515 	stw	r2,20(r16)
 508c378:	04810004 	movi	r18,1024
 508c37c:	00000706 	br	508c39c <__smakebuf_r+0xbc>
 508c380:	8080030b 	ldhu	r2,12(r16)
 508c384:	10c0200c 	andi	r3,r2,128
 508c388:	18001f1e 	bne	r3,zero,508c408 <__smakebuf_r+0x128>
 508c38c:	04810004 	movi	r18,1024
 508c390:	10820014 	ori	r2,r2,2048
 508c394:	8080030d 	sth	r2,12(r16)
 508c398:	0027883a 	mov	r19,zero
 508c39c:	900b883a 	mov	r5,r18
 508c3a0:	8809883a 	mov	r4,r17
 508c3a4:	508c49c0 	call	508c49c <_malloc_r>
 508c3a8:	10002c26 	beq	r2,zero,508c45c <__smakebuf_r+0x17c>
 508c3ac:	80c0030b 	ldhu	r3,12(r16)
 508c3b0:	01014274 	movhi	r4,1289
 508c3b4:	212cfd04 	addi	r4,r4,-19468
 508c3b8:	89000f15 	stw	r4,60(r17)
 508c3bc:	18c02014 	ori	r3,r3,128
 508c3c0:	80c0030d 	sth	r3,12(r16)
 508c3c4:	80800015 	stw	r2,0(r16)
 508c3c8:	80800415 	stw	r2,16(r16)
 508c3cc:	84800515 	stw	r18,20(r16)
 508c3d0:	98001a1e 	bne	r19,zero,508c43c <__smakebuf_r+0x15c>
 508c3d4:	dfc01317 	ldw	ra,76(sp)
 508c3d8:	dcc01217 	ldw	r19,72(sp)
 508c3dc:	dc801117 	ldw	r18,68(sp)
 508c3e0:	dc401017 	ldw	r17,64(sp)
 508c3e4:	dc000f17 	ldw	r16,60(sp)
 508c3e8:	dec01404 	addi	sp,sp,80
 508c3ec:	f800283a 	ret
 508c3f0:	288010c4 	addi	r2,r5,67
 508c3f4:	28800015 	stw	r2,0(r5)
 508c3f8:	28800415 	stw	r2,16(r5)
 508c3fc:	00800044 	movi	r2,1
 508c400:	28800515 	stw	r2,20(r5)
 508c404:	f800283a 	ret
 508c408:	04801004 	movi	r18,64
 508c40c:	003fe006 	br	508c390 <__alt_data_end+0xfffbe190>
 508c410:	81000a17 	ldw	r4,40(r16)
 508c414:	00c14274 	movhi	r3,1289
 508c418:	18fa5304 	addi	r3,r3,-5812
 508c41c:	20ffc51e 	bne	r4,r3,508c334 <__alt_data_end+0xfffbe134>
 508c420:	8080030b 	ldhu	r2,12(r16)
 508c424:	04810004 	movi	r18,1024
 508c428:	84801315 	stw	r18,76(r16)
 508c42c:	1484b03a 	or	r2,r2,r18
 508c430:	8080030d 	sth	r2,12(r16)
 508c434:	0027883a 	mov	r19,zero
 508c438:	003fd806 	br	508c39c <__alt_data_end+0xfffbe19c>
 508c43c:	8140038f 	ldh	r5,14(r16)
 508c440:	8809883a 	mov	r4,r17
 508c444:	509070c0 	call	509070c <_isatty_r>
 508c448:	103fe226 	beq	r2,zero,508c3d4 <__alt_data_end+0xfffbe1d4>
 508c44c:	8080030b 	ldhu	r2,12(r16)
 508c450:	10800054 	ori	r2,r2,1
 508c454:	8080030d 	sth	r2,12(r16)
 508c458:	003fde06 	br	508c3d4 <__alt_data_end+0xfffbe1d4>
 508c45c:	8080030b 	ldhu	r2,12(r16)
 508c460:	10c0800c 	andi	r3,r2,512
 508c464:	183fdb1e 	bne	r3,zero,508c3d4 <__alt_data_end+0xfffbe1d4>
 508c468:	10800094 	ori	r2,r2,2
 508c46c:	80c010c4 	addi	r3,r16,67
 508c470:	8080030d 	sth	r2,12(r16)
 508c474:	00800044 	movi	r2,1
 508c478:	80c00015 	stw	r3,0(r16)
 508c47c:	80c00415 	stw	r3,16(r16)
 508c480:	80800515 	stw	r2,20(r16)
 508c484:	003fd306 	br	508c3d4 <__alt_data_end+0xfffbe1d4>
 508c488:	04810004 	movi	r18,1024
 508c48c:	003fc306 	br	508c39c <__alt_data_end+0xfffbe19c>
 508c490:	0027883a 	mov	r19,zero
 508c494:	04810004 	movi	r18,1024
 508c498:	003fc006 	br	508c39c <__alt_data_end+0xfffbe19c>

0508c49c <_malloc_r>:
 508c49c:	defff504 	addi	sp,sp,-44
 508c4a0:	dc800315 	stw	r18,12(sp)
 508c4a4:	dfc00a15 	stw	ra,40(sp)
 508c4a8:	df000915 	stw	fp,36(sp)
 508c4ac:	ddc00815 	stw	r23,32(sp)
 508c4b0:	dd800715 	stw	r22,28(sp)
 508c4b4:	dd400615 	stw	r21,24(sp)
 508c4b8:	dd000515 	stw	r20,20(sp)
 508c4bc:	dcc00415 	stw	r19,16(sp)
 508c4c0:	dc400215 	stw	r17,8(sp)
 508c4c4:	dc000115 	stw	r16,4(sp)
 508c4c8:	288002c4 	addi	r2,r5,11
 508c4cc:	00c00584 	movi	r3,22
 508c4d0:	2025883a 	mov	r18,r4
 508c4d4:	18807f2e 	bgeu	r3,r2,508c6d4 <_malloc_r+0x238>
 508c4d8:	047ffe04 	movi	r17,-8
 508c4dc:	1462703a 	and	r17,r2,r17
 508c4e0:	8800a316 	blt	r17,zero,508c770 <_malloc_r+0x2d4>
 508c4e4:	8940a236 	bltu	r17,r5,508c770 <_malloc_r+0x2d4>
 508c4e8:	5091cdc0 	call	5091cdc <__malloc_lock>
 508c4ec:	00807dc4 	movi	r2,503
 508c4f0:	1441e92e 	bgeu	r2,r17,508cc98 <_malloc_r+0x7fc>
 508c4f4:	8804d27a 	srli	r2,r17,9
 508c4f8:	1000a126 	beq	r2,zero,508c780 <_malloc_r+0x2e4>
 508c4fc:	00c00104 	movi	r3,4
 508c500:	18811e36 	bltu	r3,r2,508c97c <_malloc_r+0x4e0>
 508c504:	8804d1ba 	srli	r2,r17,6
 508c508:	12000e44 	addi	r8,r2,57
 508c50c:	11c00e04 	addi	r7,r2,56
 508c510:	4209883a 	add	r4,r8,r8
 508c514:	04c14274 	movhi	r19,1289
 508c518:	2109883a 	add	r4,r4,r4
 508c51c:	9cd2cc04 	addi	r19,r19,19248
 508c520:	2109883a 	add	r4,r4,r4
 508c524:	9909883a 	add	r4,r19,r4
 508c528:	24000117 	ldw	r16,4(r4)
 508c52c:	213ffe04 	addi	r4,r4,-8
 508c530:	24009726 	beq	r4,r16,508c790 <_malloc_r+0x2f4>
 508c534:	80800117 	ldw	r2,4(r16)
 508c538:	01bfff04 	movi	r6,-4
 508c53c:	014003c4 	movi	r5,15
 508c540:	1184703a 	and	r2,r2,r6
 508c544:	1447c83a 	sub	r3,r2,r17
 508c548:	28c00716 	blt	r5,r3,508c568 <_malloc_r+0xcc>
 508c54c:	1800920e 	bge	r3,zero,508c798 <_malloc_r+0x2fc>
 508c550:	84000317 	ldw	r16,12(r16)
 508c554:	24008e26 	beq	r4,r16,508c790 <_malloc_r+0x2f4>
 508c558:	80800117 	ldw	r2,4(r16)
 508c55c:	1184703a 	and	r2,r2,r6
 508c560:	1447c83a 	sub	r3,r2,r17
 508c564:	28fff90e 	bge	r5,r3,508c54c <__alt_data_end+0xfffbe34c>
 508c568:	3809883a 	mov	r4,r7
 508c56c:	01814274 	movhi	r6,1289
 508c570:	9c000417 	ldw	r16,16(r19)
 508c574:	3192cc04 	addi	r6,r6,19248
 508c578:	32000204 	addi	r8,r6,8
 508c57c:	82013426 	beq	r16,r8,508ca50 <_malloc_r+0x5b4>
 508c580:	80c00117 	ldw	r3,4(r16)
 508c584:	00bfff04 	movi	r2,-4
 508c588:	188e703a 	and	r7,r3,r2
 508c58c:	3c45c83a 	sub	r2,r7,r17
 508c590:	00c003c4 	movi	r3,15
 508c594:	18811f16 	blt	r3,r2,508ca14 <_malloc_r+0x578>
 508c598:	32000515 	stw	r8,20(r6)
 508c59c:	32000415 	stw	r8,16(r6)
 508c5a0:	10007f0e 	bge	r2,zero,508c7a0 <_malloc_r+0x304>
 508c5a4:	00807fc4 	movi	r2,511
 508c5a8:	11c0fd36 	bltu	r2,r7,508c9a0 <_malloc_r+0x504>
 508c5ac:	3806d0fa 	srli	r3,r7,3
 508c5b0:	01c00044 	movi	r7,1
 508c5b4:	30800117 	ldw	r2,4(r6)
 508c5b8:	19400044 	addi	r5,r3,1
 508c5bc:	294b883a 	add	r5,r5,r5
 508c5c0:	1807d0ba 	srai	r3,r3,2
 508c5c4:	294b883a 	add	r5,r5,r5
 508c5c8:	294b883a 	add	r5,r5,r5
 508c5cc:	298b883a 	add	r5,r5,r6
 508c5d0:	38c6983a 	sll	r3,r7,r3
 508c5d4:	29c00017 	ldw	r7,0(r5)
 508c5d8:	2a7ffe04 	addi	r9,r5,-8
 508c5dc:	1886b03a 	or	r3,r3,r2
 508c5e0:	82400315 	stw	r9,12(r16)
 508c5e4:	81c00215 	stw	r7,8(r16)
 508c5e8:	30c00115 	stw	r3,4(r6)
 508c5ec:	2c000015 	stw	r16,0(r5)
 508c5f0:	3c000315 	stw	r16,12(r7)
 508c5f4:	2005d0ba 	srai	r2,r4,2
 508c5f8:	01400044 	movi	r5,1
 508c5fc:	288a983a 	sll	r5,r5,r2
 508c600:	19406f36 	bltu	r3,r5,508c7c0 <_malloc_r+0x324>
 508c604:	28c4703a 	and	r2,r5,r3
 508c608:	10000a1e 	bne	r2,zero,508c634 <_malloc_r+0x198>
 508c60c:	00bfff04 	movi	r2,-4
 508c610:	294b883a 	add	r5,r5,r5
 508c614:	2088703a 	and	r4,r4,r2
 508c618:	28c4703a 	and	r2,r5,r3
 508c61c:	21000104 	addi	r4,r4,4
 508c620:	1000041e 	bne	r2,zero,508c634 <_malloc_r+0x198>
 508c624:	294b883a 	add	r5,r5,r5
 508c628:	28c4703a 	and	r2,r5,r3
 508c62c:	21000104 	addi	r4,r4,4
 508c630:	103ffc26 	beq	r2,zero,508c624 <__alt_data_end+0xfffbe424>
 508c634:	02bfff04 	movi	r10,-4
 508c638:	024003c4 	movi	r9,15
 508c63c:	21800044 	addi	r6,r4,1
 508c640:	318d883a 	add	r6,r6,r6
 508c644:	318d883a 	add	r6,r6,r6
 508c648:	318d883a 	add	r6,r6,r6
 508c64c:	998d883a 	add	r6,r19,r6
 508c650:	333ffe04 	addi	r12,r6,-8
 508c654:	2017883a 	mov	r11,r4
 508c658:	31800104 	addi	r6,r6,4
 508c65c:	34000017 	ldw	r16,0(r6)
 508c660:	31fffd04 	addi	r7,r6,-12
 508c664:	81c0041e 	bne	r16,r7,508c678 <_malloc_r+0x1dc>
 508c668:	0000fb06 	br	508ca58 <_malloc_r+0x5bc>
 508c66c:	1801030e 	bge	r3,zero,508ca7c <_malloc_r+0x5e0>
 508c670:	84000317 	ldw	r16,12(r16)
 508c674:	81c0f826 	beq	r16,r7,508ca58 <_malloc_r+0x5bc>
 508c678:	80800117 	ldw	r2,4(r16)
 508c67c:	1284703a 	and	r2,r2,r10
 508c680:	1447c83a 	sub	r3,r2,r17
 508c684:	48fff90e 	bge	r9,r3,508c66c <__alt_data_end+0xfffbe46c>
 508c688:	80800317 	ldw	r2,12(r16)
 508c68c:	81000217 	ldw	r4,8(r16)
 508c690:	89400054 	ori	r5,r17,1
 508c694:	81400115 	stw	r5,4(r16)
 508c698:	20800315 	stw	r2,12(r4)
 508c69c:	11000215 	stw	r4,8(r2)
 508c6a0:	8463883a 	add	r17,r16,r17
 508c6a4:	9c400515 	stw	r17,20(r19)
 508c6a8:	9c400415 	stw	r17,16(r19)
 508c6ac:	18800054 	ori	r2,r3,1
 508c6b0:	88800115 	stw	r2,4(r17)
 508c6b4:	8a000315 	stw	r8,12(r17)
 508c6b8:	8a000215 	stw	r8,8(r17)
 508c6bc:	88e3883a 	add	r17,r17,r3
 508c6c0:	88c00015 	stw	r3,0(r17)
 508c6c4:	9009883a 	mov	r4,r18
 508c6c8:	5091d000 	call	5091d00 <__malloc_unlock>
 508c6cc:	80800204 	addi	r2,r16,8
 508c6d0:	00001b06 	br	508c740 <_malloc_r+0x2a4>
 508c6d4:	04400404 	movi	r17,16
 508c6d8:	89402536 	bltu	r17,r5,508c770 <_malloc_r+0x2d4>
 508c6dc:	5091cdc0 	call	5091cdc <__malloc_lock>
 508c6e0:	00800184 	movi	r2,6
 508c6e4:	01000084 	movi	r4,2
 508c6e8:	04c14274 	movhi	r19,1289
 508c6ec:	1085883a 	add	r2,r2,r2
 508c6f0:	9cd2cc04 	addi	r19,r19,19248
 508c6f4:	1085883a 	add	r2,r2,r2
 508c6f8:	9885883a 	add	r2,r19,r2
 508c6fc:	14000117 	ldw	r16,4(r2)
 508c700:	10fffe04 	addi	r3,r2,-8
 508c704:	80c0d926 	beq	r16,r3,508ca6c <_malloc_r+0x5d0>
 508c708:	80c00117 	ldw	r3,4(r16)
 508c70c:	81000317 	ldw	r4,12(r16)
 508c710:	00bfff04 	movi	r2,-4
 508c714:	1884703a 	and	r2,r3,r2
 508c718:	81400217 	ldw	r5,8(r16)
 508c71c:	8085883a 	add	r2,r16,r2
 508c720:	10c00117 	ldw	r3,4(r2)
 508c724:	29000315 	stw	r4,12(r5)
 508c728:	21400215 	stw	r5,8(r4)
 508c72c:	18c00054 	ori	r3,r3,1
 508c730:	10c00115 	stw	r3,4(r2)
 508c734:	9009883a 	mov	r4,r18
 508c738:	5091d000 	call	5091d00 <__malloc_unlock>
 508c73c:	80800204 	addi	r2,r16,8
 508c740:	dfc00a17 	ldw	ra,40(sp)
 508c744:	df000917 	ldw	fp,36(sp)
 508c748:	ddc00817 	ldw	r23,32(sp)
 508c74c:	dd800717 	ldw	r22,28(sp)
 508c750:	dd400617 	ldw	r21,24(sp)
 508c754:	dd000517 	ldw	r20,20(sp)
 508c758:	dcc00417 	ldw	r19,16(sp)
 508c75c:	dc800317 	ldw	r18,12(sp)
 508c760:	dc400217 	ldw	r17,8(sp)
 508c764:	dc000117 	ldw	r16,4(sp)
 508c768:	dec00b04 	addi	sp,sp,44
 508c76c:	f800283a 	ret
 508c770:	00800304 	movi	r2,12
 508c774:	90800015 	stw	r2,0(r18)
 508c778:	0005883a 	mov	r2,zero
 508c77c:	003ff006 	br	508c740 <__alt_data_end+0xfffbe540>
 508c780:	01002004 	movi	r4,128
 508c784:	02001004 	movi	r8,64
 508c788:	01c00fc4 	movi	r7,63
 508c78c:	003f6106 	br	508c514 <__alt_data_end+0xfffbe314>
 508c790:	4009883a 	mov	r4,r8
 508c794:	003f7506 	br	508c56c <__alt_data_end+0xfffbe36c>
 508c798:	81000317 	ldw	r4,12(r16)
 508c79c:	003fde06 	br	508c718 <__alt_data_end+0xfffbe518>
 508c7a0:	81c5883a 	add	r2,r16,r7
 508c7a4:	11400117 	ldw	r5,4(r2)
 508c7a8:	9009883a 	mov	r4,r18
 508c7ac:	29400054 	ori	r5,r5,1
 508c7b0:	11400115 	stw	r5,4(r2)
 508c7b4:	5091d000 	call	5091d00 <__malloc_unlock>
 508c7b8:	80800204 	addi	r2,r16,8
 508c7bc:	003fe006 	br	508c740 <__alt_data_end+0xfffbe540>
 508c7c0:	9c000217 	ldw	r16,8(r19)
 508c7c4:	00bfff04 	movi	r2,-4
 508c7c8:	85800117 	ldw	r22,4(r16)
 508c7cc:	b0ac703a 	and	r22,r22,r2
 508c7d0:	b4400336 	bltu	r22,r17,508c7e0 <_malloc_r+0x344>
 508c7d4:	b445c83a 	sub	r2,r22,r17
 508c7d8:	00c003c4 	movi	r3,15
 508c7dc:	18805d16 	blt	r3,r2,508c954 <_malloc_r+0x4b8>
 508c7e0:	05c14274 	movhi	r23,1289
 508c7e4:	00814274 	movhi	r2,1289
 508c7e8:	109f5d04 	addi	r2,r2,32116
 508c7ec:	bdd86404 	addi	r23,r23,24976
 508c7f0:	15400017 	ldw	r21,0(r2)
 508c7f4:	b8c00017 	ldw	r3,0(r23)
 508c7f8:	00bfffc4 	movi	r2,-1
 508c7fc:	858d883a 	add	r6,r16,r22
 508c800:	8d6b883a 	add	r21,r17,r21
 508c804:	1880ea26 	beq	r3,r2,508cbb0 <_malloc_r+0x714>
 508c808:	ad4403c4 	addi	r21,r21,4111
 508c80c:	00bc0004 	movi	r2,-4096
 508c810:	a8aa703a 	and	r21,r21,r2
 508c814:	a80b883a 	mov	r5,r21
 508c818:	9009883a 	mov	r4,r18
 508c81c:	d9800015 	stw	r6,0(sp)
 508c820:	508e8200 	call	508e820 <_sbrk_r>
 508c824:	1029883a 	mov	r20,r2
 508c828:	00bfffc4 	movi	r2,-1
 508c82c:	d9800017 	ldw	r6,0(sp)
 508c830:	a080e826 	beq	r20,r2,508cbd4 <_malloc_r+0x738>
 508c834:	a180a636 	bltu	r20,r6,508cad0 <_malloc_r+0x634>
 508c838:	07014274 	movhi	fp,1289
 508c83c:	e71f6f04 	addi	fp,fp,32188
 508c840:	e0800017 	ldw	r2,0(fp)
 508c844:	a887883a 	add	r3,r21,r2
 508c848:	e0c00015 	stw	r3,0(fp)
 508c84c:	3500e626 	beq	r6,r20,508cbe8 <_malloc_r+0x74c>
 508c850:	b9000017 	ldw	r4,0(r23)
 508c854:	00bfffc4 	movi	r2,-1
 508c858:	2080ee26 	beq	r4,r2,508cc14 <_malloc_r+0x778>
 508c85c:	a185c83a 	sub	r2,r20,r6
 508c860:	10c5883a 	add	r2,r2,r3
 508c864:	e0800015 	stw	r2,0(fp)
 508c868:	a0c001cc 	andi	r3,r20,7
 508c86c:	1800bc26 	beq	r3,zero,508cb60 <_malloc_r+0x6c4>
 508c870:	a0e9c83a 	sub	r20,r20,r3
 508c874:	00840204 	movi	r2,4104
 508c878:	a5000204 	addi	r20,r20,8
 508c87c:	10c7c83a 	sub	r3,r2,r3
 508c880:	a545883a 	add	r2,r20,r21
 508c884:	1083ffcc 	andi	r2,r2,4095
 508c888:	18abc83a 	sub	r21,r3,r2
 508c88c:	a80b883a 	mov	r5,r21
 508c890:	9009883a 	mov	r4,r18
 508c894:	508e8200 	call	508e820 <_sbrk_r>
 508c898:	00ffffc4 	movi	r3,-1
 508c89c:	10c0e126 	beq	r2,r3,508cc24 <_malloc_r+0x788>
 508c8a0:	1505c83a 	sub	r2,r2,r20
 508c8a4:	1545883a 	add	r2,r2,r21
 508c8a8:	10800054 	ori	r2,r2,1
 508c8ac:	e0c00017 	ldw	r3,0(fp)
 508c8b0:	9d000215 	stw	r20,8(r19)
 508c8b4:	a0800115 	stw	r2,4(r20)
 508c8b8:	a8c7883a 	add	r3,r21,r3
 508c8bc:	e0c00015 	stw	r3,0(fp)
 508c8c0:	84c00e26 	beq	r16,r19,508c8fc <_malloc_r+0x460>
 508c8c4:	018003c4 	movi	r6,15
 508c8c8:	3580a72e 	bgeu	r6,r22,508cb68 <_malloc_r+0x6cc>
 508c8cc:	81400117 	ldw	r5,4(r16)
 508c8d0:	013ffe04 	movi	r4,-8
 508c8d4:	b0bffd04 	addi	r2,r22,-12
 508c8d8:	1104703a 	and	r2,r2,r4
 508c8dc:	2900004c 	andi	r4,r5,1
 508c8e0:	2088b03a 	or	r4,r4,r2
 508c8e4:	81000115 	stw	r4,4(r16)
 508c8e8:	01400144 	movi	r5,5
 508c8ec:	8089883a 	add	r4,r16,r2
 508c8f0:	21400115 	stw	r5,4(r4)
 508c8f4:	21400215 	stw	r5,8(r4)
 508c8f8:	3080cd36 	bltu	r6,r2,508cc30 <_malloc_r+0x794>
 508c8fc:	00814274 	movhi	r2,1289
 508c900:	109f5c04 	addi	r2,r2,32112
 508c904:	11000017 	ldw	r4,0(r2)
 508c908:	20c0012e 	bgeu	r4,r3,508c910 <_malloc_r+0x474>
 508c90c:	10c00015 	stw	r3,0(r2)
 508c910:	00814274 	movhi	r2,1289
 508c914:	109f5b04 	addi	r2,r2,32108
 508c918:	11000017 	ldw	r4,0(r2)
 508c91c:	9c000217 	ldw	r16,8(r19)
 508c920:	20c0012e 	bgeu	r4,r3,508c928 <_malloc_r+0x48c>
 508c924:	10c00015 	stw	r3,0(r2)
 508c928:	80c00117 	ldw	r3,4(r16)
 508c92c:	00bfff04 	movi	r2,-4
 508c930:	1886703a 	and	r3,r3,r2
 508c934:	1c45c83a 	sub	r2,r3,r17
 508c938:	1c400236 	bltu	r3,r17,508c944 <_malloc_r+0x4a8>
 508c93c:	00c003c4 	movi	r3,15
 508c940:	18800416 	blt	r3,r2,508c954 <_malloc_r+0x4b8>
 508c944:	9009883a 	mov	r4,r18
 508c948:	5091d000 	call	5091d00 <__malloc_unlock>
 508c94c:	0005883a 	mov	r2,zero
 508c950:	003f7b06 	br	508c740 <__alt_data_end+0xfffbe540>
 508c954:	88c00054 	ori	r3,r17,1
 508c958:	80c00115 	stw	r3,4(r16)
 508c95c:	8463883a 	add	r17,r16,r17
 508c960:	10800054 	ori	r2,r2,1
 508c964:	9c400215 	stw	r17,8(r19)
 508c968:	88800115 	stw	r2,4(r17)
 508c96c:	9009883a 	mov	r4,r18
 508c970:	5091d000 	call	5091d00 <__malloc_unlock>
 508c974:	80800204 	addi	r2,r16,8
 508c978:	003f7106 	br	508c740 <__alt_data_end+0xfffbe540>
 508c97c:	00c00504 	movi	r3,20
 508c980:	18804a2e 	bgeu	r3,r2,508caac <_malloc_r+0x610>
 508c984:	00c01504 	movi	r3,84
 508c988:	18806e36 	bltu	r3,r2,508cb44 <_malloc_r+0x6a8>
 508c98c:	8804d33a 	srli	r2,r17,12
 508c990:	12001bc4 	addi	r8,r2,111
 508c994:	11c01b84 	addi	r7,r2,110
 508c998:	4209883a 	add	r4,r8,r8
 508c99c:	003edd06 	br	508c514 <__alt_data_end+0xfffbe314>
 508c9a0:	3804d27a 	srli	r2,r7,9
 508c9a4:	00c00104 	movi	r3,4
 508c9a8:	1880442e 	bgeu	r3,r2,508cabc <_malloc_r+0x620>
 508c9ac:	00c00504 	movi	r3,20
 508c9b0:	18808136 	bltu	r3,r2,508cbb8 <_malloc_r+0x71c>
 508c9b4:	11401704 	addi	r5,r2,92
 508c9b8:	10c016c4 	addi	r3,r2,91
 508c9bc:	294b883a 	add	r5,r5,r5
 508c9c0:	294b883a 	add	r5,r5,r5
 508c9c4:	294b883a 	add	r5,r5,r5
 508c9c8:	994b883a 	add	r5,r19,r5
 508c9cc:	28800017 	ldw	r2,0(r5)
 508c9d0:	01814274 	movhi	r6,1289
 508c9d4:	297ffe04 	addi	r5,r5,-8
 508c9d8:	3192cc04 	addi	r6,r6,19248
 508c9dc:	28806526 	beq	r5,r2,508cb74 <_malloc_r+0x6d8>
 508c9e0:	01bfff04 	movi	r6,-4
 508c9e4:	10c00117 	ldw	r3,4(r2)
 508c9e8:	1986703a 	and	r3,r3,r6
 508c9ec:	38c0022e 	bgeu	r7,r3,508c9f8 <_malloc_r+0x55c>
 508c9f0:	10800217 	ldw	r2,8(r2)
 508c9f4:	28bffb1e 	bne	r5,r2,508c9e4 <__alt_data_end+0xfffbe7e4>
 508c9f8:	11400317 	ldw	r5,12(r2)
 508c9fc:	98c00117 	ldw	r3,4(r19)
 508ca00:	81400315 	stw	r5,12(r16)
 508ca04:	80800215 	stw	r2,8(r16)
 508ca08:	2c000215 	stw	r16,8(r5)
 508ca0c:	14000315 	stw	r16,12(r2)
 508ca10:	003ef806 	br	508c5f4 <__alt_data_end+0xfffbe3f4>
 508ca14:	88c00054 	ori	r3,r17,1
 508ca18:	80c00115 	stw	r3,4(r16)
 508ca1c:	8463883a 	add	r17,r16,r17
 508ca20:	34400515 	stw	r17,20(r6)
 508ca24:	34400415 	stw	r17,16(r6)
 508ca28:	10c00054 	ori	r3,r2,1
 508ca2c:	8a000315 	stw	r8,12(r17)
 508ca30:	8a000215 	stw	r8,8(r17)
 508ca34:	88c00115 	stw	r3,4(r17)
 508ca38:	88a3883a 	add	r17,r17,r2
 508ca3c:	88800015 	stw	r2,0(r17)
 508ca40:	9009883a 	mov	r4,r18
 508ca44:	5091d000 	call	5091d00 <__malloc_unlock>
 508ca48:	80800204 	addi	r2,r16,8
 508ca4c:	003f3c06 	br	508c740 <__alt_data_end+0xfffbe540>
 508ca50:	30c00117 	ldw	r3,4(r6)
 508ca54:	003ee706 	br	508c5f4 <__alt_data_end+0xfffbe3f4>
 508ca58:	5ac00044 	addi	r11,r11,1
 508ca5c:	588000cc 	andi	r2,r11,3
 508ca60:	31800204 	addi	r6,r6,8
 508ca64:	103efd1e 	bne	r2,zero,508c65c <__alt_data_end+0xfffbe45c>
 508ca68:	00002406 	br	508cafc <_malloc_r+0x660>
 508ca6c:	14000317 	ldw	r16,12(r2)
 508ca70:	143f251e 	bne	r2,r16,508c708 <__alt_data_end+0xfffbe508>
 508ca74:	21000084 	addi	r4,r4,2
 508ca78:	003ebc06 	br	508c56c <__alt_data_end+0xfffbe36c>
 508ca7c:	8085883a 	add	r2,r16,r2
 508ca80:	10c00117 	ldw	r3,4(r2)
 508ca84:	81000317 	ldw	r4,12(r16)
 508ca88:	81400217 	ldw	r5,8(r16)
 508ca8c:	18c00054 	ori	r3,r3,1
 508ca90:	10c00115 	stw	r3,4(r2)
 508ca94:	29000315 	stw	r4,12(r5)
 508ca98:	21400215 	stw	r5,8(r4)
 508ca9c:	9009883a 	mov	r4,r18
 508caa0:	5091d000 	call	5091d00 <__malloc_unlock>
 508caa4:	80800204 	addi	r2,r16,8
 508caa8:	003f2506 	br	508c740 <__alt_data_end+0xfffbe540>
 508caac:	12001704 	addi	r8,r2,92
 508cab0:	11c016c4 	addi	r7,r2,91
 508cab4:	4209883a 	add	r4,r8,r8
 508cab8:	003e9606 	br	508c514 <__alt_data_end+0xfffbe314>
 508cabc:	3804d1ba 	srli	r2,r7,6
 508cac0:	11400e44 	addi	r5,r2,57
 508cac4:	10c00e04 	addi	r3,r2,56
 508cac8:	294b883a 	add	r5,r5,r5
 508cacc:	003fbc06 	br	508c9c0 <__alt_data_end+0xfffbe7c0>
 508cad0:	84ff5926 	beq	r16,r19,508c838 <__alt_data_end+0xfffbe638>
 508cad4:	00814274 	movhi	r2,1289
 508cad8:	1092cc04 	addi	r2,r2,19248
 508cadc:	14000217 	ldw	r16,8(r2)
 508cae0:	00bfff04 	movi	r2,-4
 508cae4:	80c00117 	ldw	r3,4(r16)
 508cae8:	1886703a 	and	r3,r3,r2
 508caec:	003f9106 	br	508c934 <__alt_data_end+0xfffbe734>
 508caf0:	60800217 	ldw	r2,8(r12)
 508caf4:	213fffc4 	addi	r4,r4,-1
 508caf8:	1300651e 	bne	r2,r12,508cc90 <_malloc_r+0x7f4>
 508cafc:	208000cc 	andi	r2,r4,3
 508cb00:	633ffe04 	addi	r12,r12,-8
 508cb04:	103ffa1e 	bne	r2,zero,508caf0 <__alt_data_end+0xfffbe8f0>
 508cb08:	98800117 	ldw	r2,4(r19)
 508cb0c:	0146303a 	nor	r3,zero,r5
 508cb10:	1884703a 	and	r2,r3,r2
 508cb14:	98800115 	stw	r2,4(r19)
 508cb18:	294b883a 	add	r5,r5,r5
 508cb1c:	117f2836 	bltu	r2,r5,508c7c0 <__alt_data_end+0xfffbe5c0>
 508cb20:	283f2726 	beq	r5,zero,508c7c0 <__alt_data_end+0xfffbe5c0>
 508cb24:	2886703a 	and	r3,r5,r2
 508cb28:	5809883a 	mov	r4,r11
 508cb2c:	183ec31e 	bne	r3,zero,508c63c <__alt_data_end+0xfffbe43c>
 508cb30:	294b883a 	add	r5,r5,r5
 508cb34:	2886703a 	and	r3,r5,r2
 508cb38:	21000104 	addi	r4,r4,4
 508cb3c:	183ffc26 	beq	r3,zero,508cb30 <__alt_data_end+0xfffbe930>
 508cb40:	003ebe06 	br	508c63c <__alt_data_end+0xfffbe43c>
 508cb44:	00c05504 	movi	r3,340
 508cb48:	18801236 	bltu	r3,r2,508cb94 <_malloc_r+0x6f8>
 508cb4c:	8804d3fa 	srli	r2,r17,15
 508cb50:	12001e04 	addi	r8,r2,120
 508cb54:	11c01dc4 	addi	r7,r2,119
 508cb58:	4209883a 	add	r4,r8,r8
 508cb5c:	003e6d06 	br	508c514 <__alt_data_end+0xfffbe314>
 508cb60:	00c40004 	movi	r3,4096
 508cb64:	003f4606 	br	508c880 <__alt_data_end+0xfffbe680>
 508cb68:	00800044 	movi	r2,1
 508cb6c:	a0800115 	stw	r2,4(r20)
 508cb70:	003f7406 	br	508c944 <__alt_data_end+0xfffbe744>
 508cb74:	1805d0ba 	srai	r2,r3,2
 508cb78:	01c00044 	movi	r7,1
 508cb7c:	30c00117 	ldw	r3,4(r6)
 508cb80:	388e983a 	sll	r7,r7,r2
 508cb84:	2805883a 	mov	r2,r5
 508cb88:	38c6b03a 	or	r3,r7,r3
 508cb8c:	30c00115 	stw	r3,4(r6)
 508cb90:	003f9b06 	br	508ca00 <__alt_data_end+0xfffbe800>
 508cb94:	00c15504 	movi	r3,1364
 508cb98:	18801a36 	bltu	r3,r2,508cc04 <_malloc_r+0x768>
 508cb9c:	8804d4ba 	srli	r2,r17,18
 508cba0:	12001f44 	addi	r8,r2,125
 508cba4:	11c01f04 	addi	r7,r2,124
 508cba8:	4209883a 	add	r4,r8,r8
 508cbac:	003e5906 	br	508c514 <__alt_data_end+0xfffbe314>
 508cbb0:	ad400404 	addi	r21,r21,16
 508cbb4:	003f1706 	br	508c814 <__alt_data_end+0xfffbe614>
 508cbb8:	00c01504 	movi	r3,84
 508cbbc:	18802336 	bltu	r3,r2,508cc4c <_malloc_r+0x7b0>
 508cbc0:	3804d33a 	srli	r2,r7,12
 508cbc4:	11401bc4 	addi	r5,r2,111
 508cbc8:	10c01b84 	addi	r3,r2,110
 508cbcc:	294b883a 	add	r5,r5,r5
 508cbd0:	003f7b06 	br	508c9c0 <__alt_data_end+0xfffbe7c0>
 508cbd4:	9c000217 	ldw	r16,8(r19)
 508cbd8:	00bfff04 	movi	r2,-4
 508cbdc:	80c00117 	ldw	r3,4(r16)
 508cbe0:	1886703a 	and	r3,r3,r2
 508cbe4:	003f5306 	br	508c934 <__alt_data_end+0xfffbe734>
 508cbe8:	3083ffcc 	andi	r2,r6,4095
 508cbec:	103f181e 	bne	r2,zero,508c850 <__alt_data_end+0xfffbe650>
 508cbf0:	99000217 	ldw	r4,8(r19)
 508cbf4:	b545883a 	add	r2,r22,r21
 508cbf8:	10800054 	ori	r2,r2,1
 508cbfc:	20800115 	stw	r2,4(r4)
 508cc00:	003f3e06 	br	508c8fc <__alt_data_end+0xfffbe6fc>
 508cc04:	01003f84 	movi	r4,254
 508cc08:	02001fc4 	movi	r8,127
 508cc0c:	01c01f84 	movi	r7,126
 508cc10:	003e4006 	br	508c514 <__alt_data_end+0xfffbe314>
 508cc14:	00814274 	movhi	r2,1289
 508cc18:	10986404 	addi	r2,r2,24976
 508cc1c:	15000015 	stw	r20,0(r2)
 508cc20:	003f1106 	br	508c868 <__alt_data_end+0xfffbe668>
 508cc24:	00800044 	movi	r2,1
 508cc28:	002b883a 	mov	r21,zero
 508cc2c:	003f1f06 	br	508c8ac <__alt_data_end+0xfffbe6ac>
 508cc30:	81400204 	addi	r5,r16,8
 508cc34:	9009883a 	mov	r4,r18
 508cc38:	508b8b00 	call	508b8b0 <_free_r>
 508cc3c:	00814274 	movhi	r2,1289
 508cc40:	109f6f04 	addi	r2,r2,32188
 508cc44:	10c00017 	ldw	r3,0(r2)
 508cc48:	003f2c06 	br	508c8fc <__alt_data_end+0xfffbe6fc>
 508cc4c:	00c05504 	movi	r3,340
 508cc50:	18800536 	bltu	r3,r2,508cc68 <_malloc_r+0x7cc>
 508cc54:	3804d3fa 	srli	r2,r7,15
 508cc58:	11401e04 	addi	r5,r2,120
 508cc5c:	10c01dc4 	addi	r3,r2,119
 508cc60:	294b883a 	add	r5,r5,r5
 508cc64:	003f5606 	br	508c9c0 <__alt_data_end+0xfffbe7c0>
 508cc68:	00c15504 	movi	r3,1364
 508cc6c:	18800536 	bltu	r3,r2,508cc84 <_malloc_r+0x7e8>
 508cc70:	3804d4ba 	srli	r2,r7,18
 508cc74:	11401f44 	addi	r5,r2,125
 508cc78:	10c01f04 	addi	r3,r2,124
 508cc7c:	294b883a 	add	r5,r5,r5
 508cc80:	003f4f06 	br	508c9c0 <__alt_data_end+0xfffbe7c0>
 508cc84:	01403f84 	movi	r5,254
 508cc88:	00c01f84 	movi	r3,126
 508cc8c:	003f4c06 	br	508c9c0 <__alt_data_end+0xfffbe7c0>
 508cc90:	98800117 	ldw	r2,4(r19)
 508cc94:	003fa006 	br	508cb18 <__alt_data_end+0xfffbe918>
 508cc98:	8808d0fa 	srli	r4,r17,3
 508cc9c:	20800044 	addi	r2,r4,1
 508cca0:	1085883a 	add	r2,r2,r2
 508cca4:	003e9006 	br	508c6e8 <__alt_data_end+0xfffbe4e8>

0508cca8 <memchr>:
 508cca8:	208000cc 	andi	r2,r4,3
 508ccac:	280f883a 	mov	r7,r5
 508ccb0:	10003426 	beq	r2,zero,508cd84 <memchr+0xdc>
 508ccb4:	30bfffc4 	addi	r2,r6,-1
 508ccb8:	30001a26 	beq	r6,zero,508cd24 <memchr+0x7c>
 508ccbc:	20c00003 	ldbu	r3,0(r4)
 508ccc0:	29803fcc 	andi	r6,r5,255
 508ccc4:	30c0051e 	bne	r6,r3,508ccdc <memchr+0x34>
 508ccc8:	00001806 	br	508cd2c <memchr+0x84>
 508cccc:	10001526 	beq	r2,zero,508cd24 <memchr+0x7c>
 508ccd0:	20c00003 	ldbu	r3,0(r4)
 508ccd4:	10bfffc4 	addi	r2,r2,-1
 508ccd8:	30c01426 	beq	r6,r3,508cd2c <memchr+0x84>
 508ccdc:	21000044 	addi	r4,r4,1
 508cce0:	20c000cc 	andi	r3,r4,3
 508cce4:	183ff91e 	bne	r3,zero,508cccc <__alt_data_end+0xfffbeacc>
 508cce8:	020000c4 	movi	r8,3
 508ccec:	40801136 	bltu	r8,r2,508cd34 <memchr+0x8c>
 508ccf0:	10000c26 	beq	r2,zero,508cd24 <memchr+0x7c>
 508ccf4:	20c00003 	ldbu	r3,0(r4)
 508ccf8:	29403fcc 	andi	r5,r5,255
 508ccfc:	28c00b26 	beq	r5,r3,508cd2c <memchr+0x84>
 508cd00:	20c00044 	addi	r3,r4,1
 508cd04:	39803fcc 	andi	r6,r7,255
 508cd08:	2089883a 	add	r4,r4,r2
 508cd0c:	00000306 	br	508cd1c <memchr+0x74>
 508cd10:	18c00044 	addi	r3,r3,1
 508cd14:	197fffc3 	ldbu	r5,-1(r3)
 508cd18:	31400526 	beq	r6,r5,508cd30 <memchr+0x88>
 508cd1c:	1805883a 	mov	r2,r3
 508cd20:	20fffb1e 	bne	r4,r3,508cd10 <__alt_data_end+0xfffbeb10>
 508cd24:	0005883a 	mov	r2,zero
 508cd28:	f800283a 	ret
 508cd2c:	2005883a 	mov	r2,r4
 508cd30:	f800283a 	ret
 508cd34:	28c03fcc 	andi	r3,r5,255
 508cd38:	1812923a 	slli	r9,r3,8
 508cd3c:	02ffbff4 	movhi	r11,65279
 508cd40:	02a02074 	movhi	r10,32897
 508cd44:	48d2b03a 	or	r9,r9,r3
 508cd48:	4806943a 	slli	r3,r9,16
 508cd4c:	5affbfc4 	addi	r11,r11,-257
 508cd50:	52a02004 	addi	r10,r10,-32640
 508cd54:	48d2b03a 	or	r9,r9,r3
 508cd58:	20c00017 	ldw	r3,0(r4)
 508cd5c:	48c6f03a 	xor	r3,r9,r3
 508cd60:	1acd883a 	add	r6,r3,r11
 508cd64:	00c6303a 	nor	r3,zero,r3
 508cd68:	30c6703a 	and	r3,r6,r3
 508cd6c:	1a86703a 	and	r3,r3,r10
 508cd70:	183fe01e 	bne	r3,zero,508ccf4 <__alt_data_end+0xfffbeaf4>
 508cd74:	10bfff04 	addi	r2,r2,-4
 508cd78:	21000104 	addi	r4,r4,4
 508cd7c:	40bff636 	bltu	r8,r2,508cd58 <__alt_data_end+0xfffbeb58>
 508cd80:	003fdb06 	br	508ccf0 <__alt_data_end+0xfffbeaf0>
 508cd84:	3005883a 	mov	r2,r6
 508cd88:	003fd706 	br	508cce8 <__alt_data_end+0xfffbeae8>

0508cd8c <memcpy>:
 508cd8c:	defffd04 	addi	sp,sp,-12
 508cd90:	dfc00215 	stw	ra,8(sp)
 508cd94:	dc400115 	stw	r17,4(sp)
 508cd98:	dc000015 	stw	r16,0(sp)
 508cd9c:	00c003c4 	movi	r3,15
 508cda0:	2005883a 	mov	r2,r4
 508cda4:	1980452e 	bgeu	r3,r6,508cebc <memcpy+0x130>
 508cda8:	2906b03a 	or	r3,r5,r4
 508cdac:	18c000cc 	andi	r3,r3,3
 508cdb0:	1800441e 	bne	r3,zero,508cec4 <memcpy+0x138>
 508cdb4:	347ffc04 	addi	r17,r6,-16
 508cdb8:	8822d13a 	srli	r17,r17,4
 508cdbc:	28c00104 	addi	r3,r5,4
 508cdc0:	23400104 	addi	r13,r4,4
 508cdc4:	8820913a 	slli	r16,r17,4
 508cdc8:	2b000204 	addi	r12,r5,8
 508cdcc:	22c00204 	addi	r11,r4,8
 508cdd0:	84000504 	addi	r16,r16,20
 508cdd4:	2a800304 	addi	r10,r5,12
 508cdd8:	22400304 	addi	r9,r4,12
 508cddc:	2c21883a 	add	r16,r5,r16
 508cde0:	2811883a 	mov	r8,r5
 508cde4:	200f883a 	mov	r7,r4
 508cde8:	41000017 	ldw	r4,0(r8)
 508cdec:	1fc00017 	ldw	ra,0(r3)
 508cdf0:	63c00017 	ldw	r15,0(r12)
 508cdf4:	39000015 	stw	r4,0(r7)
 508cdf8:	53800017 	ldw	r14,0(r10)
 508cdfc:	6fc00015 	stw	ra,0(r13)
 508ce00:	5bc00015 	stw	r15,0(r11)
 508ce04:	4b800015 	stw	r14,0(r9)
 508ce08:	18c00404 	addi	r3,r3,16
 508ce0c:	39c00404 	addi	r7,r7,16
 508ce10:	42000404 	addi	r8,r8,16
 508ce14:	6b400404 	addi	r13,r13,16
 508ce18:	63000404 	addi	r12,r12,16
 508ce1c:	5ac00404 	addi	r11,r11,16
 508ce20:	52800404 	addi	r10,r10,16
 508ce24:	4a400404 	addi	r9,r9,16
 508ce28:	1c3fef1e 	bne	r3,r16,508cde8 <__alt_data_end+0xfffbebe8>
 508ce2c:	89c00044 	addi	r7,r17,1
 508ce30:	380e913a 	slli	r7,r7,4
 508ce34:	310003cc 	andi	r4,r6,15
 508ce38:	02c000c4 	movi	r11,3
 508ce3c:	11c7883a 	add	r3,r2,r7
 508ce40:	29cb883a 	add	r5,r5,r7
 508ce44:	5900212e 	bgeu	r11,r4,508cecc <memcpy+0x140>
 508ce48:	1813883a 	mov	r9,r3
 508ce4c:	2811883a 	mov	r8,r5
 508ce50:	200f883a 	mov	r7,r4
 508ce54:	42800017 	ldw	r10,0(r8)
 508ce58:	4a400104 	addi	r9,r9,4
 508ce5c:	39ffff04 	addi	r7,r7,-4
 508ce60:	4abfff15 	stw	r10,-4(r9)
 508ce64:	42000104 	addi	r8,r8,4
 508ce68:	59fffa36 	bltu	r11,r7,508ce54 <__alt_data_end+0xfffbec54>
 508ce6c:	213fff04 	addi	r4,r4,-4
 508ce70:	2008d0ba 	srli	r4,r4,2
 508ce74:	318000cc 	andi	r6,r6,3
 508ce78:	21000044 	addi	r4,r4,1
 508ce7c:	2109883a 	add	r4,r4,r4
 508ce80:	2109883a 	add	r4,r4,r4
 508ce84:	1907883a 	add	r3,r3,r4
 508ce88:	290b883a 	add	r5,r5,r4
 508ce8c:	30000626 	beq	r6,zero,508cea8 <memcpy+0x11c>
 508ce90:	198d883a 	add	r6,r3,r6
 508ce94:	29c00003 	ldbu	r7,0(r5)
 508ce98:	18c00044 	addi	r3,r3,1
 508ce9c:	29400044 	addi	r5,r5,1
 508cea0:	19ffffc5 	stb	r7,-1(r3)
 508cea4:	19bffb1e 	bne	r3,r6,508ce94 <__alt_data_end+0xfffbec94>
 508cea8:	dfc00217 	ldw	ra,8(sp)
 508ceac:	dc400117 	ldw	r17,4(sp)
 508ceb0:	dc000017 	ldw	r16,0(sp)
 508ceb4:	dec00304 	addi	sp,sp,12
 508ceb8:	f800283a 	ret
 508cebc:	2007883a 	mov	r3,r4
 508cec0:	003ff206 	br	508ce8c <__alt_data_end+0xfffbec8c>
 508cec4:	2007883a 	mov	r3,r4
 508cec8:	003ff106 	br	508ce90 <__alt_data_end+0xfffbec90>
 508cecc:	200d883a 	mov	r6,r4
 508ced0:	003fee06 	br	508ce8c <__alt_data_end+0xfffbec8c>

0508ced4 <memmove>:
 508ced4:	2005883a 	mov	r2,r4
 508ced8:	29000b2e 	bgeu	r5,r4,508cf08 <memmove+0x34>
 508cedc:	298f883a 	add	r7,r5,r6
 508cee0:	21c0092e 	bgeu	r4,r7,508cf08 <memmove+0x34>
 508cee4:	2187883a 	add	r3,r4,r6
 508cee8:	198bc83a 	sub	r5,r3,r6
 508ceec:	30004826 	beq	r6,zero,508d010 <memmove+0x13c>
 508cef0:	39ffffc4 	addi	r7,r7,-1
 508cef4:	39000003 	ldbu	r4,0(r7)
 508cef8:	18ffffc4 	addi	r3,r3,-1
 508cefc:	19000005 	stb	r4,0(r3)
 508cf00:	28fffb1e 	bne	r5,r3,508cef0 <__alt_data_end+0xfffbecf0>
 508cf04:	f800283a 	ret
 508cf08:	00c003c4 	movi	r3,15
 508cf0c:	1980412e 	bgeu	r3,r6,508d014 <memmove+0x140>
 508cf10:	2886b03a 	or	r3,r5,r2
 508cf14:	18c000cc 	andi	r3,r3,3
 508cf18:	1800401e 	bne	r3,zero,508d01c <memmove+0x148>
 508cf1c:	33fffc04 	addi	r15,r6,-16
 508cf20:	781ed13a 	srli	r15,r15,4
 508cf24:	28c00104 	addi	r3,r5,4
 508cf28:	13400104 	addi	r13,r2,4
 508cf2c:	781c913a 	slli	r14,r15,4
 508cf30:	2b000204 	addi	r12,r5,8
 508cf34:	12c00204 	addi	r11,r2,8
 508cf38:	73800504 	addi	r14,r14,20
 508cf3c:	2a800304 	addi	r10,r5,12
 508cf40:	12400304 	addi	r9,r2,12
 508cf44:	2b9d883a 	add	r14,r5,r14
 508cf48:	2811883a 	mov	r8,r5
 508cf4c:	100f883a 	mov	r7,r2
 508cf50:	41000017 	ldw	r4,0(r8)
 508cf54:	39c00404 	addi	r7,r7,16
 508cf58:	18c00404 	addi	r3,r3,16
 508cf5c:	393ffc15 	stw	r4,-16(r7)
 508cf60:	193ffc17 	ldw	r4,-16(r3)
 508cf64:	6b400404 	addi	r13,r13,16
 508cf68:	5ac00404 	addi	r11,r11,16
 508cf6c:	693ffc15 	stw	r4,-16(r13)
 508cf70:	61000017 	ldw	r4,0(r12)
 508cf74:	4a400404 	addi	r9,r9,16
 508cf78:	42000404 	addi	r8,r8,16
 508cf7c:	593ffc15 	stw	r4,-16(r11)
 508cf80:	51000017 	ldw	r4,0(r10)
 508cf84:	63000404 	addi	r12,r12,16
 508cf88:	52800404 	addi	r10,r10,16
 508cf8c:	493ffc15 	stw	r4,-16(r9)
 508cf90:	1bbfef1e 	bne	r3,r14,508cf50 <__alt_data_end+0xfffbed50>
 508cf94:	79000044 	addi	r4,r15,1
 508cf98:	2008913a 	slli	r4,r4,4
 508cf9c:	328003cc 	andi	r10,r6,15
 508cfa0:	02c000c4 	movi	r11,3
 508cfa4:	1107883a 	add	r3,r2,r4
 508cfa8:	290b883a 	add	r5,r5,r4
 508cfac:	5a801e2e 	bgeu	r11,r10,508d028 <memmove+0x154>
 508cfb0:	1813883a 	mov	r9,r3
 508cfb4:	2811883a 	mov	r8,r5
 508cfb8:	500f883a 	mov	r7,r10
 508cfbc:	41000017 	ldw	r4,0(r8)
 508cfc0:	4a400104 	addi	r9,r9,4
 508cfc4:	39ffff04 	addi	r7,r7,-4
 508cfc8:	493fff15 	stw	r4,-4(r9)
 508cfcc:	42000104 	addi	r8,r8,4
 508cfd0:	59fffa36 	bltu	r11,r7,508cfbc <__alt_data_end+0xfffbedbc>
 508cfd4:	513fff04 	addi	r4,r10,-4
 508cfd8:	2008d0ba 	srli	r4,r4,2
 508cfdc:	318000cc 	andi	r6,r6,3
 508cfe0:	21000044 	addi	r4,r4,1
 508cfe4:	2109883a 	add	r4,r4,r4
 508cfe8:	2109883a 	add	r4,r4,r4
 508cfec:	1907883a 	add	r3,r3,r4
 508cff0:	290b883a 	add	r5,r5,r4
 508cff4:	30000b26 	beq	r6,zero,508d024 <memmove+0x150>
 508cff8:	198d883a 	add	r6,r3,r6
 508cffc:	29c00003 	ldbu	r7,0(r5)
 508d000:	18c00044 	addi	r3,r3,1
 508d004:	29400044 	addi	r5,r5,1
 508d008:	19ffffc5 	stb	r7,-1(r3)
 508d00c:	19bffb1e 	bne	r3,r6,508cffc <__alt_data_end+0xfffbedfc>
 508d010:	f800283a 	ret
 508d014:	1007883a 	mov	r3,r2
 508d018:	003ff606 	br	508cff4 <__alt_data_end+0xfffbedf4>
 508d01c:	1007883a 	mov	r3,r2
 508d020:	003ff506 	br	508cff8 <__alt_data_end+0xfffbedf8>
 508d024:	f800283a 	ret
 508d028:	500d883a 	mov	r6,r10
 508d02c:	003ff106 	br	508cff4 <__alt_data_end+0xfffbedf4>

0508d030 <memset>:
 508d030:	20c000cc 	andi	r3,r4,3
 508d034:	2005883a 	mov	r2,r4
 508d038:	18004426 	beq	r3,zero,508d14c <memset+0x11c>
 508d03c:	31ffffc4 	addi	r7,r6,-1
 508d040:	30004026 	beq	r6,zero,508d144 <memset+0x114>
 508d044:	2813883a 	mov	r9,r5
 508d048:	200d883a 	mov	r6,r4
 508d04c:	2007883a 	mov	r3,r4
 508d050:	00000406 	br	508d064 <memset+0x34>
 508d054:	3a3fffc4 	addi	r8,r7,-1
 508d058:	31800044 	addi	r6,r6,1
 508d05c:	38003926 	beq	r7,zero,508d144 <memset+0x114>
 508d060:	400f883a 	mov	r7,r8
 508d064:	18c00044 	addi	r3,r3,1
 508d068:	32400005 	stb	r9,0(r6)
 508d06c:	1a0000cc 	andi	r8,r3,3
 508d070:	403ff81e 	bne	r8,zero,508d054 <__alt_data_end+0xfffbee54>
 508d074:	010000c4 	movi	r4,3
 508d078:	21c02d2e 	bgeu	r4,r7,508d130 <memset+0x100>
 508d07c:	29003fcc 	andi	r4,r5,255
 508d080:	200c923a 	slli	r6,r4,8
 508d084:	3108b03a 	or	r4,r6,r4
 508d088:	200c943a 	slli	r6,r4,16
 508d08c:	218cb03a 	or	r6,r4,r6
 508d090:	010003c4 	movi	r4,15
 508d094:	21c0182e 	bgeu	r4,r7,508d0f8 <memset+0xc8>
 508d098:	3b3ffc04 	addi	r12,r7,-16
 508d09c:	6018d13a 	srli	r12,r12,4
 508d0a0:	1a000104 	addi	r8,r3,4
 508d0a4:	1ac00204 	addi	r11,r3,8
 508d0a8:	6008913a 	slli	r4,r12,4
 508d0ac:	1a800304 	addi	r10,r3,12
 508d0b0:	1813883a 	mov	r9,r3
 508d0b4:	21000504 	addi	r4,r4,20
 508d0b8:	1909883a 	add	r4,r3,r4
 508d0bc:	49800015 	stw	r6,0(r9)
 508d0c0:	41800015 	stw	r6,0(r8)
 508d0c4:	59800015 	stw	r6,0(r11)
 508d0c8:	51800015 	stw	r6,0(r10)
 508d0cc:	42000404 	addi	r8,r8,16
 508d0d0:	4a400404 	addi	r9,r9,16
 508d0d4:	5ac00404 	addi	r11,r11,16
 508d0d8:	52800404 	addi	r10,r10,16
 508d0dc:	413ff71e 	bne	r8,r4,508d0bc <__alt_data_end+0xfffbeebc>
 508d0e0:	63000044 	addi	r12,r12,1
 508d0e4:	6018913a 	slli	r12,r12,4
 508d0e8:	39c003cc 	andi	r7,r7,15
 508d0ec:	010000c4 	movi	r4,3
 508d0f0:	1b07883a 	add	r3,r3,r12
 508d0f4:	21c00e2e 	bgeu	r4,r7,508d130 <memset+0x100>
 508d0f8:	1813883a 	mov	r9,r3
 508d0fc:	3811883a 	mov	r8,r7
 508d100:	010000c4 	movi	r4,3
 508d104:	49800015 	stw	r6,0(r9)
 508d108:	423fff04 	addi	r8,r8,-4
 508d10c:	4a400104 	addi	r9,r9,4
 508d110:	223ffc36 	bltu	r4,r8,508d104 <__alt_data_end+0xfffbef04>
 508d114:	393fff04 	addi	r4,r7,-4
 508d118:	2008d0ba 	srli	r4,r4,2
 508d11c:	39c000cc 	andi	r7,r7,3
 508d120:	21000044 	addi	r4,r4,1
 508d124:	2109883a 	add	r4,r4,r4
 508d128:	2109883a 	add	r4,r4,r4
 508d12c:	1907883a 	add	r3,r3,r4
 508d130:	38000526 	beq	r7,zero,508d148 <memset+0x118>
 508d134:	19cf883a 	add	r7,r3,r7
 508d138:	19400005 	stb	r5,0(r3)
 508d13c:	18c00044 	addi	r3,r3,1
 508d140:	38fffd1e 	bne	r7,r3,508d138 <__alt_data_end+0xfffbef38>
 508d144:	f800283a 	ret
 508d148:	f800283a 	ret
 508d14c:	2007883a 	mov	r3,r4
 508d150:	300f883a 	mov	r7,r6
 508d154:	003fc706 	br	508d074 <__alt_data_end+0xfffbee74>

0508d158 <_Balloc>:
 508d158:	20801317 	ldw	r2,76(r4)
 508d15c:	defffc04 	addi	sp,sp,-16
 508d160:	dc400115 	stw	r17,4(sp)
 508d164:	dc000015 	stw	r16,0(sp)
 508d168:	dfc00315 	stw	ra,12(sp)
 508d16c:	dc800215 	stw	r18,8(sp)
 508d170:	2023883a 	mov	r17,r4
 508d174:	2821883a 	mov	r16,r5
 508d178:	10000f26 	beq	r2,zero,508d1b8 <_Balloc+0x60>
 508d17c:	8407883a 	add	r3,r16,r16
 508d180:	18c7883a 	add	r3,r3,r3
 508d184:	10c7883a 	add	r3,r2,r3
 508d188:	18800017 	ldw	r2,0(r3)
 508d18c:	10001126 	beq	r2,zero,508d1d4 <_Balloc+0x7c>
 508d190:	11000017 	ldw	r4,0(r2)
 508d194:	19000015 	stw	r4,0(r3)
 508d198:	10000415 	stw	zero,16(r2)
 508d19c:	10000315 	stw	zero,12(r2)
 508d1a0:	dfc00317 	ldw	ra,12(sp)
 508d1a4:	dc800217 	ldw	r18,8(sp)
 508d1a8:	dc400117 	ldw	r17,4(sp)
 508d1ac:	dc000017 	ldw	r16,0(sp)
 508d1b0:	dec00404 	addi	sp,sp,16
 508d1b4:	f800283a 	ret
 508d1b8:	01800844 	movi	r6,33
 508d1bc:	01400104 	movi	r5,4
 508d1c0:	50902e00 	call	50902e0 <_calloc_r>
 508d1c4:	88801315 	stw	r2,76(r17)
 508d1c8:	103fec1e 	bne	r2,zero,508d17c <__alt_data_end+0xfffbef7c>
 508d1cc:	0005883a 	mov	r2,zero
 508d1d0:	003ff306 	br	508d1a0 <__alt_data_end+0xfffbefa0>
 508d1d4:	01400044 	movi	r5,1
 508d1d8:	2c24983a 	sll	r18,r5,r16
 508d1dc:	8809883a 	mov	r4,r17
 508d1e0:	91800144 	addi	r6,r18,5
 508d1e4:	318d883a 	add	r6,r6,r6
 508d1e8:	318d883a 	add	r6,r6,r6
 508d1ec:	50902e00 	call	50902e0 <_calloc_r>
 508d1f0:	103ff626 	beq	r2,zero,508d1cc <__alt_data_end+0xfffbefcc>
 508d1f4:	14000115 	stw	r16,4(r2)
 508d1f8:	14800215 	stw	r18,8(r2)
 508d1fc:	003fe606 	br	508d198 <__alt_data_end+0xfffbef98>

0508d200 <_Bfree>:
 508d200:	28000826 	beq	r5,zero,508d224 <_Bfree+0x24>
 508d204:	28c00117 	ldw	r3,4(r5)
 508d208:	20801317 	ldw	r2,76(r4)
 508d20c:	18c7883a 	add	r3,r3,r3
 508d210:	18c7883a 	add	r3,r3,r3
 508d214:	10c5883a 	add	r2,r2,r3
 508d218:	10c00017 	ldw	r3,0(r2)
 508d21c:	28c00015 	stw	r3,0(r5)
 508d220:	11400015 	stw	r5,0(r2)
 508d224:	f800283a 	ret

0508d228 <__multadd>:
 508d228:	defffa04 	addi	sp,sp,-24
 508d22c:	dc800315 	stw	r18,12(sp)
 508d230:	dc400215 	stw	r17,8(sp)
 508d234:	dc000115 	stw	r16,4(sp)
 508d238:	2823883a 	mov	r17,r5
 508d23c:	2c000417 	ldw	r16,16(r5)
 508d240:	dfc00515 	stw	ra,20(sp)
 508d244:	dcc00415 	stw	r19,16(sp)
 508d248:	2025883a 	mov	r18,r4
 508d24c:	29400504 	addi	r5,r5,20
 508d250:	0011883a 	mov	r8,zero
 508d254:	28c00017 	ldw	r3,0(r5)
 508d258:	29400104 	addi	r5,r5,4
 508d25c:	42000044 	addi	r8,r8,1
 508d260:	18bfffcc 	andi	r2,r3,65535
 508d264:	1185383a 	mul	r2,r2,r6
 508d268:	1806d43a 	srli	r3,r3,16
 508d26c:	11cf883a 	add	r7,r2,r7
 508d270:	3808d43a 	srli	r4,r7,16
 508d274:	1987383a 	mul	r3,r3,r6
 508d278:	38bfffcc 	andi	r2,r7,65535
 508d27c:	1907883a 	add	r3,r3,r4
 508d280:	1808943a 	slli	r4,r3,16
 508d284:	180ed43a 	srli	r7,r3,16
 508d288:	2085883a 	add	r2,r4,r2
 508d28c:	28bfff15 	stw	r2,-4(r5)
 508d290:	443ff016 	blt	r8,r16,508d254 <__alt_data_end+0xfffbf054>
 508d294:	38000926 	beq	r7,zero,508d2bc <__multadd+0x94>
 508d298:	88800217 	ldw	r2,8(r17)
 508d29c:	80800f0e 	bge	r16,r2,508d2dc <__multadd+0xb4>
 508d2a0:	80800144 	addi	r2,r16,5
 508d2a4:	1085883a 	add	r2,r2,r2
 508d2a8:	1085883a 	add	r2,r2,r2
 508d2ac:	8885883a 	add	r2,r17,r2
 508d2b0:	11c00015 	stw	r7,0(r2)
 508d2b4:	84000044 	addi	r16,r16,1
 508d2b8:	8c000415 	stw	r16,16(r17)
 508d2bc:	8805883a 	mov	r2,r17
 508d2c0:	dfc00517 	ldw	ra,20(sp)
 508d2c4:	dcc00417 	ldw	r19,16(sp)
 508d2c8:	dc800317 	ldw	r18,12(sp)
 508d2cc:	dc400217 	ldw	r17,8(sp)
 508d2d0:	dc000117 	ldw	r16,4(sp)
 508d2d4:	dec00604 	addi	sp,sp,24
 508d2d8:	f800283a 	ret
 508d2dc:	89400117 	ldw	r5,4(r17)
 508d2e0:	9009883a 	mov	r4,r18
 508d2e4:	d9c00015 	stw	r7,0(sp)
 508d2e8:	29400044 	addi	r5,r5,1
 508d2ec:	508d1580 	call	508d158 <_Balloc>
 508d2f0:	89800417 	ldw	r6,16(r17)
 508d2f4:	89400304 	addi	r5,r17,12
 508d2f8:	11000304 	addi	r4,r2,12
 508d2fc:	31800084 	addi	r6,r6,2
 508d300:	318d883a 	add	r6,r6,r6
 508d304:	318d883a 	add	r6,r6,r6
 508d308:	1027883a 	mov	r19,r2
 508d30c:	508cd8c0 	call	508cd8c <memcpy>
 508d310:	d9c00017 	ldw	r7,0(sp)
 508d314:	88000a26 	beq	r17,zero,508d340 <__multadd+0x118>
 508d318:	88c00117 	ldw	r3,4(r17)
 508d31c:	90801317 	ldw	r2,76(r18)
 508d320:	18c7883a 	add	r3,r3,r3
 508d324:	18c7883a 	add	r3,r3,r3
 508d328:	10c5883a 	add	r2,r2,r3
 508d32c:	10c00017 	ldw	r3,0(r2)
 508d330:	88c00015 	stw	r3,0(r17)
 508d334:	14400015 	stw	r17,0(r2)
 508d338:	9823883a 	mov	r17,r19
 508d33c:	003fd806 	br	508d2a0 <__alt_data_end+0xfffbf0a0>
 508d340:	9823883a 	mov	r17,r19
 508d344:	003fd606 	br	508d2a0 <__alt_data_end+0xfffbf0a0>

0508d348 <__s2b>:
 508d348:	defff904 	addi	sp,sp,-28
 508d34c:	dc400115 	stw	r17,4(sp)
 508d350:	dc000015 	stw	r16,0(sp)
 508d354:	2023883a 	mov	r17,r4
 508d358:	2821883a 	mov	r16,r5
 508d35c:	39000204 	addi	r4,r7,8
 508d360:	01400244 	movi	r5,9
 508d364:	dcc00315 	stw	r19,12(sp)
 508d368:	dc800215 	stw	r18,8(sp)
 508d36c:	dfc00615 	stw	ra,24(sp)
 508d370:	dd400515 	stw	r21,20(sp)
 508d374:	dd000415 	stw	r20,16(sp)
 508d378:	3825883a 	mov	r18,r7
 508d37c:	3027883a 	mov	r19,r6
 508d380:	5084a080 	call	5084a08 <__divsi3>
 508d384:	00c00044 	movi	r3,1
 508d388:	000b883a 	mov	r5,zero
 508d38c:	1880030e 	bge	r3,r2,508d39c <__s2b+0x54>
 508d390:	18c7883a 	add	r3,r3,r3
 508d394:	29400044 	addi	r5,r5,1
 508d398:	18bffd16 	blt	r3,r2,508d390 <__alt_data_end+0xfffbf190>
 508d39c:	8809883a 	mov	r4,r17
 508d3a0:	508d1580 	call	508d158 <_Balloc>
 508d3a4:	d8c00717 	ldw	r3,28(sp)
 508d3a8:	10c00515 	stw	r3,20(r2)
 508d3ac:	00c00044 	movi	r3,1
 508d3b0:	10c00415 	stw	r3,16(r2)
 508d3b4:	00c00244 	movi	r3,9
 508d3b8:	1cc0210e 	bge	r3,r19,508d440 <__s2b+0xf8>
 508d3bc:	80eb883a 	add	r21,r16,r3
 508d3c0:	a829883a 	mov	r20,r21
 508d3c4:	84e1883a 	add	r16,r16,r19
 508d3c8:	a1c00007 	ldb	r7,0(r20)
 508d3cc:	01800284 	movi	r6,10
 508d3d0:	a5000044 	addi	r20,r20,1
 508d3d4:	100b883a 	mov	r5,r2
 508d3d8:	39fff404 	addi	r7,r7,-48
 508d3dc:	8809883a 	mov	r4,r17
 508d3e0:	508d2280 	call	508d228 <__multadd>
 508d3e4:	a43ff81e 	bne	r20,r16,508d3c8 <__alt_data_end+0xfffbf1c8>
 508d3e8:	ace1883a 	add	r16,r21,r19
 508d3ec:	843ffe04 	addi	r16,r16,-8
 508d3f0:	9c800a0e 	bge	r19,r18,508d41c <__s2b+0xd4>
 508d3f4:	94e5c83a 	sub	r18,r18,r19
 508d3f8:	84a5883a 	add	r18,r16,r18
 508d3fc:	81c00007 	ldb	r7,0(r16)
 508d400:	01800284 	movi	r6,10
 508d404:	84000044 	addi	r16,r16,1
 508d408:	100b883a 	mov	r5,r2
 508d40c:	39fff404 	addi	r7,r7,-48
 508d410:	8809883a 	mov	r4,r17
 508d414:	508d2280 	call	508d228 <__multadd>
 508d418:	84bff81e 	bne	r16,r18,508d3fc <__alt_data_end+0xfffbf1fc>
 508d41c:	dfc00617 	ldw	ra,24(sp)
 508d420:	dd400517 	ldw	r21,20(sp)
 508d424:	dd000417 	ldw	r20,16(sp)
 508d428:	dcc00317 	ldw	r19,12(sp)
 508d42c:	dc800217 	ldw	r18,8(sp)
 508d430:	dc400117 	ldw	r17,4(sp)
 508d434:	dc000017 	ldw	r16,0(sp)
 508d438:	dec00704 	addi	sp,sp,28
 508d43c:	f800283a 	ret
 508d440:	84000284 	addi	r16,r16,10
 508d444:	1827883a 	mov	r19,r3
 508d448:	003fe906 	br	508d3f0 <__alt_data_end+0xfffbf1f0>

0508d44c <__hi0bits>:
 508d44c:	20bfffec 	andhi	r2,r4,65535
 508d450:	1000141e 	bne	r2,zero,508d4a4 <__hi0bits+0x58>
 508d454:	2008943a 	slli	r4,r4,16
 508d458:	00800404 	movi	r2,16
 508d45c:	20ffc02c 	andhi	r3,r4,65280
 508d460:	1800021e 	bne	r3,zero,508d46c <__hi0bits+0x20>
 508d464:	2008923a 	slli	r4,r4,8
 508d468:	10800204 	addi	r2,r2,8
 508d46c:	20fc002c 	andhi	r3,r4,61440
 508d470:	1800021e 	bne	r3,zero,508d47c <__hi0bits+0x30>
 508d474:	2008913a 	slli	r4,r4,4
 508d478:	10800104 	addi	r2,r2,4
 508d47c:	20f0002c 	andhi	r3,r4,49152
 508d480:	1800031e 	bne	r3,zero,508d490 <__hi0bits+0x44>
 508d484:	2109883a 	add	r4,r4,r4
 508d488:	10800084 	addi	r2,r2,2
 508d48c:	2109883a 	add	r4,r4,r4
 508d490:	20000316 	blt	r4,zero,508d4a0 <__hi0bits+0x54>
 508d494:	2110002c 	andhi	r4,r4,16384
 508d498:	2000041e 	bne	r4,zero,508d4ac <__hi0bits+0x60>
 508d49c:	00800804 	movi	r2,32
 508d4a0:	f800283a 	ret
 508d4a4:	0005883a 	mov	r2,zero
 508d4a8:	003fec06 	br	508d45c <__alt_data_end+0xfffbf25c>
 508d4ac:	10800044 	addi	r2,r2,1
 508d4b0:	f800283a 	ret

0508d4b4 <__lo0bits>:
 508d4b4:	20c00017 	ldw	r3,0(r4)
 508d4b8:	188001cc 	andi	r2,r3,7
 508d4bc:	10000826 	beq	r2,zero,508d4e0 <__lo0bits+0x2c>
 508d4c0:	1880004c 	andi	r2,r3,1
 508d4c4:	1000211e 	bne	r2,zero,508d54c <__lo0bits+0x98>
 508d4c8:	1880008c 	andi	r2,r3,2
 508d4cc:	1000211e 	bne	r2,zero,508d554 <__lo0bits+0xa0>
 508d4d0:	1806d0ba 	srli	r3,r3,2
 508d4d4:	00800084 	movi	r2,2
 508d4d8:	20c00015 	stw	r3,0(r4)
 508d4dc:	f800283a 	ret
 508d4e0:	18bfffcc 	andi	r2,r3,65535
 508d4e4:	10001326 	beq	r2,zero,508d534 <__lo0bits+0x80>
 508d4e8:	0005883a 	mov	r2,zero
 508d4ec:	19403fcc 	andi	r5,r3,255
 508d4f0:	2800021e 	bne	r5,zero,508d4fc <__lo0bits+0x48>
 508d4f4:	1806d23a 	srli	r3,r3,8
 508d4f8:	10800204 	addi	r2,r2,8
 508d4fc:	194003cc 	andi	r5,r3,15
 508d500:	2800021e 	bne	r5,zero,508d50c <__lo0bits+0x58>
 508d504:	1806d13a 	srli	r3,r3,4
 508d508:	10800104 	addi	r2,r2,4
 508d50c:	194000cc 	andi	r5,r3,3
 508d510:	2800021e 	bne	r5,zero,508d51c <__lo0bits+0x68>
 508d514:	1806d0ba 	srli	r3,r3,2
 508d518:	10800084 	addi	r2,r2,2
 508d51c:	1940004c 	andi	r5,r3,1
 508d520:	2800081e 	bne	r5,zero,508d544 <__lo0bits+0x90>
 508d524:	1806d07a 	srli	r3,r3,1
 508d528:	1800051e 	bne	r3,zero,508d540 <__lo0bits+0x8c>
 508d52c:	00800804 	movi	r2,32
 508d530:	f800283a 	ret
 508d534:	1806d43a 	srli	r3,r3,16
 508d538:	00800404 	movi	r2,16
 508d53c:	003feb06 	br	508d4ec <__alt_data_end+0xfffbf2ec>
 508d540:	10800044 	addi	r2,r2,1
 508d544:	20c00015 	stw	r3,0(r4)
 508d548:	f800283a 	ret
 508d54c:	0005883a 	mov	r2,zero
 508d550:	f800283a 	ret
 508d554:	1806d07a 	srli	r3,r3,1
 508d558:	00800044 	movi	r2,1
 508d55c:	20c00015 	stw	r3,0(r4)
 508d560:	f800283a 	ret

0508d564 <__i2b>:
 508d564:	defffd04 	addi	sp,sp,-12
 508d568:	dc000015 	stw	r16,0(sp)
 508d56c:	04000044 	movi	r16,1
 508d570:	dc400115 	stw	r17,4(sp)
 508d574:	2823883a 	mov	r17,r5
 508d578:	800b883a 	mov	r5,r16
 508d57c:	dfc00215 	stw	ra,8(sp)
 508d580:	508d1580 	call	508d158 <_Balloc>
 508d584:	14400515 	stw	r17,20(r2)
 508d588:	14000415 	stw	r16,16(r2)
 508d58c:	dfc00217 	ldw	ra,8(sp)
 508d590:	dc400117 	ldw	r17,4(sp)
 508d594:	dc000017 	ldw	r16,0(sp)
 508d598:	dec00304 	addi	sp,sp,12
 508d59c:	f800283a 	ret

0508d5a0 <__multiply>:
 508d5a0:	defffa04 	addi	sp,sp,-24
 508d5a4:	dcc00315 	stw	r19,12(sp)
 508d5a8:	dc800215 	stw	r18,8(sp)
 508d5ac:	34c00417 	ldw	r19,16(r6)
 508d5b0:	2c800417 	ldw	r18,16(r5)
 508d5b4:	dd000415 	stw	r20,16(sp)
 508d5b8:	dc400115 	stw	r17,4(sp)
 508d5bc:	dfc00515 	stw	ra,20(sp)
 508d5c0:	dc000015 	stw	r16,0(sp)
 508d5c4:	2829883a 	mov	r20,r5
 508d5c8:	3023883a 	mov	r17,r6
 508d5cc:	94c0050e 	bge	r18,r19,508d5e4 <__multiply+0x44>
 508d5d0:	9007883a 	mov	r3,r18
 508d5d4:	3029883a 	mov	r20,r6
 508d5d8:	9825883a 	mov	r18,r19
 508d5dc:	2823883a 	mov	r17,r5
 508d5e0:	1827883a 	mov	r19,r3
 508d5e4:	a0800217 	ldw	r2,8(r20)
 508d5e8:	94e1883a 	add	r16,r18,r19
 508d5ec:	a1400117 	ldw	r5,4(r20)
 508d5f0:	1400010e 	bge	r2,r16,508d5f8 <__multiply+0x58>
 508d5f4:	29400044 	addi	r5,r5,1
 508d5f8:	508d1580 	call	508d158 <_Balloc>
 508d5fc:	8415883a 	add	r10,r16,r16
 508d600:	12c00504 	addi	r11,r2,20
 508d604:	5295883a 	add	r10,r10,r10
 508d608:	5a95883a 	add	r10,r11,r10
 508d60c:	5807883a 	mov	r3,r11
 508d610:	5a80032e 	bgeu	r11,r10,508d620 <__multiply+0x80>
 508d614:	18000015 	stw	zero,0(r3)
 508d618:	18c00104 	addi	r3,r3,4
 508d61c:	1abffd36 	bltu	r3,r10,508d614 <__alt_data_end+0xfffbf414>
 508d620:	9ce7883a 	add	r19,r19,r19
 508d624:	94a5883a 	add	r18,r18,r18
 508d628:	89800504 	addi	r6,r17,20
 508d62c:	9ce7883a 	add	r19,r19,r19
 508d630:	a3400504 	addi	r13,r20,20
 508d634:	94a5883a 	add	r18,r18,r18
 508d638:	34d9883a 	add	r12,r6,r19
 508d63c:	6c93883a 	add	r9,r13,r18
 508d640:	3300422e 	bgeu	r6,r12,508d74c <__multiply+0x1ac>
 508d644:	37c00017 	ldw	ra,0(r6)
 508d648:	fbffffcc 	andi	r15,ra,65535
 508d64c:	78001b26 	beq	r15,zero,508d6bc <__multiply+0x11c>
 508d650:	5811883a 	mov	r8,r11
 508d654:	681d883a 	mov	r14,r13
 508d658:	000f883a 	mov	r7,zero
 508d65c:	71000017 	ldw	r4,0(r14)
 508d660:	40c00017 	ldw	r3,0(r8)
 508d664:	73800104 	addi	r14,r14,4
 508d668:	217fffcc 	andi	r5,r4,65535
 508d66c:	2bcb383a 	mul	r5,r5,r15
 508d670:	2008d43a 	srli	r4,r4,16
 508d674:	1c7fffcc 	andi	r17,r3,65535
 508d678:	2c4b883a 	add	r5,r5,r17
 508d67c:	29cb883a 	add	r5,r5,r7
 508d680:	23c9383a 	mul	r4,r4,r15
 508d684:	1806d43a 	srli	r3,r3,16
 508d688:	280ed43a 	srli	r7,r5,16
 508d68c:	297fffcc 	andi	r5,r5,65535
 508d690:	20c7883a 	add	r3,r4,r3
 508d694:	19c7883a 	add	r3,r3,r7
 508d698:	1808943a 	slli	r4,r3,16
 508d69c:	4023883a 	mov	r17,r8
 508d6a0:	180ed43a 	srli	r7,r3,16
 508d6a4:	214ab03a 	or	r5,r4,r5
 508d6a8:	41400015 	stw	r5,0(r8)
 508d6ac:	42000104 	addi	r8,r8,4
 508d6b0:	727fea36 	bltu	r14,r9,508d65c <__alt_data_end+0xfffbf45c>
 508d6b4:	89c00115 	stw	r7,4(r17)
 508d6b8:	37c00017 	ldw	ra,0(r6)
 508d6bc:	f83ed43a 	srli	ra,ra,16
 508d6c0:	f8001f26 	beq	ra,zero,508d740 <__multiply+0x1a0>
 508d6c4:	58c00017 	ldw	r3,0(r11)
 508d6c8:	681d883a 	mov	r14,r13
 508d6cc:	581f883a 	mov	r15,r11
 508d6d0:	1811883a 	mov	r8,r3
 508d6d4:	5825883a 	mov	r18,r11
 508d6d8:	000f883a 	mov	r7,zero
 508d6dc:	00000106 	br	508d6e4 <__multiply+0x144>
 508d6e0:	8825883a 	mov	r18,r17
 508d6e4:	7140000b 	ldhu	r5,0(r14)
 508d6e8:	4010d43a 	srli	r8,r8,16
 508d6ec:	193fffcc 	andi	r4,r3,65535
 508d6f0:	2fcb383a 	mul	r5,r5,ra
 508d6f4:	7bc00104 	addi	r15,r15,4
 508d6f8:	73800104 	addi	r14,r14,4
 508d6fc:	2a0b883a 	add	r5,r5,r8
 508d700:	29cb883a 	add	r5,r5,r7
 508d704:	2806943a 	slli	r3,r5,16
 508d708:	94400104 	addi	r17,r18,4
 508d70c:	280ad43a 	srli	r5,r5,16
 508d710:	1908b03a 	or	r4,r3,r4
 508d714:	793fff15 	stw	r4,-4(r15)
 508d718:	70ffff17 	ldw	r3,-4(r14)
 508d71c:	8a000017 	ldw	r8,0(r17)
 508d720:	1806d43a 	srli	r3,r3,16
 508d724:	413fffcc 	andi	r4,r8,65535
 508d728:	1fc7383a 	mul	r3,r3,ra
 508d72c:	1907883a 	add	r3,r3,r4
 508d730:	1947883a 	add	r3,r3,r5
 508d734:	180ed43a 	srli	r7,r3,16
 508d738:	727fe936 	bltu	r14,r9,508d6e0 <__alt_data_end+0xfffbf4e0>
 508d73c:	90c00115 	stw	r3,4(r18)
 508d740:	31800104 	addi	r6,r6,4
 508d744:	5ac00104 	addi	r11,r11,4
 508d748:	333fbe36 	bltu	r6,r12,508d644 <__alt_data_end+0xfffbf444>
 508d74c:	0400090e 	bge	zero,r16,508d774 <__multiply+0x1d4>
 508d750:	50ffff17 	ldw	r3,-4(r10)
 508d754:	52bfff04 	addi	r10,r10,-4
 508d758:	18000326 	beq	r3,zero,508d768 <__multiply+0x1c8>
 508d75c:	00000506 	br	508d774 <__multiply+0x1d4>
 508d760:	50c00017 	ldw	r3,0(r10)
 508d764:	1800031e 	bne	r3,zero,508d774 <__multiply+0x1d4>
 508d768:	843fffc4 	addi	r16,r16,-1
 508d76c:	52bfff04 	addi	r10,r10,-4
 508d770:	803ffb1e 	bne	r16,zero,508d760 <__alt_data_end+0xfffbf560>
 508d774:	14000415 	stw	r16,16(r2)
 508d778:	dfc00517 	ldw	ra,20(sp)
 508d77c:	dd000417 	ldw	r20,16(sp)
 508d780:	dcc00317 	ldw	r19,12(sp)
 508d784:	dc800217 	ldw	r18,8(sp)
 508d788:	dc400117 	ldw	r17,4(sp)
 508d78c:	dc000017 	ldw	r16,0(sp)
 508d790:	dec00604 	addi	sp,sp,24
 508d794:	f800283a 	ret

0508d798 <__pow5mult>:
 508d798:	defffa04 	addi	sp,sp,-24
 508d79c:	dcc00315 	stw	r19,12(sp)
 508d7a0:	dc000015 	stw	r16,0(sp)
 508d7a4:	dfc00515 	stw	ra,20(sp)
 508d7a8:	dd000415 	stw	r20,16(sp)
 508d7ac:	dc800215 	stw	r18,8(sp)
 508d7b0:	dc400115 	stw	r17,4(sp)
 508d7b4:	308000cc 	andi	r2,r6,3
 508d7b8:	3021883a 	mov	r16,r6
 508d7bc:	2027883a 	mov	r19,r4
 508d7c0:	10002f1e 	bne	r2,zero,508d880 <__pow5mult+0xe8>
 508d7c4:	2825883a 	mov	r18,r5
 508d7c8:	8021d0ba 	srai	r16,r16,2
 508d7cc:	80001a26 	beq	r16,zero,508d838 <__pow5mult+0xa0>
 508d7d0:	9c401217 	ldw	r17,72(r19)
 508d7d4:	8800061e 	bne	r17,zero,508d7f0 <__pow5mult+0x58>
 508d7d8:	00003406 	br	508d8ac <__pow5mult+0x114>
 508d7dc:	8021d07a 	srai	r16,r16,1
 508d7e0:	80001526 	beq	r16,zero,508d838 <__pow5mult+0xa0>
 508d7e4:	88800017 	ldw	r2,0(r17)
 508d7e8:	10001c26 	beq	r2,zero,508d85c <__pow5mult+0xc4>
 508d7ec:	1023883a 	mov	r17,r2
 508d7f0:	8080004c 	andi	r2,r16,1
 508d7f4:	103ff926 	beq	r2,zero,508d7dc <__alt_data_end+0xfffbf5dc>
 508d7f8:	880d883a 	mov	r6,r17
 508d7fc:	900b883a 	mov	r5,r18
 508d800:	9809883a 	mov	r4,r19
 508d804:	508d5a00 	call	508d5a0 <__multiply>
 508d808:	90001b26 	beq	r18,zero,508d878 <__pow5mult+0xe0>
 508d80c:	91000117 	ldw	r4,4(r18)
 508d810:	98c01317 	ldw	r3,76(r19)
 508d814:	8021d07a 	srai	r16,r16,1
 508d818:	2109883a 	add	r4,r4,r4
 508d81c:	2109883a 	add	r4,r4,r4
 508d820:	1907883a 	add	r3,r3,r4
 508d824:	19000017 	ldw	r4,0(r3)
 508d828:	91000015 	stw	r4,0(r18)
 508d82c:	1c800015 	stw	r18,0(r3)
 508d830:	1025883a 	mov	r18,r2
 508d834:	803feb1e 	bne	r16,zero,508d7e4 <__alt_data_end+0xfffbf5e4>
 508d838:	9005883a 	mov	r2,r18
 508d83c:	dfc00517 	ldw	ra,20(sp)
 508d840:	dd000417 	ldw	r20,16(sp)
 508d844:	dcc00317 	ldw	r19,12(sp)
 508d848:	dc800217 	ldw	r18,8(sp)
 508d84c:	dc400117 	ldw	r17,4(sp)
 508d850:	dc000017 	ldw	r16,0(sp)
 508d854:	dec00604 	addi	sp,sp,24
 508d858:	f800283a 	ret
 508d85c:	880d883a 	mov	r6,r17
 508d860:	880b883a 	mov	r5,r17
 508d864:	9809883a 	mov	r4,r19
 508d868:	508d5a00 	call	508d5a0 <__multiply>
 508d86c:	88800015 	stw	r2,0(r17)
 508d870:	10000015 	stw	zero,0(r2)
 508d874:	003fdd06 	br	508d7ec <__alt_data_end+0xfffbf5ec>
 508d878:	1025883a 	mov	r18,r2
 508d87c:	003fd706 	br	508d7dc <__alt_data_end+0xfffbf5dc>
 508d880:	10bfffc4 	addi	r2,r2,-1
 508d884:	1085883a 	add	r2,r2,r2
 508d888:	00c14274 	movhi	r3,1289
 508d88c:	18d14604 	addi	r3,r3,17688
 508d890:	1085883a 	add	r2,r2,r2
 508d894:	1885883a 	add	r2,r3,r2
 508d898:	11800017 	ldw	r6,0(r2)
 508d89c:	000f883a 	mov	r7,zero
 508d8a0:	508d2280 	call	508d228 <__multadd>
 508d8a4:	1025883a 	mov	r18,r2
 508d8a8:	003fc706 	br	508d7c8 <__alt_data_end+0xfffbf5c8>
 508d8ac:	05000044 	movi	r20,1
 508d8b0:	a00b883a 	mov	r5,r20
 508d8b4:	9809883a 	mov	r4,r19
 508d8b8:	508d1580 	call	508d158 <_Balloc>
 508d8bc:	1023883a 	mov	r17,r2
 508d8c0:	00809c44 	movi	r2,625
 508d8c4:	88800515 	stw	r2,20(r17)
 508d8c8:	8d000415 	stw	r20,16(r17)
 508d8cc:	9c401215 	stw	r17,72(r19)
 508d8d0:	88000015 	stw	zero,0(r17)
 508d8d4:	003fc606 	br	508d7f0 <__alt_data_end+0xfffbf5f0>

0508d8d8 <__lshift>:
 508d8d8:	defff904 	addi	sp,sp,-28
 508d8dc:	dd400515 	stw	r21,20(sp)
 508d8e0:	dcc00315 	stw	r19,12(sp)
 508d8e4:	302bd17a 	srai	r21,r6,5
 508d8e8:	2cc00417 	ldw	r19,16(r5)
 508d8ec:	28800217 	ldw	r2,8(r5)
 508d8f0:	dd000415 	stw	r20,16(sp)
 508d8f4:	ace7883a 	add	r19,r21,r19
 508d8f8:	dc800215 	stw	r18,8(sp)
 508d8fc:	dc400115 	stw	r17,4(sp)
 508d900:	dc000015 	stw	r16,0(sp)
 508d904:	dfc00615 	stw	ra,24(sp)
 508d908:	9c000044 	addi	r16,r19,1
 508d90c:	2823883a 	mov	r17,r5
 508d910:	3029883a 	mov	r20,r6
 508d914:	2025883a 	mov	r18,r4
 508d918:	29400117 	ldw	r5,4(r5)
 508d91c:	1400030e 	bge	r2,r16,508d92c <__lshift+0x54>
 508d920:	1085883a 	add	r2,r2,r2
 508d924:	29400044 	addi	r5,r5,1
 508d928:	143ffd16 	blt	r2,r16,508d920 <__alt_data_end+0xfffbf720>
 508d92c:	9009883a 	mov	r4,r18
 508d930:	508d1580 	call	508d158 <_Balloc>
 508d934:	10c00504 	addi	r3,r2,20
 508d938:	0540070e 	bge	zero,r21,508d958 <__lshift+0x80>
 508d93c:	ad6b883a 	add	r21,r21,r21
 508d940:	ad6b883a 	add	r21,r21,r21
 508d944:	1809883a 	mov	r4,r3
 508d948:	1d47883a 	add	r3,r3,r21
 508d94c:	20000015 	stw	zero,0(r4)
 508d950:	21000104 	addi	r4,r4,4
 508d954:	193ffd1e 	bne	r3,r4,508d94c <__alt_data_end+0xfffbf74c>
 508d958:	8a000417 	ldw	r8,16(r17)
 508d95c:	89000504 	addi	r4,r17,20
 508d960:	a18007cc 	andi	r6,r20,31
 508d964:	4211883a 	add	r8,r8,r8
 508d968:	4211883a 	add	r8,r8,r8
 508d96c:	2211883a 	add	r8,r4,r8
 508d970:	30002326 	beq	r6,zero,508da00 <__lshift+0x128>
 508d974:	02400804 	movi	r9,32
 508d978:	4993c83a 	sub	r9,r9,r6
 508d97c:	000b883a 	mov	r5,zero
 508d980:	21c00017 	ldw	r7,0(r4)
 508d984:	1815883a 	mov	r10,r3
 508d988:	18c00104 	addi	r3,r3,4
 508d98c:	398e983a 	sll	r7,r7,r6
 508d990:	21000104 	addi	r4,r4,4
 508d994:	394ab03a 	or	r5,r7,r5
 508d998:	197fff15 	stw	r5,-4(r3)
 508d99c:	217fff17 	ldw	r5,-4(r4)
 508d9a0:	2a4ad83a 	srl	r5,r5,r9
 508d9a4:	223ff636 	bltu	r4,r8,508d980 <__alt_data_end+0xfffbf780>
 508d9a8:	51400115 	stw	r5,4(r10)
 508d9ac:	28001a1e 	bne	r5,zero,508da18 <__lshift+0x140>
 508d9b0:	843fffc4 	addi	r16,r16,-1
 508d9b4:	14000415 	stw	r16,16(r2)
 508d9b8:	88000826 	beq	r17,zero,508d9dc <__lshift+0x104>
 508d9bc:	89000117 	ldw	r4,4(r17)
 508d9c0:	90c01317 	ldw	r3,76(r18)
 508d9c4:	2109883a 	add	r4,r4,r4
 508d9c8:	2109883a 	add	r4,r4,r4
 508d9cc:	1907883a 	add	r3,r3,r4
 508d9d0:	19000017 	ldw	r4,0(r3)
 508d9d4:	89000015 	stw	r4,0(r17)
 508d9d8:	1c400015 	stw	r17,0(r3)
 508d9dc:	dfc00617 	ldw	ra,24(sp)
 508d9e0:	dd400517 	ldw	r21,20(sp)
 508d9e4:	dd000417 	ldw	r20,16(sp)
 508d9e8:	dcc00317 	ldw	r19,12(sp)
 508d9ec:	dc800217 	ldw	r18,8(sp)
 508d9f0:	dc400117 	ldw	r17,4(sp)
 508d9f4:	dc000017 	ldw	r16,0(sp)
 508d9f8:	dec00704 	addi	sp,sp,28
 508d9fc:	f800283a 	ret
 508da00:	21400017 	ldw	r5,0(r4)
 508da04:	18c00104 	addi	r3,r3,4
 508da08:	21000104 	addi	r4,r4,4
 508da0c:	197fff15 	stw	r5,-4(r3)
 508da10:	223ffb36 	bltu	r4,r8,508da00 <__alt_data_end+0xfffbf800>
 508da14:	003fe606 	br	508d9b0 <__alt_data_end+0xfffbf7b0>
 508da18:	9c000084 	addi	r16,r19,2
 508da1c:	003fe406 	br	508d9b0 <__alt_data_end+0xfffbf7b0>

0508da20 <__mcmp>:
 508da20:	20800417 	ldw	r2,16(r4)
 508da24:	28c00417 	ldw	r3,16(r5)
 508da28:	10c5c83a 	sub	r2,r2,r3
 508da2c:	1000111e 	bne	r2,zero,508da74 <__mcmp+0x54>
 508da30:	18c7883a 	add	r3,r3,r3
 508da34:	18c7883a 	add	r3,r3,r3
 508da38:	21000504 	addi	r4,r4,20
 508da3c:	29400504 	addi	r5,r5,20
 508da40:	20c5883a 	add	r2,r4,r3
 508da44:	28cb883a 	add	r5,r5,r3
 508da48:	00000106 	br	508da50 <__mcmp+0x30>
 508da4c:	20800a2e 	bgeu	r4,r2,508da78 <__mcmp+0x58>
 508da50:	10bfff04 	addi	r2,r2,-4
 508da54:	297fff04 	addi	r5,r5,-4
 508da58:	11800017 	ldw	r6,0(r2)
 508da5c:	28c00017 	ldw	r3,0(r5)
 508da60:	30fffa26 	beq	r6,r3,508da4c <__alt_data_end+0xfffbf84c>
 508da64:	30c00236 	bltu	r6,r3,508da70 <__mcmp+0x50>
 508da68:	00800044 	movi	r2,1
 508da6c:	f800283a 	ret
 508da70:	00bfffc4 	movi	r2,-1
 508da74:	f800283a 	ret
 508da78:	0005883a 	mov	r2,zero
 508da7c:	f800283a 	ret

0508da80 <__mdiff>:
 508da80:	28c00417 	ldw	r3,16(r5)
 508da84:	30800417 	ldw	r2,16(r6)
 508da88:	defffa04 	addi	sp,sp,-24
 508da8c:	dcc00315 	stw	r19,12(sp)
 508da90:	dc800215 	stw	r18,8(sp)
 508da94:	dfc00515 	stw	ra,20(sp)
 508da98:	dd000415 	stw	r20,16(sp)
 508da9c:	dc400115 	stw	r17,4(sp)
 508daa0:	dc000015 	stw	r16,0(sp)
 508daa4:	1887c83a 	sub	r3,r3,r2
 508daa8:	2825883a 	mov	r18,r5
 508daac:	3027883a 	mov	r19,r6
 508dab0:	1800141e 	bne	r3,zero,508db04 <__mdiff+0x84>
 508dab4:	1085883a 	add	r2,r2,r2
 508dab8:	1085883a 	add	r2,r2,r2
 508dabc:	2a000504 	addi	r8,r5,20
 508dac0:	34000504 	addi	r16,r6,20
 508dac4:	4087883a 	add	r3,r8,r2
 508dac8:	8085883a 	add	r2,r16,r2
 508dacc:	00000106 	br	508dad4 <__mdiff+0x54>
 508dad0:	40c0592e 	bgeu	r8,r3,508dc38 <__mdiff+0x1b8>
 508dad4:	18ffff04 	addi	r3,r3,-4
 508dad8:	10bfff04 	addi	r2,r2,-4
 508dadc:	19c00017 	ldw	r7,0(r3)
 508dae0:	11400017 	ldw	r5,0(r2)
 508dae4:	397ffa26 	beq	r7,r5,508dad0 <__alt_data_end+0xfffbf8d0>
 508dae8:	3940592e 	bgeu	r7,r5,508dc50 <__mdiff+0x1d0>
 508daec:	9005883a 	mov	r2,r18
 508daf0:	4023883a 	mov	r17,r8
 508daf4:	9825883a 	mov	r18,r19
 508daf8:	05000044 	movi	r20,1
 508dafc:	1027883a 	mov	r19,r2
 508db00:	00000406 	br	508db14 <__mdiff+0x94>
 508db04:	18005616 	blt	r3,zero,508dc60 <__mdiff+0x1e0>
 508db08:	34400504 	addi	r17,r6,20
 508db0c:	2c000504 	addi	r16,r5,20
 508db10:	0029883a 	mov	r20,zero
 508db14:	91400117 	ldw	r5,4(r18)
 508db18:	508d1580 	call	508d158 <_Balloc>
 508db1c:	92400417 	ldw	r9,16(r18)
 508db20:	9b000417 	ldw	r12,16(r19)
 508db24:	12c00504 	addi	r11,r2,20
 508db28:	4a51883a 	add	r8,r9,r9
 508db2c:	6319883a 	add	r12,r12,r12
 508db30:	4211883a 	add	r8,r8,r8
 508db34:	6319883a 	add	r12,r12,r12
 508db38:	15000315 	stw	r20,12(r2)
 508db3c:	8211883a 	add	r8,r16,r8
 508db40:	8b19883a 	add	r12,r17,r12
 508db44:	0007883a 	mov	r3,zero
 508db48:	81400017 	ldw	r5,0(r16)
 508db4c:	89c00017 	ldw	r7,0(r17)
 508db50:	59800104 	addi	r6,r11,4
 508db54:	293fffcc 	andi	r4,r5,65535
 508db58:	20c7883a 	add	r3,r4,r3
 508db5c:	393fffcc 	andi	r4,r7,65535
 508db60:	1909c83a 	sub	r4,r3,r4
 508db64:	280ad43a 	srli	r5,r5,16
 508db68:	380ed43a 	srli	r7,r7,16
 508db6c:	2007d43a 	srai	r3,r4,16
 508db70:	213fffcc 	andi	r4,r4,65535
 508db74:	29cbc83a 	sub	r5,r5,r7
 508db78:	28c7883a 	add	r3,r5,r3
 508db7c:	180a943a 	slli	r5,r3,16
 508db80:	8c400104 	addi	r17,r17,4
 508db84:	84000104 	addi	r16,r16,4
 508db88:	2908b03a 	or	r4,r5,r4
 508db8c:	59000015 	stw	r4,0(r11)
 508db90:	1807d43a 	srai	r3,r3,16
 508db94:	3015883a 	mov	r10,r6
 508db98:	3017883a 	mov	r11,r6
 508db9c:	8b3fea36 	bltu	r17,r12,508db48 <__alt_data_end+0xfffbf948>
 508dba0:	8200162e 	bgeu	r16,r8,508dbfc <__mdiff+0x17c>
 508dba4:	8017883a 	mov	r11,r16
 508dba8:	59400017 	ldw	r5,0(r11)
 508dbac:	31800104 	addi	r6,r6,4
 508dbb0:	5ac00104 	addi	r11,r11,4
 508dbb4:	293fffcc 	andi	r4,r5,65535
 508dbb8:	20c7883a 	add	r3,r4,r3
 508dbbc:	280ed43a 	srli	r7,r5,16
 508dbc0:	180bd43a 	srai	r5,r3,16
 508dbc4:	193fffcc 	andi	r4,r3,65535
 508dbc8:	3947883a 	add	r3,r7,r5
 508dbcc:	180a943a 	slli	r5,r3,16
 508dbd0:	1807d43a 	srai	r3,r3,16
 508dbd4:	2908b03a 	or	r4,r5,r4
 508dbd8:	313fff15 	stw	r4,-4(r6)
 508dbdc:	5a3ff236 	bltu	r11,r8,508dba8 <__alt_data_end+0xfffbf9a8>
 508dbe0:	0406303a 	nor	r3,zero,r16
 508dbe4:	1a07883a 	add	r3,r3,r8
 508dbe8:	1806d0ba 	srli	r3,r3,2
 508dbec:	18c00044 	addi	r3,r3,1
 508dbf0:	18c7883a 	add	r3,r3,r3
 508dbf4:	18c7883a 	add	r3,r3,r3
 508dbf8:	50d5883a 	add	r10,r10,r3
 508dbfc:	50ffff04 	addi	r3,r10,-4
 508dc00:	2000041e 	bne	r4,zero,508dc14 <__mdiff+0x194>
 508dc04:	18ffff04 	addi	r3,r3,-4
 508dc08:	19000017 	ldw	r4,0(r3)
 508dc0c:	4a7fffc4 	addi	r9,r9,-1
 508dc10:	203ffc26 	beq	r4,zero,508dc04 <__alt_data_end+0xfffbfa04>
 508dc14:	12400415 	stw	r9,16(r2)
 508dc18:	dfc00517 	ldw	ra,20(sp)
 508dc1c:	dd000417 	ldw	r20,16(sp)
 508dc20:	dcc00317 	ldw	r19,12(sp)
 508dc24:	dc800217 	ldw	r18,8(sp)
 508dc28:	dc400117 	ldw	r17,4(sp)
 508dc2c:	dc000017 	ldw	r16,0(sp)
 508dc30:	dec00604 	addi	sp,sp,24
 508dc34:	f800283a 	ret
 508dc38:	000b883a 	mov	r5,zero
 508dc3c:	508d1580 	call	508d158 <_Balloc>
 508dc40:	00c00044 	movi	r3,1
 508dc44:	10c00415 	stw	r3,16(r2)
 508dc48:	10000515 	stw	zero,20(r2)
 508dc4c:	003ff206 	br	508dc18 <__alt_data_end+0xfffbfa18>
 508dc50:	8023883a 	mov	r17,r16
 508dc54:	0029883a 	mov	r20,zero
 508dc58:	4021883a 	mov	r16,r8
 508dc5c:	003fad06 	br	508db14 <__alt_data_end+0xfffbf914>
 508dc60:	9005883a 	mov	r2,r18
 508dc64:	94400504 	addi	r17,r18,20
 508dc68:	9c000504 	addi	r16,r19,20
 508dc6c:	9825883a 	mov	r18,r19
 508dc70:	05000044 	movi	r20,1
 508dc74:	1027883a 	mov	r19,r2
 508dc78:	003fa606 	br	508db14 <__alt_data_end+0xfffbf914>

0508dc7c <__ulp>:
 508dc7c:	295ffc2c 	andhi	r5,r5,32752
 508dc80:	00bf3034 	movhi	r2,64704
 508dc84:	2887883a 	add	r3,r5,r2
 508dc88:	00c0020e 	bge	zero,r3,508dc94 <__ulp+0x18>
 508dc8c:	0005883a 	mov	r2,zero
 508dc90:	f800283a 	ret
 508dc94:	00c7c83a 	sub	r3,zero,r3
 508dc98:	1807d53a 	srai	r3,r3,20
 508dc9c:	008004c4 	movi	r2,19
 508dca0:	10c00b0e 	bge	r2,r3,508dcd0 <__ulp+0x54>
 508dca4:	18bffb04 	addi	r2,r3,-20
 508dca8:	01000784 	movi	r4,30
 508dcac:	0007883a 	mov	r3,zero
 508dcb0:	20800516 	blt	r4,r2,508dcc8 <__ulp+0x4c>
 508dcb4:	010007c4 	movi	r4,31
 508dcb8:	2089c83a 	sub	r4,r4,r2
 508dcbc:	00800044 	movi	r2,1
 508dcc0:	1104983a 	sll	r2,r2,r4
 508dcc4:	f800283a 	ret
 508dcc8:	00800044 	movi	r2,1
 508dccc:	f800283a 	ret
 508dcd0:	01400234 	movhi	r5,8
 508dcd4:	28c7d83a 	sra	r3,r5,r3
 508dcd8:	0005883a 	mov	r2,zero
 508dcdc:	f800283a 	ret

0508dce0 <__b2d>:
 508dce0:	defffa04 	addi	sp,sp,-24
 508dce4:	dc000015 	stw	r16,0(sp)
 508dce8:	24000417 	ldw	r16,16(r4)
 508dcec:	dc400115 	stw	r17,4(sp)
 508dcf0:	24400504 	addi	r17,r4,20
 508dcf4:	8421883a 	add	r16,r16,r16
 508dcf8:	8421883a 	add	r16,r16,r16
 508dcfc:	8c21883a 	add	r16,r17,r16
 508dd00:	dc800215 	stw	r18,8(sp)
 508dd04:	84bfff17 	ldw	r18,-4(r16)
 508dd08:	dd000415 	stw	r20,16(sp)
 508dd0c:	dcc00315 	stw	r19,12(sp)
 508dd10:	9009883a 	mov	r4,r18
 508dd14:	2829883a 	mov	r20,r5
 508dd18:	dfc00515 	stw	ra,20(sp)
 508dd1c:	508d44c0 	call	508d44c <__hi0bits>
 508dd20:	00c00804 	movi	r3,32
 508dd24:	1889c83a 	sub	r4,r3,r2
 508dd28:	a1000015 	stw	r4,0(r20)
 508dd2c:	01000284 	movi	r4,10
 508dd30:	84ffff04 	addi	r19,r16,-4
 508dd34:	20801216 	blt	r4,r2,508dd80 <__b2d+0xa0>
 508dd38:	018002c4 	movi	r6,11
 508dd3c:	308dc83a 	sub	r6,r6,r2
 508dd40:	9186d83a 	srl	r3,r18,r6
 508dd44:	18cffc34 	orhi	r3,r3,16368
 508dd48:	8cc0212e 	bgeu	r17,r19,508ddd0 <__b2d+0xf0>
 508dd4c:	813ffe17 	ldw	r4,-8(r16)
 508dd50:	218cd83a 	srl	r6,r4,r6
 508dd54:	10800544 	addi	r2,r2,21
 508dd58:	9084983a 	sll	r2,r18,r2
 508dd5c:	1184b03a 	or	r2,r2,r6
 508dd60:	dfc00517 	ldw	ra,20(sp)
 508dd64:	dd000417 	ldw	r20,16(sp)
 508dd68:	dcc00317 	ldw	r19,12(sp)
 508dd6c:	dc800217 	ldw	r18,8(sp)
 508dd70:	dc400117 	ldw	r17,4(sp)
 508dd74:	dc000017 	ldw	r16,0(sp)
 508dd78:	dec00604 	addi	sp,sp,24
 508dd7c:	f800283a 	ret
 508dd80:	8cc00f2e 	bgeu	r17,r19,508ddc0 <__b2d+0xe0>
 508dd84:	117ffd44 	addi	r5,r2,-11
 508dd88:	80bffe17 	ldw	r2,-8(r16)
 508dd8c:	28000e26 	beq	r5,zero,508ddc8 <__b2d+0xe8>
 508dd90:	1949c83a 	sub	r4,r3,r5
 508dd94:	9164983a 	sll	r18,r18,r5
 508dd98:	1106d83a 	srl	r3,r2,r4
 508dd9c:	81bffe04 	addi	r6,r16,-8
 508dda0:	948ffc34 	orhi	r18,r18,16368
 508dda4:	90c6b03a 	or	r3,r18,r3
 508dda8:	89800e2e 	bgeu	r17,r6,508dde4 <__b2d+0x104>
 508ddac:	81bffd17 	ldw	r6,-12(r16)
 508ddb0:	1144983a 	sll	r2,r2,r5
 508ddb4:	310ad83a 	srl	r5,r6,r4
 508ddb8:	2884b03a 	or	r2,r5,r2
 508ddbc:	003fe806 	br	508dd60 <__alt_data_end+0xfffbfb60>
 508ddc0:	10bffd44 	addi	r2,r2,-11
 508ddc4:	1000041e 	bne	r2,zero,508ddd8 <__b2d+0xf8>
 508ddc8:	90cffc34 	orhi	r3,r18,16368
 508ddcc:	003fe406 	br	508dd60 <__alt_data_end+0xfffbfb60>
 508ddd0:	000d883a 	mov	r6,zero
 508ddd4:	003fdf06 	br	508dd54 <__alt_data_end+0xfffbfb54>
 508ddd8:	90a4983a 	sll	r18,r18,r2
 508dddc:	0005883a 	mov	r2,zero
 508dde0:	003ff906 	br	508ddc8 <__alt_data_end+0xfffbfbc8>
 508dde4:	1144983a 	sll	r2,r2,r5
 508dde8:	003fdd06 	br	508dd60 <__alt_data_end+0xfffbfb60>

0508ddec <__d2b>:
 508ddec:	defff804 	addi	sp,sp,-32
 508ddf0:	dc000215 	stw	r16,8(sp)
 508ddf4:	3021883a 	mov	r16,r6
 508ddf8:	dc400315 	stw	r17,12(sp)
 508ddfc:	8022907a 	slli	r17,r16,1
 508de00:	dd000615 	stw	r20,24(sp)
 508de04:	2829883a 	mov	r20,r5
 508de08:	01400044 	movi	r5,1
 508de0c:	dcc00515 	stw	r19,20(sp)
 508de10:	dc800415 	stw	r18,16(sp)
 508de14:	dfc00715 	stw	ra,28(sp)
 508de18:	3825883a 	mov	r18,r7
 508de1c:	8822d57a 	srli	r17,r17,21
 508de20:	508d1580 	call	508d158 <_Balloc>
 508de24:	1027883a 	mov	r19,r2
 508de28:	00800434 	movhi	r2,16
 508de2c:	10bfffc4 	addi	r2,r2,-1
 508de30:	808c703a 	and	r6,r16,r2
 508de34:	88000126 	beq	r17,zero,508de3c <__d2b+0x50>
 508de38:	31800434 	orhi	r6,r6,16
 508de3c:	d9800015 	stw	r6,0(sp)
 508de40:	a0002426 	beq	r20,zero,508ded4 <__d2b+0xe8>
 508de44:	d9000104 	addi	r4,sp,4
 508de48:	dd000115 	stw	r20,4(sp)
 508de4c:	508d4b40 	call	508d4b4 <__lo0bits>
 508de50:	d8c00017 	ldw	r3,0(sp)
 508de54:	10002f1e 	bne	r2,zero,508df14 <__d2b+0x128>
 508de58:	d9000117 	ldw	r4,4(sp)
 508de5c:	99000515 	stw	r4,20(r19)
 508de60:	1821003a 	cmpeq	r16,r3,zero
 508de64:	01000084 	movi	r4,2
 508de68:	2421c83a 	sub	r16,r4,r16
 508de6c:	98c00615 	stw	r3,24(r19)
 508de70:	9c000415 	stw	r16,16(r19)
 508de74:	88001f1e 	bne	r17,zero,508def4 <__d2b+0x108>
 508de78:	10bef384 	addi	r2,r2,-1074
 508de7c:	90800015 	stw	r2,0(r18)
 508de80:	00900034 	movhi	r2,16384
 508de84:	10bfffc4 	addi	r2,r2,-1
 508de88:	8085883a 	add	r2,r16,r2
 508de8c:	1085883a 	add	r2,r2,r2
 508de90:	1085883a 	add	r2,r2,r2
 508de94:	9885883a 	add	r2,r19,r2
 508de98:	11000517 	ldw	r4,20(r2)
 508de9c:	8020917a 	slli	r16,r16,5
 508dea0:	508d44c0 	call	508d44c <__hi0bits>
 508dea4:	d8c00817 	ldw	r3,32(sp)
 508dea8:	8085c83a 	sub	r2,r16,r2
 508deac:	18800015 	stw	r2,0(r3)
 508deb0:	9805883a 	mov	r2,r19
 508deb4:	dfc00717 	ldw	ra,28(sp)
 508deb8:	dd000617 	ldw	r20,24(sp)
 508debc:	dcc00517 	ldw	r19,20(sp)
 508dec0:	dc800417 	ldw	r18,16(sp)
 508dec4:	dc400317 	ldw	r17,12(sp)
 508dec8:	dc000217 	ldw	r16,8(sp)
 508decc:	dec00804 	addi	sp,sp,32
 508ded0:	f800283a 	ret
 508ded4:	d809883a 	mov	r4,sp
 508ded8:	508d4b40 	call	508d4b4 <__lo0bits>
 508dedc:	d8c00017 	ldw	r3,0(sp)
 508dee0:	04000044 	movi	r16,1
 508dee4:	9c000415 	stw	r16,16(r19)
 508dee8:	98c00515 	stw	r3,20(r19)
 508deec:	10800804 	addi	r2,r2,32
 508def0:	883fe126 	beq	r17,zero,508de78 <__alt_data_end+0xfffbfc78>
 508def4:	00c00d44 	movi	r3,53
 508def8:	8c7ef344 	addi	r17,r17,-1075
 508defc:	88a3883a 	add	r17,r17,r2
 508df00:	1885c83a 	sub	r2,r3,r2
 508df04:	d8c00817 	ldw	r3,32(sp)
 508df08:	94400015 	stw	r17,0(r18)
 508df0c:	18800015 	stw	r2,0(r3)
 508df10:	003fe706 	br	508deb0 <__alt_data_end+0xfffbfcb0>
 508df14:	01000804 	movi	r4,32
 508df18:	2089c83a 	sub	r4,r4,r2
 508df1c:	1908983a 	sll	r4,r3,r4
 508df20:	d9400117 	ldw	r5,4(sp)
 508df24:	1886d83a 	srl	r3,r3,r2
 508df28:	2148b03a 	or	r4,r4,r5
 508df2c:	99000515 	stw	r4,20(r19)
 508df30:	d8c00015 	stw	r3,0(sp)
 508df34:	003fca06 	br	508de60 <__alt_data_end+0xfffbfc60>

0508df38 <__ratio>:
 508df38:	defff904 	addi	sp,sp,-28
 508df3c:	dc400315 	stw	r17,12(sp)
 508df40:	2823883a 	mov	r17,r5
 508df44:	d9400104 	addi	r5,sp,4
 508df48:	dfc00615 	stw	ra,24(sp)
 508df4c:	dcc00515 	stw	r19,20(sp)
 508df50:	dc800415 	stw	r18,16(sp)
 508df54:	2027883a 	mov	r19,r4
 508df58:	dc000215 	stw	r16,8(sp)
 508df5c:	508dce00 	call	508dce0 <__b2d>
 508df60:	d80b883a 	mov	r5,sp
 508df64:	8809883a 	mov	r4,r17
 508df68:	1025883a 	mov	r18,r2
 508df6c:	1821883a 	mov	r16,r3
 508df70:	508dce00 	call	508dce0 <__b2d>
 508df74:	8a000417 	ldw	r8,16(r17)
 508df78:	99000417 	ldw	r4,16(r19)
 508df7c:	d9400117 	ldw	r5,4(sp)
 508df80:	2209c83a 	sub	r4,r4,r8
 508df84:	2010917a 	slli	r8,r4,5
 508df88:	d9000017 	ldw	r4,0(sp)
 508df8c:	2909c83a 	sub	r4,r5,r4
 508df90:	4109883a 	add	r4,r8,r4
 508df94:	01000e0e 	bge	zero,r4,508dfd0 <__ratio+0x98>
 508df98:	2008953a 	slli	r4,r4,20
 508df9c:	2421883a 	add	r16,r4,r16
 508dfa0:	100d883a 	mov	r6,r2
 508dfa4:	180f883a 	mov	r7,r3
 508dfa8:	9009883a 	mov	r4,r18
 508dfac:	800b883a 	mov	r5,r16
 508dfb0:	50854680 	call	5085468 <__divdf3>
 508dfb4:	dfc00617 	ldw	ra,24(sp)
 508dfb8:	dcc00517 	ldw	r19,20(sp)
 508dfbc:	dc800417 	ldw	r18,16(sp)
 508dfc0:	dc400317 	ldw	r17,12(sp)
 508dfc4:	dc000217 	ldw	r16,8(sp)
 508dfc8:	dec00704 	addi	sp,sp,28
 508dfcc:	f800283a 	ret
 508dfd0:	2008953a 	slli	r4,r4,20
 508dfd4:	1907c83a 	sub	r3,r3,r4
 508dfd8:	003ff106 	br	508dfa0 <__alt_data_end+0xfffbfda0>

0508dfdc <_mprec_log10>:
 508dfdc:	defffe04 	addi	sp,sp,-8
 508dfe0:	dc000015 	stw	r16,0(sp)
 508dfe4:	dfc00115 	stw	ra,4(sp)
 508dfe8:	008005c4 	movi	r2,23
 508dfec:	2021883a 	mov	r16,r4
 508dff0:	11000d0e 	bge	r2,r4,508e028 <_mprec_log10+0x4c>
 508dff4:	0005883a 	mov	r2,zero
 508dff8:	00cffc34 	movhi	r3,16368
 508dffc:	843fffc4 	addi	r16,r16,-1
 508e000:	000d883a 	mov	r6,zero
 508e004:	01d00934 	movhi	r7,16420
 508e008:	1009883a 	mov	r4,r2
 508e00c:	180b883a 	mov	r5,r3
 508e010:	5085fa80 	call	5085fa8 <__muldf3>
 508e014:	803ff91e 	bne	r16,zero,508dffc <__alt_data_end+0xfffbfdfc>
 508e018:	dfc00117 	ldw	ra,4(sp)
 508e01c:	dc000017 	ldw	r16,0(sp)
 508e020:	dec00204 	addi	sp,sp,8
 508e024:	f800283a 	ret
 508e028:	202090fa 	slli	r16,r4,3
 508e02c:	00814274 	movhi	r2,1289
 508e030:	10915d04 	addi	r2,r2,17780
 508e034:	1421883a 	add	r16,r2,r16
 508e038:	80800017 	ldw	r2,0(r16)
 508e03c:	80c00117 	ldw	r3,4(r16)
 508e040:	dfc00117 	ldw	ra,4(sp)
 508e044:	dc000017 	ldw	r16,0(sp)
 508e048:	dec00204 	addi	sp,sp,8
 508e04c:	f800283a 	ret

0508e050 <__copybits>:
 508e050:	297fffc4 	addi	r5,r5,-1
 508e054:	280fd17a 	srai	r7,r5,5
 508e058:	30c00417 	ldw	r3,16(r6)
 508e05c:	30800504 	addi	r2,r6,20
 508e060:	39c00044 	addi	r7,r7,1
 508e064:	18c7883a 	add	r3,r3,r3
 508e068:	39cf883a 	add	r7,r7,r7
 508e06c:	18c7883a 	add	r3,r3,r3
 508e070:	39cf883a 	add	r7,r7,r7
 508e074:	10c7883a 	add	r3,r2,r3
 508e078:	21cf883a 	add	r7,r4,r7
 508e07c:	10c00d2e 	bgeu	r2,r3,508e0b4 <__copybits+0x64>
 508e080:	200b883a 	mov	r5,r4
 508e084:	12000017 	ldw	r8,0(r2)
 508e088:	29400104 	addi	r5,r5,4
 508e08c:	10800104 	addi	r2,r2,4
 508e090:	2a3fff15 	stw	r8,-4(r5)
 508e094:	10fffb36 	bltu	r2,r3,508e084 <__alt_data_end+0xfffbfe84>
 508e098:	1985c83a 	sub	r2,r3,r6
 508e09c:	10bffac4 	addi	r2,r2,-21
 508e0a0:	1004d0ba 	srli	r2,r2,2
 508e0a4:	10800044 	addi	r2,r2,1
 508e0a8:	1085883a 	add	r2,r2,r2
 508e0ac:	1085883a 	add	r2,r2,r2
 508e0b0:	2089883a 	add	r4,r4,r2
 508e0b4:	21c0032e 	bgeu	r4,r7,508e0c4 <__copybits+0x74>
 508e0b8:	20000015 	stw	zero,0(r4)
 508e0bc:	21000104 	addi	r4,r4,4
 508e0c0:	21fffd36 	bltu	r4,r7,508e0b8 <__alt_data_end+0xfffbfeb8>
 508e0c4:	f800283a 	ret

0508e0c8 <__any_on>:
 508e0c8:	20c00417 	ldw	r3,16(r4)
 508e0cc:	2805d17a 	srai	r2,r5,5
 508e0d0:	21000504 	addi	r4,r4,20
 508e0d4:	18800d0e 	bge	r3,r2,508e10c <__any_on+0x44>
 508e0d8:	18c7883a 	add	r3,r3,r3
 508e0dc:	18c7883a 	add	r3,r3,r3
 508e0e0:	20c7883a 	add	r3,r4,r3
 508e0e4:	20c0192e 	bgeu	r4,r3,508e14c <__any_on+0x84>
 508e0e8:	18bfff17 	ldw	r2,-4(r3)
 508e0ec:	18ffff04 	addi	r3,r3,-4
 508e0f0:	1000041e 	bne	r2,zero,508e104 <__any_on+0x3c>
 508e0f4:	20c0142e 	bgeu	r4,r3,508e148 <__any_on+0x80>
 508e0f8:	18ffff04 	addi	r3,r3,-4
 508e0fc:	19400017 	ldw	r5,0(r3)
 508e100:	283ffc26 	beq	r5,zero,508e0f4 <__alt_data_end+0xfffbfef4>
 508e104:	00800044 	movi	r2,1
 508e108:	f800283a 	ret
 508e10c:	10c00a0e 	bge	r2,r3,508e138 <__any_on+0x70>
 508e110:	1085883a 	add	r2,r2,r2
 508e114:	1085883a 	add	r2,r2,r2
 508e118:	294007cc 	andi	r5,r5,31
 508e11c:	2087883a 	add	r3,r4,r2
 508e120:	283ff026 	beq	r5,zero,508e0e4 <__alt_data_end+0xfffbfee4>
 508e124:	19800017 	ldw	r6,0(r3)
 508e128:	3144d83a 	srl	r2,r6,r5
 508e12c:	114a983a 	sll	r5,r2,r5
 508e130:	317ff41e 	bne	r6,r5,508e104 <__alt_data_end+0xfffbff04>
 508e134:	003feb06 	br	508e0e4 <__alt_data_end+0xfffbfee4>
 508e138:	1085883a 	add	r2,r2,r2
 508e13c:	1085883a 	add	r2,r2,r2
 508e140:	2087883a 	add	r3,r4,r2
 508e144:	003fe706 	br	508e0e4 <__alt_data_end+0xfffbfee4>
 508e148:	f800283a 	ret
 508e14c:	0005883a 	mov	r2,zero
 508e150:	f800283a 	ret

0508e154 <_putc_r>:
 508e154:	defffc04 	addi	sp,sp,-16
 508e158:	dc000215 	stw	r16,8(sp)
 508e15c:	dfc00315 	stw	ra,12(sp)
 508e160:	2021883a 	mov	r16,r4
 508e164:	20000226 	beq	r4,zero,508e170 <_putc_r+0x1c>
 508e168:	20800e17 	ldw	r2,56(r4)
 508e16c:	10001b26 	beq	r2,zero,508e1dc <_putc_r+0x88>
 508e170:	30800217 	ldw	r2,8(r6)
 508e174:	10bfffc4 	addi	r2,r2,-1
 508e178:	30800215 	stw	r2,8(r6)
 508e17c:	10000a16 	blt	r2,zero,508e1a8 <_putc_r+0x54>
 508e180:	30800017 	ldw	r2,0(r6)
 508e184:	11400005 	stb	r5,0(r2)
 508e188:	30800017 	ldw	r2,0(r6)
 508e18c:	10c00044 	addi	r3,r2,1
 508e190:	30c00015 	stw	r3,0(r6)
 508e194:	10800003 	ldbu	r2,0(r2)
 508e198:	dfc00317 	ldw	ra,12(sp)
 508e19c:	dc000217 	ldw	r16,8(sp)
 508e1a0:	dec00404 	addi	sp,sp,16
 508e1a4:	f800283a 	ret
 508e1a8:	30c00617 	ldw	r3,24(r6)
 508e1ac:	10c00616 	blt	r2,r3,508e1c8 <_putc_r+0x74>
 508e1b0:	30800017 	ldw	r2,0(r6)
 508e1b4:	00c00284 	movi	r3,10
 508e1b8:	11400005 	stb	r5,0(r2)
 508e1bc:	30800017 	ldw	r2,0(r6)
 508e1c0:	11400003 	ldbu	r5,0(r2)
 508e1c4:	28fff11e 	bne	r5,r3,508e18c <__alt_data_end+0xfffbff8c>
 508e1c8:	8009883a 	mov	r4,r16
 508e1cc:	dfc00317 	ldw	ra,12(sp)
 508e1d0:	dc000217 	ldw	r16,8(sp)
 508e1d4:	dec00404 	addi	sp,sp,16
 508e1d8:	50900d41 	jmpi	50900d4 <__swbuf_r>
 508e1dc:	d9400015 	stw	r5,0(sp)
 508e1e0:	d9800115 	stw	r6,4(sp)
 508e1e4:	508b73c0 	call	508b73c <__sinit>
 508e1e8:	d9800117 	ldw	r6,4(sp)
 508e1ec:	d9400017 	ldw	r5,0(sp)
 508e1f0:	003fdf06 	br	508e170 <__alt_data_end+0xfffbff70>

0508e1f4 <putc>:
 508e1f4:	00814274 	movhi	r2,1289
 508e1f8:	defffc04 	addi	sp,sp,-16
 508e1fc:	10986204 	addi	r2,r2,24968
 508e200:	dc000115 	stw	r16,4(sp)
 508e204:	14000017 	ldw	r16,0(r2)
 508e208:	dc400215 	stw	r17,8(sp)
 508e20c:	dfc00315 	stw	ra,12(sp)
 508e210:	2023883a 	mov	r17,r4
 508e214:	80000226 	beq	r16,zero,508e220 <putc+0x2c>
 508e218:	80800e17 	ldw	r2,56(r16)
 508e21c:	10001a26 	beq	r2,zero,508e288 <putc+0x94>
 508e220:	28800217 	ldw	r2,8(r5)
 508e224:	10bfffc4 	addi	r2,r2,-1
 508e228:	28800215 	stw	r2,8(r5)
 508e22c:	10000b16 	blt	r2,zero,508e25c <putc+0x68>
 508e230:	28800017 	ldw	r2,0(r5)
 508e234:	14400005 	stb	r17,0(r2)
 508e238:	28800017 	ldw	r2,0(r5)
 508e23c:	10c00044 	addi	r3,r2,1
 508e240:	28c00015 	stw	r3,0(r5)
 508e244:	10800003 	ldbu	r2,0(r2)
 508e248:	dfc00317 	ldw	ra,12(sp)
 508e24c:	dc400217 	ldw	r17,8(sp)
 508e250:	dc000117 	ldw	r16,4(sp)
 508e254:	dec00404 	addi	sp,sp,16
 508e258:	f800283a 	ret
 508e25c:	28c00617 	ldw	r3,24(r5)
 508e260:	10c00e16 	blt	r2,r3,508e29c <putc+0xa8>
 508e264:	28800017 	ldw	r2,0(r5)
 508e268:	01000284 	movi	r4,10
 508e26c:	14400005 	stb	r17,0(r2)
 508e270:	28800017 	ldw	r2,0(r5)
 508e274:	10c00003 	ldbu	r3,0(r2)
 508e278:	193ff01e 	bne	r3,r4,508e23c <__alt_data_end+0xfffc003c>
 508e27c:	280d883a 	mov	r6,r5
 508e280:	180b883a 	mov	r5,r3
 508e284:	00000706 	br	508e2a4 <putc+0xb0>
 508e288:	8009883a 	mov	r4,r16
 508e28c:	d9400015 	stw	r5,0(sp)
 508e290:	508b73c0 	call	508b73c <__sinit>
 508e294:	d9400017 	ldw	r5,0(sp)
 508e298:	003fe106 	br	508e220 <__alt_data_end+0xfffc0020>
 508e29c:	280d883a 	mov	r6,r5
 508e2a0:	880b883a 	mov	r5,r17
 508e2a4:	8009883a 	mov	r4,r16
 508e2a8:	dfc00317 	ldw	ra,12(sp)
 508e2ac:	dc400217 	ldw	r17,8(sp)
 508e2b0:	dc000117 	ldw	r16,4(sp)
 508e2b4:	dec00404 	addi	sp,sp,16
 508e2b8:	50900d41 	jmpi	50900d4 <__swbuf_r>

0508e2bc <_realloc_r>:
 508e2bc:	defff604 	addi	sp,sp,-40
 508e2c0:	dc800215 	stw	r18,8(sp)
 508e2c4:	dfc00915 	stw	ra,36(sp)
 508e2c8:	df000815 	stw	fp,32(sp)
 508e2cc:	ddc00715 	stw	r23,28(sp)
 508e2d0:	dd800615 	stw	r22,24(sp)
 508e2d4:	dd400515 	stw	r21,20(sp)
 508e2d8:	dd000415 	stw	r20,16(sp)
 508e2dc:	dcc00315 	stw	r19,12(sp)
 508e2e0:	dc400115 	stw	r17,4(sp)
 508e2e4:	dc000015 	stw	r16,0(sp)
 508e2e8:	3025883a 	mov	r18,r6
 508e2ec:	2800b726 	beq	r5,zero,508e5cc <_realloc_r+0x310>
 508e2f0:	282b883a 	mov	r21,r5
 508e2f4:	2029883a 	mov	r20,r4
 508e2f8:	5091cdc0 	call	5091cdc <__malloc_lock>
 508e2fc:	a8bfff17 	ldw	r2,-4(r21)
 508e300:	043fff04 	movi	r16,-4
 508e304:	90c002c4 	addi	r3,r18,11
 508e308:	01000584 	movi	r4,22
 508e30c:	acfffe04 	addi	r19,r21,-8
 508e310:	1420703a 	and	r16,r2,r16
 508e314:	20c0332e 	bgeu	r4,r3,508e3e4 <_realloc_r+0x128>
 508e318:	047ffe04 	movi	r17,-8
 508e31c:	1c62703a 	and	r17,r3,r17
 508e320:	8807883a 	mov	r3,r17
 508e324:	88005816 	blt	r17,zero,508e488 <_realloc_r+0x1cc>
 508e328:	8c805736 	bltu	r17,r18,508e488 <_realloc_r+0x1cc>
 508e32c:	80c0300e 	bge	r16,r3,508e3f0 <_realloc_r+0x134>
 508e330:	07014274 	movhi	fp,1289
 508e334:	e712cc04 	addi	fp,fp,19248
 508e338:	e1c00217 	ldw	r7,8(fp)
 508e33c:	9c09883a 	add	r4,r19,r16
 508e340:	22000117 	ldw	r8,4(r4)
 508e344:	21c06326 	beq	r4,r7,508e4d4 <_realloc_r+0x218>
 508e348:	017fff84 	movi	r5,-2
 508e34c:	414a703a 	and	r5,r8,r5
 508e350:	214b883a 	add	r5,r4,r5
 508e354:	29800117 	ldw	r6,4(r5)
 508e358:	3180004c 	andi	r6,r6,1
 508e35c:	30003f26 	beq	r6,zero,508e45c <_realloc_r+0x1a0>
 508e360:	1080004c 	andi	r2,r2,1
 508e364:	10008326 	beq	r2,zero,508e574 <_realloc_r+0x2b8>
 508e368:	900b883a 	mov	r5,r18
 508e36c:	a009883a 	mov	r4,r20
 508e370:	508c49c0 	call	508c49c <_malloc_r>
 508e374:	1025883a 	mov	r18,r2
 508e378:	10011e26 	beq	r2,zero,508e7f4 <_realloc_r+0x538>
 508e37c:	a93fff17 	ldw	r4,-4(r21)
 508e380:	10fffe04 	addi	r3,r2,-8
 508e384:	00bfff84 	movi	r2,-2
 508e388:	2084703a 	and	r2,r4,r2
 508e38c:	9885883a 	add	r2,r19,r2
 508e390:	1880ee26 	beq	r3,r2,508e74c <_realloc_r+0x490>
 508e394:	81bfff04 	addi	r6,r16,-4
 508e398:	00800904 	movi	r2,36
 508e39c:	1180b836 	bltu	r2,r6,508e680 <_realloc_r+0x3c4>
 508e3a0:	00c004c4 	movi	r3,19
 508e3a4:	19809636 	bltu	r3,r6,508e600 <_realloc_r+0x344>
 508e3a8:	9005883a 	mov	r2,r18
 508e3ac:	a807883a 	mov	r3,r21
 508e3b0:	19000017 	ldw	r4,0(r3)
 508e3b4:	11000015 	stw	r4,0(r2)
 508e3b8:	19000117 	ldw	r4,4(r3)
 508e3bc:	11000115 	stw	r4,4(r2)
 508e3c0:	18c00217 	ldw	r3,8(r3)
 508e3c4:	10c00215 	stw	r3,8(r2)
 508e3c8:	a80b883a 	mov	r5,r21
 508e3cc:	a009883a 	mov	r4,r20
 508e3d0:	508b8b00 	call	508b8b0 <_free_r>
 508e3d4:	a009883a 	mov	r4,r20
 508e3d8:	5091d000 	call	5091d00 <__malloc_unlock>
 508e3dc:	9005883a 	mov	r2,r18
 508e3e0:	00001206 	br	508e42c <_realloc_r+0x170>
 508e3e4:	00c00404 	movi	r3,16
 508e3e8:	1823883a 	mov	r17,r3
 508e3ec:	003fce06 	br	508e328 <__alt_data_end+0xfffc0128>
 508e3f0:	a825883a 	mov	r18,r21
 508e3f4:	8445c83a 	sub	r2,r16,r17
 508e3f8:	00c003c4 	movi	r3,15
 508e3fc:	18802636 	bltu	r3,r2,508e498 <_realloc_r+0x1dc>
 508e400:	99800117 	ldw	r6,4(r19)
 508e404:	9c07883a 	add	r3,r19,r16
 508e408:	3180004c 	andi	r6,r6,1
 508e40c:	3420b03a 	or	r16,r6,r16
 508e410:	9c000115 	stw	r16,4(r19)
 508e414:	18800117 	ldw	r2,4(r3)
 508e418:	10800054 	ori	r2,r2,1
 508e41c:	18800115 	stw	r2,4(r3)
 508e420:	a009883a 	mov	r4,r20
 508e424:	5091d000 	call	5091d00 <__malloc_unlock>
 508e428:	9005883a 	mov	r2,r18
 508e42c:	dfc00917 	ldw	ra,36(sp)
 508e430:	df000817 	ldw	fp,32(sp)
 508e434:	ddc00717 	ldw	r23,28(sp)
 508e438:	dd800617 	ldw	r22,24(sp)
 508e43c:	dd400517 	ldw	r21,20(sp)
 508e440:	dd000417 	ldw	r20,16(sp)
 508e444:	dcc00317 	ldw	r19,12(sp)
 508e448:	dc800217 	ldw	r18,8(sp)
 508e44c:	dc400117 	ldw	r17,4(sp)
 508e450:	dc000017 	ldw	r16,0(sp)
 508e454:	dec00a04 	addi	sp,sp,40
 508e458:	f800283a 	ret
 508e45c:	017fff04 	movi	r5,-4
 508e460:	414a703a 	and	r5,r8,r5
 508e464:	814d883a 	add	r6,r16,r5
 508e468:	30c01f16 	blt	r6,r3,508e4e8 <_realloc_r+0x22c>
 508e46c:	20800317 	ldw	r2,12(r4)
 508e470:	20c00217 	ldw	r3,8(r4)
 508e474:	a825883a 	mov	r18,r21
 508e478:	3021883a 	mov	r16,r6
 508e47c:	18800315 	stw	r2,12(r3)
 508e480:	10c00215 	stw	r3,8(r2)
 508e484:	003fdb06 	br	508e3f4 <__alt_data_end+0xfffc01f4>
 508e488:	00800304 	movi	r2,12
 508e48c:	a0800015 	stw	r2,0(r20)
 508e490:	0005883a 	mov	r2,zero
 508e494:	003fe506 	br	508e42c <__alt_data_end+0xfffc022c>
 508e498:	98c00117 	ldw	r3,4(r19)
 508e49c:	9c4b883a 	add	r5,r19,r17
 508e4a0:	11000054 	ori	r4,r2,1
 508e4a4:	18c0004c 	andi	r3,r3,1
 508e4a8:	1c62b03a 	or	r17,r3,r17
 508e4ac:	9c400115 	stw	r17,4(r19)
 508e4b0:	29000115 	stw	r4,4(r5)
 508e4b4:	2885883a 	add	r2,r5,r2
 508e4b8:	10c00117 	ldw	r3,4(r2)
 508e4bc:	29400204 	addi	r5,r5,8
 508e4c0:	a009883a 	mov	r4,r20
 508e4c4:	18c00054 	ori	r3,r3,1
 508e4c8:	10c00115 	stw	r3,4(r2)
 508e4cc:	508b8b00 	call	508b8b0 <_free_r>
 508e4d0:	003fd306 	br	508e420 <__alt_data_end+0xfffc0220>
 508e4d4:	017fff04 	movi	r5,-4
 508e4d8:	414a703a 	and	r5,r8,r5
 508e4dc:	89800404 	addi	r6,r17,16
 508e4e0:	8151883a 	add	r8,r16,r5
 508e4e4:	4180590e 	bge	r8,r6,508e64c <_realloc_r+0x390>
 508e4e8:	1080004c 	andi	r2,r2,1
 508e4ec:	103f9e1e 	bne	r2,zero,508e368 <__alt_data_end+0xfffc0168>
 508e4f0:	adbffe17 	ldw	r22,-8(r21)
 508e4f4:	00bfff04 	movi	r2,-4
 508e4f8:	9dadc83a 	sub	r22,r19,r22
 508e4fc:	b1800117 	ldw	r6,4(r22)
 508e500:	3084703a 	and	r2,r6,r2
 508e504:	20002026 	beq	r4,zero,508e588 <_realloc_r+0x2cc>
 508e508:	80af883a 	add	r23,r16,r2
 508e50c:	b96f883a 	add	r23,r23,r5
 508e510:	21c05f26 	beq	r4,r7,508e690 <_realloc_r+0x3d4>
 508e514:	b8c01c16 	blt	r23,r3,508e588 <_realloc_r+0x2cc>
 508e518:	20800317 	ldw	r2,12(r4)
 508e51c:	20c00217 	ldw	r3,8(r4)
 508e520:	81bfff04 	addi	r6,r16,-4
 508e524:	01000904 	movi	r4,36
 508e528:	18800315 	stw	r2,12(r3)
 508e52c:	10c00215 	stw	r3,8(r2)
 508e530:	b0c00217 	ldw	r3,8(r22)
 508e534:	b0800317 	ldw	r2,12(r22)
 508e538:	b4800204 	addi	r18,r22,8
 508e53c:	18800315 	stw	r2,12(r3)
 508e540:	10c00215 	stw	r3,8(r2)
 508e544:	21801b36 	bltu	r4,r6,508e5b4 <_realloc_r+0x2f8>
 508e548:	008004c4 	movi	r2,19
 508e54c:	1180352e 	bgeu	r2,r6,508e624 <_realloc_r+0x368>
 508e550:	a8800017 	ldw	r2,0(r21)
 508e554:	b0800215 	stw	r2,8(r22)
 508e558:	a8800117 	ldw	r2,4(r21)
 508e55c:	b0800315 	stw	r2,12(r22)
 508e560:	008006c4 	movi	r2,27
 508e564:	11807f36 	bltu	r2,r6,508e764 <_realloc_r+0x4a8>
 508e568:	b0800404 	addi	r2,r22,16
 508e56c:	ad400204 	addi	r21,r21,8
 508e570:	00002d06 	br	508e628 <_realloc_r+0x36c>
 508e574:	adbffe17 	ldw	r22,-8(r21)
 508e578:	00bfff04 	movi	r2,-4
 508e57c:	9dadc83a 	sub	r22,r19,r22
 508e580:	b1000117 	ldw	r4,4(r22)
 508e584:	2084703a 	and	r2,r4,r2
 508e588:	b03f7726 	beq	r22,zero,508e368 <__alt_data_end+0xfffc0168>
 508e58c:	80af883a 	add	r23,r16,r2
 508e590:	b8ff7516 	blt	r23,r3,508e368 <__alt_data_end+0xfffc0168>
 508e594:	b0800317 	ldw	r2,12(r22)
 508e598:	b0c00217 	ldw	r3,8(r22)
 508e59c:	81bfff04 	addi	r6,r16,-4
 508e5a0:	01000904 	movi	r4,36
 508e5a4:	18800315 	stw	r2,12(r3)
 508e5a8:	10c00215 	stw	r3,8(r2)
 508e5ac:	b4800204 	addi	r18,r22,8
 508e5b0:	21bfe52e 	bgeu	r4,r6,508e548 <__alt_data_end+0xfffc0348>
 508e5b4:	a80b883a 	mov	r5,r21
 508e5b8:	9009883a 	mov	r4,r18
 508e5bc:	508ced40 	call	508ced4 <memmove>
 508e5c0:	b821883a 	mov	r16,r23
 508e5c4:	b027883a 	mov	r19,r22
 508e5c8:	003f8a06 	br	508e3f4 <__alt_data_end+0xfffc01f4>
 508e5cc:	300b883a 	mov	r5,r6
 508e5d0:	dfc00917 	ldw	ra,36(sp)
 508e5d4:	df000817 	ldw	fp,32(sp)
 508e5d8:	ddc00717 	ldw	r23,28(sp)
 508e5dc:	dd800617 	ldw	r22,24(sp)
 508e5e0:	dd400517 	ldw	r21,20(sp)
 508e5e4:	dd000417 	ldw	r20,16(sp)
 508e5e8:	dcc00317 	ldw	r19,12(sp)
 508e5ec:	dc800217 	ldw	r18,8(sp)
 508e5f0:	dc400117 	ldw	r17,4(sp)
 508e5f4:	dc000017 	ldw	r16,0(sp)
 508e5f8:	dec00a04 	addi	sp,sp,40
 508e5fc:	508c49c1 	jmpi	508c49c <_malloc_r>
 508e600:	a8c00017 	ldw	r3,0(r21)
 508e604:	90c00015 	stw	r3,0(r18)
 508e608:	a8c00117 	ldw	r3,4(r21)
 508e60c:	90c00115 	stw	r3,4(r18)
 508e610:	00c006c4 	movi	r3,27
 508e614:	19804536 	bltu	r3,r6,508e72c <_realloc_r+0x470>
 508e618:	90800204 	addi	r2,r18,8
 508e61c:	a8c00204 	addi	r3,r21,8
 508e620:	003f6306 	br	508e3b0 <__alt_data_end+0xfffc01b0>
 508e624:	9005883a 	mov	r2,r18
 508e628:	a8c00017 	ldw	r3,0(r21)
 508e62c:	b821883a 	mov	r16,r23
 508e630:	b027883a 	mov	r19,r22
 508e634:	10c00015 	stw	r3,0(r2)
 508e638:	a8c00117 	ldw	r3,4(r21)
 508e63c:	10c00115 	stw	r3,4(r2)
 508e640:	a8c00217 	ldw	r3,8(r21)
 508e644:	10c00215 	stw	r3,8(r2)
 508e648:	003f6a06 	br	508e3f4 <__alt_data_end+0xfffc01f4>
 508e64c:	9c67883a 	add	r19,r19,r17
 508e650:	4445c83a 	sub	r2,r8,r17
 508e654:	e4c00215 	stw	r19,8(fp)
 508e658:	10800054 	ori	r2,r2,1
 508e65c:	98800115 	stw	r2,4(r19)
 508e660:	a8bfff17 	ldw	r2,-4(r21)
 508e664:	a009883a 	mov	r4,r20
 508e668:	1080004c 	andi	r2,r2,1
 508e66c:	1462b03a 	or	r17,r2,r17
 508e670:	ac7fff15 	stw	r17,-4(r21)
 508e674:	5091d000 	call	5091d00 <__malloc_unlock>
 508e678:	a805883a 	mov	r2,r21
 508e67c:	003f6b06 	br	508e42c <__alt_data_end+0xfffc022c>
 508e680:	a80b883a 	mov	r5,r21
 508e684:	9009883a 	mov	r4,r18
 508e688:	508ced40 	call	508ced4 <memmove>
 508e68c:	003f4e06 	br	508e3c8 <__alt_data_end+0xfffc01c8>
 508e690:	89000404 	addi	r4,r17,16
 508e694:	b93fbc16 	blt	r23,r4,508e588 <__alt_data_end+0xfffc0388>
 508e698:	b0800317 	ldw	r2,12(r22)
 508e69c:	b0c00217 	ldw	r3,8(r22)
 508e6a0:	81bfff04 	addi	r6,r16,-4
 508e6a4:	01000904 	movi	r4,36
 508e6a8:	18800315 	stw	r2,12(r3)
 508e6ac:	10c00215 	stw	r3,8(r2)
 508e6b0:	b4800204 	addi	r18,r22,8
 508e6b4:	21804336 	bltu	r4,r6,508e7c4 <_realloc_r+0x508>
 508e6b8:	008004c4 	movi	r2,19
 508e6bc:	11803f2e 	bgeu	r2,r6,508e7bc <_realloc_r+0x500>
 508e6c0:	a8800017 	ldw	r2,0(r21)
 508e6c4:	b0800215 	stw	r2,8(r22)
 508e6c8:	a8800117 	ldw	r2,4(r21)
 508e6cc:	b0800315 	stw	r2,12(r22)
 508e6d0:	008006c4 	movi	r2,27
 508e6d4:	11803f36 	bltu	r2,r6,508e7d4 <_realloc_r+0x518>
 508e6d8:	b0800404 	addi	r2,r22,16
 508e6dc:	ad400204 	addi	r21,r21,8
 508e6e0:	a8c00017 	ldw	r3,0(r21)
 508e6e4:	10c00015 	stw	r3,0(r2)
 508e6e8:	a8c00117 	ldw	r3,4(r21)
 508e6ec:	10c00115 	stw	r3,4(r2)
 508e6f0:	a8c00217 	ldw	r3,8(r21)
 508e6f4:	10c00215 	stw	r3,8(r2)
 508e6f8:	b447883a 	add	r3,r22,r17
 508e6fc:	bc45c83a 	sub	r2,r23,r17
 508e700:	e0c00215 	stw	r3,8(fp)
 508e704:	10800054 	ori	r2,r2,1
 508e708:	18800115 	stw	r2,4(r3)
 508e70c:	b0800117 	ldw	r2,4(r22)
 508e710:	a009883a 	mov	r4,r20
 508e714:	1080004c 	andi	r2,r2,1
 508e718:	1462b03a 	or	r17,r2,r17
 508e71c:	b4400115 	stw	r17,4(r22)
 508e720:	5091d000 	call	5091d00 <__malloc_unlock>
 508e724:	9005883a 	mov	r2,r18
 508e728:	003f4006 	br	508e42c <__alt_data_end+0xfffc022c>
 508e72c:	a8c00217 	ldw	r3,8(r21)
 508e730:	90c00215 	stw	r3,8(r18)
 508e734:	a8c00317 	ldw	r3,12(r21)
 508e738:	90c00315 	stw	r3,12(r18)
 508e73c:	30801126 	beq	r6,r2,508e784 <_realloc_r+0x4c8>
 508e740:	90800404 	addi	r2,r18,16
 508e744:	a8c00404 	addi	r3,r21,16
 508e748:	003f1906 	br	508e3b0 <__alt_data_end+0xfffc01b0>
 508e74c:	90ffff17 	ldw	r3,-4(r18)
 508e750:	00bfff04 	movi	r2,-4
 508e754:	a825883a 	mov	r18,r21
 508e758:	1884703a 	and	r2,r3,r2
 508e75c:	80a1883a 	add	r16,r16,r2
 508e760:	003f2406 	br	508e3f4 <__alt_data_end+0xfffc01f4>
 508e764:	a8800217 	ldw	r2,8(r21)
 508e768:	b0800415 	stw	r2,16(r22)
 508e76c:	a8800317 	ldw	r2,12(r21)
 508e770:	b0800515 	stw	r2,20(r22)
 508e774:	31000a26 	beq	r6,r4,508e7a0 <_realloc_r+0x4e4>
 508e778:	b0800604 	addi	r2,r22,24
 508e77c:	ad400404 	addi	r21,r21,16
 508e780:	003fa906 	br	508e628 <__alt_data_end+0xfffc0428>
 508e784:	a9000417 	ldw	r4,16(r21)
 508e788:	90800604 	addi	r2,r18,24
 508e78c:	a8c00604 	addi	r3,r21,24
 508e790:	91000415 	stw	r4,16(r18)
 508e794:	a9000517 	ldw	r4,20(r21)
 508e798:	91000515 	stw	r4,20(r18)
 508e79c:	003f0406 	br	508e3b0 <__alt_data_end+0xfffc01b0>
 508e7a0:	a8c00417 	ldw	r3,16(r21)
 508e7a4:	ad400604 	addi	r21,r21,24
 508e7a8:	b0800804 	addi	r2,r22,32
 508e7ac:	b0c00615 	stw	r3,24(r22)
 508e7b0:	a8ffff17 	ldw	r3,-4(r21)
 508e7b4:	b0c00715 	stw	r3,28(r22)
 508e7b8:	003f9b06 	br	508e628 <__alt_data_end+0xfffc0428>
 508e7bc:	9005883a 	mov	r2,r18
 508e7c0:	003fc706 	br	508e6e0 <__alt_data_end+0xfffc04e0>
 508e7c4:	a80b883a 	mov	r5,r21
 508e7c8:	9009883a 	mov	r4,r18
 508e7cc:	508ced40 	call	508ced4 <memmove>
 508e7d0:	003fc906 	br	508e6f8 <__alt_data_end+0xfffc04f8>
 508e7d4:	a8800217 	ldw	r2,8(r21)
 508e7d8:	b0800415 	stw	r2,16(r22)
 508e7dc:	a8800317 	ldw	r2,12(r21)
 508e7e0:	b0800515 	stw	r2,20(r22)
 508e7e4:	31000726 	beq	r6,r4,508e804 <_realloc_r+0x548>
 508e7e8:	b0800604 	addi	r2,r22,24
 508e7ec:	ad400404 	addi	r21,r21,16
 508e7f0:	003fbb06 	br	508e6e0 <__alt_data_end+0xfffc04e0>
 508e7f4:	a009883a 	mov	r4,r20
 508e7f8:	5091d000 	call	5091d00 <__malloc_unlock>
 508e7fc:	0005883a 	mov	r2,zero
 508e800:	003f0a06 	br	508e42c <__alt_data_end+0xfffc022c>
 508e804:	a8c00417 	ldw	r3,16(r21)
 508e808:	ad400604 	addi	r21,r21,24
 508e80c:	b0800804 	addi	r2,r22,32
 508e810:	b0c00615 	stw	r3,24(r22)
 508e814:	a8ffff17 	ldw	r3,-4(r21)
 508e818:	b0c00715 	stw	r3,28(r22)
 508e81c:	003fb006 	br	508e6e0 <__alt_data_end+0xfffc04e0>

0508e820 <_sbrk_r>:
 508e820:	defffd04 	addi	sp,sp,-12
 508e824:	dc000015 	stw	r16,0(sp)
 508e828:	04014274 	movhi	r16,1289
 508e82c:	dc400115 	stw	r17,4(sp)
 508e830:	841f5e04 	addi	r16,r16,32120
 508e834:	2023883a 	mov	r17,r4
 508e838:	2809883a 	mov	r4,r5
 508e83c:	dfc00215 	stw	ra,8(sp)
 508e840:	80000015 	stw	zero,0(r16)
 508e844:	5091ed40 	call	5091ed4 <sbrk>
 508e848:	00ffffc4 	movi	r3,-1
 508e84c:	10c00526 	beq	r2,r3,508e864 <_sbrk_r+0x44>
 508e850:	dfc00217 	ldw	ra,8(sp)
 508e854:	dc400117 	ldw	r17,4(sp)
 508e858:	dc000017 	ldw	r16,0(sp)
 508e85c:	dec00304 	addi	sp,sp,12
 508e860:	f800283a 	ret
 508e864:	80c00017 	ldw	r3,0(r16)
 508e868:	183ff926 	beq	r3,zero,508e850 <__alt_data_end+0xfffc0650>
 508e86c:	88c00015 	stw	r3,0(r17)
 508e870:	003ff706 	br	508e850 <__alt_data_end+0xfffc0650>

0508e874 <__sread>:
 508e874:	defffe04 	addi	sp,sp,-8
 508e878:	dc000015 	stw	r16,0(sp)
 508e87c:	2821883a 	mov	r16,r5
 508e880:	2940038f 	ldh	r5,14(r5)
 508e884:	dfc00115 	stw	ra,4(sp)
 508e888:	50907c00 	call	50907c0 <_read_r>
 508e88c:	10000716 	blt	r2,zero,508e8ac <__sread+0x38>
 508e890:	80c01417 	ldw	r3,80(r16)
 508e894:	1887883a 	add	r3,r3,r2
 508e898:	80c01415 	stw	r3,80(r16)
 508e89c:	dfc00117 	ldw	ra,4(sp)
 508e8a0:	dc000017 	ldw	r16,0(sp)
 508e8a4:	dec00204 	addi	sp,sp,8
 508e8a8:	f800283a 	ret
 508e8ac:	80c0030b 	ldhu	r3,12(r16)
 508e8b0:	18fbffcc 	andi	r3,r3,61439
 508e8b4:	80c0030d 	sth	r3,12(r16)
 508e8b8:	dfc00117 	ldw	ra,4(sp)
 508e8bc:	dc000017 	ldw	r16,0(sp)
 508e8c0:	dec00204 	addi	sp,sp,8
 508e8c4:	f800283a 	ret

0508e8c8 <__seofread>:
 508e8c8:	0005883a 	mov	r2,zero
 508e8cc:	f800283a 	ret

0508e8d0 <__swrite>:
 508e8d0:	2880030b 	ldhu	r2,12(r5)
 508e8d4:	defffb04 	addi	sp,sp,-20
 508e8d8:	dcc00315 	stw	r19,12(sp)
 508e8dc:	dc800215 	stw	r18,8(sp)
 508e8e0:	dc400115 	stw	r17,4(sp)
 508e8e4:	dc000015 	stw	r16,0(sp)
 508e8e8:	dfc00415 	stw	ra,16(sp)
 508e8ec:	10c0400c 	andi	r3,r2,256
 508e8f0:	2821883a 	mov	r16,r5
 508e8f4:	2023883a 	mov	r17,r4
 508e8f8:	3025883a 	mov	r18,r6
 508e8fc:	3827883a 	mov	r19,r7
 508e900:	18000526 	beq	r3,zero,508e918 <__swrite+0x48>
 508e904:	2940038f 	ldh	r5,14(r5)
 508e908:	01c00084 	movi	r7,2
 508e90c:	000d883a 	mov	r6,zero
 508e910:	50907600 	call	5090760 <_lseek_r>
 508e914:	8080030b 	ldhu	r2,12(r16)
 508e918:	8140038f 	ldh	r5,14(r16)
 508e91c:	10bbffcc 	andi	r2,r2,61439
 508e920:	980f883a 	mov	r7,r19
 508e924:	900d883a 	mov	r6,r18
 508e928:	8809883a 	mov	r4,r17
 508e92c:	8080030d 	sth	r2,12(r16)
 508e930:	dfc00417 	ldw	ra,16(sp)
 508e934:	dcc00317 	ldw	r19,12(sp)
 508e938:	dc800217 	ldw	r18,8(sp)
 508e93c:	dc400117 	ldw	r17,4(sp)
 508e940:	dc000017 	ldw	r16,0(sp)
 508e944:	dec00504 	addi	sp,sp,20
 508e948:	509022c1 	jmpi	509022c <_write_r>

0508e94c <__sseek>:
 508e94c:	defffe04 	addi	sp,sp,-8
 508e950:	dc000015 	stw	r16,0(sp)
 508e954:	2821883a 	mov	r16,r5
 508e958:	2940038f 	ldh	r5,14(r5)
 508e95c:	dfc00115 	stw	ra,4(sp)
 508e960:	50907600 	call	5090760 <_lseek_r>
 508e964:	00ffffc4 	movi	r3,-1
 508e968:	10c00826 	beq	r2,r3,508e98c <__sseek+0x40>
 508e96c:	80c0030b 	ldhu	r3,12(r16)
 508e970:	80801415 	stw	r2,80(r16)
 508e974:	18c40014 	ori	r3,r3,4096
 508e978:	80c0030d 	sth	r3,12(r16)
 508e97c:	dfc00117 	ldw	ra,4(sp)
 508e980:	dc000017 	ldw	r16,0(sp)
 508e984:	dec00204 	addi	sp,sp,8
 508e988:	f800283a 	ret
 508e98c:	80c0030b 	ldhu	r3,12(r16)
 508e990:	18fbffcc 	andi	r3,r3,61439
 508e994:	80c0030d 	sth	r3,12(r16)
 508e998:	dfc00117 	ldw	ra,4(sp)
 508e99c:	dc000017 	ldw	r16,0(sp)
 508e9a0:	dec00204 	addi	sp,sp,8
 508e9a4:	f800283a 	ret

0508e9a8 <__sclose>:
 508e9a8:	2940038f 	ldh	r5,14(r5)
 508e9ac:	509028c1 	jmpi	509028c <_close_r>

0508e9b0 <strcmp>:
 508e9b0:	2144b03a 	or	r2,r4,r5
 508e9b4:	108000cc 	andi	r2,r2,3
 508e9b8:	1000171e 	bne	r2,zero,508ea18 <strcmp+0x68>
 508e9bc:	20800017 	ldw	r2,0(r4)
 508e9c0:	28c00017 	ldw	r3,0(r5)
 508e9c4:	10c0141e 	bne	r2,r3,508ea18 <strcmp+0x68>
 508e9c8:	027fbff4 	movhi	r9,65279
 508e9cc:	4a7fbfc4 	addi	r9,r9,-257
 508e9d0:	0086303a 	nor	r3,zero,r2
 508e9d4:	02202074 	movhi	r8,32897
 508e9d8:	1245883a 	add	r2,r2,r9
 508e9dc:	42202004 	addi	r8,r8,-32640
 508e9e0:	10c4703a 	and	r2,r2,r3
 508e9e4:	1204703a 	and	r2,r2,r8
 508e9e8:	10000226 	beq	r2,zero,508e9f4 <strcmp+0x44>
 508e9ec:	00002306 	br	508ea7c <strcmp+0xcc>
 508e9f0:	1000221e 	bne	r2,zero,508ea7c <strcmp+0xcc>
 508e9f4:	21000104 	addi	r4,r4,4
 508e9f8:	20c00017 	ldw	r3,0(r4)
 508e9fc:	29400104 	addi	r5,r5,4
 508ea00:	29800017 	ldw	r6,0(r5)
 508ea04:	1a4f883a 	add	r7,r3,r9
 508ea08:	00c4303a 	nor	r2,zero,r3
 508ea0c:	3884703a 	and	r2,r7,r2
 508ea10:	1204703a 	and	r2,r2,r8
 508ea14:	19bff626 	beq	r3,r6,508e9f0 <__alt_data_end+0xfffc07f0>
 508ea18:	20800003 	ldbu	r2,0(r4)
 508ea1c:	10c03fcc 	andi	r3,r2,255
 508ea20:	18c0201c 	xori	r3,r3,128
 508ea24:	18ffe004 	addi	r3,r3,-128
 508ea28:	18000c26 	beq	r3,zero,508ea5c <strcmp+0xac>
 508ea2c:	29800007 	ldb	r6,0(r5)
 508ea30:	19800326 	beq	r3,r6,508ea40 <strcmp+0x90>
 508ea34:	00001306 	br	508ea84 <strcmp+0xd4>
 508ea38:	29800007 	ldb	r6,0(r5)
 508ea3c:	11800b1e 	bne	r2,r6,508ea6c <strcmp+0xbc>
 508ea40:	21000044 	addi	r4,r4,1
 508ea44:	20c00003 	ldbu	r3,0(r4)
 508ea48:	29400044 	addi	r5,r5,1
 508ea4c:	18803fcc 	andi	r2,r3,255
 508ea50:	1080201c 	xori	r2,r2,128
 508ea54:	10bfe004 	addi	r2,r2,-128
 508ea58:	103ff71e 	bne	r2,zero,508ea38 <__alt_data_end+0xfffc0838>
 508ea5c:	0007883a 	mov	r3,zero
 508ea60:	28800003 	ldbu	r2,0(r5)
 508ea64:	1885c83a 	sub	r2,r3,r2
 508ea68:	f800283a 	ret
 508ea6c:	28800003 	ldbu	r2,0(r5)
 508ea70:	18c03fcc 	andi	r3,r3,255
 508ea74:	1885c83a 	sub	r2,r3,r2
 508ea78:	f800283a 	ret
 508ea7c:	0005883a 	mov	r2,zero
 508ea80:	f800283a 	ret
 508ea84:	10c03fcc 	andi	r3,r2,255
 508ea88:	003ff506 	br	508ea60 <__alt_data_end+0xfffc0860>

0508ea8c <__sprint_r.part.0>:
 508ea8c:	28801917 	ldw	r2,100(r5)
 508ea90:	defff604 	addi	sp,sp,-40
 508ea94:	dd400515 	stw	r21,20(sp)
 508ea98:	dfc00915 	stw	ra,36(sp)
 508ea9c:	df000815 	stw	fp,32(sp)
 508eaa0:	ddc00715 	stw	r23,28(sp)
 508eaa4:	dd800615 	stw	r22,24(sp)
 508eaa8:	dd000415 	stw	r20,16(sp)
 508eaac:	dcc00315 	stw	r19,12(sp)
 508eab0:	dc800215 	stw	r18,8(sp)
 508eab4:	dc400115 	stw	r17,4(sp)
 508eab8:	dc000015 	stw	r16,0(sp)
 508eabc:	1088000c 	andi	r2,r2,8192
 508eac0:	302b883a 	mov	r21,r6
 508eac4:	10002e26 	beq	r2,zero,508eb80 <__sprint_r.part.0+0xf4>
 508eac8:	30800217 	ldw	r2,8(r6)
 508eacc:	35800017 	ldw	r22,0(r6)
 508ead0:	10002926 	beq	r2,zero,508eb78 <__sprint_r.part.0+0xec>
 508ead4:	2827883a 	mov	r19,r5
 508ead8:	2029883a 	mov	r20,r4
 508eadc:	b5c00104 	addi	r23,r22,4
 508eae0:	04bfffc4 	movi	r18,-1
 508eae4:	bc400017 	ldw	r17,0(r23)
 508eae8:	b4000017 	ldw	r16,0(r22)
 508eaec:	0039883a 	mov	fp,zero
 508eaf0:	8822d0ba 	srli	r17,r17,2
 508eaf4:	8800031e 	bne	r17,zero,508eb04 <__sprint_r.part.0+0x78>
 508eaf8:	00001806 	br	508eb5c <__sprint_r.part.0+0xd0>
 508eafc:	84000104 	addi	r16,r16,4
 508eb00:	8f001526 	beq	r17,fp,508eb58 <__sprint_r.part.0+0xcc>
 508eb04:	81400017 	ldw	r5,0(r16)
 508eb08:	980d883a 	mov	r6,r19
 508eb0c:	a009883a 	mov	r4,r20
 508eb10:	509060c0 	call	509060c <_fputwc_r>
 508eb14:	e7000044 	addi	fp,fp,1
 508eb18:	14bff81e 	bne	r2,r18,508eafc <__alt_data_end+0xfffc08fc>
 508eb1c:	9005883a 	mov	r2,r18
 508eb20:	a8000215 	stw	zero,8(r21)
 508eb24:	a8000115 	stw	zero,4(r21)
 508eb28:	dfc00917 	ldw	ra,36(sp)
 508eb2c:	df000817 	ldw	fp,32(sp)
 508eb30:	ddc00717 	ldw	r23,28(sp)
 508eb34:	dd800617 	ldw	r22,24(sp)
 508eb38:	dd400517 	ldw	r21,20(sp)
 508eb3c:	dd000417 	ldw	r20,16(sp)
 508eb40:	dcc00317 	ldw	r19,12(sp)
 508eb44:	dc800217 	ldw	r18,8(sp)
 508eb48:	dc400117 	ldw	r17,4(sp)
 508eb4c:	dc000017 	ldw	r16,0(sp)
 508eb50:	dec00a04 	addi	sp,sp,40
 508eb54:	f800283a 	ret
 508eb58:	a8800217 	ldw	r2,8(r21)
 508eb5c:	8c63883a 	add	r17,r17,r17
 508eb60:	8c63883a 	add	r17,r17,r17
 508eb64:	1445c83a 	sub	r2,r2,r17
 508eb68:	a8800215 	stw	r2,8(r21)
 508eb6c:	b5800204 	addi	r22,r22,8
 508eb70:	bdc00204 	addi	r23,r23,8
 508eb74:	103fdb1e 	bne	r2,zero,508eae4 <__alt_data_end+0xfffc08e4>
 508eb78:	0005883a 	mov	r2,zero
 508eb7c:	003fe806 	br	508eb20 <__alt_data_end+0xfffc0920>
 508eb80:	508bbc00 	call	508bbc0 <__sfvwrite_r>
 508eb84:	003fe606 	br	508eb20 <__alt_data_end+0xfffc0920>

0508eb88 <__sprint_r>:
 508eb88:	30c00217 	ldw	r3,8(r6)
 508eb8c:	18000126 	beq	r3,zero,508eb94 <__sprint_r+0xc>
 508eb90:	508ea8c1 	jmpi	508ea8c <__sprint_r.part.0>
 508eb94:	30000115 	stw	zero,4(r6)
 508eb98:	0005883a 	mov	r2,zero
 508eb9c:	f800283a 	ret

0508eba0 <___vfiprintf_internal_r>:
 508eba0:	deffc904 	addi	sp,sp,-220
 508eba4:	df003515 	stw	fp,212(sp)
 508eba8:	dd003115 	stw	r20,196(sp)
 508ebac:	dfc03615 	stw	ra,216(sp)
 508ebb0:	ddc03415 	stw	r23,208(sp)
 508ebb4:	dd803315 	stw	r22,204(sp)
 508ebb8:	dd403215 	stw	r21,200(sp)
 508ebbc:	dcc03015 	stw	r19,192(sp)
 508ebc0:	dc802f15 	stw	r18,188(sp)
 508ebc4:	dc402e15 	stw	r17,184(sp)
 508ebc8:	dc002d15 	stw	r16,180(sp)
 508ebcc:	d9002015 	stw	r4,128(sp)
 508ebd0:	d9c02215 	stw	r7,136(sp)
 508ebd4:	2829883a 	mov	r20,r5
 508ebd8:	3039883a 	mov	fp,r6
 508ebdc:	20000226 	beq	r4,zero,508ebe8 <___vfiprintf_internal_r+0x48>
 508ebe0:	20800e17 	ldw	r2,56(r4)
 508ebe4:	1000cf26 	beq	r2,zero,508ef24 <___vfiprintf_internal_r+0x384>
 508ebe8:	a080030b 	ldhu	r2,12(r20)
 508ebec:	10c8000c 	andi	r3,r2,8192
 508ebf0:	1800061e 	bne	r3,zero,508ec0c <___vfiprintf_internal_r+0x6c>
 508ebf4:	a1001917 	ldw	r4,100(r20)
 508ebf8:	00f7ffc4 	movi	r3,-8193
 508ebfc:	10880014 	ori	r2,r2,8192
 508ec00:	20c6703a 	and	r3,r4,r3
 508ec04:	a080030d 	sth	r2,12(r20)
 508ec08:	a0c01915 	stw	r3,100(r20)
 508ec0c:	10c0020c 	andi	r3,r2,8
 508ec10:	1800a926 	beq	r3,zero,508eeb8 <___vfiprintf_internal_r+0x318>
 508ec14:	a0c00417 	ldw	r3,16(r20)
 508ec18:	1800a726 	beq	r3,zero,508eeb8 <___vfiprintf_internal_r+0x318>
 508ec1c:	1080068c 	andi	r2,r2,26
 508ec20:	00c00284 	movi	r3,10
 508ec24:	10c0ac26 	beq	r2,r3,508eed8 <___vfiprintf_internal_r+0x338>
 508ec28:	da801a04 	addi	r10,sp,104
 508ec2c:	da801e15 	stw	r10,120(sp)
 508ec30:	d8801e17 	ldw	r2,120(sp)
 508ec34:	da8019c4 	addi	r10,sp,103
 508ec38:	05814274 	movhi	r22,1289
 508ec3c:	05c14274 	movhi	r23,1289
 508ec40:	da801f15 	stw	r10,124(sp)
 508ec44:	1295c83a 	sub	r10,r2,r10
 508ec48:	b5919304 	addi	r22,r22,17996
 508ec4c:	bdd18f04 	addi	r23,r23,17980
 508ec50:	dec01a15 	stw	sp,104(sp)
 508ec54:	d8001c15 	stw	zero,112(sp)
 508ec58:	d8001b15 	stw	zero,108(sp)
 508ec5c:	d8002615 	stw	zero,152(sp)
 508ec60:	d8002315 	stw	zero,140(sp)
 508ec64:	da802715 	stw	r10,156(sp)
 508ec68:	d811883a 	mov	r8,sp
 508ec6c:	dd002115 	stw	r20,132(sp)
 508ec70:	e021883a 	mov	r16,fp
 508ec74:	80800007 	ldb	r2,0(r16)
 508ec78:	1003ea26 	beq	r2,zero,508fc24 <___vfiprintf_internal_r+0x1084>
 508ec7c:	00c00944 	movi	r3,37
 508ec80:	8025883a 	mov	r18,r16
 508ec84:	10c0021e 	bne	r2,r3,508ec90 <___vfiprintf_internal_r+0xf0>
 508ec88:	00001606 	br	508ece4 <___vfiprintf_internal_r+0x144>
 508ec8c:	10c00326 	beq	r2,r3,508ec9c <___vfiprintf_internal_r+0xfc>
 508ec90:	94800044 	addi	r18,r18,1
 508ec94:	90800007 	ldb	r2,0(r18)
 508ec98:	103ffc1e 	bne	r2,zero,508ec8c <__alt_data_end+0xfffc0a8c>
 508ec9c:	9423c83a 	sub	r17,r18,r16
 508eca0:	88001026 	beq	r17,zero,508ece4 <___vfiprintf_internal_r+0x144>
 508eca4:	d8c01c17 	ldw	r3,112(sp)
 508eca8:	d8801b17 	ldw	r2,108(sp)
 508ecac:	44000015 	stw	r16,0(r8)
 508ecb0:	88c7883a 	add	r3,r17,r3
 508ecb4:	10800044 	addi	r2,r2,1
 508ecb8:	44400115 	stw	r17,4(r8)
 508ecbc:	d8c01c15 	stw	r3,112(sp)
 508ecc0:	d8801b15 	stw	r2,108(sp)
 508ecc4:	010001c4 	movi	r4,7
 508ecc8:	2080760e 	bge	r4,r2,508eea4 <___vfiprintf_internal_r+0x304>
 508eccc:	1803821e 	bne	r3,zero,508fad8 <___vfiprintf_internal_r+0xf38>
 508ecd0:	da802317 	ldw	r10,140(sp)
 508ecd4:	d8001b15 	stw	zero,108(sp)
 508ecd8:	d811883a 	mov	r8,sp
 508ecdc:	5455883a 	add	r10,r10,r17
 508ece0:	da802315 	stw	r10,140(sp)
 508ece4:	90800007 	ldb	r2,0(r18)
 508ece8:	10044626 	beq	r2,zero,508fe04 <___vfiprintf_internal_r+0x1264>
 508ecec:	90c00047 	ldb	r3,1(r18)
 508ecf0:	94000044 	addi	r16,r18,1
 508ecf4:	d8001d85 	stb	zero,118(sp)
 508ecf8:	0009883a 	mov	r4,zero
 508ecfc:	000f883a 	mov	r7,zero
 508ed00:	027fffc4 	movi	r9,-1
 508ed04:	0023883a 	mov	r17,zero
 508ed08:	0029883a 	mov	r20,zero
 508ed0c:	01401604 	movi	r5,88
 508ed10:	01800244 	movi	r6,9
 508ed14:	03400a84 	movi	r13,42
 508ed18:	03001b04 	movi	r12,108
 508ed1c:	84000044 	addi	r16,r16,1
 508ed20:	18bff804 	addi	r2,r3,-32
 508ed24:	28827336 	bltu	r5,r2,508f6f4 <___vfiprintf_internal_r+0xb54>
 508ed28:	100490ba 	slli	r2,r2,2
 508ed2c:	02814274 	movhi	r10,1289
 508ed30:	52bb5004 	addi	r10,r10,-4800
 508ed34:	1285883a 	add	r2,r2,r10
 508ed38:	10800017 	ldw	r2,0(r2)
 508ed3c:	1000683a 	jmp	r2
 508ed40:	0508f428 	cmpgeui	r20,zero,9168
 508ed44:	0508f6f4 	movhi	r20,9179
 508ed48:	0508f6f4 	movhi	r20,9179
 508ed4c:	0508f448 	cmpgei	r20,zero,9169
 508ed50:	0508f6f4 	movhi	r20,9179
 508ed54:	0508f6f4 	movhi	r20,9179
 508ed58:	0508f6f4 	movhi	r20,9179
 508ed5c:	0508f6f4 	movhi	r20,9179
 508ed60:	0508f6f4 	movhi	r20,9179
 508ed64:	0508f6f4 	movhi	r20,9179
 508ed68:	0508f630 	cmpltui	r20,zero,9176
 508ed6c:	0508f64c 	andi	r20,zero,9177
 508ed70:	0508f6f4 	movhi	r20,9179
 508ed74:	0508ef34 	movhi	r20,9148
 508ed78:	0508f65c 	xori	r20,zero,9177
 508ed7c:	0508f6f4 	movhi	r20,9179
 508ed80:	0508f454 	movui	r20,9169
 508ed84:	0508f460 	cmpeqi	r20,zero,9169
 508ed88:	0508f460 	cmpeqi	r20,zero,9169
 508ed8c:	0508f460 	cmpeqi	r20,zero,9169
 508ed90:	0508f460 	cmpeqi	r20,zero,9169
 508ed94:	0508f460 	cmpeqi	r20,zero,9169
 508ed98:	0508f460 	cmpeqi	r20,zero,9169
 508ed9c:	0508f460 	cmpeqi	r20,zero,9169
 508eda0:	0508f460 	cmpeqi	r20,zero,9169
 508eda4:	0508f460 	cmpeqi	r20,zero,9169
 508eda8:	0508f6f4 	movhi	r20,9179
 508edac:	0508f6f4 	movhi	r20,9179
 508edb0:	0508f6f4 	movhi	r20,9179
 508edb4:	0508f6f4 	movhi	r20,9179
 508edb8:	0508f6f4 	movhi	r20,9179
 508edbc:	0508f6f4 	movhi	r20,9179
 508edc0:	0508f6f4 	movhi	r20,9179
 508edc4:	0508f6f4 	movhi	r20,9179
 508edc8:	0508f6f4 	movhi	r20,9179
 508edcc:	0508f6f4 	movhi	r20,9179
 508edd0:	0508f48c 	andi	r20,zero,9170
 508edd4:	0508f6f4 	movhi	r20,9179
 508edd8:	0508f6f4 	movhi	r20,9179
 508eddc:	0508f6f4 	movhi	r20,9179
 508ede0:	0508f6f4 	movhi	r20,9179
 508ede4:	0508f6f4 	movhi	r20,9179
 508ede8:	0508f6f4 	movhi	r20,9179
 508edec:	0508f6f4 	movhi	r20,9179
 508edf0:	0508f6f4 	movhi	r20,9179
 508edf4:	0508f6f4 	movhi	r20,9179
 508edf8:	0508f6f4 	movhi	r20,9179
 508edfc:	0508f4c4 	movi	r20,9171
 508ee00:	0508f6f4 	movhi	r20,9179
 508ee04:	0508f6f4 	movhi	r20,9179
 508ee08:	0508f6f4 	movhi	r20,9179
 508ee0c:	0508f6f4 	movhi	r20,9179
 508ee10:	0508f6f4 	movhi	r20,9179
 508ee14:	0508f51c 	xori	r20,zero,9172
 508ee18:	0508f6f4 	movhi	r20,9179
 508ee1c:	0508f6f4 	movhi	r20,9179
 508ee20:	0508f58c 	andi	r20,zero,9174
 508ee24:	0508f6f4 	movhi	r20,9179
 508ee28:	0508f6f4 	movhi	r20,9179
 508ee2c:	0508f6f4 	movhi	r20,9179
 508ee30:	0508f6f4 	movhi	r20,9179
 508ee34:	0508f6f4 	movhi	r20,9179
 508ee38:	0508f6f4 	movhi	r20,9179
 508ee3c:	0508f6f4 	movhi	r20,9179
 508ee40:	0508f6f4 	movhi	r20,9179
 508ee44:	0508f6f4 	movhi	r20,9179
 508ee48:	0508f6f4 	movhi	r20,9179
 508ee4c:	0508f338 	rdprs	r20,zero,9164
 508ee50:	0508f364 	muli	r20,zero,9165
 508ee54:	0508f6f4 	movhi	r20,9179
 508ee58:	0508f6f4 	movhi	r20,9179
 508ee5c:	0508f6f4 	movhi	r20,9179
 508ee60:	0508f69c 	xori	r20,zero,9178
 508ee64:	0508f364 	muli	r20,zero,9165
 508ee68:	0508f6f4 	movhi	r20,9179
 508ee6c:	0508f6f4 	movhi	r20,9179
 508ee70:	0508f1f8 	rdprs	r20,zero,9159
 508ee74:	0508f6f4 	movhi	r20,9179
 508ee78:	0508f208 	cmpgei	r20,zero,9160
 508ee7c:	0508f244 	movi	r20,9161
 508ee80:	0508ef40 	call	508ef4 <__alt_mem_sdram+0x508ef4>
 508ee84:	0508f1ec 	andhi	r20,zero,9159
 508ee88:	0508f6f4 	movhi	r20,9179
 508ee8c:	0508f5c8 	cmpgei	r20,zero,9175
 508ee90:	0508f6f4 	movhi	r20,9179
 508ee94:	0508f620 	cmpeqi	r20,zero,9176
 508ee98:	0508f6f4 	movhi	r20,9179
 508ee9c:	0508f6f4 	movhi	r20,9179
 508eea0:	0508f2e4 	muli	r20,zero,9163
 508eea4:	42000204 	addi	r8,r8,8
 508eea8:	da802317 	ldw	r10,140(sp)
 508eeac:	5455883a 	add	r10,r10,r17
 508eeb0:	da802315 	stw	r10,140(sp)
 508eeb4:	003f8b06 	br	508ece4 <__alt_data_end+0xfffc0ae4>
 508eeb8:	d9002017 	ldw	r4,128(sp)
 508eebc:	a00b883a 	mov	r5,r20
 508eec0:	50897680 	call	5089768 <__swsetup_r>
 508eec4:	1003b11e 	bne	r2,zero,508fd8c <___vfiprintf_internal_r+0x11ec>
 508eec8:	a080030b 	ldhu	r2,12(r20)
 508eecc:	00c00284 	movi	r3,10
 508eed0:	1080068c 	andi	r2,r2,26
 508eed4:	10ff541e 	bne	r2,r3,508ec28 <__alt_data_end+0xfffc0a28>
 508eed8:	a080038f 	ldh	r2,14(r20)
 508eedc:	103f5216 	blt	r2,zero,508ec28 <__alt_data_end+0xfffc0a28>
 508eee0:	d9c02217 	ldw	r7,136(sp)
 508eee4:	d9002017 	ldw	r4,128(sp)
 508eee8:	e00d883a 	mov	r6,fp
 508eeec:	a00b883a 	mov	r5,r20
 508eef0:	50900180 	call	5090018 <__sbprintf>
 508eef4:	dfc03617 	ldw	ra,216(sp)
 508eef8:	df003517 	ldw	fp,212(sp)
 508eefc:	ddc03417 	ldw	r23,208(sp)
 508ef00:	dd803317 	ldw	r22,204(sp)
 508ef04:	dd403217 	ldw	r21,200(sp)
 508ef08:	dd003117 	ldw	r20,196(sp)
 508ef0c:	dcc03017 	ldw	r19,192(sp)
 508ef10:	dc802f17 	ldw	r18,188(sp)
 508ef14:	dc402e17 	ldw	r17,184(sp)
 508ef18:	dc002d17 	ldw	r16,180(sp)
 508ef1c:	dec03704 	addi	sp,sp,220
 508ef20:	f800283a 	ret
 508ef24:	508b73c0 	call	508b73c <__sinit>
 508ef28:	003f2f06 	br	508ebe8 <__alt_data_end+0xfffc09e8>
 508ef2c:	0463c83a 	sub	r17,zero,r17
 508ef30:	d8802215 	stw	r2,136(sp)
 508ef34:	a5000114 	ori	r20,r20,4
 508ef38:	80c00007 	ldb	r3,0(r16)
 508ef3c:	003f7706 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508ef40:	00800c04 	movi	r2,48
 508ef44:	da802217 	ldw	r10,136(sp)
 508ef48:	d8801d05 	stb	r2,116(sp)
 508ef4c:	00801e04 	movi	r2,120
 508ef50:	d8801d45 	stb	r2,117(sp)
 508ef54:	d8001d85 	stb	zero,118(sp)
 508ef58:	50c00104 	addi	r3,r10,4
 508ef5c:	54800017 	ldw	r18,0(r10)
 508ef60:	0027883a 	mov	r19,zero
 508ef64:	a0800094 	ori	r2,r20,2
 508ef68:	48030b16 	blt	r9,zero,508fb98 <___vfiprintf_internal_r+0xff8>
 508ef6c:	00bfdfc4 	movi	r2,-129
 508ef70:	a096703a 	and	r11,r20,r2
 508ef74:	d8c02215 	stw	r3,136(sp)
 508ef78:	5d000094 	ori	r20,r11,2
 508ef7c:	90032b1e 	bne	r18,zero,508fc2c <___vfiprintf_internal_r+0x108c>
 508ef80:	00814274 	movhi	r2,1289
 508ef84:	10912f04 	addi	r2,r2,17596
 508ef88:	d8802615 	stw	r2,152(sp)
 508ef8c:	0039883a 	mov	fp,zero
 508ef90:	48017b1e 	bne	r9,zero,508f580 <___vfiprintf_internal_r+0x9e0>
 508ef94:	0013883a 	mov	r9,zero
 508ef98:	0027883a 	mov	r19,zero
 508ef9c:	dd401a04 	addi	r21,sp,104
 508efa0:	4825883a 	mov	r18,r9
 508efa4:	4cc0010e 	bge	r9,r19,508efac <___vfiprintf_internal_r+0x40c>
 508efa8:	9825883a 	mov	r18,r19
 508efac:	e7003fcc 	andi	fp,fp,255
 508efb0:	e700201c 	xori	fp,fp,128
 508efb4:	e73fe004 	addi	fp,fp,-128
 508efb8:	e0000126 	beq	fp,zero,508efc0 <___vfiprintf_internal_r+0x420>
 508efbc:	94800044 	addi	r18,r18,1
 508efc0:	a380008c 	andi	r14,r20,2
 508efc4:	70000126 	beq	r14,zero,508efcc <___vfiprintf_internal_r+0x42c>
 508efc8:	94800084 	addi	r18,r18,2
 508efcc:	a700210c 	andi	fp,r20,132
 508efd0:	e001df1e 	bne	fp,zero,508f750 <___vfiprintf_internal_r+0xbb0>
 508efd4:	8c87c83a 	sub	r3,r17,r18
 508efd8:	00c1dd0e 	bge	zero,r3,508f750 <___vfiprintf_internal_r+0xbb0>
 508efdc:	01c00404 	movi	r7,16
 508efe0:	d8801c17 	ldw	r2,112(sp)
 508efe4:	38c3ad0e 	bge	r7,r3,508fe9c <___vfiprintf_internal_r+0x12fc>
 508efe8:	02814274 	movhi	r10,1289
 508efec:	52919304 	addi	r10,r10,17996
 508eff0:	dc002915 	stw	r16,164(sp)
 508eff4:	d9801b17 	ldw	r6,108(sp)
 508eff8:	da802415 	stw	r10,144(sp)
 508effc:	03c001c4 	movi	r15,7
 508f000:	da402515 	stw	r9,148(sp)
 508f004:	db802815 	stw	r14,160(sp)
 508f008:	1821883a 	mov	r16,r3
 508f00c:	00000506 	br	508f024 <___vfiprintf_internal_r+0x484>
 508f010:	31400084 	addi	r5,r6,2
 508f014:	42000204 	addi	r8,r8,8
 508f018:	200d883a 	mov	r6,r4
 508f01c:	843ffc04 	addi	r16,r16,-16
 508f020:	3c000d0e 	bge	r7,r16,508f058 <___vfiprintf_internal_r+0x4b8>
 508f024:	10800404 	addi	r2,r2,16
 508f028:	31000044 	addi	r4,r6,1
 508f02c:	45800015 	stw	r22,0(r8)
 508f030:	41c00115 	stw	r7,4(r8)
 508f034:	d8801c15 	stw	r2,112(sp)
 508f038:	d9001b15 	stw	r4,108(sp)
 508f03c:	793ff40e 	bge	r15,r4,508f010 <__alt_data_end+0xfffc0e10>
 508f040:	1001b51e 	bne	r2,zero,508f718 <___vfiprintf_internal_r+0xb78>
 508f044:	843ffc04 	addi	r16,r16,-16
 508f048:	000d883a 	mov	r6,zero
 508f04c:	01400044 	movi	r5,1
 508f050:	d811883a 	mov	r8,sp
 508f054:	3c3ff316 	blt	r7,r16,508f024 <__alt_data_end+0xfffc0e24>
 508f058:	8007883a 	mov	r3,r16
 508f05c:	da402517 	ldw	r9,148(sp)
 508f060:	db802817 	ldw	r14,160(sp)
 508f064:	dc002917 	ldw	r16,164(sp)
 508f068:	da802417 	ldw	r10,144(sp)
 508f06c:	1885883a 	add	r2,r3,r2
 508f070:	40c00115 	stw	r3,4(r8)
 508f074:	42800015 	stw	r10,0(r8)
 508f078:	d8801c15 	stw	r2,112(sp)
 508f07c:	d9401b15 	stw	r5,108(sp)
 508f080:	00c001c4 	movi	r3,7
 508f084:	19426016 	blt	r3,r5,508fa08 <___vfiprintf_internal_r+0xe68>
 508f088:	d8c01d87 	ldb	r3,118(sp)
 508f08c:	42000204 	addi	r8,r8,8
 508f090:	29000044 	addi	r4,r5,1
 508f094:	1801b31e 	bne	r3,zero,508f764 <___vfiprintf_internal_r+0xbc4>
 508f098:	7001c026 	beq	r14,zero,508f79c <___vfiprintf_internal_r+0xbfc>
 508f09c:	d8c01d04 	addi	r3,sp,116
 508f0a0:	10800084 	addi	r2,r2,2
 508f0a4:	40c00015 	stw	r3,0(r8)
 508f0a8:	00c00084 	movi	r3,2
 508f0ac:	40c00115 	stw	r3,4(r8)
 508f0b0:	d8801c15 	stw	r2,112(sp)
 508f0b4:	d9001b15 	stw	r4,108(sp)
 508f0b8:	00c001c4 	movi	r3,7
 508f0bc:	1902650e 	bge	r3,r4,508fa54 <___vfiprintf_internal_r+0xeb4>
 508f0c0:	10029a1e 	bne	r2,zero,508fb2c <___vfiprintf_internal_r+0xf8c>
 508f0c4:	00c02004 	movi	r3,128
 508f0c8:	01000044 	movi	r4,1
 508f0cc:	000b883a 	mov	r5,zero
 508f0d0:	d811883a 	mov	r8,sp
 508f0d4:	e0c1b31e 	bne	fp,r3,508f7a4 <___vfiprintf_internal_r+0xc04>
 508f0d8:	8cb9c83a 	sub	fp,r17,r18
 508f0dc:	0701b10e 	bge	zero,fp,508f7a4 <___vfiprintf_internal_r+0xc04>
 508f0e0:	01c00404 	movi	r7,16
 508f0e4:	3f03890e 	bge	r7,fp,508ff0c <___vfiprintf_internal_r+0x136c>
 508f0e8:	00c14274 	movhi	r3,1289
 508f0ec:	18d18f04 	addi	r3,r3,17980
 508f0f0:	d8c02415 	stw	r3,144(sp)
 508f0f4:	8007883a 	mov	r3,r16
 508f0f8:	034001c4 	movi	r13,7
 508f0fc:	e021883a 	mov	r16,fp
 508f100:	da402515 	stw	r9,148(sp)
 508f104:	1839883a 	mov	fp,r3
 508f108:	00000506 	br	508f120 <___vfiprintf_internal_r+0x580>
 508f10c:	29800084 	addi	r6,r5,2
 508f110:	42000204 	addi	r8,r8,8
 508f114:	180b883a 	mov	r5,r3
 508f118:	843ffc04 	addi	r16,r16,-16
 508f11c:	3c000d0e 	bge	r7,r16,508f154 <___vfiprintf_internal_r+0x5b4>
 508f120:	10800404 	addi	r2,r2,16
 508f124:	28c00044 	addi	r3,r5,1
 508f128:	45c00015 	stw	r23,0(r8)
 508f12c:	41c00115 	stw	r7,4(r8)
 508f130:	d8801c15 	stw	r2,112(sp)
 508f134:	d8c01b15 	stw	r3,108(sp)
 508f138:	68fff40e 	bge	r13,r3,508f10c <__alt_data_end+0xfffc0f0c>
 508f13c:	1002241e 	bne	r2,zero,508f9d0 <___vfiprintf_internal_r+0xe30>
 508f140:	843ffc04 	addi	r16,r16,-16
 508f144:	01800044 	movi	r6,1
 508f148:	000b883a 	mov	r5,zero
 508f14c:	d811883a 	mov	r8,sp
 508f150:	3c3ff316 	blt	r7,r16,508f120 <__alt_data_end+0xfffc0f20>
 508f154:	da402517 	ldw	r9,148(sp)
 508f158:	e007883a 	mov	r3,fp
 508f15c:	8039883a 	mov	fp,r16
 508f160:	1821883a 	mov	r16,r3
 508f164:	d8c02417 	ldw	r3,144(sp)
 508f168:	1705883a 	add	r2,r2,fp
 508f16c:	47000115 	stw	fp,4(r8)
 508f170:	40c00015 	stw	r3,0(r8)
 508f174:	d8801c15 	stw	r2,112(sp)
 508f178:	d9801b15 	stw	r6,108(sp)
 508f17c:	00c001c4 	movi	r3,7
 508f180:	19827616 	blt	r3,r6,508fb5c <___vfiprintf_internal_r+0xfbc>
 508f184:	4cf9c83a 	sub	fp,r9,r19
 508f188:	42000204 	addi	r8,r8,8
 508f18c:	31000044 	addi	r4,r6,1
 508f190:	300b883a 	mov	r5,r6
 508f194:	07018516 	blt	zero,fp,508f7ac <___vfiprintf_internal_r+0xc0c>
 508f198:	9885883a 	add	r2,r19,r2
 508f19c:	45400015 	stw	r21,0(r8)
 508f1a0:	44c00115 	stw	r19,4(r8)
 508f1a4:	d8801c15 	stw	r2,112(sp)
 508f1a8:	d9001b15 	stw	r4,108(sp)
 508f1ac:	00c001c4 	movi	r3,7
 508f1b0:	1901dd0e 	bge	r3,r4,508f928 <___vfiprintf_internal_r+0xd88>
 508f1b4:	1002401e 	bne	r2,zero,508fab8 <___vfiprintf_internal_r+0xf18>
 508f1b8:	d8001b15 	stw	zero,108(sp)
 508f1bc:	a2c0010c 	andi	r11,r20,4
 508f1c0:	58000226 	beq	r11,zero,508f1cc <___vfiprintf_internal_r+0x62c>
 508f1c4:	8ca7c83a 	sub	r19,r17,r18
 508f1c8:	04c2f216 	blt	zero,r19,508fd94 <___vfiprintf_internal_r+0x11f4>
 508f1cc:	8c80010e 	bge	r17,r18,508f1d4 <___vfiprintf_internal_r+0x634>
 508f1d0:	9023883a 	mov	r17,r18
 508f1d4:	da802317 	ldw	r10,140(sp)
 508f1d8:	5455883a 	add	r10,r10,r17
 508f1dc:	da802315 	stw	r10,140(sp)
 508f1e0:	d8001b15 	stw	zero,108(sp)
 508f1e4:	d811883a 	mov	r8,sp
 508f1e8:	003ea206 	br	508ec74 <__alt_data_end+0xfffc0a74>
 508f1ec:	a5000814 	ori	r20,r20,32
 508f1f0:	80c00007 	ldb	r3,0(r16)
 508f1f4:	003ec906 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f1f8:	80c00007 	ldb	r3,0(r16)
 508f1fc:	1b030926 	beq	r3,r12,508fe24 <___vfiprintf_internal_r+0x1284>
 508f200:	a5000414 	ori	r20,r20,16
 508f204:	003ec506 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f208:	21003fcc 	andi	r4,r4,255
 508f20c:	20035e1e 	bne	r4,zero,508ff88 <___vfiprintf_internal_r+0x13e8>
 508f210:	a080080c 	andi	r2,r20,32
 508f214:	1002a526 	beq	r2,zero,508fcac <___vfiprintf_internal_r+0x110c>
 508f218:	da802217 	ldw	r10,136(sp)
 508f21c:	50800017 	ldw	r2,0(r10)
 508f220:	da802317 	ldw	r10,140(sp)
 508f224:	5007d7fa 	srai	r3,r10,31
 508f228:	da802217 	ldw	r10,136(sp)
 508f22c:	10c00115 	stw	r3,4(r2)
 508f230:	52800104 	addi	r10,r10,4
 508f234:	da802215 	stw	r10,136(sp)
 508f238:	da802317 	ldw	r10,140(sp)
 508f23c:	12800015 	stw	r10,0(r2)
 508f240:	003e8c06 	br	508ec74 <__alt_data_end+0xfffc0a74>
 508f244:	21003fcc 	andi	r4,r4,255
 508f248:	2003511e 	bne	r4,zero,508ff90 <___vfiprintf_internal_r+0x13f0>
 508f24c:	a080080c 	andi	r2,r20,32
 508f250:	1000a126 	beq	r2,zero,508f4d8 <___vfiprintf_internal_r+0x938>
 508f254:	da802217 	ldw	r10,136(sp)
 508f258:	d8001d85 	stb	zero,118(sp)
 508f25c:	50800204 	addi	r2,r10,8
 508f260:	54800017 	ldw	r18,0(r10)
 508f264:	54c00117 	ldw	r19,4(r10)
 508f268:	4802b416 	blt	r9,zero,508fd3c <___vfiprintf_internal_r+0x119c>
 508f26c:	013fdfc4 	movi	r4,-129
 508f270:	94c6b03a 	or	r3,r18,r19
 508f274:	d8802215 	stw	r2,136(sp)
 508f278:	a128703a 	and	r20,r20,r4
 508f27c:	1800a226 	beq	r3,zero,508f508 <___vfiprintf_internal_r+0x968>
 508f280:	0039883a 	mov	fp,zero
 508f284:	dd401a04 	addi	r21,sp,104
 508f288:	9006d0fa 	srli	r3,r18,3
 508f28c:	9808977a 	slli	r4,r19,29
 508f290:	9826d0fa 	srli	r19,r19,3
 508f294:	948001cc 	andi	r18,r18,7
 508f298:	90800c04 	addi	r2,r18,48
 508f29c:	ad7fffc4 	addi	r21,r21,-1
 508f2a0:	20e4b03a 	or	r18,r4,r3
 508f2a4:	a8800005 	stb	r2,0(r21)
 508f2a8:	94c6b03a 	or	r3,r18,r19
 508f2ac:	183ff61e 	bne	r3,zero,508f288 <__alt_data_end+0xfffc1088>
 508f2b0:	a0c0004c 	andi	r3,r20,1
 508f2b4:	18005926 	beq	r3,zero,508f41c <___vfiprintf_internal_r+0x87c>
 508f2b8:	10803fcc 	andi	r2,r2,255
 508f2bc:	1080201c 	xori	r2,r2,128
 508f2c0:	10bfe004 	addi	r2,r2,-128
 508f2c4:	00c00c04 	movi	r3,48
 508f2c8:	10c05426 	beq	r2,r3,508f41c <___vfiprintf_internal_r+0x87c>
 508f2cc:	da801e17 	ldw	r10,120(sp)
 508f2d0:	a8bfffc4 	addi	r2,r21,-1
 508f2d4:	a8ffffc5 	stb	r3,-1(r21)
 508f2d8:	50a7c83a 	sub	r19,r10,r2
 508f2dc:	102b883a 	mov	r21,r2
 508f2e0:	003f2f06 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508f2e4:	21003fcc 	andi	r4,r4,255
 508f2e8:	2003421e 	bne	r4,zero,508fff4 <___vfiprintf_internal_r+0x1454>
 508f2ec:	00814274 	movhi	r2,1289
 508f2f0:	10912f04 	addi	r2,r2,17596
 508f2f4:	d8802615 	stw	r2,152(sp)
 508f2f8:	a080080c 	andi	r2,r20,32
 508f2fc:	1000aa26 	beq	r2,zero,508f5a8 <___vfiprintf_internal_r+0xa08>
 508f300:	da802217 	ldw	r10,136(sp)
 508f304:	54800017 	ldw	r18,0(r10)
 508f308:	54c00117 	ldw	r19,4(r10)
 508f30c:	52800204 	addi	r10,r10,8
 508f310:	da802215 	stw	r10,136(sp)
 508f314:	a080004c 	andi	r2,r20,1
 508f318:	1001d226 	beq	r2,zero,508fa64 <___vfiprintf_internal_r+0xec4>
 508f31c:	94c4b03a 	or	r2,r18,r19
 508f320:	1002351e 	bne	r2,zero,508fbf8 <___vfiprintf_internal_r+0x1058>
 508f324:	d8001d85 	stb	zero,118(sp)
 508f328:	48022216 	blt	r9,zero,508fbb4 <___vfiprintf_internal_r+0x1014>
 508f32c:	00bfdfc4 	movi	r2,-129
 508f330:	a0a8703a 	and	r20,r20,r2
 508f334:	003f1506 	br	508ef8c <__alt_data_end+0xfffc0d8c>
 508f338:	da802217 	ldw	r10,136(sp)
 508f33c:	04800044 	movi	r18,1
 508f340:	d8001d85 	stb	zero,118(sp)
 508f344:	50800017 	ldw	r2,0(r10)
 508f348:	52800104 	addi	r10,r10,4
 508f34c:	da802215 	stw	r10,136(sp)
 508f350:	d8801005 	stb	r2,64(sp)
 508f354:	9027883a 	mov	r19,r18
 508f358:	dd401004 	addi	r21,sp,64
 508f35c:	0013883a 	mov	r9,zero
 508f360:	003f1706 	br	508efc0 <__alt_data_end+0xfffc0dc0>
 508f364:	21003fcc 	andi	r4,r4,255
 508f368:	2003201e 	bne	r4,zero,508ffec <___vfiprintf_internal_r+0x144c>
 508f36c:	a080080c 	andi	r2,r20,32
 508f370:	10004b26 	beq	r2,zero,508f4a0 <___vfiprintf_internal_r+0x900>
 508f374:	da802217 	ldw	r10,136(sp)
 508f378:	50800117 	ldw	r2,4(r10)
 508f37c:	54800017 	ldw	r18,0(r10)
 508f380:	52800204 	addi	r10,r10,8
 508f384:	da802215 	stw	r10,136(sp)
 508f388:	1027883a 	mov	r19,r2
 508f38c:	10022c16 	blt	r2,zero,508fc40 <___vfiprintf_internal_r+0x10a0>
 508f390:	df001d83 	ldbu	fp,118(sp)
 508f394:	48007216 	blt	r9,zero,508f560 <___vfiprintf_internal_r+0x9c0>
 508f398:	00ffdfc4 	movi	r3,-129
 508f39c:	94c4b03a 	or	r2,r18,r19
 508f3a0:	a0e8703a 	and	r20,r20,r3
 508f3a4:	1000cc26 	beq	r2,zero,508f6d8 <___vfiprintf_internal_r+0xb38>
 508f3a8:	98021026 	beq	r19,zero,508fbec <___vfiprintf_internal_r+0x104c>
 508f3ac:	dc402415 	stw	r17,144(sp)
 508f3b0:	dc002515 	stw	r16,148(sp)
 508f3b4:	9823883a 	mov	r17,r19
 508f3b8:	9021883a 	mov	r16,r18
 508f3bc:	dd401a04 	addi	r21,sp,104
 508f3c0:	4825883a 	mov	r18,r9
 508f3c4:	4027883a 	mov	r19,r8
 508f3c8:	8009883a 	mov	r4,r16
 508f3cc:	880b883a 	mov	r5,r17
 508f3d0:	01800284 	movi	r6,10
 508f3d4:	000f883a 	mov	r7,zero
 508f3d8:	5090f800 	call	5090f80 <__umoddi3>
 508f3dc:	10800c04 	addi	r2,r2,48
 508f3e0:	ad7fffc4 	addi	r21,r21,-1
 508f3e4:	8009883a 	mov	r4,r16
 508f3e8:	880b883a 	mov	r5,r17
 508f3ec:	a8800005 	stb	r2,0(r21)
 508f3f0:	01800284 	movi	r6,10
 508f3f4:	000f883a 	mov	r7,zero
 508f3f8:	5090a080 	call	5090a08 <__udivdi3>
 508f3fc:	1021883a 	mov	r16,r2
 508f400:	10c4b03a 	or	r2,r2,r3
 508f404:	1823883a 	mov	r17,r3
 508f408:	103fef1e 	bne	r2,zero,508f3c8 <__alt_data_end+0xfffc11c8>
 508f40c:	dc402417 	ldw	r17,144(sp)
 508f410:	dc002517 	ldw	r16,148(sp)
 508f414:	9013883a 	mov	r9,r18
 508f418:	9811883a 	mov	r8,r19
 508f41c:	da801e17 	ldw	r10,120(sp)
 508f420:	5567c83a 	sub	r19,r10,r21
 508f424:	003ede06 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508f428:	38803fcc 	andi	r2,r7,255
 508f42c:	1080201c 	xori	r2,r2,128
 508f430:	10bfe004 	addi	r2,r2,-128
 508f434:	1002371e 	bne	r2,zero,508fd14 <___vfiprintf_internal_r+0x1174>
 508f438:	01000044 	movi	r4,1
 508f43c:	01c00804 	movi	r7,32
 508f440:	80c00007 	ldb	r3,0(r16)
 508f444:	003e3506 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f448:	a5000054 	ori	r20,r20,1
 508f44c:	80c00007 	ldb	r3,0(r16)
 508f450:	003e3206 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f454:	a5002014 	ori	r20,r20,128
 508f458:	80c00007 	ldb	r3,0(r16)
 508f45c:	003e2f06 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f460:	8015883a 	mov	r10,r16
 508f464:	0023883a 	mov	r17,zero
 508f468:	18bff404 	addi	r2,r3,-48
 508f46c:	50c00007 	ldb	r3,0(r10)
 508f470:	8c4002a4 	muli	r17,r17,10
 508f474:	84000044 	addi	r16,r16,1
 508f478:	8015883a 	mov	r10,r16
 508f47c:	1463883a 	add	r17,r2,r17
 508f480:	18bff404 	addi	r2,r3,-48
 508f484:	30bff92e 	bgeu	r6,r2,508f46c <__alt_data_end+0xfffc126c>
 508f488:	003e2506 	br	508ed20 <__alt_data_end+0xfffc0b20>
 508f48c:	21003fcc 	andi	r4,r4,255
 508f490:	2002d41e 	bne	r4,zero,508ffe4 <___vfiprintf_internal_r+0x1444>
 508f494:	a5000414 	ori	r20,r20,16
 508f498:	a080080c 	andi	r2,r20,32
 508f49c:	103fb51e 	bne	r2,zero,508f374 <__alt_data_end+0xfffc1174>
 508f4a0:	a080040c 	andi	r2,r20,16
 508f4a4:	1001f826 	beq	r2,zero,508fc88 <___vfiprintf_internal_r+0x10e8>
 508f4a8:	da802217 	ldw	r10,136(sp)
 508f4ac:	54800017 	ldw	r18,0(r10)
 508f4b0:	52800104 	addi	r10,r10,4
 508f4b4:	da802215 	stw	r10,136(sp)
 508f4b8:	9027d7fa 	srai	r19,r18,31
 508f4bc:	9805883a 	mov	r2,r19
 508f4c0:	003fb206 	br	508f38c <__alt_data_end+0xfffc118c>
 508f4c4:	21003fcc 	andi	r4,r4,255
 508f4c8:	2002c41e 	bne	r4,zero,508ffdc <___vfiprintf_internal_r+0x143c>
 508f4cc:	a5000414 	ori	r20,r20,16
 508f4d0:	a080080c 	andi	r2,r20,32
 508f4d4:	103f5f1e 	bne	r2,zero,508f254 <__alt_data_end+0xfffc1054>
 508f4d8:	a080040c 	andi	r2,r20,16
 508f4dc:	10020f26 	beq	r2,zero,508fd1c <___vfiprintf_internal_r+0x117c>
 508f4e0:	da802217 	ldw	r10,136(sp)
 508f4e4:	d8001d85 	stb	zero,118(sp)
 508f4e8:	0027883a 	mov	r19,zero
 508f4ec:	50800104 	addi	r2,r10,4
 508f4f0:	54800017 	ldw	r18,0(r10)
 508f4f4:	48021116 	blt	r9,zero,508fd3c <___vfiprintf_internal_r+0x119c>
 508f4f8:	00ffdfc4 	movi	r3,-129
 508f4fc:	d8802215 	stw	r2,136(sp)
 508f500:	a0e8703a 	and	r20,r20,r3
 508f504:	903f5e1e 	bne	r18,zero,508f280 <__alt_data_end+0xfffc1080>
 508f508:	0039883a 	mov	fp,zero
 508f50c:	4802a626 	beq	r9,zero,508ffa8 <___vfiprintf_internal_r+0x1408>
 508f510:	0025883a 	mov	r18,zero
 508f514:	0027883a 	mov	r19,zero
 508f518:	003f5a06 	br	508f284 <__alt_data_end+0xfffc1084>
 508f51c:	21003fcc 	andi	r4,r4,255
 508f520:	20029f1e 	bne	r4,zero,508ffa0 <___vfiprintf_internal_r+0x1400>
 508f524:	a5000414 	ori	r20,r20,16
 508f528:	a080080c 	andi	r2,r20,32
 508f52c:	10005e1e 	bne	r2,zero,508f6a8 <___vfiprintf_internal_r+0xb08>
 508f530:	a080040c 	andi	r2,r20,16
 508f534:	1001a21e 	bne	r2,zero,508fbc0 <___vfiprintf_internal_r+0x1020>
 508f538:	a080100c 	andi	r2,r20,64
 508f53c:	d8001d85 	stb	zero,118(sp)
 508f540:	da802217 	ldw	r10,136(sp)
 508f544:	1002231e 	bne	r2,zero,508fdd4 <___vfiprintf_internal_r+0x1234>
 508f548:	50800104 	addi	r2,r10,4
 508f54c:	54800017 	ldw	r18,0(r10)
 508f550:	0027883a 	mov	r19,zero
 508f554:	4801a00e 	bge	r9,zero,508fbd8 <___vfiprintf_internal_r+0x1038>
 508f558:	d8802215 	stw	r2,136(sp)
 508f55c:	0039883a 	mov	fp,zero
 508f560:	94c4b03a 	or	r2,r18,r19
 508f564:	103f901e 	bne	r2,zero,508f3a8 <__alt_data_end+0xfffc11a8>
 508f568:	00800044 	movi	r2,1
 508f56c:	10803fcc 	andi	r2,r2,255
 508f570:	00c00044 	movi	r3,1
 508f574:	10c05926 	beq	r2,r3,508f6dc <___vfiprintf_internal_r+0xb3c>
 508f578:	00c00084 	movi	r3,2
 508f57c:	10ffe41e 	bne	r2,r3,508f510 <__alt_data_end+0xfffc1310>
 508f580:	0025883a 	mov	r18,zero
 508f584:	0027883a 	mov	r19,zero
 508f588:	00013d06 	br	508fa80 <___vfiprintf_internal_r+0xee0>
 508f58c:	21003fcc 	andi	r4,r4,255
 508f590:	2002811e 	bne	r4,zero,508ff98 <___vfiprintf_internal_r+0x13f8>
 508f594:	00814274 	movhi	r2,1289
 508f598:	10912a04 	addi	r2,r2,17576
 508f59c:	d8802615 	stw	r2,152(sp)
 508f5a0:	a080080c 	andi	r2,r20,32
 508f5a4:	103f561e 	bne	r2,zero,508f300 <__alt_data_end+0xfffc1100>
 508f5a8:	a080040c 	andi	r2,r20,16
 508f5ac:	1001d126 	beq	r2,zero,508fcf4 <___vfiprintf_internal_r+0x1154>
 508f5b0:	da802217 	ldw	r10,136(sp)
 508f5b4:	0027883a 	mov	r19,zero
 508f5b8:	54800017 	ldw	r18,0(r10)
 508f5bc:	52800104 	addi	r10,r10,4
 508f5c0:	da802215 	stw	r10,136(sp)
 508f5c4:	003f5306 	br	508f314 <__alt_data_end+0xfffc1114>
 508f5c8:	da802217 	ldw	r10,136(sp)
 508f5cc:	d8001d85 	stb	zero,118(sp)
 508f5d0:	55400017 	ldw	r21,0(r10)
 508f5d4:	50c00104 	addi	r3,r10,4
 508f5d8:	a8024226 	beq	r21,zero,508fee4 <___vfiprintf_internal_r+0x1344>
 508f5dc:	48021816 	blt	r9,zero,508fe40 <___vfiprintf_internal_r+0x12a0>
 508f5e0:	480d883a 	mov	r6,r9
 508f5e4:	000b883a 	mov	r5,zero
 508f5e8:	a809883a 	mov	r4,r21
 508f5ec:	d8c02a15 	stw	r3,168(sp)
 508f5f0:	da002b15 	stw	r8,172(sp)
 508f5f4:	da402c15 	stw	r9,176(sp)
 508f5f8:	508cca80 	call	508cca8 <memchr>
 508f5fc:	d8c02a17 	ldw	r3,168(sp)
 508f600:	da002b17 	ldw	r8,172(sp)
 508f604:	da402c17 	ldw	r9,176(sp)
 508f608:	10024826 	beq	r2,zero,508ff2c <___vfiprintf_internal_r+0x138c>
 508f60c:	1567c83a 	sub	r19,r2,r21
 508f610:	df001d83 	ldbu	fp,118(sp)
 508f614:	d8c02215 	stw	r3,136(sp)
 508f618:	0013883a 	mov	r9,zero
 508f61c:	003e6006 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508f620:	21003fcc 	andi	r4,r4,255
 508f624:	203fc026 	beq	r4,zero,508f528 <__alt_data_end+0xfffc1328>
 508f628:	d9c01d85 	stb	r7,118(sp)
 508f62c:	003fbe06 	br	508f528 <__alt_data_end+0xfffc1328>
 508f630:	da802217 	ldw	r10,136(sp)
 508f634:	54400017 	ldw	r17,0(r10)
 508f638:	50800104 	addi	r2,r10,4
 508f63c:	883e3b16 	blt	r17,zero,508ef2c <__alt_data_end+0xfffc0d2c>
 508f640:	d8802215 	stw	r2,136(sp)
 508f644:	80c00007 	ldb	r3,0(r16)
 508f648:	003db406 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f64c:	01000044 	movi	r4,1
 508f650:	01c00ac4 	movi	r7,43
 508f654:	80c00007 	ldb	r3,0(r16)
 508f658:	003db006 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f65c:	80c00007 	ldb	r3,0(r16)
 508f660:	82800044 	addi	r10,r16,1
 508f664:	1b423c26 	beq	r3,r13,508ff58 <___vfiprintf_internal_r+0x13b8>
 508f668:	18bff404 	addi	r2,r3,-48
 508f66c:	0013883a 	mov	r9,zero
 508f670:	30822b36 	bltu	r6,r2,508ff20 <___vfiprintf_internal_r+0x1380>
 508f674:	50c00007 	ldb	r3,0(r10)
 508f678:	4a4002a4 	muli	r9,r9,10
 508f67c:	54000044 	addi	r16,r10,1
 508f680:	8015883a 	mov	r10,r16
 508f684:	4893883a 	add	r9,r9,r2
 508f688:	18bff404 	addi	r2,r3,-48
 508f68c:	30bff92e 	bgeu	r6,r2,508f674 <__alt_data_end+0xfffc1474>
 508f690:	483da30e 	bge	r9,zero,508ed20 <__alt_data_end+0xfffc0b20>
 508f694:	027fffc4 	movi	r9,-1
 508f698:	003da106 	br	508ed20 <__alt_data_end+0xfffc0b20>
 508f69c:	a5001014 	ori	r20,r20,64
 508f6a0:	80c00007 	ldb	r3,0(r16)
 508f6a4:	003d9d06 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508f6a8:	da802217 	ldw	r10,136(sp)
 508f6ac:	d8001d85 	stb	zero,118(sp)
 508f6b0:	50c00204 	addi	r3,r10,8
 508f6b4:	54800017 	ldw	r18,0(r10)
 508f6b8:	54c00117 	ldw	r19,4(r10)
 508f6bc:	4801ca16 	blt	r9,zero,508fde8 <___vfiprintf_internal_r+0x1248>
 508f6c0:	013fdfc4 	movi	r4,-129
 508f6c4:	94c4b03a 	or	r2,r18,r19
 508f6c8:	d8c02215 	stw	r3,136(sp)
 508f6cc:	a128703a 	and	r20,r20,r4
 508f6d0:	0039883a 	mov	fp,zero
 508f6d4:	103f341e 	bne	r2,zero,508f3a8 <__alt_data_end+0xfffc11a8>
 508f6d8:	483e2e26 	beq	r9,zero,508ef94 <__alt_data_end+0xfffc0d94>
 508f6dc:	0025883a 	mov	r18,zero
 508f6e0:	94800c04 	addi	r18,r18,48
 508f6e4:	dc8019c5 	stb	r18,103(sp)
 508f6e8:	dcc02717 	ldw	r19,156(sp)
 508f6ec:	dd4019c4 	addi	r21,sp,103
 508f6f0:	003e2b06 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508f6f4:	21003fcc 	andi	r4,r4,255
 508f6f8:	2002361e 	bne	r4,zero,508ffd4 <___vfiprintf_internal_r+0x1434>
 508f6fc:	1801c126 	beq	r3,zero,508fe04 <___vfiprintf_internal_r+0x1264>
 508f700:	04800044 	movi	r18,1
 508f704:	d8c01005 	stb	r3,64(sp)
 508f708:	d8001d85 	stb	zero,118(sp)
 508f70c:	9027883a 	mov	r19,r18
 508f710:	dd401004 	addi	r21,sp,64
 508f714:	003f1106 	br	508f35c <__alt_data_end+0xfffc115c>
 508f718:	d9402117 	ldw	r5,132(sp)
 508f71c:	d9002017 	ldw	r4,128(sp)
 508f720:	d9801a04 	addi	r6,sp,104
 508f724:	d9c02b15 	stw	r7,172(sp)
 508f728:	dbc02a15 	stw	r15,168(sp)
 508f72c:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508f730:	d9c02b17 	ldw	r7,172(sp)
 508f734:	dbc02a17 	ldw	r15,168(sp)
 508f738:	10006d1e 	bne	r2,zero,508f8f0 <___vfiprintf_internal_r+0xd50>
 508f73c:	d9801b17 	ldw	r6,108(sp)
 508f740:	d8801c17 	ldw	r2,112(sp)
 508f744:	d811883a 	mov	r8,sp
 508f748:	31400044 	addi	r5,r6,1
 508f74c:	003e3306 	br	508f01c <__alt_data_end+0xfffc0e1c>
 508f750:	d9401b17 	ldw	r5,108(sp)
 508f754:	d8801c17 	ldw	r2,112(sp)
 508f758:	29000044 	addi	r4,r5,1
 508f75c:	d8c01d87 	ldb	r3,118(sp)
 508f760:	183e4d26 	beq	r3,zero,508f098 <__alt_data_end+0xfffc0e98>
 508f764:	00c00044 	movi	r3,1
 508f768:	d9401d84 	addi	r5,sp,118
 508f76c:	10c5883a 	add	r2,r2,r3
 508f770:	41400015 	stw	r5,0(r8)
 508f774:	40c00115 	stw	r3,4(r8)
 508f778:	d8801c15 	stw	r2,112(sp)
 508f77c:	d9001b15 	stw	r4,108(sp)
 508f780:	014001c4 	movi	r5,7
 508f784:	2900a90e 	bge	r5,r4,508fa2c <___vfiprintf_internal_r+0xe8c>
 508f788:	1000da1e 	bne	r2,zero,508faf4 <___vfiprintf_internal_r+0xf54>
 508f78c:	7000ab1e 	bne	r14,zero,508fa3c <___vfiprintf_internal_r+0xe9c>
 508f790:	000b883a 	mov	r5,zero
 508f794:	1809883a 	mov	r4,r3
 508f798:	d811883a 	mov	r8,sp
 508f79c:	00c02004 	movi	r3,128
 508f7a0:	e0fe4d26 	beq	fp,r3,508f0d8 <__alt_data_end+0xfffc0ed8>
 508f7a4:	4cf9c83a 	sub	fp,r9,r19
 508f7a8:	073e7b0e 	bge	zero,fp,508f198 <__alt_data_end+0xfffc0f98>
 508f7ac:	01c00404 	movi	r7,16
 508f7b0:	3f01900e 	bge	r7,fp,508fdf4 <___vfiprintf_internal_r+0x1254>
 508f7b4:	00c14274 	movhi	r3,1289
 508f7b8:	18d18f04 	addi	r3,r3,17980
 508f7bc:	d8c02415 	stw	r3,144(sp)
 508f7c0:	034001c4 	movi	r13,7
 508f7c4:	00000506 	br	508f7dc <___vfiprintf_internal_r+0xc3c>
 508f7c8:	29000084 	addi	r4,r5,2
 508f7cc:	42000204 	addi	r8,r8,8
 508f7d0:	180b883a 	mov	r5,r3
 508f7d4:	e73ffc04 	addi	fp,fp,-16
 508f7d8:	3f000d0e 	bge	r7,fp,508f810 <___vfiprintf_internal_r+0xc70>
 508f7dc:	10800404 	addi	r2,r2,16
 508f7e0:	28c00044 	addi	r3,r5,1
 508f7e4:	45c00015 	stw	r23,0(r8)
 508f7e8:	41c00115 	stw	r7,4(r8)
 508f7ec:	d8801c15 	stw	r2,112(sp)
 508f7f0:	d8c01b15 	stw	r3,108(sp)
 508f7f4:	68fff40e 	bge	r13,r3,508f7c8 <__alt_data_end+0xfffc15c8>
 508f7f8:	1000101e 	bne	r2,zero,508f83c <___vfiprintf_internal_r+0xc9c>
 508f7fc:	e73ffc04 	addi	fp,fp,-16
 508f800:	01000044 	movi	r4,1
 508f804:	000b883a 	mov	r5,zero
 508f808:	d811883a 	mov	r8,sp
 508f80c:	3f3ff316 	blt	r7,fp,508f7dc <__alt_data_end+0xfffc15dc>
 508f810:	da802417 	ldw	r10,144(sp)
 508f814:	1705883a 	add	r2,r2,fp
 508f818:	47000115 	stw	fp,4(r8)
 508f81c:	42800015 	stw	r10,0(r8)
 508f820:	d8801c15 	stw	r2,112(sp)
 508f824:	d9001b15 	stw	r4,108(sp)
 508f828:	00c001c4 	movi	r3,7
 508f82c:	19003616 	blt	r3,r4,508f908 <___vfiprintf_internal_r+0xd68>
 508f830:	42000204 	addi	r8,r8,8
 508f834:	21000044 	addi	r4,r4,1
 508f838:	003e5706 	br	508f198 <__alt_data_end+0xfffc0f98>
 508f83c:	d9402117 	ldw	r5,132(sp)
 508f840:	d9002017 	ldw	r4,128(sp)
 508f844:	d9801a04 	addi	r6,sp,104
 508f848:	d9c02b15 	stw	r7,172(sp)
 508f84c:	db402a15 	stw	r13,168(sp)
 508f850:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508f854:	d9c02b17 	ldw	r7,172(sp)
 508f858:	db402a17 	ldw	r13,168(sp)
 508f85c:	1000241e 	bne	r2,zero,508f8f0 <___vfiprintf_internal_r+0xd50>
 508f860:	d9401b17 	ldw	r5,108(sp)
 508f864:	d8801c17 	ldw	r2,112(sp)
 508f868:	d811883a 	mov	r8,sp
 508f86c:	29000044 	addi	r4,r5,1
 508f870:	003fd806 	br	508f7d4 <__alt_data_end+0xfffc15d4>
 508f874:	d9401b17 	ldw	r5,108(sp)
 508f878:	00c14274 	movhi	r3,1289
 508f87c:	18d19304 	addi	r3,r3,17996
 508f880:	d8c02415 	stw	r3,144(sp)
 508f884:	29400044 	addi	r5,r5,1
 508f888:	d8c02417 	ldw	r3,144(sp)
 508f88c:	14c5883a 	add	r2,r2,r19
 508f890:	44c00115 	stw	r19,4(r8)
 508f894:	40c00015 	stw	r3,0(r8)
 508f898:	d8801c15 	stw	r2,112(sp)
 508f89c:	d9401b15 	stw	r5,108(sp)
 508f8a0:	00c001c4 	movi	r3,7
 508f8a4:	1940070e 	bge	r3,r5,508f8c4 <___vfiprintf_internal_r+0xd24>
 508f8a8:	103e4826 	beq	r2,zero,508f1cc <__alt_data_end+0xfffc0fcc>
 508f8ac:	d9402117 	ldw	r5,132(sp)
 508f8b0:	d9002017 	ldw	r4,128(sp)
 508f8b4:	d9801a04 	addi	r6,sp,104
 508f8b8:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508f8bc:	10000c1e 	bne	r2,zero,508f8f0 <___vfiprintf_internal_r+0xd50>
 508f8c0:	d8801c17 	ldw	r2,112(sp)
 508f8c4:	8c80010e 	bge	r17,r18,508f8cc <___vfiprintf_internal_r+0xd2c>
 508f8c8:	9023883a 	mov	r17,r18
 508f8cc:	da802317 	ldw	r10,140(sp)
 508f8d0:	5455883a 	add	r10,r10,r17
 508f8d4:	da802315 	stw	r10,140(sp)
 508f8d8:	103e4126 	beq	r2,zero,508f1e0 <__alt_data_end+0xfffc0fe0>
 508f8dc:	d9402117 	ldw	r5,132(sp)
 508f8e0:	d9002017 	ldw	r4,128(sp)
 508f8e4:	d9801a04 	addi	r6,sp,104
 508f8e8:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508f8ec:	103e3c26 	beq	r2,zero,508f1e0 <__alt_data_end+0xfffc0fe0>
 508f8f0:	dd002117 	ldw	r20,132(sp)
 508f8f4:	a080030b 	ldhu	r2,12(r20)
 508f8f8:	1080100c 	andi	r2,r2,64
 508f8fc:	1001231e 	bne	r2,zero,508fd8c <___vfiprintf_internal_r+0x11ec>
 508f900:	d8802317 	ldw	r2,140(sp)
 508f904:	003d7b06 	br	508eef4 <__alt_data_end+0xfffc0cf4>
 508f908:	1000991e 	bne	r2,zero,508fb70 <___vfiprintf_internal_r+0xfd0>
 508f90c:	00c00044 	movi	r3,1
 508f910:	9805883a 	mov	r2,r19
 508f914:	dd400015 	stw	r21,0(sp)
 508f918:	dcc00115 	stw	r19,4(sp)
 508f91c:	dcc01c15 	stw	r19,112(sp)
 508f920:	d8c01b15 	stw	r3,108(sp)
 508f924:	d811883a 	mov	r8,sp
 508f928:	42000204 	addi	r8,r8,8
 508f92c:	a2c0010c 	andi	r11,r20,4
 508f930:	583fe426 	beq	r11,zero,508f8c4 <__alt_data_end+0xfffc16c4>
 508f934:	8ca7c83a 	sub	r19,r17,r18
 508f938:	04ffe20e 	bge	zero,r19,508f8c4 <__alt_data_end+0xfffc16c4>
 508f93c:	01c00404 	movi	r7,16
 508f940:	3cffcc0e 	bge	r7,r19,508f874 <__alt_data_end+0xfffc1674>
 508f944:	02814274 	movhi	r10,1289
 508f948:	52919304 	addi	r10,r10,17996
 508f94c:	d9001b17 	ldw	r4,108(sp)
 508f950:	da802415 	stw	r10,144(sp)
 508f954:	382b883a 	mov	r21,r7
 508f958:	050001c4 	movi	r20,7
 508f95c:	df002017 	ldw	fp,128(sp)
 508f960:	00000506 	br	508f978 <___vfiprintf_internal_r+0xdd8>
 508f964:	21400084 	addi	r5,r4,2
 508f968:	42000204 	addi	r8,r8,8
 508f96c:	1809883a 	mov	r4,r3
 508f970:	9cfffc04 	addi	r19,r19,-16
 508f974:	acffc40e 	bge	r21,r19,508f888 <__alt_data_end+0xfffc1688>
 508f978:	10800404 	addi	r2,r2,16
 508f97c:	20c00044 	addi	r3,r4,1
 508f980:	45800015 	stw	r22,0(r8)
 508f984:	45400115 	stw	r21,4(r8)
 508f988:	d8801c15 	stw	r2,112(sp)
 508f98c:	d8c01b15 	stw	r3,108(sp)
 508f990:	a0fff40e 	bge	r20,r3,508f964 <__alt_data_end+0xfffc1764>
 508f994:	1000041e 	bne	r2,zero,508f9a8 <___vfiprintf_internal_r+0xe08>
 508f998:	01400044 	movi	r5,1
 508f99c:	0009883a 	mov	r4,zero
 508f9a0:	d811883a 	mov	r8,sp
 508f9a4:	003ff206 	br	508f970 <__alt_data_end+0xfffc1770>
 508f9a8:	d9402117 	ldw	r5,132(sp)
 508f9ac:	d9801a04 	addi	r6,sp,104
 508f9b0:	e009883a 	mov	r4,fp
 508f9b4:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508f9b8:	103fcd1e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508f9bc:	d9001b17 	ldw	r4,108(sp)
 508f9c0:	d8801c17 	ldw	r2,112(sp)
 508f9c4:	d811883a 	mov	r8,sp
 508f9c8:	21400044 	addi	r5,r4,1
 508f9cc:	003fe806 	br	508f970 <__alt_data_end+0xfffc1770>
 508f9d0:	d9402117 	ldw	r5,132(sp)
 508f9d4:	d9002017 	ldw	r4,128(sp)
 508f9d8:	d9801a04 	addi	r6,sp,104
 508f9dc:	d9c02b15 	stw	r7,172(sp)
 508f9e0:	db402a15 	stw	r13,168(sp)
 508f9e4:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508f9e8:	d9c02b17 	ldw	r7,172(sp)
 508f9ec:	db402a17 	ldw	r13,168(sp)
 508f9f0:	103fbf1e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508f9f4:	d9401b17 	ldw	r5,108(sp)
 508f9f8:	d8801c17 	ldw	r2,112(sp)
 508f9fc:	d811883a 	mov	r8,sp
 508fa00:	29800044 	addi	r6,r5,1
 508fa04:	003dc406 	br	508f118 <__alt_data_end+0xfffc0f18>
 508fa08:	1000d21e 	bne	r2,zero,508fd54 <___vfiprintf_internal_r+0x11b4>
 508fa0c:	d8c01d87 	ldb	r3,118(sp)
 508fa10:	18009526 	beq	r3,zero,508fc68 <___vfiprintf_internal_r+0x10c8>
 508fa14:	00800044 	movi	r2,1
 508fa18:	d8c01d84 	addi	r3,sp,118
 508fa1c:	1009883a 	mov	r4,r2
 508fa20:	d8c00015 	stw	r3,0(sp)
 508fa24:	d8800115 	stw	r2,4(sp)
 508fa28:	d811883a 	mov	r8,sp
 508fa2c:	200b883a 	mov	r5,r4
 508fa30:	42000204 	addi	r8,r8,8
 508fa34:	21000044 	addi	r4,r4,1
 508fa38:	003d9706 	br	508f098 <__alt_data_end+0xfffc0e98>
 508fa3c:	d9001d04 	addi	r4,sp,116
 508fa40:	00800084 	movi	r2,2
 508fa44:	d9000015 	stw	r4,0(sp)
 508fa48:	d8800115 	stw	r2,4(sp)
 508fa4c:	1809883a 	mov	r4,r3
 508fa50:	d811883a 	mov	r8,sp
 508fa54:	200b883a 	mov	r5,r4
 508fa58:	42000204 	addi	r8,r8,8
 508fa5c:	21000044 	addi	r4,r4,1
 508fa60:	003f4e06 	br	508f79c <__alt_data_end+0xfffc159c>
 508fa64:	d8001d85 	stb	zero,118(sp)
 508fa68:	48005016 	blt	r9,zero,508fbac <___vfiprintf_internal_r+0x100c>
 508fa6c:	00ffdfc4 	movi	r3,-129
 508fa70:	94c4b03a 	or	r2,r18,r19
 508fa74:	a0e8703a 	and	r20,r20,r3
 508fa78:	103d4426 	beq	r2,zero,508ef8c <__alt_data_end+0xfffc0d8c>
 508fa7c:	0039883a 	mov	fp,zero
 508fa80:	d9002617 	ldw	r4,152(sp)
 508fa84:	dd401a04 	addi	r21,sp,104
 508fa88:	908003cc 	andi	r2,r18,15
 508fa8c:	9806973a 	slli	r3,r19,28
 508fa90:	2085883a 	add	r2,r4,r2
 508fa94:	9024d13a 	srli	r18,r18,4
 508fa98:	10800003 	ldbu	r2,0(r2)
 508fa9c:	9826d13a 	srli	r19,r19,4
 508faa0:	ad7fffc4 	addi	r21,r21,-1
 508faa4:	1ca4b03a 	or	r18,r3,r18
 508faa8:	a8800005 	stb	r2,0(r21)
 508faac:	94c4b03a 	or	r2,r18,r19
 508fab0:	103ff51e 	bne	r2,zero,508fa88 <__alt_data_end+0xfffc1888>
 508fab4:	003e5906 	br	508f41c <__alt_data_end+0xfffc121c>
 508fab8:	d9402117 	ldw	r5,132(sp)
 508fabc:	d9002017 	ldw	r4,128(sp)
 508fac0:	d9801a04 	addi	r6,sp,104
 508fac4:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fac8:	103f891e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508facc:	d8801c17 	ldw	r2,112(sp)
 508fad0:	d811883a 	mov	r8,sp
 508fad4:	003f9506 	br	508f92c <__alt_data_end+0xfffc172c>
 508fad8:	d9402117 	ldw	r5,132(sp)
 508fadc:	d9002017 	ldw	r4,128(sp)
 508fae0:	d9801a04 	addi	r6,sp,104
 508fae4:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fae8:	103f811e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508faec:	d811883a 	mov	r8,sp
 508faf0:	003ced06 	br	508eea8 <__alt_data_end+0xfffc0ca8>
 508faf4:	d9402117 	ldw	r5,132(sp)
 508faf8:	d9002017 	ldw	r4,128(sp)
 508fafc:	d9801a04 	addi	r6,sp,104
 508fb00:	da402c15 	stw	r9,176(sp)
 508fb04:	db802a15 	stw	r14,168(sp)
 508fb08:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fb0c:	da402c17 	ldw	r9,176(sp)
 508fb10:	db802a17 	ldw	r14,168(sp)
 508fb14:	103f761e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508fb18:	d9401b17 	ldw	r5,108(sp)
 508fb1c:	d8801c17 	ldw	r2,112(sp)
 508fb20:	d811883a 	mov	r8,sp
 508fb24:	29000044 	addi	r4,r5,1
 508fb28:	003d5b06 	br	508f098 <__alt_data_end+0xfffc0e98>
 508fb2c:	d9402117 	ldw	r5,132(sp)
 508fb30:	d9002017 	ldw	r4,128(sp)
 508fb34:	d9801a04 	addi	r6,sp,104
 508fb38:	da402c15 	stw	r9,176(sp)
 508fb3c:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fb40:	da402c17 	ldw	r9,176(sp)
 508fb44:	103f6a1e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508fb48:	d9401b17 	ldw	r5,108(sp)
 508fb4c:	d8801c17 	ldw	r2,112(sp)
 508fb50:	d811883a 	mov	r8,sp
 508fb54:	29000044 	addi	r4,r5,1
 508fb58:	003f1006 	br	508f79c <__alt_data_end+0xfffc159c>
 508fb5c:	1000c31e 	bne	r2,zero,508fe6c <___vfiprintf_internal_r+0x12cc>
 508fb60:	01000044 	movi	r4,1
 508fb64:	000b883a 	mov	r5,zero
 508fb68:	d811883a 	mov	r8,sp
 508fb6c:	003f0d06 	br	508f7a4 <__alt_data_end+0xfffc15a4>
 508fb70:	d9402117 	ldw	r5,132(sp)
 508fb74:	d9002017 	ldw	r4,128(sp)
 508fb78:	d9801a04 	addi	r6,sp,104
 508fb7c:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fb80:	103f5b1e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508fb84:	d9001b17 	ldw	r4,108(sp)
 508fb88:	d8801c17 	ldw	r2,112(sp)
 508fb8c:	d811883a 	mov	r8,sp
 508fb90:	21000044 	addi	r4,r4,1
 508fb94:	003d8006 	br	508f198 <__alt_data_end+0xfffc0f98>
 508fb98:	01014274 	movhi	r4,1289
 508fb9c:	21112f04 	addi	r4,r4,17596
 508fba0:	d9002615 	stw	r4,152(sp)
 508fba4:	d8c02215 	stw	r3,136(sp)
 508fba8:	1029883a 	mov	r20,r2
 508fbac:	94c4b03a 	or	r2,r18,r19
 508fbb0:	103fb21e 	bne	r2,zero,508fa7c <__alt_data_end+0xfffc187c>
 508fbb4:	0039883a 	mov	fp,zero
 508fbb8:	00800084 	movi	r2,2
 508fbbc:	003e6b06 	br	508f56c <__alt_data_end+0xfffc136c>
 508fbc0:	da802217 	ldw	r10,136(sp)
 508fbc4:	d8001d85 	stb	zero,118(sp)
 508fbc8:	0027883a 	mov	r19,zero
 508fbcc:	50800104 	addi	r2,r10,4
 508fbd0:	54800017 	ldw	r18,0(r10)
 508fbd4:	483e6016 	blt	r9,zero,508f558 <__alt_data_end+0xfffc1358>
 508fbd8:	00ffdfc4 	movi	r3,-129
 508fbdc:	d8802215 	stw	r2,136(sp)
 508fbe0:	a0e8703a 	and	r20,r20,r3
 508fbe4:	0039883a 	mov	fp,zero
 508fbe8:	903ebb26 	beq	r18,zero,508f6d8 <__alt_data_end+0xfffc14d8>
 508fbec:	00800244 	movi	r2,9
 508fbf0:	14bdee36 	bltu	r2,r18,508f3ac <__alt_data_end+0xfffc11ac>
 508fbf4:	003eba06 	br	508f6e0 <__alt_data_end+0xfffc14e0>
 508fbf8:	00800c04 	movi	r2,48
 508fbfc:	d8c01d45 	stb	r3,117(sp)
 508fc00:	d8801d05 	stb	r2,116(sp)
 508fc04:	d8001d85 	stb	zero,118(sp)
 508fc08:	a0c00094 	ori	r3,r20,2
 508fc0c:	4800a916 	blt	r9,zero,508feb4 <___vfiprintf_internal_r+0x1314>
 508fc10:	00bfdfc4 	movi	r2,-129
 508fc14:	a096703a 	and	r11,r20,r2
 508fc18:	5d000094 	ori	r20,r11,2
 508fc1c:	0039883a 	mov	fp,zero
 508fc20:	003f9706 	br	508fa80 <__alt_data_end+0xfffc1880>
 508fc24:	8025883a 	mov	r18,r16
 508fc28:	003c2e06 	br	508ece4 <__alt_data_end+0xfffc0ae4>
 508fc2c:	00814274 	movhi	r2,1289
 508fc30:	10912f04 	addi	r2,r2,17596
 508fc34:	0039883a 	mov	fp,zero
 508fc38:	d8802615 	stw	r2,152(sp)
 508fc3c:	003f9006 	br	508fa80 <__alt_data_end+0xfffc1880>
 508fc40:	04a5c83a 	sub	r18,zero,r18
 508fc44:	07000b44 	movi	fp,45
 508fc48:	9004c03a 	cmpne	r2,r18,zero
 508fc4c:	04e7c83a 	sub	r19,zero,r19
 508fc50:	df001d85 	stb	fp,118(sp)
 508fc54:	98a7c83a 	sub	r19,r19,r2
 508fc58:	48009f16 	blt	r9,zero,508fed8 <___vfiprintf_internal_r+0x1338>
 508fc5c:	00bfdfc4 	movi	r2,-129
 508fc60:	a0a8703a 	and	r20,r20,r2
 508fc64:	003dd006 	br	508f3a8 <__alt_data_end+0xfffc11a8>
 508fc68:	70004c26 	beq	r14,zero,508fd9c <___vfiprintf_internal_r+0x11fc>
 508fc6c:	00800084 	movi	r2,2
 508fc70:	d8c01d04 	addi	r3,sp,116
 508fc74:	d8c00015 	stw	r3,0(sp)
 508fc78:	d8800115 	stw	r2,4(sp)
 508fc7c:	01000044 	movi	r4,1
 508fc80:	d811883a 	mov	r8,sp
 508fc84:	003f7306 	br	508fa54 <__alt_data_end+0xfffc1854>
 508fc88:	a080100c 	andi	r2,r20,64
 508fc8c:	da802217 	ldw	r10,136(sp)
 508fc90:	103e0626 	beq	r2,zero,508f4ac <__alt_data_end+0xfffc12ac>
 508fc94:	5480000f 	ldh	r18,0(r10)
 508fc98:	52800104 	addi	r10,r10,4
 508fc9c:	da802215 	stw	r10,136(sp)
 508fca0:	9027d7fa 	srai	r19,r18,31
 508fca4:	9805883a 	mov	r2,r19
 508fca8:	003db806 	br	508f38c <__alt_data_end+0xfffc118c>
 508fcac:	a080040c 	andi	r2,r20,16
 508fcb0:	1000091e 	bne	r2,zero,508fcd8 <___vfiprintf_internal_r+0x1138>
 508fcb4:	a2c0100c 	andi	r11,r20,64
 508fcb8:	58000726 	beq	r11,zero,508fcd8 <___vfiprintf_internal_r+0x1138>
 508fcbc:	da802217 	ldw	r10,136(sp)
 508fcc0:	50800017 	ldw	r2,0(r10)
 508fcc4:	52800104 	addi	r10,r10,4
 508fcc8:	da802215 	stw	r10,136(sp)
 508fccc:	da802317 	ldw	r10,140(sp)
 508fcd0:	1280000d 	sth	r10,0(r2)
 508fcd4:	003be706 	br	508ec74 <__alt_data_end+0xfffc0a74>
 508fcd8:	da802217 	ldw	r10,136(sp)
 508fcdc:	50800017 	ldw	r2,0(r10)
 508fce0:	52800104 	addi	r10,r10,4
 508fce4:	da802215 	stw	r10,136(sp)
 508fce8:	da802317 	ldw	r10,140(sp)
 508fcec:	12800015 	stw	r10,0(r2)
 508fcf0:	003be006 	br	508ec74 <__alt_data_end+0xfffc0a74>
 508fcf4:	a080100c 	andi	r2,r20,64
 508fcf8:	da802217 	ldw	r10,136(sp)
 508fcfc:	10003026 	beq	r2,zero,508fdc0 <___vfiprintf_internal_r+0x1220>
 508fd00:	5480000b 	ldhu	r18,0(r10)
 508fd04:	52800104 	addi	r10,r10,4
 508fd08:	0027883a 	mov	r19,zero
 508fd0c:	da802215 	stw	r10,136(sp)
 508fd10:	003d8006 	br	508f314 <__alt_data_end+0xfffc1114>
 508fd14:	80c00007 	ldb	r3,0(r16)
 508fd18:	003c0006 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508fd1c:	a080100c 	andi	r2,r20,64
 508fd20:	d8001d85 	stb	zero,118(sp)
 508fd24:	da802217 	ldw	r10,136(sp)
 508fd28:	1000201e 	bne	r2,zero,508fdac <___vfiprintf_internal_r+0x120c>
 508fd2c:	50800104 	addi	r2,r10,4
 508fd30:	54800017 	ldw	r18,0(r10)
 508fd34:	0027883a 	mov	r19,zero
 508fd38:	483def0e 	bge	r9,zero,508f4f8 <__alt_data_end+0xfffc12f8>
 508fd3c:	94c6b03a 	or	r3,r18,r19
 508fd40:	d8802215 	stw	r2,136(sp)
 508fd44:	183d4e1e 	bne	r3,zero,508f280 <__alt_data_end+0xfffc1080>
 508fd48:	0039883a 	mov	fp,zero
 508fd4c:	0005883a 	mov	r2,zero
 508fd50:	003e0606 	br	508f56c <__alt_data_end+0xfffc136c>
 508fd54:	d9402117 	ldw	r5,132(sp)
 508fd58:	d9002017 	ldw	r4,128(sp)
 508fd5c:	d9801a04 	addi	r6,sp,104
 508fd60:	da402c15 	stw	r9,176(sp)
 508fd64:	db802a15 	stw	r14,168(sp)
 508fd68:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fd6c:	da402c17 	ldw	r9,176(sp)
 508fd70:	db802a17 	ldw	r14,168(sp)
 508fd74:	103ede1e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508fd78:	d9401b17 	ldw	r5,108(sp)
 508fd7c:	d8801c17 	ldw	r2,112(sp)
 508fd80:	d811883a 	mov	r8,sp
 508fd84:	29000044 	addi	r4,r5,1
 508fd88:	003e7406 	br	508f75c <__alt_data_end+0xfffc155c>
 508fd8c:	00bfffc4 	movi	r2,-1
 508fd90:	003c5806 	br	508eef4 <__alt_data_end+0xfffc0cf4>
 508fd94:	d811883a 	mov	r8,sp
 508fd98:	003ee806 	br	508f93c <__alt_data_end+0xfffc173c>
 508fd9c:	000b883a 	mov	r5,zero
 508fda0:	01000044 	movi	r4,1
 508fda4:	d811883a 	mov	r8,sp
 508fda8:	003e7c06 	br	508f79c <__alt_data_end+0xfffc159c>
 508fdac:	50800104 	addi	r2,r10,4
 508fdb0:	5480000b 	ldhu	r18,0(r10)
 508fdb4:	0027883a 	mov	r19,zero
 508fdb8:	483dcf0e 	bge	r9,zero,508f4f8 <__alt_data_end+0xfffc12f8>
 508fdbc:	003fdf06 	br	508fd3c <__alt_data_end+0xfffc1b3c>
 508fdc0:	54800017 	ldw	r18,0(r10)
 508fdc4:	52800104 	addi	r10,r10,4
 508fdc8:	0027883a 	mov	r19,zero
 508fdcc:	da802215 	stw	r10,136(sp)
 508fdd0:	003d5006 	br	508f314 <__alt_data_end+0xfffc1114>
 508fdd4:	50800104 	addi	r2,r10,4
 508fdd8:	5480000b 	ldhu	r18,0(r10)
 508fddc:	0027883a 	mov	r19,zero
 508fde0:	483f7d0e 	bge	r9,zero,508fbd8 <__alt_data_end+0xfffc19d8>
 508fde4:	003ddc06 	br	508f558 <__alt_data_end+0xfffc1358>
 508fde8:	d8c02215 	stw	r3,136(sp)
 508fdec:	0039883a 	mov	fp,zero
 508fdf0:	003ddb06 	br	508f560 <__alt_data_end+0xfffc1360>
 508fdf4:	02814274 	movhi	r10,1289
 508fdf8:	52918f04 	addi	r10,r10,17980
 508fdfc:	da802415 	stw	r10,144(sp)
 508fe00:	003e8306 	br	508f810 <__alt_data_end+0xfffc1610>
 508fe04:	d8801c17 	ldw	r2,112(sp)
 508fe08:	dd002117 	ldw	r20,132(sp)
 508fe0c:	103eb926 	beq	r2,zero,508f8f4 <__alt_data_end+0xfffc16f4>
 508fe10:	d9002017 	ldw	r4,128(sp)
 508fe14:	d9801a04 	addi	r6,sp,104
 508fe18:	a00b883a 	mov	r5,r20
 508fe1c:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fe20:	003eb406 	br	508f8f4 <__alt_data_end+0xfffc16f4>
 508fe24:	80c00043 	ldbu	r3,1(r16)
 508fe28:	a5000814 	ori	r20,r20,32
 508fe2c:	84000044 	addi	r16,r16,1
 508fe30:	18c03fcc 	andi	r3,r3,255
 508fe34:	18c0201c 	xori	r3,r3,128
 508fe38:	18ffe004 	addi	r3,r3,-128
 508fe3c:	003bb706 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508fe40:	a809883a 	mov	r4,r21
 508fe44:	d8c02a15 	stw	r3,168(sp)
 508fe48:	da002b15 	stw	r8,172(sp)
 508fe4c:	50874000 	call	5087400 <strlen>
 508fe50:	d8c02a17 	ldw	r3,168(sp)
 508fe54:	1027883a 	mov	r19,r2
 508fe58:	df001d83 	ldbu	fp,118(sp)
 508fe5c:	d8c02215 	stw	r3,136(sp)
 508fe60:	0013883a 	mov	r9,zero
 508fe64:	da002b17 	ldw	r8,172(sp)
 508fe68:	003c4d06 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508fe6c:	d9402117 	ldw	r5,132(sp)
 508fe70:	d9002017 	ldw	r4,128(sp)
 508fe74:	d9801a04 	addi	r6,sp,104
 508fe78:	da402c15 	stw	r9,176(sp)
 508fe7c:	508ea8c0 	call	508ea8c <__sprint_r.part.0>
 508fe80:	da402c17 	ldw	r9,176(sp)
 508fe84:	103e9a1e 	bne	r2,zero,508f8f0 <__alt_data_end+0xfffc16f0>
 508fe88:	d9401b17 	ldw	r5,108(sp)
 508fe8c:	d8801c17 	ldw	r2,112(sp)
 508fe90:	d811883a 	mov	r8,sp
 508fe94:	29000044 	addi	r4,r5,1
 508fe98:	003e4206 	br	508f7a4 <__alt_data_end+0xfffc15a4>
 508fe9c:	d9401b17 	ldw	r5,108(sp)
 508fea0:	01014274 	movhi	r4,1289
 508fea4:	21119304 	addi	r4,r4,17996
 508fea8:	d9002415 	stw	r4,144(sp)
 508feac:	29400044 	addi	r5,r5,1
 508feb0:	003c6d06 	br	508f068 <__alt_data_end+0xfffc0e68>
 508feb4:	0039883a 	mov	fp,zero
 508feb8:	00800084 	movi	r2,2
 508febc:	10803fcc 	andi	r2,r2,255
 508fec0:	01000044 	movi	r4,1
 508fec4:	11001e26 	beq	r2,r4,508ff40 <___vfiprintf_internal_r+0x13a0>
 508fec8:	01000084 	movi	r4,2
 508fecc:	11001e1e 	bne	r2,r4,508ff48 <___vfiprintf_internal_r+0x13a8>
 508fed0:	1829883a 	mov	r20,r3
 508fed4:	003eea06 	br	508fa80 <__alt_data_end+0xfffc1880>
 508fed8:	a007883a 	mov	r3,r20
 508fedc:	00800044 	movi	r2,1
 508fee0:	003ff606 	br	508febc <__alt_data_end+0xfffc1cbc>
 508fee4:	00800184 	movi	r2,6
 508fee8:	1240012e 	bgeu	r2,r9,508fef0 <___vfiprintf_internal_r+0x1350>
 508feec:	1013883a 	mov	r9,r2
 508fef0:	4827883a 	mov	r19,r9
 508fef4:	4825883a 	mov	r18,r9
 508fef8:	48001516 	blt	r9,zero,508ff50 <___vfiprintf_internal_r+0x13b0>
 508fefc:	05414274 	movhi	r21,1289
 508ff00:	d8c02215 	stw	r3,136(sp)
 508ff04:	ad513404 	addi	r21,r21,17616
 508ff08:	003d1406 	br	508f35c <__alt_data_end+0xfffc115c>
 508ff0c:	02814274 	movhi	r10,1289
 508ff10:	52918f04 	addi	r10,r10,17980
 508ff14:	da802415 	stw	r10,144(sp)
 508ff18:	200d883a 	mov	r6,r4
 508ff1c:	003c9106 	br	508f164 <__alt_data_end+0xfffc0f64>
 508ff20:	5021883a 	mov	r16,r10
 508ff24:	0013883a 	mov	r9,zero
 508ff28:	003b7d06 	br	508ed20 <__alt_data_end+0xfffc0b20>
 508ff2c:	4827883a 	mov	r19,r9
 508ff30:	df001d83 	ldbu	fp,118(sp)
 508ff34:	d8c02215 	stw	r3,136(sp)
 508ff38:	0013883a 	mov	r9,zero
 508ff3c:	003c1806 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508ff40:	1829883a 	mov	r20,r3
 508ff44:	003d1806 	br	508f3a8 <__alt_data_end+0xfffc11a8>
 508ff48:	1829883a 	mov	r20,r3
 508ff4c:	003ccd06 	br	508f284 <__alt_data_end+0xfffc1084>
 508ff50:	0025883a 	mov	r18,zero
 508ff54:	003fe906 	br	508fefc <__alt_data_end+0xfffc1cfc>
 508ff58:	d8802217 	ldw	r2,136(sp)
 508ff5c:	80c00043 	ldbu	r3,1(r16)
 508ff60:	5021883a 	mov	r16,r10
 508ff64:	12400017 	ldw	r9,0(r2)
 508ff68:	10800104 	addi	r2,r2,4
 508ff6c:	d8802215 	stw	r2,136(sp)
 508ff70:	483faf0e 	bge	r9,zero,508fe30 <__alt_data_end+0xfffc1c30>
 508ff74:	18c03fcc 	andi	r3,r3,255
 508ff78:	18c0201c 	xori	r3,r3,128
 508ff7c:	027fffc4 	movi	r9,-1
 508ff80:	18ffe004 	addi	r3,r3,-128
 508ff84:	003b6506 	br	508ed1c <__alt_data_end+0xfffc0b1c>
 508ff88:	d9c01d85 	stb	r7,118(sp)
 508ff8c:	003ca006 	br	508f210 <__alt_data_end+0xfffc1010>
 508ff90:	d9c01d85 	stb	r7,118(sp)
 508ff94:	003cad06 	br	508f24c <__alt_data_end+0xfffc104c>
 508ff98:	d9c01d85 	stb	r7,118(sp)
 508ff9c:	003d7d06 	br	508f594 <__alt_data_end+0xfffc1394>
 508ffa0:	d9c01d85 	stb	r7,118(sp)
 508ffa4:	003d5f06 	br	508f524 <__alt_data_end+0xfffc1324>
 508ffa8:	a080004c 	andi	r2,r20,1
 508ffac:	0039883a 	mov	fp,zero
 508ffb0:	10000526 	beq	r2,zero,508ffc8 <___vfiprintf_internal_r+0x1428>
 508ffb4:	00800c04 	movi	r2,48
 508ffb8:	d88019c5 	stb	r2,103(sp)
 508ffbc:	dcc02717 	ldw	r19,156(sp)
 508ffc0:	dd4019c4 	addi	r21,sp,103
 508ffc4:	003bf606 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508ffc8:	0027883a 	mov	r19,zero
 508ffcc:	dd401a04 	addi	r21,sp,104
 508ffd0:	003bf306 	br	508efa0 <__alt_data_end+0xfffc0da0>
 508ffd4:	d9c01d85 	stb	r7,118(sp)
 508ffd8:	003dc806 	br	508f6fc <__alt_data_end+0xfffc14fc>
 508ffdc:	d9c01d85 	stb	r7,118(sp)
 508ffe0:	003d3a06 	br	508f4cc <__alt_data_end+0xfffc12cc>
 508ffe4:	d9c01d85 	stb	r7,118(sp)
 508ffe8:	003d2a06 	br	508f494 <__alt_data_end+0xfffc1294>
 508ffec:	d9c01d85 	stb	r7,118(sp)
 508fff0:	003cde06 	br	508f36c <__alt_data_end+0xfffc116c>
 508fff4:	d9c01d85 	stb	r7,118(sp)
 508fff8:	003cbc06 	br	508f2ec <__alt_data_end+0xfffc10ec>

0508fffc <__vfiprintf_internal>:
 508fffc:	00814274 	movhi	r2,1289
 5090000:	10986204 	addi	r2,r2,24968
 5090004:	300f883a 	mov	r7,r6
 5090008:	280d883a 	mov	r6,r5
 509000c:	200b883a 	mov	r5,r4
 5090010:	11000017 	ldw	r4,0(r2)
 5090014:	508eba01 	jmpi	508eba0 <___vfiprintf_internal_r>

05090018 <__sbprintf>:
 5090018:	2880030b 	ldhu	r2,12(r5)
 509001c:	2ac01917 	ldw	r11,100(r5)
 5090020:	2a80038b 	ldhu	r10,14(r5)
 5090024:	2a400717 	ldw	r9,28(r5)
 5090028:	2a000917 	ldw	r8,36(r5)
 509002c:	defee204 	addi	sp,sp,-1144
 5090030:	00c10004 	movi	r3,1024
 5090034:	dc011a15 	stw	r16,1128(sp)
 5090038:	10bfff4c 	andi	r2,r2,65533
 509003c:	2821883a 	mov	r16,r5
 5090040:	d8cb883a 	add	r5,sp,r3
 5090044:	dc811c15 	stw	r18,1136(sp)
 5090048:	dc411b15 	stw	r17,1132(sp)
 509004c:	dfc11d15 	stw	ra,1140(sp)
 5090050:	2025883a 	mov	r18,r4
 5090054:	d881030d 	sth	r2,1036(sp)
 5090058:	dac11915 	stw	r11,1124(sp)
 509005c:	da81038d 	sth	r10,1038(sp)
 5090060:	da410715 	stw	r9,1052(sp)
 5090064:	da010915 	stw	r8,1060(sp)
 5090068:	dec10015 	stw	sp,1024(sp)
 509006c:	dec10415 	stw	sp,1040(sp)
 5090070:	d8c10215 	stw	r3,1032(sp)
 5090074:	d8c10515 	stw	r3,1044(sp)
 5090078:	d8010615 	stw	zero,1048(sp)
 509007c:	508eba00 	call	508eba0 <___vfiprintf_internal_r>
 5090080:	1023883a 	mov	r17,r2
 5090084:	10000416 	blt	r2,zero,5090098 <__sbprintf+0x80>
 5090088:	d9410004 	addi	r5,sp,1024
 509008c:	9009883a 	mov	r4,r18
 5090090:	508b3600 	call	508b360 <_fflush_r>
 5090094:	10000d1e 	bne	r2,zero,50900cc <__sbprintf+0xb4>
 5090098:	d881030b 	ldhu	r2,1036(sp)
 509009c:	1080100c 	andi	r2,r2,64
 50900a0:	10000326 	beq	r2,zero,50900b0 <__sbprintf+0x98>
 50900a4:	8080030b 	ldhu	r2,12(r16)
 50900a8:	10801014 	ori	r2,r2,64
 50900ac:	8080030d 	sth	r2,12(r16)
 50900b0:	8805883a 	mov	r2,r17
 50900b4:	dfc11d17 	ldw	ra,1140(sp)
 50900b8:	dc811c17 	ldw	r18,1136(sp)
 50900bc:	dc411b17 	ldw	r17,1132(sp)
 50900c0:	dc011a17 	ldw	r16,1128(sp)
 50900c4:	dec11e04 	addi	sp,sp,1144
 50900c8:	f800283a 	ret
 50900cc:	047fffc4 	movi	r17,-1
 50900d0:	003ff106 	br	5090098 <__alt_data_end+0xfffc1e98>

050900d4 <__swbuf_r>:
 50900d4:	defffb04 	addi	sp,sp,-20
 50900d8:	dcc00315 	stw	r19,12(sp)
 50900dc:	dc800215 	stw	r18,8(sp)
 50900e0:	dc000015 	stw	r16,0(sp)
 50900e4:	dfc00415 	stw	ra,16(sp)
 50900e8:	dc400115 	stw	r17,4(sp)
 50900ec:	2025883a 	mov	r18,r4
 50900f0:	2827883a 	mov	r19,r5
 50900f4:	3021883a 	mov	r16,r6
 50900f8:	20000226 	beq	r4,zero,5090104 <__swbuf_r+0x30>
 50900fc:	20800e17 	ldw	r2,56(r4)
 5090100:	10004226 	beq	r2,zero,509020c <__swbuf_r+0x138>
 5090104:	80800617 	ldw	r2,24(r16)
 5090108:	8100030b 	ldhu	r4,12(r16)
 509010c:	80800215 	stw	r2,8(r16)
 5090110:	2080020c 	andi	r2,r4,8
 5090114:	10003626 	beq	r2,zero,50901f0 <__swbuf_r+0x11c>
 5090118:	80c00417 	ldw	r3,16(r16)
 509011c:	18003426 	beq	r3,zero,50901f0 <__swbuf_r+0x11c>
 5090120:	2088000c 	andi	r2,r4,8192
 5090124:	9c403fcc 	andi	r17,r19,255
 5090128:	10001a26 	beq	r2,zero,5090194 <__swbuf_r+0xc0>
 509012c:	80800017 	ldw	r2,0(r16)
 5090130:	81000517 	ldw	r4,20(r16)
 5090134:	10c7c83a 	sub	r3,r2,r3
 5090138:	1900200e 	bge	r3,r4,50901bc <__swbuf_r+0xe8>
 509013c:	18c00044 	addi	r3,r3,1
 5090140:	81000217 	ldw	r4,8(r16)
 5090144:	11400044 	addi	r5,r2,1
 5090148:	81400015 	stw	r5,0(r16)
 509014c:	213fffc4 	addi	r4,r4,-1
 5090150:	81000215 	stw	r4,8(r16)
 5090154:	14c00005 	stb	r19,0(r2)
 5090158:	80800517 	ldw	r2,20(r16)
 509015c:	10c01e26 	beq	r2,r3,50901d8 <__swbuf_r+0x104>
 5090160:	8080030b 	ldhu	r2,12(r16)
 5090164:	1080004c 	andi	r2,r2,1
 5090168:	10000226 	beq	r2,zero,5090174 <__swbuf_r+0xa0>
 509016c:	00800284 	movi	r2,10
 5090170:	88801926 	beq	r17,r2,50901d8 <__swbuf_r+0x104>
 5090174:	8805883a 	mov	r2,r17
 5090178:	dfc00417 	ldw	ra,16(sp)
 509017c:	dcc00317 	ldw	r19,12(sp)
 5090180:	dc800217 	ldw	r18,8(sp)
 5090184:	dc400117 	ldw	r17,4(sp)
 5090188:	dc000017 	ldw	r16,0(sp)
 509018c:	dec00504 	addi	sp,sp,20
 5090190:	f800283a 	ret
 5090194:	81401917 	ldw	r5,100(r16)
 5090198:	00b7ffc4 	movi	r2,-8193
 509019c:	21080014 	ori	r4,r4,8192
 50901a0:	2884703a 	and	r2,r5,r2
 50901a4:	80801915 	stw	r2,100(r16)
 50901a8:	80800017 	ldw	r2,0(r16)
 50901ac:	8100030d 	sth	r4,12(r16)
 50901b0:	81000517 	ldw	r4,20(r16)
 50901b4:	10c7c83a 	sub	r3,r2,r3
 50901b8:	193fe016 	blt	r3,r4,509013c <__alt_data_end+0xfffc1f3c>
 50901bc:	800b883a 	mov	r5,r16
 50901c0:	9009883a 	mov	r4,r18
 50901c4:	508b3600 	call	508b360 <_fflush_r>
 50901c8:	1000071e 	bne	r2,zero,50901e8 <__swbuf_r+0x114>
 50901cc:	80800017 	ldw	r2,0(r16)
 50901d0:	00c00044 	movi	r3,1
 50901d4:	003fda06 	br	5090140 <__alt_data_end+0xfffc1f40>
 50901d8:	800b883a 	mov	r5,r16
 50901dc:	9009883a 	mov	r4,r18
 50901e0:	508b3600 	call	508b360 <_fflush_r>
 50901e4:	103fe326 	beq	r2,zero,5090174 <__alt_data_end+0xfffc1f74>
 50901e8:	00bfffc4 	movi	r2,-1
 50901ec:	003fe206 	br	5090178 <__alt_data_end+0xfffc1f78>
 50901f0:	800b883a 	mov	r5,r16
 50901f4:	9009883a 	mov	r4,r18
 50901f8:	50897680 	call	5089768 <__swsetup_r>
 50901fc:	103ffa1e 	bne	r2,zero,50901e8 <__alt_data_end+0xfffc1fe8>
 5090200:	8100030b 	ldhu	r4,12(r16)
 5090204:	80c00417 	ldw	r3,16(r16)
 5090208:	003fc506 	br	5090120 <__alt_data_end+0xfffc1f20>
 509020c:	508b73c0 	call	508b73c <__sinit>
 5090210:	003fbc06 	br	5090104 <__alt_data_end+0xfffc1f04>

05090214 <__swbuf>:
 5090214:	00814274 	movhi	r2,1289
 5090218:	10986204 	addi	r2,r2,24968
 509021c:	280d883a 	mov	r6,r5
 5090220:	200b883a 	mov	r5,r4
 5090224:	11000017 	ldw	r4,0(r2)
 5090228:	50900d41 	jmpi	50900d4 <__swbuf_r>

0509022c <_write_r>:
 509022c:	defffd04 	addi	sp,sp,-12
 5090230:	2805883a 	mov	r2,r5
 5090234:	dc000015 	stw	r16,0(sp)
 5090238:	04014274 	movhi	r16,1289
 509023c:	dc400115 	stw	r17,4(sp)
 5090240:	300b883a 	mov	r5,r6
 5090244:	841f5e04 	addi	r16,r16,32120
 5090248:	2023883a 	mov	r17,r4
 509024c:	380d883a 	mov	r6,r7
 5090250:	1009883a 	mov	r4,r2
 5090254:	dfc00215 	stw	ra,8(sp)
 5090258:	80000015 	stw	zero,0(r16)
 509025c:	50920040 	call	5092004 <write>
 5090260:	00ffffc4 	movi	r3,-1
 5090264:	10c00526 	beq	r2,r3,509027c <_write_r+0x50>
 5090268:	dfc00217 	ldw	ra,8(sp)
 509026c:	dc400117 	ldw	r17,4(sp)
 5090270:	dc000017 	ldw	r16,0(sp)
 5090274:	dec00304 	addi	sp,sp,12
 5090278:	f800283a 	ret
 509027c:	80c00017 	ldw	r3,0(r16)
 5090280:	183ff926 	beq	r3,zero,5090268 <__alt_data_end+0xfffc2068>
 5090284:	88c00015 	stw	r3,0(r17)
 5090288:	003ff706 	br	5090268 <__alt_data_end+0xfffc2068>

0509028c <_close_r>:
 509028c:	defffd04 	addi	sp,sp,-12
 5090290:	dc000015 	stw	r16,0(sp)
 5090294:	04014274 	movhi	r16,1289
 5090298:	dc400115 	stw	r17,4(sp)
 509029c:	841f5e04 	addi	r16,r16,32120
 50902a0:	2023883a 	mov	r17,r4
 50902a4:	2809883a 	mov	r4,r5
 50902a8:	dfc00215 	stw	ra,8(sp)
 50902ac:	80000015 	stw	zero,0(r16)
 50902b0:	50915b00 	call	50915b0 <close>
 50902b4:	00ffffc4 	movi	r3,-1
 50902b8:	10c00526 	beq	r2,r3,50902d0 <_close_r+0x44>
 50902bc:	dfc00217 	ldw	ra,8(sp)
 50902c0:	dc400117 	ldw	r17,4(sp)
 50902c4:	dc000017 	ldw	r16,0(sp)
 50902c8:	dec00304 	addi	sp,sp,12
 50902cc:	f800283a 	ret
 50902d0:	80c00017 	ldw	r3,0(r16)
 50902d4:	183ff926 	beq	r3,zero,50902bc <__alt_data_end+0xfffc20bc>
 50902d8:	88c00015 	stw	r3,0(r17)
 50902dc:	003ff706 	br	50902bc <__alt_data_end+0xfffc20bc>

050902e0 <_calloc_r>:
 50902e0:	298b383a 	mul	r5,r5,r6
 50902e4:	defffe04 	addi	sp,sp,-8
 50902e8:	dfc00115 	stw	ra,4(sp)
 50902ec:	dc000015 	stw	r16,0(sp)
 50902f0:	508c49c0 	call	508c49c <_malloc_r>
 50902f4:	10002926 	beq	r2,zero,509039c <_calloc_r+0xbc>
 50902f8:	11bfff17 	ldw	r6,-4(r2)
 50902fc:	1021883a 	mov	r16,r2
 5090300:	00bfff04 	movi	r2,-4
 5090304:	308c703a 	and	r6,r6,r2
 5090308:	00c00904 	movi	r3,36
 509030c:	308d883a 	add	r6,r6,r2
 5090310:	19801636 	bltu	r3,r6,509036c <_calloc_r+0x8c>
 5090314:	008004c4 	movi	r2,19
 5090318:	11800b2e 	bgeu	r2,r6,5090348 <_calloc_r+0x68>
 509031c:	80000015 	stw	zero,0(r16)
 5090320:	80000115 	stw	zero,4(r16)
 5090324:	008006c4 	movi	r2,27
 5090328:	11801a2e 	bgeu	r2,r6,5090394 <_calloc_r+0xb4>
 509032c:	80000215 	stw	zero,8(r16)
 5090330:	80000315 	stw	zero,12(r16)
 5090334:	30c0151e 	bne	r6,r3,509038c <_calloc_r+0xac>
 5090338:	80000415 	stw	zero,16(r16)
 509033c:	80800604 	addi	r2,r16,24
 5090340:	80000515 	stw	zero,20(r16)
 5090344:	00000106 	br	509034c <_calloc_r+0x6c>
 5090348:	8005883a 	mov	r2,r16
 509034c:	10000015 	stw	zero,0(r2)
 5090350:	10000115 	stw	zero,4(r2)
 5090354:	10000215 	stw	zero,8(r2)
 5090358:	8005883a 	mov	r2,r16
 509035c:	dfc00117 	ldw	ra,4(sp)
 5090360:	dc000017 	ldw	r16,0(sp)
 5090364:	dec00204 	addi	sp,sp,8
 5090368:	f800283a 	ret
 509036c:	000b883a 	mov	r5,zero
 5090370:	8009883a 	mov	r4,r16
 5090374:	508d0300 	call	508d030 <memset>
 5090378:	8005883a 	mov	r2,r16
 509037c:	dfc00117 	ldw	ra,4(sp)
 5090380:	dc000017 	ldw	r16,0(sp)
 5090384:	dec00204 	addi	sp,sp,8
 5090388:	f800283a 	ret
 509038c:	80800404 	addi	r2,r16,16
 5090390:	003fee06 	br	509034c <__alt_data_end+0xfffc214c>
 5090394:	80800204 	addi	r2,r16,8
 5090398:	003fec06 	br	509034c <__alt_data_end+0xfffc214c>
 509039c:	0005883a 	mov	r2,zero
 50903a0:	003fee06 	br	509035c <__alt_data_end+0xfffc215c>

050903a4 <_fclose_r>:
 50903a4:	28003926 	beq	r5,zero,509048c <_fclose_r+0xe8>
 50903a8:	defffc04 	addi	sp,sp,-16
 50903ac:	dc400115 	stw	r17,4(sp)
 50903b0:	dc000015 	stw	r16,0(sp)
 50903b4:	dfc00315 	stw	ra,12(sp)
 50903b8:	dc800215 	stw	r18,8(sp)
 50903bc:	2023883a 	mov	r17,r4
 50903c0:	2821883a 	mov	r16,r5
 50903c4:	20000226 	beq	r4,zero,50903d0 <_fclose_r+0x2c>
 50903c8:	20800e17 	ldw	r2,56(r4)
 50903cc:	10002726 	beq	r2,zero,509046c <_fclose_r+0xc8>
 50903d0:	8080030f 	ldh	r2,12(r16)
 50903d4:	1000071e 	bne	r2,zero,50903f4 <_fclose_r+0x50>
 50903d8:	0005883a 	mov	r2,zero
 50903dc:	dfc00317 	ldw	ra,12(sp)
 50903e0:	dc800217 	ldw	r18,8(sp)
 50903e4:	dc400117 	ldw	r17,4(sp)
 50903e8:	dc000017 	ldw	r16,0(sp)
 50903ec:	dec00404 	addi	sp,sp,16
 50903f0:	f800283a 	ret
 50903f4:	800b883a 	mov	r5,r16
 50903f8:	8809883a 	mov	r4,r17
 50903fc:	508b1440 	call	508b144 <__sflush_r>
 5090400:	1025883a 	mov	r18,r2
 5090404:	80800b17 	ldw	r2,44(r16)
 5090408:	10000426 	beq	r2,zero,509041c <_fclose_r+0x78>
 509040c:	81400717 	ldw	r5,28(r16)
 5090410:	8809883a 	mov	r4,r17
 5090414:	103ee83a 	callr	r2
 5090418:	10001616 	blt	r2,zero,5090474 <_fclose_r+0xd0>
 509041c:	8080030b 	ldhu	r2,12(r16)
 5090420:	1080200c 	andi	r2,r2,128
 5090424:	1000151e 	bne	r2,zero,509047c <_fclose_r+0xd8>
 5090428:	81400c17 	ldw	r5,48(r16)
 509042c:	28000526 	beq	r5,zero,5090444 <_fclose_r+0xa0>
 5090430:	80801004 	addi	r2,r16,64
 5090434:	28800226 	beq	r5,r2,5090440 <_fclose_r+0x9c>
 5090438:	8809883a 	mov	r4,r17
 509043c:	508b8b00 	call	508b8b0 <_free_r>
 5090440:	80000c15 	stw	zero,48(r16)
 5090444:	81401117 	ldw	r5,68(r16)
 5090448:	28000326 	beq	r5,zero,5090458 <_fclose_r+0xb4>
 509044c:	8809883a 	mov	r4,r17
 5090450:	508b8b00 	call	508b8b0 <_free_r>
 5090454:	80001115 	stw	zero,68(r16)
 5090458:	508b74c0 	call	508b74c <__sfp_lock_acquire>
 509045c:	8000030d 	sth	zero,12(r16)
 5090460:	508b7500 	call	508b750 <__sfp_lock_release>
 5090464:	9005883a 	mov	r2,r18
 5090468:	003fdc06 	br	50903dc <__alt_data_end+0xfffc21dc>
 509046c:	508b73c0 	call	508b73c <__sinit>
 5090470:	003fd706 	br	50903d0 <__alt_data_end+0xfffc21d0>
 5090474:	04bfffc4 	movi	r18,-1
 5090478:	003fe806 	br	509041c <__alt_data_end+0xfffc221c>
 509047c:	81400417 	ldw	r5,16(r16)
 5090480:	8809883a 	mov	r4,r17
 5090484:	508b8b00 	call	508b8b0 <_free_r>
 5090488:	003fe706 	br	5090428 <__alt_data_end+0xfffc2228>
 509048c:	0005883a 	mov	r2,zero
 5090490:	f800283a 	ret

05090494 <fclose>:
 5090494:	00814274 	movhi	r2,1289
 5090498:	10986204 	addi	r2,r2,24968
 509049c:	200b883a 	mov	r5,r4
 50904a0:	11000017 	ldw	r4,0(r2)
 50904a4:	50903a41 	jmpi	50903a4 <_fclose_r>

050904a8 <__fputwc>:
 50904a8:	defff804 	addi	sp,sp,-32
 50904ac:	dcc00415 	stw	r19,16(sp)
 50904b0:	dc800315 	stw	r18,12(sp)
 50904b4:	dc000115 	stw	r16,4(sp)
 50904b8:	dfc00715 	stw	ra,28(sp)
 50904bc:	dd400615 	stw	r21,24(sp)
 50904c0:	dd000515 	stw	r20,20(sp)
 50904c4:	dc400215 	stw	r17,8(sp)
 50904c8:	2027883a 	mov	r19,r4
 50904cc:	2825883a 	mov	r18,r5
 50904d0:	3021883a 	mov	r16,r6
 50904d4:	508c28c0 	call	508c28c <__locale_mb_cur_max>
 50904d8:	00c00044 	movi	r3,1
 50904dc:	10c03e26 	beq	r2,r3,50905d8 <__fputwc+0x130>
 50904e0:	81c01704 	addi	r7,r16,92
 50904e4:	900d883a 	mov	r6,r18
 50904e8:	d80b883a 	mov	r5,sp
 50904ec:	9809883a 	mov	r4,r19
 50904f0:	50908200 	call	5090820 <_wcrtomb_r>
 50904f4:	1029883a 	mov	r20,r2
 50904f8:	00bfffc4 	movi	r2,-1
 50904fc:	a0802026 	beq	r20,r2,5090580 <__fputwc+0xd8>
 5090500:	d9400003 	ldbu	r5,0(sp)
 5090504:	a0001c26 	beq	r20,zero,5090578 <__fputwc+0xd0>
 5090508:	0023883a 	mov	r17,zero
 509050c:	05400284 	movi	r21,10
 5090510:	00000906 	br	5090538 <__fputwc+0x90>
 5090514:	80800017 	ldw	r2,0(r16)
 5090518:	11400005 	stb	r5,0(r2)
 509051c:	80c00017 	ldw	r3,0(r16)
 5090520:	18c00044 	addi	r3,r3,1
 5090524:	80c00015 	stw	r3,0(r16)
 5090528:	8c400044 	addi	r17,r17,1
 509052c:	dc45883a 	add	r2,sp,r17
 5090530:	8d00112e 	bgeu	r17,r20,5090578 <__fputwc+0xd0>
 5090534:	11400003 	ldbu	r5,0(r2)
 5090538:	80c00217 	ldw	r3,8(r16)
 509053c:	18ffffc4 	addi	r3,r3,-1
 5090540:	80c00215 	stw	r3,8(r16)
 5090544:	183ff30e 	bge	r3,zero,5090514 <__alt_data_end+0xfffc2314>
 5090548:	80800617 	ldw	r2,24(r16)
 509054c:	18801916 	blt	r3,r2,50905b4 <__fputwc+0x10c>
 5090550:	80800017 	ldw	r2,0(r16)
 5090554:	11400005 	stb	r5,0(r2)
 5090558:	80800017 	ldw	r2,0(r16)
 509055c:	10c00003 	ldbu	r3,0(r2)
 5090560:	10800044 	addi	r2,r2,1
 5090564:	1d402326 	beq	r3,r21,50905f4 <__fputwc+0x14c>
 5090568:	80800015 	stw	r2,0(r16)
 509056c:	8c400044 	addi	r17,r17,1
 5090570:	dc45883a 	add	r2,sp,r17
 5090574:	8d3fef36 	bltu	r17,r20,5090534 <__alt_data_end+0xfffc2334>
 5090578:	9005883a 	mov	r2,r18
 509057c:	00000406 	br	5090590 <__fputwc+0xe8>
 5090580:	80c0030b 	ldhu	r3,12(r16)
 5090584:	a005883a 	mov	r2,r20
 5090588:	18c01014 	ori	r3,r3,64
 509058c:	80c0030d 	sth	r3,12(r16)
 5090590:	dfc00717 	ldw	ra,28(sp)
 5090594:	dd400617 	ldw	r21,24(sp)
 5090598:	dd000517 	ldw	r20,20(sp)
 509059c:	dcc00417 	ldw	r19,16(sp)
 50905a0:	dc800317 	ldw	r18,12(sp)
 50905a4:	dc400217 	ldw	r17,8(sp)
 50905a8:	dc000117 	ldw	r16,4(sp)
 50905ac:	dec00804 	addi	sp,sp,32
 50905b0:	f800283a 	ret
 50905b4:	800d883a 	mov	r6,r16
 50905b8:	29403fcc 	andi	r5,r5,255
 50905bc:	9809883a 	mov	r4,r19
 50905c0:	50900d40 	call	50900d4 <__swbuf_r>
 50905c4:	10bfffe0 	cmpeqi	r2,r2,-1
 50905c8:	10803fcc 	andi	r2,r2,255
 50905cc:	103fd626 	beq	r2,zero,5090528 <__alt_data_end+0xfffc2328>
 50905d0:	00bfffc4 	movi	r2,-1
 50905d4:	003fee06 	br	5090590 <__alt_data_end+0xfffc2390>
 50905d8:	90ffffc4 	addi	r3,r18,-1
 50905dc:	01003f84 	movi	r4,254
 50905e0:	20ffbf36 	bltu	r4,r3,50904e0 <__alt_data_end+0xfffc22e0>
 50905e4:	900b883a 	mov	r5,r18
 50905e8:	dc800005 	stb	r18,0(sp)
 50905ec:	1029883a 	mov	r20,r2
 50905f0:	003fc506 	br	5090508 <__alt_data_end+0xfffc2308>
 50905f4:	800d883a 	mov	r6,r16
 50905f8:	a80b883a 	mov	r5,r21
 50905fc:	9809883a 	mov	r4,r19
 5090600:	50900d40 	call	50900d4 <__swbuf_r>
 5090604:	10bfffe0 	cmpeqi	r2,r2,-1
 5090608:	003fef06 	br	50905c8 <__alt_data_end+0xfffc23c8>

0509060c <_fputwc_r>:
 509060c:	3080030b 	ldhu	r2,12(r6)
 5090610:	10c8000c 	andi	r3,r2,8192
 5090614:	1800051e 	bne	r3,zero,509062c <_fputwc_r+0x20>
 5090618:	30c01917 	ldw	r3,100(r6)
 509061c:	10880014 	ori	r2,r2,8192
 5090620:	3080030d 	sth	r2,12(r6)
 5090624:	18880014 	ori	r2,r3,8192
 5090628:	30801915 	stw	r2,100(r6)
 509062c:	50904a81 	jmpi	50904a8 <__fputwc>

05090630 <fputwc>:
 5090630:	00814274 	movhi	r2,1289
 5090634:	defffc04 	addi	sp,sp,-16
 5090638:	10986204 	addi	r2,r2,24968
 509063c:	dc000115 	stw	r16,4(sp)
 5090640:	14000017 	ldw	r16,0(r2)
 5090644:	dc400215 	stw	r17,8(sp)
 5090648:	dfc00315 	stw	ra,12(sp)
 509064c:	2023883a 	mov	r17,r4
 5090650:	80000226 	beq	r16,zero,509065c <fputwc+0x2c>
 5090654:	80800e17 	ldw	r2,56(r16)
 5090658:	10001026 	beq	r2,zero,509069c <fputwc+0x6c>
 509065c:	2880030b 	ldhu	r2,12(r5)
 5090660:	10c8000c 	andi	r3,r2,8192
 5090664:	1800051e 	bne	r3,zero,509067c <fputwc+0x4c>
 5090668:	28c01917 	ldw	r3,100(r5)
 509066c:	10880014 	ori	r2,r2,8192
 5090670:	2880030d 	sth	r2,12(r5)
 5090674:	18880014 	ori	r2,r3,8192
 5090678:	28801915 	stw	r2,100(r5)
 509067c:	280d883a 	mov	r6,r5
 5090680:	8009883a 	mov	r4,r16
 5090684:	880b883a 	mov	r5,r17
 5090688:	dfc00317 	ldw	ra,12(sp)
 509068c:	dc400217 	ldw	r17,8(sp)
 5090690:	dc000117 	ldw	r16,4(sp)
 5090694:	dec00404 	addi	sp,sp,16
 5090698:	50904a81 	jmpi	50904a8 <__fputwc>
 509069c:	8009883a 	mov	r4,r16
 50906a0:	d9400015 	stw	r5,0(sp)
 50906a4:	508b73c0 	call	508b73c <__sinit>
 50906a8:	d9400017 	ldw	r5,0(sp)
 50906ac:	003feb06 	br	509065c <__alt_data_end+0xfffc245c>

050906b0 <_fstat_r>:
 50906b0:	defffd04 	addi	sp,sp,-12
 50906b4:	2805883a 	mov	r2,r5
 50906b8:	dc000015 	stw	r16,0(sp)
 50906bc:	04014274 	movhi	r16,1289
 50906c0:	dc400115 	stw	r17,4(sp)
 50906c4:	841f5e04 	addi	r16,r16,32120
 50906c8:	2023883a 	mov	r17,r4
 50906cc:	300b883a 	mov	r5,r6
 50906d0:	1009883a 	mov	r4,r2
 50906d4:	dfc00215 	stw	ra,8(sp)
 50906d8:	80000015 	stw	zero,0(r16)
 50906dc:	50916fc0 	call	50916fc <fstat>
 50906e0:	00ffffc4 	movi	r3,-1
 50906e4:	10c00526 	beq	r2,r3,50906fc <_fstat_r+0x4c>
 50906e8:	dfc00217 	ldw	ra,8(sp)
 50906ec:	dc400117 	ldw	r17,4(sp)
 50906f0:	dc000017 	ldw	r16,0(sp)
 50906f4:	dec00304 	addi	sp,sp,12
 50906f8:	f800283a 	ret
 50906fc:	80c00017 	ldw	r3,0(r16)
 5090700:	183ff926 	beq	r3,zero,50906e8 <__alt_data_end+0xfffc24e8>
 5090704:	88c00015 	stw	r3,0(r17)
 5090708:	003ff706 	br	50906e8 <__alt_data_end+0xfffc24e8>

0509070c <_isatty_r>:
 509070c:	defffd04 	addi	sp,sp,-12
 5090710:	dc000015 	stw	r16,0(sp)
 5090714:	04014274 	movhi	r16,1289
 5090718:	dc400115 	stw	r17,4(sp)
 509071c:	841f5e04 	addi	r16,r16,32120
 5090720:	2023883a 	mov	r17,r4
 5090724:	2809883a 	mov	r4,r5
 5090728:	dfc00215 	stw	ra,8(sp)
 509072c:	80000015 	stw	zero,0(r16)
 5090730:	50919ac0 	call	50919ac <isatty>
 5090734:	00ffffc4 	movi	r3,-1
 5090738:	10c00526 	beq	r2,r3,5090750 <_isatty_r+0x44>
 509073c:	dfc00217 	ldw	ra,8(sp)
 5090740:	dc400117 	ldw	r17,4(sp)
 5090744:	dc000017 	ldw	r16,0(sp)
 5090748:	dec00304 	addi	sp,sp,12
 509074c:	f800283a 	ret
 5090750:	80c00017 	ldw	r3,0(r16)
 5090754:	183ff926 	beq	r3,zero,509073c <__alt_data_end+0xfffc253c>
 5090758:	88c00015 	stw	r3,0(r17)
 509075c:	003ff706 	br	509073c <__alt_data_end+0xfffc253c>

05090760 <_lseek_r>:
 5090760:	defffd04 	addi	sp,sp,-12
 5090764:	2805883a 	mov	r2,r5
 5090768:	dc000015 	stw	r16,0(sp)
 509076c:	04014274 	movhi	r16,1289
 5090770:	dc400115 	stw	r17,4(sp)
 5090774:	300b883a 	mov	r5,r6
 5090778:	841f5e04 	addi	r16,r16,32120
 509077c:	2023883a 	mov	r17,r4
 5090780:	380d883a 	mov	r6,r7
 5090784:	1009883a 	mov	r4,r2
 5090788:	dfc00215 	stw	ra,8(sp)
 509078c:	80000015 	stw	zero,0(r16)
 5090790:	5091b8c0 	call	5091b8c <lseek>
 5090794:	00ffffc4 	movi	r3,-1
 5090798:	10c00526 	beq	r2,r3,50907b0 <_lseek_r+0x50>
 509079c:	dfc00217 	ldw	ra,8(sp)
 50907a0:	dc400117 	ldw	r17,4(sp)
 50907a4:	dc000017 	ldw	r16,0(sp)
 50907a8:	dec00304 	addi	sp,sp,12
 50907ac:	f800283a 	ret
 50907b0:	80c00017 	ldw	r3,0(r16)
 50907b4:	183ff926 	beq	r3,zero,509079c <__alt_data_end+0xfffc259c>
 50907b8:	88c00015 	stw	r3,0(r17)
 50907bc:	003ff706 	br	509079c <__alt_data_end+0xfffc259c>

050907c0 <_read_r>:
 50907c0:	defffd04 	addi	sp,sp,-12
 50907c4:	2805883a 	mov	r2,r5
 50907c8:	dc000015 	stw	r16,0(sp)
 50907cc:	04014274 	movhi	r16,1289
 50907d0:	dc400115 	stw	r17,4(sp)
 50907d4:	300b883a 	mov	r5,r6
 50907d8:	841f5e04 	addi	r16,r16,32120
 50907dc:	2023883a 	mov	r17,r4
 50907e0:	380d883a 	mov	r6,r7
 50907e4:	1009883a 	mov	r4,r2
 50907e8:	dfc00215 	stw	ra,8(sp)
 50907ec:	80000015 	stw	zero,0(r16)
 50907f0:	5091d740 	call	5091d74 <read>
 50907f4:	00ffffc4 	movi	r3,-1
 50907f8:	10c00526 	beq	r2,r3,5090810 <_read_r+0x50>
 50907fc:	dfc00217 	ldw	ra,8(sp)
 5090800:	dc400117 	ldw	r17,4(sp)
 5090804:	dc000017 	ldw	r16,0(sp)
 5090808:	dec00304 	addi	sp,sp,12
 509080c:	f800283a 	ret
 5090810:	80c00017 	ldw	r3,0(r16)
 5090814:	183ff926 	beq	r3,zero,50907fc <__alt_data_end+0xfffc25fc>
 5090818:	88c00015 	stw	r3,0(r17)
 509081c:	003ff706 	br	50907fc <__alt_data_end+0xfffc25fc>

05090820 <_wcrtomb_r>:
 5090820:	defff604 	addi	sp,sp,-40
 5090824:	00814274 	movhi	r2,1289
 5090828:	dc800815 	stw	r18,32(sp)
 509082c:	dc400715 	stw	r17,28(sp)
 5090830:	dc000615 	stw	r16,24(sp)
 5090834:	10986604 	addi	r2,r2,24984
 5090838:	dfc00915 	stw	ra,36(sp)
 509083c:	2021883a 	mov	r16,r4
 5090840:	3823883a 	mov	r17,r7
 5090844:	14800017 	ldw	r18,0(r2)
 5090848:	28001426 	beq	r5,zero,509089c <_wcrtomb_r+0x7c>
 509084c:	d9400415 	stw	r5,16(sp)
 5090850:	d9800515 	stw	r6,20(sp)
 5090854:	508c2800 	call	508c280 <__locale_charset>
 5090858:	d9800517 	ldw	r6,20(sp)
 509085c:	d9400417 	ldw	r5,16(sp)
 5090860:	100f883a 	mov	r7,r2
 5090864:	dc400015 	stw	r17,0(sp)
 5090868:	8009883a 	mov	r4,r16
 509086c:	903ee83a 	callr	r18
 5090870:	00ffffc4 	movi	r3,-1
 5090874:	10c0031e 	bne	r2,r3,5090884 <_wcrtomb_r+0x64>
 5090878:	88000015 	stw	zero,0(r17)
 509087c:	00c02284 	movi	r3,138
 5090880:	80c00015 	stw	r3,0(r16)
 5090884:	dfc00917 	ldw	ra,36(sp)
 5090888:	dc800817 	ldw	r18,32(sp)
 509088c:	dc400717 	ldw	r17,28(sp)
 5090890:	dc000617 	ldw	r16,24(sp)
 5090894:	dec00a04 	addi	sp,sp,40
 5090898:	f800283a 	ret
 509089c:	508c2800 	call	508c280 <__locale_charset>
 50908a0:	100f883a 	mov	r7,r2
 50908a4:	dc400015 	stw	r17,0(sp)
 50908a8:	000d883a 	mov	r6,zero
 50908ac:	d9400104 	addi	r5,sp,4
 50908b0:	8009883a 	mov	r4,r16
 50908b4:	903ee83a 	callr	r18
 50908b8:	003fed06 	br	5090870 <__alt_data_end+0xfffc2670>

050908bc <wcrtomb>:
 50908bc:	defff604 	addi	sp,sp,-40
 50908c0:	00814274 	movhi	r2,1289
 50908c4:	dc800615 	stw	r18,24(sp)
 50908c8:	dc400515 	stw	r17,20(sp)
 50908cc:	10986204 	addi	r2,r2,24968
 50908d0:	dfc00915 	stw	ra,36(sp)
 50908d4:	dd000815 	stw	r20,32(sp)
 50908d8:	dcc00715 	stw	r19,28(sp)
 50908dc:	dc000415 	stw	r16,16(sp)
 50908e0:	3025883a 	mov	r18,r6
 50908e4:	14400017 	ldw	r17,0(r2)
 50908e8:	20001926 	beq	r4,zero,5090950 <wcrtomb+0x94>
 50908ec:	00814274 	movhi	r2,1289
 50908f0:	10986604 	addi	r2,r2,24984
 50908f4:	15000017 	ldw	r20,0(r2)
 50908f8:	2021883a 	mov	r16,r4
 50908fc:	2827883a 	mov	r19,r5
 5090900:	508c2800 	call	508c280 <__locale_charset>
 5090904:	100f883a 	mov	r7,r2
 5090908:	dc800015 	stw	r18,0(sp)
 509090c:	980d883a 	mov	r6,r19
 5090910:	800b883a 	mov	r5,r16
 5090914:	8809883a 	mov	r4,r17
 5090918:	a03ee83a 	callr	r20
 509091c:	00ffffc4 	movi	r3,-1
 5090920:	10c0031e 	bne	r2,r3,5090930 <wcrtomb+0x74>
 5090924:	90000015 	stw	zero,0(r18)
 5090928:	00c02284 	movi	r3,138
 509092c:	88c00015 	stw	r3,0(r17)
 5090930:	dfc00917 	ldw	ra,36(sp)
 5090934:	dd000817 	ldw	r20,32(sp)
 5090938:	dcc00717 	ldw	r19,28(sp)
 509093c:	dc800617 	ldw	r18,24(sp)
 5090940:	dc400517 	ldw	r17,20(sp)
 5090944:	dc000417 	ldw	r16,16(sp)
 5090948:	dec00a04 	addi	sp,sp,40
 509094c:	f800283a 	ret
 5090950:	00814274 	movhi	r2,1289
 5090954:	10986604 	addi	r2,r2,24984
 5090958:	14000017 	ldw	r16,0(r2)
 509095c:	508c2800 	call	508c280 <__locale_charset>
 5090960:	100f883a 	mov	r7,r2
 5090964:	dc800015 	stw	r18,0(sp)
 5090968:	000d883a 	mov	r6,zero
 509096c:	d9400104 	addi	r5,sp,4
 5090970:	8809883a 	mov	r4,r17
 5090974:	803ee83a 	callr	r16
 5090978:	003fe806 	br	509091c <__alt_data_end+0xfffc271c>

0509097c <__ascii_wctomb>:
 509097c:	28000526 	beq	r5,zero,5090994 <__ascii_wctomb+0x18>
 5090980:	00803fc4 	movi	r2,255
 5090984:	11800536 	bltu	r2,r6,509099c <__ascii_wctomb+0x20>
 5090988:	29800005 	stb	r6,0(r5)
 509098c:	00800044 	movi	r2,1
 5090990:	f800283a 	ret
 5090994:	0005883a 	mov	r2,zero
 5090998:	f800283a 	ret
 509099c:	00802284 	movi	r2,138
 50909a0:	20800015 	stw	r2,0(r4)
 50909a4:	00bfffc4 	movi	r2,-1
 50909a8:	f800283a 	ret

050909ac <_wctomb_r>:
 50909ac:	00814274 	movhi	r2,1289
 50909b0:	defff904 	addi	sp,sp,-28
 50909b4:	10986604 	addi	r2,r2,24984
 50909b8:	dfc00615 	stw	ra,24(sp)
 50909bc:	dc400515 	stw	r17,20(sp)
 50909c0:	dc000415 	stw	r16,16(sp)
 50909c4:	3823883a 	mov	r17,r7
 50909c8:	14000017 	ldw	r16,0(r2)
 50909cc:	d9000115 	stw	r4,4(sp)
 50909d0:	d9400215 	stw	r5,8(sp)
 50909d4:	d9800315 	stw	r6,12(sp)
 50909d8:	508c2800 	call	508c280 <__locale_charset>
 50909dc:	d9800317 	ldw	r6,12(sp)
 50909e0:	d9400217 	ldw	r5,8(sp)
 50909e4:	d9000117 	ldw	r4,4(sp)
 50909e8:	100f883a 	mov	r7,r2
 50909ec:	dc400015 	stw	r17,0(sp)
 50909f0:	803ee83a 	callr	r16
 50909f4:	dfc00617 	ldw	ra,24(sp)
 50909f8:	dc400517 	ldw	r17,20(sp)
 50909fc:	dc000417 	ldw	r16,16(sp)
 5090a00:	dec00704 	addi	sp,sp,28
 5090a04:	f800283a 	ret

05090a08 <__udivdi3>:
 5090a08:	defff504 	addi	sp,sp,-44
 5090a0c:	dcc00415 	stw	r19,16(sp)
 5090a10:	dc000115 	stw	r16,4(sp)
 5090a14:	dfc00a15 	stw	ra,40(sp)
 5090a18:	df000915 	stw	fp,36(sp)
 5090a1c:	ddc00815 	stw	r23,32(sp)
 5090a20:	dd800715 	stw	r22,28(sp)
 5090a24:	dd400615 	stw	r21,24(sp)
 5090a28:	dd000515 	stw	r20,20(sp)
 5090a2c:	dc800315 	stw	r18,12(sp)
 5090a30:	dc400215 	stw	r17,8(sp)
 5090a34:	2027883a 	mov	r19,r4
 5090a38:	2821883a 	mov	r16,r5
 5090a3c:	3800411e 	bne	r7,zero,5090b44 <__udivdi3+0x13c>
 5090a40:	3023883a 	mov	r17,r6
 5090a44:	2025883a 	mov	r18,r4
 5090a48:	2980522e 	bgeu	r5,r6,5090b94 <__udivdi3+0x18c>
 5090a4c:	00bfffd4 	movui	r2,65535
 5090a50:	282d883a 	mov	r22,r5
 5090a54:	1180a836 	bltu	r2,r6,5090cf8 <__udivdi3+0x2f0>
 5090a58:	00803fc4 	movi	r2,255
 5090a5c:	1185803a 	cmpltu	r2,r2,r6
 5090a60:	100490fa 	slli	r2,r2,3
 5090a64:	3086d83a 	srl	r3,r6,r2
 5090a68:	01014274 	movhi	r4,1289
 5090a6c:	2110e404 	addi	r4,r4,17296
 5090a70:	20c7883a 	add	r3,r4,r3
 5090a74:	18c00003 	ldbu	r3,0(r3)
 5090a78:	1885883a 	add	r2,r3,r2
 5090a7c:	00c00804 	movi	r3,32
 5090a80:	1887c83a 	sub	r3,r3,r2
 5090a84:	18000526 	beq	r3,zero,5090a9c <__udivdi3+0x94>
 5090a88:	80e0983a 	sll	r16,r16,r3
 5090a8c:	9884d83a 	srl	r2,r19,r2
 5090a90:	30e2983a 	sll	r17,r6,r3
 5090a94:	98e4983a 	sll	r18,r19,r3
 5090a98:	142cb03a 	or	r22,r2,r16
 5090a9c:	882ad43a 	srli	r21,r17,16
 5090aa0:	b009883a 	mov	r4,r22
 5090aa4:	8d3fffcc 	andi	r20,r17,65535
 5090aa8:	a80b883a 	mov	r5,r21
 5090aac:	5084b640 	call	5084b64 <__umodsi3>
 5090ab0:	b009883a 	mov	r4,r22
 5090ab4:	a80b883a 	mov	r5,r21
 5090ab8:	1027883a 	mov	r19,r2
 5090abc:	5084b000 	call	5084b00 <__udivsi3>
 5090ac0:	102d883a 	mov	r22,r2
 5090ac4:	9826943a 	slli	r19,r19,16
 5090ac8:	9004d43a 	srli	r2,r18,16
 5090acc:	a5a1383a 	mul	r16,r20,r22
 5090ad0:	14c4b03a 	or	r2,r2,r19
 5090ad4:	1400052e 	bgeu	r2,r16,5090aec <__udivdi3+0xe4>
 5090ad8:	1445883a 	add	r2,r2,r17
 5090adc:	b0ffffc4 	addi	r3,r22,-1
 5090ae0:	14400136 	bltu	r2,r17,5090ae8 <__udivdi3+0xe0>
 5090ae4:	14012336 	bltu	r2,r16,5090f74 <__udivdi3+0x56c>
 5090ae8:	182d883a 	mov	r22,r3
 5090aec:	1421c83a 	sub	r16,r2,r16
 5090af0:	a80b883a 	mov	r5,r21
 5090af4:	8009883a 	mov	r4,r16
 5090af8:	5084b640 	call	5084b64 <__umodsi3>
 5090afc:	1027883a 	mov	r19,r2
 5090b00:	a80b883a 	mov	r5,r21
 5090b04:	8009883a 	mov	r4,r16
 5090b08:	5084b000 	call	5084b00 <__udivsi3>
 5090b0c:	9826943a 	slli	r19,r19,16
 5090b10:	a0a9383a 	mul	r20,r20,r2
 5090b14:	94bfffcc 	andi	r18,r18,65535
 5090b18:	94e4b03a 	or	r18,r18,r19
 5090b1c:	9500052e 	bgeu	r18,r20,5090b34 <__udivdi3+0x12c>
 5090b20:	8ca5883a 	add	r18,r17,r18
 5090b24:	10ffffc4 	addi	r3,r2,-1
 5090b28:	9440f136 	bltu	r18,r17,5090ef0 <__udivdi3+0x4e8>
 5090b2c:	9500f02e 	bgeu	r18,r20,5090ef0 <__udivdi3+0x4e8>
 5090b30:	10bfff84 	addi	r2,r2,-2
 5090b34:	b00c943a 	slli	r6,r22,16
 5090b38:	0007883a 	mov	r3,zero
 5090b3c:	3084b03a 	or	r2,r6,r2
 5090b40:	00005906 	br	5090ca8 <__udivdi3+0x2a0>
 5090b44:	29c05636 	bltu	r5,r7,5090ca0 <__udivdi3+0x298>
 5090b48:	00bfffd4 	movui	r2,65535
 5090b4c:	11c0622e 	bgeu	r2,r7,5090cd8 <__udivdi3+0x2d0>
 5090b50:	00804034 	movhi	r2,256
 5090b54:	10bfffc4 	addi	r2,r2,-1
 5090b58:	11c0ee36 	bltu	r2,r7,5090f14 <__udivdi3+0x50c>
 5090b5c:	00800404 	movi	r2,16
 5090b60:	3886d83a 	srl	r3,r7,r2
 5090b64:	01014274 	movhi	r4,1289
 5090b68:	2110e404 	addi	r4,r4,17296
 5090b6c:	20c7883a 	add	r3,r4,r3
 5090b70:	18c00003 	ldbu	r3,0(r3)
 5090b74:	05400804 	movi	r21,32
 5090b78:	1885883a 	add	r2,r3,r2
 5090b7c:	a8abc83a 	sub	r21,r21,r2
 5090b80:	a800621e 	bne	r21,zero,5090d0c <__udivdi3+0x304>
 5090b84:	3c00e936 	bltu	r7,r16,5090f2c <__udivdi3+0x524>
 5090b88:	9985403a 	cmpgeu	r2,r19,r6
 5090b8c:	0007883a 	mov	r3,zero
 5090b90:	00004506 	br	5090ca8 <__udivdi3+0x2a0>
 5090b94:	3000041e 	bne	r6,zero,5090ba8 <__udivdi3+0x1a0>
 5090b98:	000b883a 	mov	r5,zero
 5090b9c:	01000044 	movi	r4,1
 5090ba0:	5084b000 	call	5084b00 <__udivsi3>
 5090ba4:	1023883a 	mov	r17,r2
 5090ba8:	00bfffd4 	movui	r2,65535
 5090bac:	14404e2e 	bgeu	r2,r17,5090ce8 <__udivdi3+0x2e0>
 5090bb0:	00804034 	movhi	r2,256
 5090bb4:	10bfffc4 	addi	r2,r2,-1
 5090bb8:	1440d836 	bltu	r2,r17,5090f1c <__udivdi3+0x514>
 5090bbc:	00800404 	movi	r2,16
 5090bc0:	8886d83a 	srl	r3,r17,r2
 5090bc4:	01014274 	movhi	r4,1289
 5090bc8:	2110e404 	addi	r4,r4,17296
 5090bcc:	20c7883a 	add	r3,r4,r3
 5090bd0:	18c00003 	ldbu	r3,0(r3)
 5090bd4:	1885883a 	add	r2,r3,r2
 5090bd8:	00c00804 	movi	r3,32
 5090bdc:	1887c83a 	sub	r3,r3,r2
 5090be0:	18008f1e 	bne	r3,zero,5090e20 <__udivdi3+0x418>
 5090be4:	882ad43a 	srli	r21,r17,16
 5090be8:	8461c83a 	sub	r16,r16,r17
 5090bec:	8d3fffcc 	andi	r20,r17,65535
 5090bf0:	00c00044 	movi	r3,1
 5090bf4:	8009883a 	mov	r4,r16
 5090bf8:	a80b883a 	mov	r5,r21
 5090bfc:	d8c00015 	stw	r3,0(sp)
 5090c00:	5084b640 	call	5084b64 <__umodsi3>
 5090c04:	8009883a 	mov	r4,r16
 5090c08:	a80b883a 	mov	r5,r21
 5090c0c:	1027883a 	mov	r19,r2
 5090c10:	5084b000 	call	5084b00 <__udivsi3>
 5090c14:	9826943a 	slli	r19,r19,16
 5090c18:	9008d43a 	srli	r4,r18,16
 5090c1c:	1521383a 	mul	r16,r2,r20
 5090c20:	102d883a 	mov	r22,r2
 5090c24:	24c8b03a 	or	r4,r4,r19
 5090c28:	d8c00017 	ldw	r3,0(sp)
 5090c2c:	2400052e 	bgeu	r4,r16,5090c44 <__udivdi3+0x23c>
 5090c30:	2449883a 	add	r4,r4,r17
 5090c34:	b0bfffc4 	addi	r2,r22,-1
 5090c38:	24400136 	bltu	r4,r17,5090c40 <__udivdi3+0x238>
 5090c3c:	2400ca36 	bltu	r4,r16,5090f68 <__udivdi3+0x560>
 5090c40:	102d883a 	mov	r22,r2
 5090c44:	2421c83a 	sub	r16,r4,r16
 5090c48:	a80b883a 	mov	r5,r21
 5090c4c:	8009883a 	mov	r4,r16
 5090c50:	d8c00015 	stw	r3,0(sp)
 5090c54:	5084b640 	call	5084b64 <__umodsi3>
 5090c58:	1027883a 	mov	r19,r2
 5090c5c:	a80b883a 	mov	r5,r21
 5090c60:	8009883a 	mov	r4,r16
 5090c64:	5084b000 	call	5084b00 <__udivsi3>
 5090c68:	9826943a 	slli	r19,r19,16
 5090c6c:	1529383a 	mul	r20,r2,r20
 5090c70:	94bfffcc 	andi	r18,r18,65535
 5090c74:	94e4b03a 	or	r18,r18,r19
 5090c78:	d8c00017 	ldw	r3,0(sp)
 5090c7c:	9500052e 	bgeu	r18,r20,5090c94 <__udivdi3+0x28c>
 5090c80:	8ca5883a 	add	r18,r17,r18
 5090c84:	113fffc4 	addi	r4,r2,-1
 5090c88:	94409736 	bltu	r18,r17,5090ee8 <__udivdi3+0x4e0>
 5090c8c:	9500962e 	bgeu	r18,r20,5090ee8 <__udivdi3+0x4e0>
 5090c90:	10bfff84 	addi	r2,r2,-2
 5090c94:	b00c943a 	slli	r6,r22,16
 5090c98:	3084b03a 	or	r2,r6,r2
 5090c9c:	00000206 	br	5090ca8 <__udivdi3+0x2a0>
 5090ca0:	0007883a 	mov	r3,zero
 5090ca4:	0005883a 	mov	r2,zero
 5090ca8:	dfc00a17 	ldw	ra,40(sp)
 5090cac:	df000917 	ldw	fp,36(sp)
 5090cb0:	ddc00817 	ldw	r23,32(sp)
 5090cb4:	dd800717 	ldw	r22,28(sp)
 5090cb8:	dd400617 	ldw	r21,24(sp)
 5090cbc:	dd000517 	ldw	r20,20(sp)
 5090cc0:	dcc00417 	ldw	r19,16(sp)
 5090cc4:	dc800317 	ldw	r18,12(sp)
 5090cc8:	dc400217 	ldw	r17,8(sp)
 5090ccc:	dc000117 	ldw	r16,4(sp)
 5090cd0:	dec00b04 	addi	sp,sp,44
 5090cd4:	f800283a 	ret
 5090cd8:	00803fc4 	movi	r2,255
 5090cdc:	11c5803a 	cmpltu	r2,r2,r7
 5090ce0:	100490fa 	slli	r2,r2,3
 5090ce4:	003f9e06 	br	5090b60 <__alt_data_end+0xfffc2960>
 5090ce8:	00803fc4 	movi	r2,255
 5090cec:	1445803a 	cmpltu	r2,r2,r17
 5090cf0:	100490fa 	slli	r2,r2,3
 5090cf4:	003fb206 	br	5090bc0 <__alt_data_end+0xfffc29c0>
 5090cf8:	00804034 	movhi	r2,256
 5090cfc:	10bfffc4 	addi	r2,r2,-1
 5090d00:	11808836 	bltu	r2,r6,5090f24 <__udivdi3+0x51c>
 5090d04:	00800404 	movi	r2,16
 5090d08:	003f5606 	br	5090a64 <__alt_data_end+0xfffc2864>
 5090d0c:	30aed83a 	srl	r23,r6,r2
 5090d10:	3d4e983a 	sll	r7,r7,r21
 5090d14:	80acd83a 	srl	r22,r16,r2
 5090d18:	9884d83a 	srl	r2,r19,r2
 5090d1c:	3deeb03a 	or	r23,r7,r23
 5090d20:	b824d43a 	srli	r18,r23,16
 5090d24:	8560983a 	sll	r16,r16,r21
 5090d28:	b009883a 	mov	r4,r22
 5090d2c:	900b883a 	mov	r5,r18
 5090d30:	3568983a 	sll	r20,r6,r21
 5090d34:	1420b03a 	or	r16,r2,r16
 5090d38:	5084b640 	call	5084b64 <__umodsi3>
 5090d3c:	b009883a 	mov	r4,r22
 5090d40:	900b883a 	mov	r5,r18
 5090d44:	1023883a 	mov	r17,r2
 5090d48:	5084b000 	call	5084b00 <__udivsi3>
 5090d4c:	8808943a 	slli	r4,r17,16
 5090d50:	bf3fffcc 	andi	fp,r23,65535
 5090d54:	8006d43a 	srli	r3,r16,16
 5090d58:	e0a3383a 	mul	r17,fp,r2
 5090d5c:	100d883a 	mov	r6,r2
 5090d60:	1906b03a 	or	r3,r3,r4
 5090d64:	1c40042e 	bgeu	r3,r17,5090d78 <__udivdi3+0x370>
 5090d68:	1dc7883a 	add	r3,r3,r23
 5090d6c:	10bfffc4 	addi	r2,r2,-1
 5090d70:	1dc0752e 	bgeu	r3,r23,5090f48 <__udivdi3+0x540>
 5090d74:	100d883a 	mov	r6,r2
 5090d78:	1c63c83a 	sub	r17,r3,r17
 5090d7c:	900b883a 	mov	r5,r18
 5090d80:	8809883a 	mov	r4,r17
 5090d84:	d9800015 	stw	r6,0(sp)
 5090d88:	5084b640 	call	5084b64 <__umodsi3>
 5090d8c:	102d883a 	mov	r22,r2
 5090d90:	8809883a 	mov	r4,r17
 5090d94:	900b883a 	mov	r5,r18
 5090d98:	5084b000 	call	5084b00 <__udivsi3>
 5090d9c:	b02c943a 	slli	r22,r22,16
 5090da0:	e089383a 	mul	r4,fp,r2
 5090da4:	843fffcc 	andi	r16,r16,65535
 5090da8:	85a0b03a 	or	r16,r16,r22
 5090dac:	d9800017 	ldw	r6,0(sp)
 5090db0:	8100042e 	bgeu	r16,r4,5090dc4 <__udivdi3+0x3bc>
 5090db4:	85e1883a 	add	r16,r16,r23
 5090db8:	10ffffc4 	addi	r3,r2,-1
 5090dbc:	85c05e2e 	bgeu	r16,r23,5090f38 <__udivdi3+0x530>
 5090dc0:	1805883a 	mov	r2,r3
 5090dc4:	300c943a 	slli	r6,r6,16
 5090dc8:	a17fffcc 	andi	r5,r20,65535
 5090dcc:	a028d43a 	srli	r20,r20,16
 5090dd0:	3084b03a 	or	r2,r6,r2
 5090dd4:	10ffffcc 	andi	r3,r2,65535
 5090dd8:	100cd43a 	srli	r6,r2,16
 5090ddc:	194f383a 	mul	r7,r3,r5
 5090de0:	1d07383a 	mul	r3,r3,r20
 5090de4:	314b383a 	mul	r5,r6,r5
 5090de8:	3810d43a 	srli	r8,r7,16
 5090dec:	8121c83a 	sub	r16,r16,r4
 5090df0:	1947883a 	add	r3,r3,r5
 5090df4:	40c7883a 	add	r3,r8,r3
 5090df8:	350d383a 	mul	r6,r6,r20
 5090dfc:	1940022e 	bgeu	r3,r5,5090e08 <__udivdi3+0x400>
 5090e00:	01000074 	movhi	r4,1
 5090e04:	310d883a 	add	r6,r6,r4
 5090e08:	1828d43a 	srli	r20,r3,16
 5090e0c:	a18d883a 	add	r6,r20,r6
 5090e10:	81803e36 	bltu	r16,r6,5090f0c <__udivdi3+0x504>
 5090e14:	81803826 	beq	r16,r6,5090ef8 <__udivdi3+0x4f0>
 5090e18:	0007883a 	mov	r3,zero
 5090e1c:	003fa206 	br	5090ca8 <__alt_data_end+0xfffc2aa8>
 5090e20:	88e2983a 	sll	r17,r17,r3
 5090e24:	80a8d83a 	srl	r20,r16,r2
 5090e28:	80e0983a 	sll	r16,r16,r3
 5090e2c:	882ad43a 	srli	r21,r17,16
 5090e30:	9884d83a 	srl	r2,r19,r2
 5090e34:	a009883a 	mov	r4,r20
 5090e38:	a80b883a 	mov	r5,r21
 5090e3c:	142eb03a 	or	r23,r2,r16
 5090e40:	98e4983a 	sll	r18,r19,r3
 5090e44:	5084b640 	call	5084b64 <__umodsi3>
 5090e48:	a009883a 	mov	r4,r20
 5090e4c:	a80b883a 	mov	r5,r21
 5090e50:	1021883a 	mov	r16,r2
 5090e54:	5084b000 	call	5084b00 <__udivsi3>
 5090e58:	1039883a 	mov	fp,r2
 5090e5c:	8d3fffcc 	andi	r20,r17,65535
 5090e60:	8020943a 	slli	r16,r16,16
 5090e64:	b804d43a 	srli	r2,r23,16
 5090e68:	a72d383a 	mul	r22,r20,fp
 5090e6c:	1404b03a 	or	r2,r2,r16
 5090e70:	1580062e 	bgeu	r2,r22,5090e8c <__udivdi3+0x484>
 5090e74:	1445883a 	add	r2,r2,r17
 5090e78:	e0ffffc4 	addi	r3,fp,-1
 5090e7c:	14403836 	bltu	r2,r17,5090f60 <__udivdi3+0x558>
 5090e80:	1580372e 	bgeu	r2,r22,5090f60 <__udivdi3+0x558>
 5090e84:	e73fff84 	addi	fp,fp,-2
 5090e88:	1445883a 	add	r2,r2,r17
 5090e8c:	15adc83a 	sub	r22,r2,r22
 5090e90:	a80b883a 	mov	r5,r21
 5090e94:	b009883a 	mov	r4,r22
 5090e98:	5084b640 	call	5084b64 <__umodsi3>
 5090e9c:	1027883a 	mov	r19,r2
 5090ea0:	b009883a 	mov	r4,r22
 5090ea4:	a80b883a 	mov	r5,r21
 5090ea8:	5084b000 	call	5084b00 <__udivsi3>
 5090eac:	9826943a 	slli	r19,r19,16
 5090eb0:	a0a1383a 	mul	r16,r20,r2
 5090eb4:	b93fffcc 	andi	r4,r23,65535
 5090eb8:	24c8b03a 	or	r4,r4,r19
 5090ebc:	2400062e 	bgeu	r4,r16,5090ed8 <__udivdi3+0x4d0>
 5090ec0:	2449883a 	add	r4,r4,r17
 5090ec4:	10ffffc4 	addi	r3,r2,-1
 5090ec8:	24402336 	bltu	r4,r17,5090f58 <__udivdi3+0x550>
 5090ecc:	2400222e 	bgeu	r4,r16,5090f58 <__udivdi3+0x550>
 5090ed0:	10bfff84 	addi	r2,r2,-2
 5090ed4:	2449883a 	add	r4,r4,r17
 5090ed8:	e038943a 	slli	fp,fp,16
 5090edc:	2421c83a 	sub	r16,r4,r16
 5090ee0:	e086b03a 	or	r3,fp,r2
 5090ee4:	003f4306 	br	5090bf4 <__alt_data_end+0xfffc29f4>
 5090ee8:	2005883a 	mov	r2,r4
 5090eec:	003f6906 	br	5090c94 <__alt_data_end+0xfffc2a94>
 5090ef0:	1805883a 	mov	r2,r3
 5090ef4:	003f0f06 	br	5090b34 <__alt_data_end+0xfffc2934>
 5090ef8:	1806943a 	slli	r3,r3,16
 5090efc:	9d66983a 	sll	r19,r19,r21
 5090f00:	39ffffcc 	andi	r7,r7,65535
 5090f04:	19c7883a 	add	r3,r3,r7
 5090f08:	98ffc32e 	bgeu	r19,r3,5090e18 <__alt_data_end+0xfffc2c18>
 5090f0c:	10bfffc4 	addi	r2,r2,-1
 5090f10:	003fc106 	br	5090e18 <__alt_data_end+0xfffc2c18>
 5090f14:	00800604 	movi	r2,24
 5090f18:	003f1106 	br	5090b60 <__alt_data_end+0xfffc2960>
 5090f1c:	00800604 	movi	r2,24
 5090f20:	003f2706 	br	5090bc0 <__alt_data_end+0xfffc29c0>
 5090f24:	00800604 	movi	r2,24
 5090f28:	003ece06 	br	5090a64 <__alt_data_end+0xfffc2864>
 5090f2c:	0007883a 	mov	r3,zero
 5090f30:	00800044 	movi	r2,1
 5090f34:	003f5c06 	br	5090ca8 <__alt_data_end+0xfffc2aa8>
 5090f38:	813fa12e 	bgeu	r16,r4,5090dc0 <__alt_data_end+0xfffc2bc0>
 5090f3c:	10bfff84 	addi	r2,r2,-2
 5090f40:	85e1883a 	add	r16,r16,r23
 5090f44:	003f9f06 	br	5090dc4 <__alt_data_end+0xfffc2bc4>
 5090f48:	1c7f8a2e 	bgeu	r3,r17,5090d74 <__alt_data_end+0xfffc2b74>
 5090f4c:	31bfff84 	addi	r6,r6,-2
 5090f50:	1dc7883a 	add	r3,r3,r23
 5090f54:	003f8806 	br	5090d78 <__alt_data_end+0xfffc2b78>
 5090f58:	1805883a 	mov	r2,r3
 5090f5c:	003fde06 	br	5090ed8 <__alt_data_end+0xfffc2cd8>
 5090f60:	1839883a 	mov	fp,r3
 5090f64:	003fc906 	br	5090e8c <__alt_data_end+0xfffc2c8c>
 5090f68:	b5bfff84 	addi	r22,r22,-2
 5090f6c:	2449883a 	add	r4,r4,r17
 5090f70:	003f3406 	br	5090c44 <__alt_data_end+0xfffc2a44>
 5090f74:	b5bfff84 	addi	r22,r22,-2
 5090f78:	1445883a 	add	r2,r2,r17
 5090f7c:	003edb06 	br	5090aec <__alt_data_end+0xfffc28ec>

05090f80 <__umoddi3>:
 5090f80:	defff404 	addi	sp,sp,-48
 5090f84:	df000a15 	stw	fp,40(sp)
 5090f88:	dc400315 	stw	r17,12(sp)
 5090f8c:	dc000215 	stw	r16,8(sp)
 5090f90:	dfc00b15 	stw	ra,44(sp)
 5090f94:	ddc00915 	stw	r23,36(sp)
 5090f98:	dd800815 	stw	r22,32(sp)
 5090f9c:	dd400715 	stw	r21,28(sp)
 5090fa0:	dd000615 	stw	r20,24(sp)
 5090fa4:	dcc00515 	stw	r19,20(sp)
 5090fa8:	dc800415 	stw	r18,16(sp)
 5090fac:	2021883a 	mov	r16,r4
 5090fb0:	2823883a 	mov	r17,r5
 5090fb4:	2839883a 	mov	fp,r5
 5090fb8:	38003c1e 	bne	r7,zero,50910ac <__umoddi3+0x12c>
 5090fbc:	3027883a 	mov	r19,r6
 5090fc0:	2029883a 	mov	r20,r4
 5090fc4:	2980512e 	bgeu	r5,r6,509110c <__umoddi3+0x18c>
 5090fc8:	00bfffd4 	movui	r2,65535
 5090fcc:	11809a36 	bltu	r2,r6,5091238 <__umoddi3+0x2b8>
 5090fd0:	01003fc4 	movi	r4,255
 5090fd4:	2189803a 	cmpltu	r4,r4,r6
 5090fd8:	200890fa 	slli	r4,r4,3
 5090fdc:	3104d83a 	srl	r2,r6,r4
 5090fe0:	00c14274 	movhi	r3,1289
 5090fe4:	18d0e404 	addi	r3,r3,17296
 5090fe8:	1885883a 	add	r2,r3,r2
 5090fec:	10c00003 	ldbu	r3,0(r2)
 5090ff0:	00800804 	movi	r2,32
 5090ff4:	1909883a 	add	r4,r3,r4
 5090ff8:	1125c83a 	sub	r18,r2,r4
 5090ffc:	90000526 	beq	r18,zero,5091014 <__umoddi3+0x94>
 5091000:	8ca2983a 	sll	r17,r17,r18
 5091004:	8108d83a 	srl	r4,r16,r4
 5091008:	34a6983a 	sll	r19,r6,r18
 509100c:	84a8983a 	sll	r20,r16,r18
 5091010:	2478b03a 	or	fp,r4,r17
 5091014:	982ed43a 	srli	r23,r19,16
 5091018:	e009883a 	mov	r4,fp
 509101c:	9dbfffcc 	andi	r22,r19,65535
 5091020:	b80b883a 	mov	r5,r23
 5091024:	5084b640 	call	5084b64 <__umodsi3>
 5091028:	e009883a 	mov	r4,fp
 509102c:	b80b883a 	mov	r5,r23
 5091030:	102b883a 	mov	r21,r2
 5091034:	5084b000 	call	5084b00 <__udivsi3>
 5091038:	a806943a 	slli	r3,r21,16
 509103c:	a008d43a 	srli	r4,r20,16
 5091040:	b085383a 	mul	r2,r22,r2
 5091044:	20c8b03a 	or	r4,r4,r3
 5091048:	2080032e 	bgeu	r4,r2,5091058 <__umoddi3+0xd8>
 509104c:	24c9883a 	add	r4,r4,r19
 5091050:	24c00136 	bltu	r4,r19,5091058 <__umoddi3+0xd8>
 5091054:	20811036 	bltu	r4,r2,5091498 <__umoddi3+0x518>
 5091058:	20abc83a 	sub	r21,r4,r2
 509105c:	b80b883a 	mov	r5,r23
 5091060:	a809883a 	mov	r4,r21
 5091064:	5084b640 	call	5084b64 <__umodsi3>
 5091068:	1023883a 	mov	r17,r2
 509106c:	b80b883a 	mov	r5,r23
 5091070:	a809883a 	mov	r4,r21
 5091074:	5084b000 	call	5084b00 <__udivsi3>
 5091078:	8822943a 	slli	r17,r17,16
 509107c:	b085383a 	mul	r2,r22,r2
 5091080:	a0ffffcc 	andi	r3,r20,65535
 5091084:	1c46b03a 	or	r3,r3,r17
 5091088:	1880042e 	bgeu	r3,r2,509109c <__umoddi3+0x11c>
 509108c:	1cc7883a 	add	r3,r3,r19
 5091090:	1cc00236 	bltu	r3,r19,509109c <__umoddi3+0x11c>
 5091094:	1880012e 	bgeu	r3,r2,509109c <__umoddi3+0x11c>
 5091098:	1cc7883a 	add	r3,r3,r19
 509109c:	1885c83a 	sub	r2,r3,r2
 50910a0:	1484d83a 	srl	r2,r2,r18
 50910a4:	0007883a 	mov	r3,zero
 50910a8:	00004f06 	br	50911e8 <__umoddi3+0x268>
 50910ac:	29c04c36 	bltu	r5,r7,50911e0 <__umoddi3+0x260>
 50910b0:	00bfffd4 	movui	r2,65535
 50910b4:	11c0582e 	bgeu	r2,r7,5091218 <__umoddi3+0x298>
 50910b8:	00804034 	movhi	r2,256
 50910bc:	10bfffc4 	addi	r2,r2,-1
 50910c0:	11c0e736 	bltu	r2,r7,5091460 <__umoddi3+0x4e0>
 50910c4:	01000404 	movi	r4,16
 50910c8:	3904d83a 	srl	r2,r7,r4
 50910cc:	00c14274 	movhi	r3,1289
 50910d0:	18d0e404 	addi	r3,r3,17296
 50910d4:	1885883a 	add	r2,r3,r2
 50910d8:	14c00003 	ldbu	r19,0(r2)
 50910dc:	00c00804 	movi	r3,32
 50910e0:	9927883a 	add	r19,r19,r4
 50910e4:	1ce9c83a 	sub	r20,r3,r19
 50910e8:	a000581e 	bne	r20,zero,509124c <__umoddi3+0x2cc>
 50910ec:	3c400136 	bltu	r7,r17,50910f4 <__umoddi3+0x174>
 50910f0:	8180eb36 	bltu	r16,r6,50914a0 <__umoddi3+0x520>
 50910f4:	8185c83a 	sub	r2,r16,r6
 50910f8:	89e3c83a 	sub	r17,r17,r7
 50910fc:	8089803a 	cmpltu	r4,r16,r2
 5091100:	8939c83a 	sub	fp,r17,r4
 5091104:	e007883a 	mov	r3,fp
 5091108:	00003706 	br	50911e8 <__umoddi3+0x268>
 509110c:	3000041e 	bne	r6,zero,5091120 <__umoddi3+0x1a0>
 5091110:	000b883a 	mov	r5,zero
 5091114:	01000044 	movi	r4,1
 5091118:	5084b000 	call	5084b00 <__udivsi3>
 509111c:	1027883a 	mov	r19,r2
 5091120:	00bfffd4 	movui	r2,65535
 5091124:	14c0402e 	bgeu	r2,r19,5091228 <__umoddi3+0x2a8>
 5091128:	00804034 	movhi	r2,256
 509112c:	10bfffc4 	addi	r2,r2,-1
 5091130:	14c0cd36 	bltu	r2,r19,5091468 <__umoddi3+0x4e8>
 5091134:	00800404 	movi	r2,16
 5091138:	9886d83a 	srl	r3,r19,r2
 509113c:	01014274 	movhi	r4,1289
 5091140:	2110e404 	addi	r4,r4,17296
 5091144:	20c7883a 	add	r3,r4,r3
 5091148:	18c00003 	ldbu	r3,0(r3)
 509114c:	1887883a 	add	r3,r3,r2
 5091150:	00800804 	movi	r2,32
 5091154:	10e5c83a 	sub	r18,r2,r3
 5091158:	9000901e 	bne	r18,zero,509139c <__umoddi3+0x41c>
 509115c:	982cd43a 	srli	r22,r19,16
 5091160:	8ce3c83a 	sub	r17,r17,r19
 5091164:	9d7fffcc 	andi	r21,r19,65535
 5091168:	b00b883a 	mov	r5,r22
 509116c:	8809883a 	mov	r4,r17
 5091170:	5084b640 	call	5084b64 <__umodsi3>
 5091174:	8809883a 	mov	r4,r17
 5091178:	b00b883a 	mov	r5,r22
 509117c:	1021883a 	mov	r16,r2
 5091180:	5084b000 	call	5084b00 <__udivsi3>
 5091184:	8006943a 	slli	r3,r16,16
 5091188:	a008d43a 	srli	r4,r20,16
 509118c:	1545383a 	mul	r2,r2,r21
 5091190:	20c8b03a 	or	r4,r4,r3
 5091194:	2080042e 	bgeu	r4,r2,50911a8 <__umoddi3+0x228>
 5091198:	24c9883a 	add	r4,r4,r19
 509119c:	24c00236 	bltu	r4,r19,50911a8 <__umoddi3+0x228>
 50911a0:	2080012e 	bgeu	r4,r2,50911a8 <__umoddi3+0x228>
 50911a4:	24c9883a 	add	r4,r4,r19
 50911a8:	20a1c83a 	sub	r16,r4,r2
 50911ac:	b00b883a 	mov	r5,r22
 50911b0:	8009883a 	mov	r4,r16
 50911b4:	5084b640 	call	5084b64 <__umodsi3>
 50911b8:	1023883a 	mov	r17,r2
 50911bc:	b00b883a 	mov	r5,r22
 50911c0:	8009883a 	mov	r4,r16
 50911c4:	5084b000 	call	5084b00 <__udivsi3>
 50911c8:	8822943a 	slli	r17,r17,16
 50911cc:	1545383a 	mul	r2,r2,r21
 50911d0:	a53fffcc 	andi	r20,r20,65535
 50911d4:	a446b03a 	or	r3,r20,r17
 50911d8:	18bfb02e 	bgeu	r3,r2,509109c <__alt_data_end+0xfffc2e9c>
 50911dc:	003fab06 	br	509108c <__alt_data_end+0xfffc2e8c>
 50911e0:	2005883a 	mov	r2,r4
 50911e4:	2807883a 	mov	r3,r5
 50911e8:	dfc00b17 	ldw	ra,44(sp)
 50911ec:	df000a17 	ldw	fp,40(sp)
 50911f0:	ddc00917 	ldw	r23,36(sp)
 50911f4:	dd800817 	ldw	r22,32(sp)
 50911f8:	dd400717 	ldw	r21,28(sp)
 50911fc:	dd000617 	ldw	r20,24(sp)
 5091200:	dcc00517 	ldw	r19,20(sp)
 5091204:	dc800417 	ldw	r18,16(sp)
 5091208:	dc400317 	ldw	r17,12(sp)
 509120c:	dc000217 	ldw	r16,8(sp)
 5091210:	dec00c04 	addi	sp,sp,48
 5091214:	f800283a 	ret
 5091218:	04c03fc4 	movi	r19,255
 509121c:	99c9803a 	cmpltu	r4,r19,r7
 5091220:	200890fa 	slli	r4,r4,3
 5091224:	003fa806 	br	50910c8 <__alt_data_end+0xfffc2ec8>
 5091228:	00803fc4 	movi	r2,255
 509122c:	14c5803a 	cmpltu	r2,r2,r19
 5091230:	100490fa 	slli	r2,r2,3
 5091234:	003fc006 	br	5091138 <__alt_data_end+0xfffc2f38>
 5091238:	00804034 	movhi	r2,256
 509123c:	10bfffc4 	addi	r2,r2,-1
 5091240:	11808b36 	bltu	r2,r6,5091470 <__umoddi3+0x4f0>
 5091244:	01000404 	movi	r4,16
 5091248:	003f6406 	br	5090fdc <__alt_data_end+0xfffc2ddc>
 509124c:	34c4d83a 	srl	r2,r6,r19
 5091250:	3d0e983a 	sll	r7,r7,r20
 5091254:	8cf8d83a 	srl	fp,r17,r19
 5091258:	8d10983a 	sll	r8,r17,r20
 509125c:	38aab03a 	or	r21,r7,r2
 5091260:	a82cd43a 	srli	r22,r21,16
 5091264:	84e2d83a 	srl	r17,r16,r19
 5091268:	e009883a 	mov	r4,fp
 509126c:	b00b883a 	mov	r5,r22
 5091270:	8a22b03a 	or	r17,r17,r8
 5091274:	3524983a 	sll	r18,r6,r20
 5091278:	5084b640 	call	5084b64 <__umodsi3>
 509127c:	e009883a 	mov	r4,fp
 5091280:	b00b883a 	mov	r5,r22
 5091284:	102f883a 	mov	r23,r2
 5091288:	5084b000 	call	5084b00 <__udivsi3>
 509128c:	100d883a 	mov	r6,r2
 5091290:	b808943a 	slli	r4,r23,16
 5091294:	aa3fffcc 	andi	r8,r21,65535
 5091298:	8804d43a 	srli	r2,r17,16
 509129c:	41af383a 	mul	r23,r8,r6
 50912a0:	8520983a 	sll	r16,r16,r20
 50912a4:	1104b03a 	or	r2,r2,r4
 50912a8:	15c0042e 	bgeu	r2,r23,50912bc <__umoddi3+0x33c>
 50912ac:	1545883a 	add	r2,r2,r21
 50912b0:	30ffffc4 	addi	r3,r6,-1
 50912b4:	1540742e 	bgeu	r2,r21,5091488 <__umoddi3+0x508>
 50912b8:	180d883a 	mov	r6,r3
 50912bc:	15efc83a 	sub	r23,r2,r23
 50912c0:	b00b883a 	mov	r5,r22
 50912c4:	b809883a 	mov	r4,r23
 50912c8:	d9800115 	stw	r6,4(sp)
 50912cc:	da000015 	stw	r8,0(sp)
 50912d0:	5084b640 	call	5084b64 <__umodsi3>
 50912d4:	b00b883a 	mov	r5,r22
 50912d8:	b809883a 	mov	r4,r23
 50912dc:	1039883a 	mov	fp,r2
 50912e0:	5084b000 	call	5084b00 <__udivsi3>
 50912e4:	da000017 	ldw	r8,0(sp)
 50912e8:	e038943a 	slli	fp,fp,16
 50912ec:	100b883a 	mov	r5,r2
 50912f0:	4089383a 	mul	r4,r8,r2
 50912f4:	8a3fffcc 	andi	r8,r17,65535
 50912f8:	4710b03a 	or	r8,r8,fp
 50912fc:	d9800117 	ldw	r6,4(sp)
 5091300:	4100042e 	bgeu	r8,r4,5091314 <__umoddi3+0x394>
 5091304:	4551883a 	add	r8,r8,r21
 5091308:	10bfffc4 	addi	r2,r2,-1
 509130c:	45405a2e 	bgeu	r8,r21,5091478 <__umoddi3+0x4f8>
 5091310:	100b883a 	mov	r5,r2
 5091314:	300c943a 	slli	r6,r6,16
 5091318:	91ffffcc 	andi	r7,r18,65535
 509131c:	9004d43a 	srli	r2,r18,16
 5091320:	314cb03a 	or	r6,r6,r5
 5091324:	317fffcc 	andi	r5,r6,65535
 5091328:	300cd43a 	srli	r6,r6,16
 509132c:	29d3383a 	mul	r9,r5,r7
 5091330:	288b383a 	mul	r5,r5,r2
 5091334:	31cf383a 	mul	r7,r6,r7
 5091338:	4806d43a 	srli	r3,r9,16
 509133c:	4111c83a 	sub	r8,r8,r4
 5091340:	29cb883a 	add	r5,r5,r7
 5091344:	194b883a 	add	r5,r3,r5
 5091348:	3085383a 	mul	r2,r6,r2
 509134c:	29c0022e 	bgeu	r5,r7,5091358 <__umoddi3+0x3d8>
 5091350:	00c00074 	movhi	r3,1
 5091354:	10c5883a 	add	r2,r2,r3
 5091358:	2808d43a 	srli	r4,r5,16
 509135c:	280a943a 	slli	r5,r5,16
 5091360:	4a7fffcc 	andi	r9,r9,65535
 5091364:	2085883a 	add	r2,r4,r2
 5091368:	2a4b883a 	add	r5,r5,r9
 509136c:	40803636 	bltu	r8,r2,5091448 <__umoddi3+0x4c8>
 5091370:	40804d26 	beq	r8,r2,50914a8 <__umoddi3+0x528>
 5091374:	4089c83a 	sub	r4,r8,r2
 5091378:	280f883a 	mov	r7,r5
 509137c:	81cfc83a 	sub	r7,r16,r7
 5091380:	81c7803a 	cmpltu	r3,r16,r7
 5091384:	20c7c83a 	sub	r3,r4,r3
 5091388:	1cc4983a 	sll	r2,r3,r19
 509138c:	3d0ed83a 	srl	r7,r7,r20
 5091390:	1d06d83a 	srl	r3,r3,r20
 5091394:	11c4b03a 	or	r2,r2,r7
 5091398:	003f9306 	br	50911e8 <__alt_data_end+0xfffc2fe8>
 509139c:	9ca6983a 	sll	r19,r19,r18
 50913a0:	88e8d83a 	srl	r20,r17,r3
 50913a4:	80c4d83a 	srl	r2,r16,r3
 50913a8:	982cd43a 	srli	r22,r19,16
 50913ac:	8ca2983a 	sll	r17,r17,r18
 50913b0:	a009883a 	mov	r4,r20
 50913b4:	b00b883a 	mov	r5,r22
 50913b8:	1478b03a 	or	fp,r2,r17
 50913bc:	5084b640 	call	5084b64 <__umodsi3>
 50913c0:	a009883a 	mov	r4,r20
 50913c4:	b00b883a 	mov	r5,r22
 50913c8:	1023883a 	mov	r17,r2
 50913cc:	5084b000 	call	5084b00 <__udivsi3>
 50913d0:	9d7fffcc 	andi	r21,r19,65535
 50913d4:	880a943a 	slli	r5,r17,16
 50913d8:	e008d43a 	srli	r4,fp,16
 50913dc:	a885383a 	mul	r2,r21,r2
 50913e0:	84a8983a 	sll	r20,r16,r18
 50913e4:	2148b03a 	or	r4,r4,r5
 50913e8:	2080042e 	bgeu	r4,r2,50913fc <__umoddi3+0x47c>
 50913ec:	24c9883a 	add	r4,r4,r19
 50913f0:	24c00236 	bltu	r4,r19,50913fc <__umoddi3+0x47c>
 50913f4:	2080012e 	bgeu	r4,r2,50913fc <__umoddi3+0x47c>
 50913f8:	24c9883a 	add	r4,r4,r19
 50913fc:	20a3c83a 	sub	r17,r4,r2
 5091400:	b00b883a 	mov	r5,r22
 5091404:	8809883a 	mov	r4,r17
 5091408:	5084b640 	call	5084b64 <__umodsi3>
 509140c:	102f883a 	mov	r23,r2
 5091410:	8809883a 	mov	r4,r17
 5091414:	b00b883a 	mov	r5,r22
 5091418:	5084b000 	call	5084b00 <__udivsi3>
 509141c:	b82e943a 	slli	r23,r23,16
 5091420:	a885383a 	mul	r2,r21,r2
 5091424:	e13fffcc 	andi	r4,fp,65535
 5091428:	25c8b03a 	or	r4,r4,r23
 509142c:	2080042e 	bgeu	r4,r2,5091440 <__umoddi3+0x4c0>
 5091430:	24c9883a 	add	r4,r4,r19
 5091434:	24c00236 	bltu	r4,r19,5091440 <__umoddi3+0x4c0>
 5091438:	2080012e 	bgeu	r4,r2,5091440 <__umoddi3+0x4c0>
 509143c:	24c9883a 	add	r4,r4,r19
 5091440:	20a3c83a 	sub	r17,r4,r2
 5091444:	003f4806 	br	5091168 <__alt_data_end+0xfffc2f68>
 5091448:	2c8fc83a 	sub	r7,r5,r18
 509144c:	1545c83a 	sub	r2,r2,r21
 5091450:	29cb803a 	cmpltu	r5,r5,r7
 5091454:	1145c83a 	sub	r2,r2,r5
 5091458:	4089c83a 	sub	r4,r8,r2
 509145c:	003fc706 	br	509137c <__alt_data_end+0xfffc317c>
 5091460:	01000604 	movi	r4,24
 5091464:	003f1806 	br	50910c8 <__alt_data_end+0xfffc2ec8>
 5091468:	00800604 	movi	r2,24
 509146c:	003f3206 	br	5091138 <__alt_data_end+0xfffc2f38>
 5091470:	01000604 	movi	r4,24
 5091474:	003ed906 	br	5090fdc <__alt_data_end+0xfffc2ddc>
 5091478:	413fa52e 	bgeu	r8,r4,5091310 <__alt_data_end+0xfffc3110>
 509147c:	297fff84 	addi	r5,r5,-2
 5091480:	4551883a 	add	r8,r8,r21
 5091484:	003fa306 	br	5091314 <__alt_data_end+0xfffc3114>
 5091488:	15ff8b2e 	bgeu	r2,r23,50912b8 <__alt_data_end+0xfffc30b8>
 509148c:	31bfff84 	addi	r6,r6,-2
 5091490:	1545883a 	add	r2,r2,r21
 5091494:	003f8906 	br	50912bc <__alt_data_end+0xfffc30bc>
 5091498:	24c9883a 	add	r4,r4,r19
 509149c:	003eee06 	br	5091058 <__alt_data_end+0xfffc2e58>
 50914a0:	8005883a 	mov	r2,r16
 50914a4:	003f1706 	br	5091104 <__alt_data_end+0xfffc2f04>
 50914a8:	817fe736 	bltu	r16,r5,5091448 <__alt_data_end+0xfffc3248>
 50914ac:	280f883a 	mov	r7,r5
 50914b0:	0009883a 	mov	r4,zero
 50914b4:	003fb106 	br	509137c <__alt_data_end+0xfffc317c>

050914b8 <__floatunsidf>:
 50914b8:	defffe04 	addi	sp,sp,-8
 50914bc:	dc000015 	stw	r16,0(sp)
 50914c0:	dfc00115 	stw	ra,4(sp)
 50914c4:	2021883a 	mov	r16,r4
 50914c8:	20002226 	beq	r4,zero,5091554 <__floatunsidf+0x9c>
 50914cc:	50871180 	call	5087118 <__clzsi2>
 50914d0:	01010784 	movi	r4,1054
 50914d4:	2089c83a 	sub	r4,r4,r2
 50914d8:	01810cc4 	movi	r6,1075
 50914dc:	310dc83a 	sub	r6,r6,r4
 50914e0:	00c007c4 	movi	r3,31
 50914e4:	1980120e 	bge	r3,r6,5091530 <__floatunsidf+0x78>
 50914e8:	00c104c4 	movi	r3,1043
 50914ec:	1907c83a 	sub	r3,r3,r4
 50914f0:	80ca983a 	sll	r5,r16,r3
 50914f4:	00800434 	movhi	r2,16
 50914f8:	10bfffc4 	addi	r2,r2,-1
 50914fc:	2101ffcc 	andi	r4,r4,2047
 5091500:	0021883a 	mov	r16,zero
 5091504:	288a703a 	and	r5,r5,r2
 5091508:	2008953a 	slli	r4,r4,20
 509150c:	00c00434 	movhi	r3,16
 5091510:	18ffffc4 	addi	r3,r3,-1
 5091514:	28c6703a 	and	r3,r5,r3
 5091518:	8005883a 	mov	r2,r16
 509151c:	1906b03a 	or	r3,r3,r4
 5091520:	dfc00117 	ldw	ra,4(sp)
 5091524:	dc000017 	ldw	r16,0(sp)
 5091528:	dec00204 	addi	sp,sp,8
 509152c:	f800283a 	ret
 5091530:	00c002c4 	movi	r3,11
 5091534:	188bc83a 	sub	r5,r3,r2
 5091538:	814ad83a 	srl	r5,r16,r5
 509153c:	00c00434 	movhi	r3,16
 5091540:	18ffffc4 	addi	r3,r3,-1
 5091544:	81a0983a 	sll	r16,r16,r6
 5091548:	2101ffcc 	andi	r4,r4,2047
 509154c:	28ca703a 	and	r5,r5,r3
 5091550:	003fed06 	br	5091508 <__alt_data_end+0xfffc3308>
 5091554:	0009883a 	mov	r4,zero
 5091558:	000b883a 	mov	r5,zero
 509155c:	003fea06 	br	5091508 <__alt_data_end+0xfffc3308>

05091560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5091560:	defffe04 	addi	sp,sp,-8
 5091564:	dfc00115 	stw	ra,4(sp)
 5091568:	df000015 	stw	fp,0(sp)
 509156c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5091570:	00814274 	movhi	r2,1289
 5091574:	10986c04 	addi	r2,r2,25008
 5091578:	10800017 	ldw	r2,0(r2)
 509157c:	10000526 	beq	r2,zero,5091594 <alt_get_errno+0x34>
 5091580:	00814274 	movhi	r2,1289
 5091584:	10986c04 	addi	r2,r2,25008
 5091588:	10800017 	ldw	r2,0(r2)
 509158c:	103ee83a 	callr	r2
 5091590:	00000206 	br	509159c <alt_get_errno+0x3c>
 5091594:	00814274 	movhi	r2,1289
 5091598:	109f5e04 	addi	r2,r2,32120
}
 509159c:	e037883a 	mov	sp,fp
 50915a0:	dfc00117 	ldw	ra,4(sp)
 50915a4:	df000017 	ldw	fp,0(sp)
 50915a8:	dec00204 	addi	sp,sp,8
 50915ac:	f800283a 	ret

050915b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 50915b0:	defffb04 	addi	sp,sp,-20
 50915b4:	dfc00415 	stw	ra,16(sp)
 50915b8:	df000315 	stw	fp,12(sp)
 50915bc:	df000304 	addi	fp,sp,12
 50915c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 50915c4:	e0bfff17 	ldw	r2,-4(fp)
 50915c8:	10000616 	blt	r2,zero,50915e4 <close+0x34>
 50915cc:	e0bfff17 	ldw	r2,-4(fp)
 50915d0:	10c00324 	muli	r3,r2,12
 50915d4:	00814274 	movhi	r2,1289
 50915d8:	1093d804 	addi	r2,r2,20320
 50915dc:	1885883a 	add	r2,r3,r2
 50915e0:	00000106 	br	50915e8 <close+0x38>
 50915e4:	0005883a 	mov	r2,zero
 50915e8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 50915ec:	e0bffd17 	ldw	r2,-12(fp)
 50915f0:	10001926 	beq	r2,zero,5091658 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 50915f4:	e0bffd17 	ldw	r2,-12(fp)
 50915f8:	10800017 	ldw	r2,0(r2)
 50915fc:	10800417 	ldw	r2,16(r2)
 5091600:	10000626 	beq	r2,zero,509161c <close+0x6c>
 5091604:	e0bffd17 	ldw	r2,-12(fp)
 5091608:	10800017 	ldw	r2,0(r2)
 509160c:	10800417 	ldw	r2,16(r2)
 5091610:	e13ffd17 	ldw	r4,-12(fp)
 5091614:	103ee83a 	callr	r2
 5091618:	00000106 	br	5091620 <close+0x70>
 509161c:	0005883a 	mov	r2,zero
 5091620:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 5091624:	e13fff17 	ldw	r4,-4(fp)
 5091628:	5091e700 	call	5091e70 <alt_release_fd>
    if (rval < 0)
 509162c:	e0bffe17 	ldw	r2,-8(fp)
 5091630:	1000070e 	bge	r2,zero,5091650 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 5091634:	50915600 	call	5091560 <alt_get_errno>
 5091638:	1007883a 	mov	r3,r2
 509163c:	e0bffe17 	ldw	r2,-8(fp)
 5091640:	0085c83a 	sub	r2,zero,r2
 5091644:	18800015 	stw	r2,0(r3)
      return -1;
 5091648:	00bfffc4 	movi	r2,-1
 509164c:	00000706 	br	509166c <close+0xbc>
    }
    return 0;
 5091650:	0005883a 	mov	r2,zero
 5091654:	00000506 	br	509166c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5091658:	50915600 	call	5091560 <alt_get_errno>
 509165c:	1007883a 	mov	r3,r2
 5091660:	00801444 	movi	r2,81
 5091664:	18800015 	stw	r2,0(r3)
    return -1;
 5091668:	00bfffc4 	movi	r2,-1
  }
}
 509166c:	e037883a 	mov	sp,fp
 5091670:	dfc00117 	ldw	ra,4(sp)
 5091674:	df000017 	ldw	fp,0(sp)
 5091678:	dec00204 	addi	sp,sp,8
 509167c:	f800283a 	ret

05091680 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5091680:	defffc04 	addi	sp,sp,-16
 5091684:	df000315 	stw	fp,12(sp)
 5091688:	df000304 	addi	fp,sp,12
 509168c:	e13ffd15 	stw	r4,-12(fp)
 5091690:	e17ffe15 	stw	r5,-8(fp)
 5091694:	e1bfff15 	stw	r6,-4(fp)
  return len;
 5091698:	e0bfff17 	ldw	r2,-4(fp)
}
 509169c:	e037883a 	mov	sp,fp
 50916a0:	df000017 	ldw	fp,0(sp)
 50916a4:	dec00104 	addi	sp,sp,4
 50916a8:	f800283a 	ret

050916ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50916ac:	defffe04 	addi	sp,sp,-8
 50916b0:	dfc00115 	stw	ra,4(sp)
 50916b4:	df000015 	stw	fp,0(sp)
 50916b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50916bc:	00814274 	movhi	r2,1289
 50916c0:	10986c04 	addi	r2,r2,25008
 50916c4:	10800017 	ldw	r2,0(r2)
 50916c8:	10000526 	beq	r2,zero,50916e0 <alt_get_errno+0x34>
 50916cc:	00814274 	movhi	r2,1289
 50916d0:	10986c04 	addi	r2,r2,25008
 50916d4:	10800017 	ldw	r2,0(r2)
 50916d8:	103ee83a 	callr	r2
 50916dc:	00000206 	br	50916e8 <alt_get_errno+0x3c>
 50916e0:	00814274 	movhi	r2,1289
 50916e4:	109f5e04 	addi	r2,r2,32120
}
 50916e8:	e037883a 	mov	sp,fp
 50916ec:	dfc00117 	ldw	ra,4(sp)
 50916f0:	df000017 	ldw	fp,0(sp)
 50916f4:	dec00204 	addi	sp,sp,8
 50916f8:	f800283a 	ret

050916fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 50916fc:	defffb04 	addi	sp,sp,-20
 5091700:	dfc00415 	stw	ra,16(sp)
 5091704:	df000315 	stw	fp,12(sp)
 5091708:	df000304 	addi	fp,sp,12
 509170c:	e13ffe15 	stw	r4,-8(fp)
 5091710:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5091714:	e0bffe17 	ldw	r2,-8(fp)
 5091718:	10000616 	blt	r2,zero,5091734 <fstat+0x38>
 509171c:	e0bffe17 	ldw	r2,-8(fp)
 5091720:	10c00324 	muli	r3,r2,12
 5091724:	00814274 	movhi	r2,1289
 5091728:	1093d804 	addi	r2,r2,20320
 509172c:	1885883a 	add	r2,r3,r2
 5091730:	00000106 	br	5091738 <fstat+0x3c>
 5091734:	0005883a 	mov	r2,zero
 5091738:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 509173c:	e0bffd17 	ldw	r2,-12(fp)
 5091740:	10001026 	beq	r2,zero,5091784 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 5091744:	e0bffd17 	ldw	r2,-12(fp)
 5091748:	10800017 	ldw	r2,0(r2)
 509174c:	10800817 	ldw	r2,32(r2)
 5091750:	10000726 	beq	r2,zero,5091770 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 5091754:	e0bffd17 	ldw	r2,-12(fp)
 5091758:	10800017 	ldw	r2,0(r2)
 509175c:	10800817 	ldw	r2,32(r2)
 5091760:	e17fff17 	ldw	r5,-4(fp)
 5091764:	e13ffd17 	ldw	r4,-12(fp)
 5091768:	103ee83a 	callr	r2
 509176c:	00000a06 	br	5091798 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 5091770:	e0bfff17 	ldw	r2,-4(fp)
 5091774:	00c80004 	movi	r3,8192
 5091778:	10c00115 	stw	r3,4(r2)
      return 0;
 509177c:	0005883a 	mov	r2,zero
 5091780:	00000506 	br	5091798 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5091784:	50916ac0 	call	50916ac <alt_get_errno>
 5091788:	1007883a 	mov	r3,r2
 509178c:	00801444 	movi	r2,81
 5091790:	18800015 	stw	r2,0(r3)
    return -1;
 5091794:	00bfffc4 	movi	r2,-1
  }
}
 5091798:	e037883a 	mov	sp,fp
 509179c:	dfc00117 	ldw	ra,4(sp)
 50917a0:	df000017 	ldw	fp,0(sp)
 50917a4:	dec00204 	addi	sp,sp,8
 50917a8:	f800283a 	ret

050917ac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 50917ac:	defff004 	addi	sp,sp,-64
 50917b0:	df000f15 	stw	fp,60(sp)
 50917b4:	df000f04 	addi	fp,sp,60
 50917b8:	e13ffd15 	stw	r4,-12(fp)
 50917bc:	e17ffe15 	stw	r5,-8(fp)
 50917c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 50917c4:	00bffa84 	movi	r2,-22
 50917c8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 50917cc:	e0bffd17 	ldw	r2,-12(fp)
 50917d0:	10800828 	cmpgeui	r2,r2,32
 50917d4:	10005c1e 	bne	r2,zero,5091948 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50917d8:	0005303a 	rdctl	r2,status
 50917dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50917e0:	e0fff617 	ldw	r3,-40(fp)
 50917e4:	00bfff84 	movi	r2,-2
 50917e8:	1884703a 	and	r2,r3,r2
 50917ec:	1001703a 	wrctl	status,r2
  
  return context;
 50917f0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 50917f4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 50917f8:	00814274 	movhi	r2,1289
 50917fc:	109f7c04 	addi	r2,r2,32240
 5091800:	e0fffd17 	ldw	r3,-12(fp)
 5091804:	180690fa 	slli	r3,r3,3
 5091808:	10c5883a 	add	r2,r2,r3
 509180c:	e0ffff17 	ldw	r3,-4(fp)
 5091810:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 5091814:	00814274 	movhi	r2,1289
 5091818:	109f7c04 	addi	r2,r2,32240
 509181c:	e0fffd17 	ldw	r3,-12(fp)
 5091820:	180690fa 	slli	r3,r3,3
 5091824:	10c5883a 	add	r2,r2,r3
 5091828:	10800104 	addi	r2,r2,4
 509182c:	e0fffe17 	ldw	r3,-8(fp)
 5091830:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 5091834:	e0bfff17 	ldw	r2,-4(fp)
 5091838:	10001f26 	beq	r2,zero,50918b8 <alt_irq_register+0x10c>
 509183c:	e0bffd17 	ldw	r2,-12(fp)
 5091840:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5091844:	0005303a 	rdctl	r2,status
 5091848:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 509184c:	e0fff717 	ldw	r3,-36(fp)
 5091850:	00bfff84 	movi	r2,-2
 5091854:	1884703a 	and	r2,r3,r2
 5091858:	1001703a 	wrctl	status,r2
  
  return context;
 509185c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5091860:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 5091864:	00c00044 	movi	r3,1
 5091868:	e0bff217 	ldw	r2,-56(fp)
 509186c:	1884983a 	sll	r2,r3,r2
 5091870:	1007883a 	mov	r3,r2
 5091874:	00814274 	movhi	r2,1289
 5091878:	109f5f04 	addi	r2,r2,32124
 509187c:	10800017 	ldw	r2,0(r2)
 5091880:	1886b03a 	or	r3,r3,r2
 5091884:	00814274 	movhi	r2,1289
 5091888:	109f5f04 	addi	r2,r2,32124
 509188c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5091890:	00814274 	movhi	r2,1289
 5091894:	109f5f04 	addi	r2,r2,32124
 5091898:	10800017 	ldw	r2,0(r2)
 509189c:	100170fa 	wrctl	ienable,r2
 50918a0:	e0bff817 	ldw	r2,-32(fp)
 50918a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50918a8:	e0bff917 	ldw	r2,-28(fp)
 50918ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 50918b0:	0005883a 	mov	r2,zero
 50918b4:	00001f06 	br	5091934 <alt_irq_register+0x188>
 50918b8:	e0bffd17 	ldw	r2,-12(fp)
 50918bc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50918c0:	0005303a 	rdctl	r2,status
 50918c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50918c8:	e0fffa17 	ldw	r3,-24(fp)
 50918cc:	00bfff84 	movi	r2,-2
 50918d0:	1884703a 	and	r2,r3,r2
 50918d4:	1001703a 	wrctl	status,r2
  
  return context;
 50918d8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 50918dc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 50918e0:	00c00044 	movi	r3,1
 50918e4:	e0bff417 	ldw	r2,-48(fp)
 50918e8:	1884983a 	sll	r2,r3,r2
 50918ec:	0084303a 	nor	r2,zero,r2
 50918f0:	1007883a 	mov	r3,r2
 50918f4:	00814274 	movhi	r2,1289
 50918f8:	109f5f04 	addi	r2,r2,32124
 50918fc:	10800017 	ldw	r2,0(r2)
 5091900:	1886703a 	and	r3,r3,r2
 5091904:	00814274 	movhi	r2,1289
 5091908:	109f5f04 	addi	r2,r2,32124
 509190c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5091910:	00814274 	movhi	r2,1289
 5091914:	109f5f04 	addi	r2,r2,32124
 5091918:	10800017 	ldw	r2,0(r2)
 509191c:	100170fa 	wrctl	ienable,r2
 5091920:	e0bffb17 	ldw	r2,-20(fp)
 5091924:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5091928:	e0bffc17 	ldw	r2,-16(fp)
 509192c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5091930:	0005883a 	mov	r2,zero
 5091934:	e0bff115 	stw	r2,-60(fp)
 5091938:	e0bff317 	ldw	r2,-52(fp)
 509193c:	e0bff515 	stw	r2,-44(fp)
 5091940:	e0bff517 	ldw	r2,-44(fp)
 5091944:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 5091948:	e0bff117 	ldw	r2,-60(fp)
}
 509194c:	e037883a 	mov	sp,fp
 5091950:	df000017 	ldw	fp,0(sp)
 5091954:	dec00104 	addi	sp,sp,4
 5091958:	f800283a 	ret

0509195c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 509195c:	defffe04 	addi	sp,sp,-8
 5091960:	dfc00115 	stw	ra,4(sp)
 5091964:	df000015 	stw	fp,0(sp)
 5091968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 509196c:	00814274 	movhi	r2,1289
 5091970:	10986c04 	addi	r2,r2,25008
 5091974:	10800017 	ldw	r2,0(r2)
 5091978:	10000526 	beq	r2,zero,5091990 <alt_get_errno+0x34>
 509197c:	00814274 	movhi	r2,1289
 5091980:	10986c04 	addi	r2,r2,25008
 5091984:	10800017 	ldw	r2,0(r2)
 5091988:	103ee83a 	callr	r2
 509198c:	00000206 	br	5091998 <alt_get_errno+0x3c>
 5091990:	00814274 	movhi	r2,1289
 5091994:	109f5e04 	addi	r2,r2,32120
}
 5091998:	e037883a 	mov	sp,fp
 509199c:	dfc00117 	ldw	ra,4(sp)
 50919a0:	df000017 	ldw	fp,0(sp)
 50919a4:	dec00204 	addi	sp,sp,8
 50919a8:	f800283a 	ret

050919ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 50919ac:	deffed04 	addi	sp,sp,-76
 50919b0:	dfc01215 	stw	ra,72(sp)
 50919b4:	df001115 	stw	fp,68(sp)
 50919b8:	df001104 	addi	fp,sp,68
 50919bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50919c0:	e0bfff17 	ldw	r2,-4(fp)
 50919c4:	10000616 	blt	r2,zero,50919e0 <isatty+0x34>
 50919c8:	e0bfff17 	ldw	r2,-4(fp)
 50919cc:	10c00324 	muli	r3,r2,12
 50919d0:	00814274 	movhi	r2,1289
 50919d4:	1093d804 	addi	r2,r2,20320
 50919d8:	1885883a 	add	r2,r3,r2
 50919dc:	00000106 	br	50919e4 <isatty+0x38>
 50919e0:	0005883a 	mov	r2,zero
 50919e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 50919e8:	e0bfef17 	ldw	r2,-68(fp)
 50919ec:	10000e26 	beq	r2,zero,5091a28 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 50919f0:	e0bfef17 	ldw	r2,-68(fp)
 50919f4:	10800017 	ldw	r2,0(r2)
 50919f8:	10800817 	ldw	r2,32(r2)
 50919fc:	1000021e 	bne	r2,zero,5091a08 <isatty+0x5c>
    {
      return 1;
 5091a00:	00800044 	movi	r2,1
 5091a04:	00000d06 	br	5091a3c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 5091a08:	e0bff004 	addi	r2,fp,-64
 5091a0c:	100b883a 	mov	r5,r2
 5091a10:	e13fff17 	ldw	r4,-4(fp)
 5091a14:	50916fc0 	call	50916fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 5091a18:	e0bff117 	ldw	r2,-60(fp)
 5091a1c:	10880020 	cmpeqi	r2,r2,8192
 5091a20:	10803fcc 	andi	r2,r2,255
 5091a24:	00000506 	br	5091a3c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5091a28:	509195c0 	call	509195c <alt_get_errno>
 5091a2c:	1007883a 	mov	r3,r2
 5091a30:	00801444 	movi	r2,81
 5091a34:	18800015 	stw	r2,0(r3)
    return 0;
 5091a38:	0005883a 	mov	r2,zero
  }
}
 5091a3c:	e037883a 	mov	sp,fp
 5091a40:	dfc00117 	ldw	ra,4(sp)
 5091a44:	df000017 	ldw	fp,0(sp)
 5091a48:	dec00204 	addi	sp,sp,8
 5091a4c:	f800283a 	ret

05091a50 <alt_load_section>:
 5091a50:	defffc04 	addi	sp,sp,-16
 5091a54:	df000315 	stw	fp,12(sp)
 5091a58:	df000304 	addi	fp,sp,12
 5091a5c:	e13ffd15 	stw	r4,-12(fp)
 5091a60:	e17ffe15 	stw	r5,-8(fp)
 5091a64:	e1bfff15 	stw	r6,-4(fp)
 5091a68:	e0fffe17 	ldw	r3,-8(fp)
 5091a6c:	e0bffd17 	ldw	r2,-12(fp)
 5091a70:	18800c26 	beq	r3,r2,5091aa4 <alt_load_section+0x54>
 5091a74:	00000806 	br	5091a98 <alt_load_section+0x48>
 5091a78:	e0bffe17 	ldw	r2,-8(fp)
 5091a7c:	10c00104 	addi	r3,r2,4
 5091a80:	e0fffe15 	stw	r3,-8(fp)
 5091a84:	e0fffd17 	ldw	r3,-12(fp)
 5091a88:	19000104 	addi	r4,r3,4
 5091a8c:	e13ffd15 	stw	r4,-12(fp)
 5091a90:	18c00017 	ldw	r3,0(r3)
 5091a94:	10c00015 	stw	r3,0(r2)
 5091a98:	e0fffe17 	ldw	r3,-8(fp)
 5091a9c:	e0bfff17 	ldw	r2,-4(fp)
 5091aa0:	18bff51e 	bne	r3,r2,5091a78 <__alt_data_end+0xfffc3878>
 5091aa4:	0001883a 	nop
 5091aa8:	e037883a 	mov	sp,fp
 5091aac:	df000017 	ldw	fp,0(sp)
 5091ab0:	dec00104 	addi	sp,sp,4
 5091ab4:	f800283a 	ret

05091ab8 <alt_load>:
 5091ab8:	defffe04 	addi	sp,sp,-8
 5091abc:	dfc00115 	stw	ra,4(sp)
 5091ac0:	df000015 	stw	fp,0(sp)
 5091ac4:	d839883a 	mov	fp,sp
 5091ac8:	01814274 	movhi	r6,1289
 5091acc:	31987104 	addi	r6,r6,25028
 5091ad0:	01414274 	movhi	r5,1289
 5091ad4:	2951a504 	addi	r5,r5,18068
 5091ad8:	01014274 	movhi	r4,1289
 5091adc:	21187104 	addi	r4,r4,25028
 5091ae0:	5091a500 	call	5091a50 <alt_load_section>
 5091ae4:	01814234 	movhi	r6,1288
 5091ae8:	31807104 	addi	r6,r6,452
 5091aec:	01414234 	movhi	r5,1288
 5091af0:	29400804 	addi	r5,r5,32
 5091af4:	01014234 	movhi	r4,1288
 5091af8:	21000804 	addi	r4,r4,32
 5091afc:	5091a500 	call	5091a50 <alt_load_section>
 5091b00:	01814274 	movhi	r6,1289
 5091b04:	3191a504 	addi	r6,r6,18068
 5091b08:	01414274 	movhi	r5,1289
 5091b0c:	29506804 	addi	r5,r5,16800
 5091b10:	01014274 	movhi	r4,1289
 5091b14:	21106804 	addi	r4,r4,16800
 5091b18:	5091a500 	call	5091a50 <alt_load_section>
 5091b1c:	50933780 	call	5093378 <alt_dcache_flush_all>
 5091b20:	50936040 	call	5093604 <alt_icache_flush_all>
 5091b24:	0001883a 	nop
 5091b28:	e037883a 	mov	sp,fp
 5091b2c:	dfc00117 	ldw	ra,4(sp)
 5091b30:	df000017 	ldw	fp,0(sp)
 5091b34:	dec00204 	addi	sp,sp,8
 5091b38:	f800283a 	ret

05091b3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5091b3c:	defffe04 	addi	sp,sp,-8
 5091b40:	dfc00115 	stw	ra,4(sp)
 5091b44:	df000015 	stw	fp,0(sp)
 5091b48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5091b4c:	00814274 	movhi	r2,1289
 5091b50:	10986c04 	addi	r2,r2,25008
 5091b54:	10800017 	ldw	r2,0(r2)
 5091b58:	10000526 	beq	r2,zero,5091b70 <alt_get_errno+0x34>
 5091b5c:	00814274 	movhi	r2,1289
 5091b60:	10986c04 	addi	r2,r2,25008
 5091b64:	10800017 	ldw	r2,0(r2)
 5091b68:	103ee83a 	callr	r2
 5091b6c:	00000206 	br	5091b78 <alt_get_errno+0x3c>
 5091b70:	00814274 	movhi	r2,1289
 5091b74:	109f5e04 	addi	r2,r2,32120
}
 5091b78:	e037883a 	mov	sp,fp
 5091b7c:	dfc00117 	ldw	ra,4(sp)
 5091b80:	df000017 	ldw	fp,0(sp)
 5091b84:	dec00204 	addi	sp,sp,8
 5091b88:	f800283a 	ret

05091b8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 5091b8c:	defff904 	addi	sp,sp,-28
 5091b90:	dfc00615 	stw	ra,24(sp)
 5091b94:	df000515 	stw	fp,20(sp)
 5091b98:	df000504 	addi	fp,sp,20
 5091b9c:	e13ffd15 	stw	r4,-12(fp)
 5091ba0:	e17ffe15 	stw	r5,-8(fp)
 5091ba4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 5091ba8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5091bac:	e0bffd17 	ldw	r2,-12(fp)
 5091bb0:	10000616 	blt	r2,zero,5091bcc <lseek+0x40>
 5091bb4:	e0bffd17 	ldw	r2,-12(fp)
 5091bb8:	10c00324 	muli	r3,r2,12
 5091bbc:	00814274 	movhi	r2,1289
 5091bc0:	1093d804 	addi	r2,r2,20320
 5091bc4:	1885883a 	add	r2,r3,r2
 5091bc8:	00000106 	br	5091bd0 <lseek+0x44>
 5091bcc:	0005883a 	mov	r2,zero
 5091bd0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 5091bd4:	e0bffc17 	ldw	r2,-16(fp)
 5091bd8:	10001026 	beq	r2,zero,5091c1c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 5091bdc:	e0bffc17 	ldw	r2,-16(fp)
 5091be0:	10800017 	ldw	r2,0(r2)
 5091be4:	10800717 	ldw	r2,28(r2)
 5091be8:	10000926 	beq	r2,zero,5091c10 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 5091bec:	e0bffc17 	ldw	r2,-16(fp)
 5091bf0:	10800017 	ldw	r2,0(r2)
 5091bf4:	10800717 	ldw	r2,28(r2)
 5091bf8:	e1bfff17 	ldw	r6,-4(fp)
 5091bfc:	e17ffe17 	ldw	r5,-8(fp)
 5091c00:	e13ffc17 	ldw	r4,-16(fp)
 5091c04:	103ee83a 	callr	r2
 5091c08:	e0bffb15 	stw	r2,-20(fp)
 5091c0c:	00000506 	br	5091c24 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 5091c10:	00bfde84 	movi	r2,-134
 5091c14:	e0bffb15 	stw	r2,-20(fp)
 5091c18:	00000206 	br	5091c24 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 5091c1c:	00bfebc4 	movi	r2,-81
 5091c20:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 5091c24:	e0bffb17 	ldw	r2,-20(fp)
 5091c28:	1000070e 	bge	r2,zero,5091c48 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 5091c2c:	5091b3c0 	call	5091b3c <alt_get_errno>
 5091c30:	1007883a 	mov	r3,r2
 5091c34:	e0bffb17 	ldw	r2,-20(fp)
 5091c38:	0085c83a 	sub	r2,zero,r2
 5091c3c:	18800015 	stw	r2,0(r3)
    rc = -1;
 5091c40:	00bfffc4 	movi	r2,-1
 5091c44:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 5091c48:	e0bffb17 	ldw	r2,-20(fp)
}
 5091c4c:	e037883a 	mov	sp,fp
 5091c50:	dfc00117 	ldw	ra,4(sp)
 5091c54:	df000017 	ldw	fp,0(sp)
 5091c58:	dec00204 	addi	sp,sp,8
 5091c5c:	f800283a 	ret

05091c60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 5091c60:	defffd04 	addi	sp,sp,-12
 5091c64:	dfc00215 	stw	ra,8(sp)
 5091c68:	df000115 	stw	fp,4(sp)
 5091c6c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 5091c70:	0009883a 	mov	r4,zero
 5091c74:	50921340 	call	5092134 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 5091c78:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 5091c7c:	509216c0 	call	509216c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 5091c80:	01814274 	movhi	r6,1289
 5091c84:	31919a04 	addi	r6,r6,18024
 5091c88:	01414274 	movhi	r5,1289
 5091c8c:	29519a04 	addi	r5,r5,18024
 5091c90:	01014274 	movhi	r4,1289
 5091c94:	21119a04 	addi	r4,r4,18024
 5091c98:	50936fc0 	call	50936fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 5091c9c:	50934b40 	call	50934b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 5091ca0:	01014274 	movhi	r4,1289
 5091ca4:	210d4504 	addi	r4,r4,13588
 5091ca8:	5093e0c0 	call	5093e0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 5091cac:	d0a70517 	ldw	r2,-25580(gp)
 5091cb0:	d0e70617 	ldw	r3,-25576(gp)
 5091cb4:	d1270717 	ldw	r4,-25572(gp)
 5091cb8:	200d883a 	mov	r6,r4
 5091cbc:	180b883a 	mov	r5,r3
 5091cc0:	1009883a 	mov	r4,r2
 5091cc4:	508152c0 	call	508152c <main>
 5091cc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 5091ccc:	01000044 	movi	r4,1
 5091cd0:	50915b00 	call	50915b0 <close>
  exit (result);
 5091cd4:	e13fff17 	ldw	r4,-4(fp)
 5091cd8:	5093e200 	call	5093e20 <exit>

05091cdc <__malloc_lock>:
 5091cdc:	defffe04 	addi	sp,sp,-8
 5091ce0:	df000115 	stw	fp,4(sp)
 5091ce4:	df000104 	addi	fp,sp,4
 5091ce8:	e13fff15 	stw	r4,-4(fp)
 5091cec:	0001883a 	nop
 5091cf0:	e037883a 	mov	sp,fp
 5091cf4:	df000017 	ldw	fp,0(sp)
 5091cf8:	dec00104 	addi	sp,sp,4
 5091cfc:	f800283a 	ret

05091d00 <__malloc_unlock>:
 5091d00:	defffe04 	addi	sp,sp,-8
 5091d04:	df000115 	stw	fp,4(sp)
 5091d08:	df000104 	addi	fp,sp,4
 5091d0c:	e13fff15 	stw	r4,-4(fp)
 5091d10:	0001883a 	nop
 5091d14:	e037883a 	mov	sp,fp
 5091d18:	df000017 	ldw	fp,0(sp)
 5091d1c:	dec00104 	addi	sp,sp,4
 5091d20:	f800283a 	ret

05091d24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5091d24:	defffe04 	addi	sp,sp,-8
 5091d28:	dfc00115 	stw	ra,4(sp)
 5091d2c:	df000015 	stw	fp,0(sp)
 5091d30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5091d34:	00814274 	movhi	r2,1289
 5091d38:	10986c04 	addi	r2,r2,25008
 5091d3c:	10800017 	ldw	r2,0(r2)
 5091d40:	10000526 	beq	r2,zero,5091d58 <alt_get_errno+0x34>
 5091d44:	00814274 	movhi	r2,1289
 5091d48:	10986c04 	addi	r2,r2,25008
 5091d4c:	10800017 	ldw	r2,0(r2)
 5091d50:	103ee83a 	callr	r2
 5091d54:	00000206 	br	5091d60 <alt_get_errno+0x3c>
 5091d58:	00814274 	movhi	r2,1289
 5091d5c:	109f5e04 	addi	r2,r2,32120
}
 5091d60:	e037883a 	mov	sp,fp
 5091d64:	dfc00117 	ldw	ra,4(sp)
 5091d68:	df000017 	ldw	fp,0(sp)
 5091d6c:	dec00204 	addi	sp,sp,8
 5091d70:	f800283a 	ret

05091d74 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 5091d74:	defff904 	addi	sp,sp,-28
 5091d78:	dfc00615 	stw	ra,24(sp)
 5091d7c:	df000515 	stw	fp,20(sp)
 5091d80:	df000504 	addi	fp,sp,20
 5091d84:	e13ffd15 	stw	r4,-12(fp)
 5091d88:	e17ffe15 	stw	r5,-8(fp)
 5091d8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5091d90:	e0bffd17 	ldw	r2,-12(fp)
 5091d94:	10000616 	blt	r2,zero,5091db0 <read+0x3c>
 5091d98:	e0bffd17 	ldw	r2,-12(fp)
 5091d9c:	10c00324 	muli	r3,r2,12
 5091da0:	00814274 	movhi	r2,1289
 5091da4:	1093d804 	addi	r2,r2,20320
 5091da8:	1885883a 	add	r2,r3,r2
 5091dac:	00000106 	br	5091db4 <read+0x40>
 5091db0:	0005883a 	mov	r2,zero
 5091db4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 5091db8:	e0bffb17 	ldw	r2,-20(fp)
 5091dbc:	10002226 	beq	r2,zero,5091e48 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5091dc0:	e0bffb17 	ldw	r2,-20(fp)
 5091dc4:	10800217 	ldw	r2,8(r2)
 5091dc8:	108000cc 	andi	r2,r2,3
 5091dcc:	10800060 	cmpeqi	r2,r2,1
 5091dd0:	1000181e 	bne	r2,zero,5091e34 <read+0xc0>
        (fd->dev->read))
 5091dd4:	e0bffb17 	ldw	r2,-20(fp)
 5091dd8:	10800017 	ldw	r2,0(r2)
 5091ddc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5091de0:	10001426 	beq	r2,zero,5091e34 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 5091de4:	e0bffb17 	ldw	r2,-20(fp)
 5091de8:	10800017 	ldw	r2,0(r2)
 5091dec:	10800517 	ldw	r2,20(r2)
 5091df0:	e0ffff17 	ldw	r3,-4(fp)
 5091df4:	180d883a 	mov	r6,r3
 5091df8:	e17ffe17 	ldw	r5,-8(fp)
 5091dfc:	e13ffb17 	ldw	r4,-20(fp)
 5091e00:	103ee83a 	callr	r2
 5091e04:	e0bffc15 	stw	r2,-16(fp)
 5091e08:	e0bffc17 	ldw	r2,-16(fp)
 5091e0c:	1000070e 	bge	r2,zero,5091e2c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 5091e10:	5091d240 	call	5091d24 <alt_get_errno>
 5091e14:	1007883a 	mov	r3,r2
 5091e18:	e0bffc17 	ldw	r2,-16(fp)
 5091e1c:	0085c83a 	sub	r2,zero,r2
 5091e20:	18800015 	stw	r2,0(r3)
          return -1;
 5091e24:	00bfffc4 	movi	r2,-1
 5091e28:	00000c06 	br	5091e5c <read+0xe8>
        }
        return rval;
 5091e2c:	e0bffc17 	ldw	r2,-16(fp)
 5091e30:	00000a06 	br	5091e5c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 5091e34:	5091d240 	call	5091d24 <alt_get_errno>
 5091e38:	1007883a 	mov	r3,r2
 5091e3c:	00800344 	movi	r2,13
 5091e40:	18800015 	stw	r2,0(r3)
 5091e44:	00000406 	br	5091e58 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 5091e48:	5091d240 	call	5091d24 <alt_get_errno>
 5091e4c:	1007883a 	mov	r3,r2
 5091e50:	00801444 	movi	r2,81
 5091e54:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5091e58:	00bfffc4 	movi	r2,-1
}
 5091e5c:	e037883a 	mov	sp,fp
 5091e60:	dfc00117 	ldw	ra,4(sp)
 5091e64:	df000017 	ldw	fp,0(sp)
 5091e68:	dec00204 	addi	sp,sp,8
 5091e6c:	f800283a 	ret

05091e70 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5091e70:	defffe04 	addi	sp,sp,-8
 5091e74:	df000115 	stw	fp,4(sp)
 5091e78:	df000104 	addi	fp,sp,4
 5091e7c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 5091e80:	e0bfff17 	ldw	r2,-4(fp)
 5091e84:	108000d0 	cmplti	r2,r2,3
 5091e88:	10000d1e 	bne	r2,zero,5091ec0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 5091e8c:	00814274 	movhi	r2,1289
 5091e90:	1093d804 	addi	r2,r2,20320
 5091e94:	e0ffff17 	ldw	r3,-4(fp)
 5091e98:	18c00324 	muli	r3,r3,12
 5091e9c:	10c5883a 	add	r2,r2,r3
 5091ea0:	10800204 	addi	r2,r2,8
 5091ea4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 5091ea8:	00814274 	movhi	r2,1289
 5091eac:	1093d804 	addi	r2,r2,20320
 5091eb0:	e0ffff17 	ldw	r3,-4(fp)
 5091eb4:	18c00324 	muli	r3,r3,12
 5091eb8:	10c5883a 	add	r2,r2,r3
 5091ebc:	10000015 	stw	zero,0(r2)
  }
}
 5091ec0:	0001883a 	nop
 5091ec4:	e037883a 	mov	sp,fp
 5091ec8:	df000017 	ldw	fp,0(sp)
 5091ecc:	dec00104 	addi	sp,sp,4
 5091ed0:	f800283a 	ret

05091ed4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 5091ed4:	defff904 	addi	sp,sp,-28
 5091ed8:	df000615 	stw	fp,24(sp)
 5091edc:	df000604 	addi	fp,sp,24
 5091ee0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5091ee4:	0005303a 	rdctl	r2,status
 5091ee8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5091eec:	e0fffe17 	ldw	r3,-8(fp)
 5091ef0:	00bfff84 	movi	r2,-2
 5091ef4:	1884703a 	and	r2,r3,r2
 5091ef8:	1001703a 	wrctl	status,r2
  
  return context;
 5091efc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 5091f00:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 5091f04:	d0a01317 	ldw	r2,-32692(gp)
 5091f08:	10c000c4 	addi	r3,r2,3
 5091f0c:	00bfff04 	movi	r2,-4
 5091f10:	1884703a 	and	r2,r3,r2
 5091f14:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 5091f18:	d0e01317 	ldw	r3,-32692(gp)
 5091f1c:	e0bfff17 	ldw	r2,-4(fp)
 5091f20:	1887883a 	add	r3,r3,r2
 5091f24:	00814374 	movhi	r2,1293
 5091f28:	10b88004 	addi	r2,r2,-7680
 5091f2c:	10c0062e 	bgeu	r2,r3,5091f48 <sbrk+0x74>
 5091f30:	e0bffb17 	ldw	r2,-20(fp)
 5091f34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5091f38:	e0bffa17 	ldw	r2,-24(fp)
 5091f3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 5091f40:	00bfffc4 	movi	r2,-1
 5091f44:	00000b06 	br	5091f74 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 5091f48:	d0a01317 	ldw	r2,-32692(gp)
 5091f4c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 5091f50:	d0e01317 	ldw	r3,-32692(gp)
 5091f54:	e0bfff17 	ldw	r2,-4(fp)
 5091f58:	1885883a 	add	r2,r3,r2
 5091f5c:	d0a01315 	stw	r2,-32692(gp)
 5091f60:	e0bffb17 	ldw	r2,-20(fp)
 5091f64:	e0bffc15 	stw	r2,-16(fp)
 5091f68:	e0bffc17 	ldw	r2,-16(fp)
 5091f6c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 5091f70:	e0bffd17 	ldw	r2,-12(fp)
} 
 5091f74:	e037883a 	mov	sp,fp
 5091f78:	df000017 	ldw	fp,0(sp)
 5091f7c:	dec00104 	addi	sp,sp,4
 5091f80:	f800283a 	ret

05091f84 <usleep>:
 5091f84:	defffd04 	addi	sp,sp,-12
 5091f88:	dfc00215 	stw	ra,8(sp)
 5091f8c:	df000115 	stw	fp,4(sp)
 5091f90:	df000104 	addi	fp,sp,4
 5091f94:	e13fff15 	stw	r4,-4(fp)
 5091f98:	e13fff17 	ldw	r4,-4(fp)
 5091f9c:	50932200 	call	5093220 <alt_busy_sleep>
 5091fa0:	e037883a 	mov	sp,fp
 5091fa4:	dfc00117 	ldw	ra,4(sp)
 5091fa8:	df000017 	ldw	fp,0(sp)
 5091fac:	dec00204 	addi	sp,sp,8
 5091fb0:	f800283a 	ret

05091fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5091fb4:	defffe04 	addi	sp,sp,-8
 5091fb8:	dfc00115 	stw	ra,4(sp)
 5091fbc:	df000015 	stw	fp,0(sp)
 5091fc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5091fc4:	00814274 	movhi	r2,1289
 5091fc8:	10986c04 	addi	r2,r2,25008
 5091fcc:	10800017 	ldw	r2,0(r2)
 5091fd0:	10000526 	beq	r2,zero,5091fe8 <alt_get_errno+0x34>
 5091fd4:	00814274 	movhi	r2,1289
 5091fd8:	10986c04 	addi	r2,r2,25008
 5091fdc:	10800017 	ldw	r2,0(r2)
 5091fe0:	103ee83a 	callr	r2
 5091fe4:	00000206 	br	5091ff0 <alt_get_errno+0x3c>
 5091fe8:	00814274 	movhi	r2,1289
 5091fec:	109f5e04 	addi	r2,r2,32120
}
 5091ff0:	e037883a 	mov	sp,fp
 5091ff4:	dfc00117 	ldw	ra,4(sp)
 5091ff8:	df000017 	ldw	fp,0(sp)
 5091ffc:	dec00204 	addi	sp,sp,8
 5092000:	f800283a 	ret

05092004 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 5092004:	defff904 	addi	sp,sp,-28
 5092008:	dfc00615 	stw	ra,24(sp)
 509200c:	df000515 	stw	fp,20(sp)
 5092010:	df000504 	addi	fp,sp,20
 5092014:	e13ffd15 	stw	r4,-12(fp)
 5092018:	e17ffe15 	stw	r5,-8(fp)
 509201c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5092020:	e0bffd17 	ldw	r2,-12(fp)
 5092024:	10000616 	blt	r2,zero,5092040 <write+0x3c>
 5092028:	e0bffd17 	ldw	r2,-12(fp)
 509202c:	10c00324 	muli	r3,r2,12
 5092030:	00814274 	movhi	r2,1289
 5092034:	1093d804 	addi	r2,r2,20320
 5092038:	1885883a 	add	r2,r3,r2
 509203c:	00000106 	br	5092044 <write+0x40>
 5092040:	0005883a 	mov	r2,zero
 5092044:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 5092048:	e0bffb17 	ldw	r2,-20(fp)
 509204c:	10002126 	beq	r2,zero,50920d4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5092050:	e0bffb17 	ldw	r2,-20(fp)
 5092054:	10800217 	ldw	r2,8(r2)
 5092058:	108000cc 	andi	r2,r2,3
 509205c:	10001826 	beq	r2,zero,50920c0 <write+0xbc>
 5092060:	e0bffb17 	ldw	r2,-20(fp)
 5092064:	10800017 	ldw	r2,0(r2)
 5092068:	10800617 	ldw	r2,24(r2)
 509206c:	10001426 	beq	r2,zero,50920c0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 5092070:	e0bffb17 	ldw	r2,-20(fp)
 5092074:	10800017 	ldw	r2,0(r2)
 5092078:	10800617 	ldw	r2,24(r2)
 509207c:	e0ffff17 	ldw	r3,-4(fp)
 5092080:	180d883a 	mov	r6,r3
 5092084:	e17ffe17 	ldw	r5,-8(fp)
 5092088:	e13ffb17 	ldw	r4,-20(fp)
 509208c:	103ee83a 	callr	r2
 5092090:	e0bffc15 	stw	r2,-16(fp)
 5092094:	e0bffc17 	ldw	r2,-16(fp)
 5092098:	1000070e 	bge	r2,zero,50920b8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 509209c:	5091fb40 	call	5091fb4 <alt_get_errno>
 50920a0:	1007883a 	mov	r3,r2
 50920a4:	e0bffc17 	ldw	r2,-16(fp)
 50920a8:	0085c83a 	sub	r2,zero,r2
 50920ac:	18800015 	stw	r2,0(r3)
        return -1;
 50920b0:	00bfffc4 	movi	r2,-1
 50920b4:	00000c06 	br	50920e8 <write+0xe4>
      }
      return rval;
 50920b8:	e0bffc17 	ldw	r2,-16(fp)
 50920bc:	00000a06 	br	50920e8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 50920c0:	5091fb40 	call	5091fb4 <alt_get_errno>
 50920c4:	1007883a 	mov	r3,r2
 50920c8:	00800344 	movi	r2,13
 50920cc:	18800015 	stw	r2,0(r3)
 50920d0:	00000406 	br	50920e4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 50920d4:	5091fb40 	call	5091fb4 <alt_get_errno>
 50920d8:	1007883a 	mov	r3,r2
 50920dc:	00801444 	movi	r2,81
 50920e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 50920e4:	00bfffc4 	movi	r2,-1
}
 50920e8:	e037883a 	mov	sp,fp
 50920ec:	dfc00117 	ldw	ra,4(sp)
 50920f0:	df000017 	ldw	fp,0(sp)
 50920f4:	dec00204 	addi	sp,sp,8
 50920f8:	f800283a 	ret

050920fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 50920fc:	defffd04 	addi	sp,sp,-12
 5092100:	dfc00215 	stw	ra,8(sp)
 5092104:	df000115 	stw	fp,4(sp)
 5092108:	df000104 	addi	fp,sp,4
 509210c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 5092110:	01414274 	movhi	r5,1289
 5092114:	29586904 	addi	r5,r5,24996
 5092118:	e13fff17 	ldw	r4,-4(fp)
 509211c:	50934100 	call	5093410 <alt_dev_llist_insert>
}
 5092120:	e037883a 	mov	sp,fp
 5092124:	dfc00117 	ldw	ra,4(sp)
 5092128:	df000017 	ldw	fp,0(sp)
 509212c:	dec00204 	addi	sp,sp,8
 5092130:	f800283a 	ret

05092134 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5092134:	defffd04 	addi	sp,sp,-12
 5092138:	dfc00215 	stw	ra,8(sp)
 509213c:	df000115 	stw	fp,4(sp)
 5092140:	df000104 	addi	fp,sp,4
 5092144:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 5092148:	5093b900 	call	5093b90 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 509214c:	00800044 	movi	r2,1
 5092150:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5092154:	0001883a 	nop
 5092158:	e037883a 	mov	sp,fp
 509215c:	dfc00117 	ldw	ra,4(sp)
 5092160:	df000017 	ldw	fp,0(sp)
 5092164:	dec00204 	addi	sp,sp,8
 5092168:	f800283a 	ret

0509216c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 509216c:	defffe04 	addi	sp,sp,-8
 5092170:	dfc00115 	stw	ra,4(sp)
 5092174:	df000015 	stw	fp,0(sp)
 5092178:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 509217c:	01c0fa04 	movi	r7,1000
 5092180:	000d883a 	mov	r6,zero
 5092184:	000b883a 	mov	r5,zero
 5092188:	01014434 	movhi	r4,1296
 509218c:	21040004 	addi	r4,r4,4096
 5092190:	5092cc80 	call	5092cc8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 5092194:	01800044 	movi	r6,1
 5092198:	000b883a 	mov	r5,zero
 509219c:	01014274 	movhi	r4,1289
 50921a0:	21144204 	addi	r4,r4,20744
 50921a4:	50923400 	call	5092340 <altera_avalon_jtag_uart_init>
 50921a8:	01014274 	movhi	r4,1289
 50921ac:	21143804 	addi	r4,r4,20704
 50921b0:	50920fc0 	call	50920fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 50921b4:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( WIFI, WIFI);
 50921b8:	01014274 	movhi	r4,1289
 50921bc:	21185004 	addi	r4,r4,24896
 50921c0:	50920fc0 	call	50920fc <alt_dev_reg>
}
 50921c4:	0001883a 	nop
 50921c8:	e037883a 	mov	sp,fp
 50921cc:	dfc00117 	ldw	ra,4(sp)
 50921d0:	df000017 	ldw	fp,0(sp)
 50921d4:	dec00204 	addi	sp,sp,8
 50921d8:	f800283a 	ret

050921dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 50921dc:	defffa04 	addi	sp,sp,-24
 50921e0:	dfc00515 	stw	ra,20(sp)
 50921e4:	df000415 	stw	fp,16(sp)
 50921e8:	df000404 	addi	fp,sp,16
 50921ec:	e13ffd15 	stw	r4,-12(fp)
 50921f0:	e17ffe15 	stw	r5,-8(fp)
 50921f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 50921f8:	e0bffd17 	ldw	r2,-12(fp)
 50921fc:	10800017 	ldw	r2,0(r2)
 5092200:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 5092204:	e0bffc17 	ldw	r2,-16(fp)
 5092208:	10c00a04 	addi	r3,r2,40
 509220c:	e0bffd17 	ldw	r2,-12(fp)
 5092210:	10800217 	ldw	r2,8(r2)
 5092214:	100f883a 	mov	r7,r2
 5092218:	e1bfff17 	ldw	r6,-4(fp)
 509221c:	e17ffe17 	ldw	r5,-8(fp)
 5092220:	1809883a 	mov	r4,r3
 5092224:	509280c0 	call	509280c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 5092228:	e037883a 	mov	sp,fp
 509222c:	dfc00117 	ldw	ra,4(sp)
 5092230:	df000017 	ldw	fp,0(sp)
 5092234:	dec00204 	addi	sp,sp,8
 5092238:	f800283a 	ret

0509223c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 509223c:	defffa04 	addi	sp,sp,-24
 5092240:	dfc00515 	stw	ra,20(sp)
 5092244:	df000415 	stw	fp,16(sp)
 5092248:	df000404 	addi	fp,sp,16
 509224c:	e13ffd15 	stw	r4,-12(fp)
 5092250:	e17ffe15 	stw	r5,-8(fp)
 5092254:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5092258:	e0bffd17 	ldw	r2,-12(fp)
 509225c:	10800017 	ldw	r2,0(r2)
 5092260:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5092264:	e0bffc17 	ldw	r2,-16(fp)
 5092268:	10c00a04 	addi	r3,r2,40
 509226c:	e0bffd17 	ldw	r2,-12(fp)
 5092270:	10800217 	ldw	r2,8(r2)
 5092274:	100f883a 	mov	r7,r2
 5092278:	e1bfff17 	ldw	r6,-4(fp)
 509227c:	e17ffe17 	ldw	r5,-8(fp)
 5092280:	1809883a 	mov	r4,r3
 5092284:	5092a280 	call	5092a28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5092288:	e037883a 	mov	sp,fp
 509228c:	dfc00117 	ldw	ra,4(sp)
 5092290:	df000017 	ldw	fp,0(sp)
 5092294:	dec00204 	addi	sp,sp,8
 5092298:	f800283a 	ret

0509229c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 509229c:	defffc04 	addi	sp,sp,-16
 50922a0:	dfc00315 	stw	ra,12(sp)
 50922a4:	df000215 	stw	fp,8(sp)
 50922a8:	df000204 	addi	fp,sp,8
 50922ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 50922b0:	e0bfff17 	ldw	r2,-4(fp)
 50922b4:	10800017 	ldw	r2,0(r2)
 50922b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 50922bc:	e0bffe17 	ldw	r2,-8(fp)
 50922c0:	10c00a04 	addi	r3,r2,40
 50922c4:	e0bfff17 	ldw	r2,-4(fp)
 50922c8:	10800217 	ldw	r2,8(r2)
 50922cc:	100b883a 	mov	r5,r2
 50922d0:	1809883a 	mov	r4,r3
 50922d4:	50926b40 	call	50926b4 <altera_avalon_jtag_uart_close>
}
 50922d8:	e037883a 	mov	sp,fp
 50922dc:	dfc00117 	ldw	ra,4(sp)
 50922e0:	df000017 	ldw	fp,0(sp)
 50922e4:	dec00204 	addi	sp,sp,8
 50922e8:	f800283a 	ret

050922ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 50922ec:	defffa04 	addi	sp,sp,-24
 50922f0:	dfc00515 	stw	ra,20(sp)
 50922f4:	df000415 	stw	fp,16(sp)
 50922f8:	df000404 	addi	fp,sp,16
 50922fc:	e13ffd15 	stw	r4,-12(fp)
 5092300:	e17ffe15 	stw	r5,-8(fp)
 5092304:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 5092308:	e0bffd17 	ldw	r2,-12(fp)
 509230c:	10800017 	ldw	r2,0(r2)
 5092310:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 5092314:	e0bffc17 	ldw	r2,-16(fp)
 5092318:	10800a04 	addi	r2,r2,40
 509231c:	e1bfff17 	ldw	r6,-4(fp)
 5092320:	e17ffe17 	ldw	r5,-8(fp)
 5092324:	1009883a 	mov	r4,r2
 5092328:	509271c0 	call	509271c <altera_avalon_jtag_uart_ioctl>
}
 509232c:	e037883a 	mov	sp,fp
 5092330:	dfc00117 	ldw	ra,4(sp)
 5092334:	df000017 	ldw	fp,0(sp)
 5092338:	dec00204 	addi	sp,sp,8
 509233c:	f800283a 	ret

05092340 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 5092340:	defffb04 	addi	sp,sp,-20
 5092344:	dfc00415 	stw	ra,16(sp)
 5092348:	df000315 	stw	fp,12(sp)
 509234c:	df000304 	addi	fp,sp,12
 5092350:	e13ffd15 	stw	r4,-12(fp)
 5092354:	e17ffe15 	stw	r5,-8(fp)
 5092358:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 509235c:	e0bffd17 	ldw	r2,-12(fp)
 5092360:	00c00044 	movi	r3,1
 5092364:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5092368:	e0bffd17 	ldw	r2,-12(fp)
 509236c:	10800017 	ldw	r2,0(r2)
 5092370:	10800104 	addi	r2,r2,4
 5092374:	1007883a 	mov	r3,r2
 5092378:	e0bffd17 	ldw	r2,-12(fp)
 509237c:	10800817 	ldw	r2,32(r2)
 5092380:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 5092384:	e0bfff17 	ldw	r2,-4(fp)
 5092388:	01814274 	movhi	r6,1289
 509238c:	3188ff04 	addi	r6,r6,9212
 5092390:	e17ffd17 	ldw	r5,-12(fp)
 5092394:	1009883a 	mov	r4,r2
 5092398:	50917ac0 	call	50917ac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 509239c:	e0bffd17 	ldw	r2,-12(fp)
 50923a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 50923a4:	e0bffd17 	ldw	r2,-12(fp)
 50923a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 50923ac:	00814274 	movhi	r2,1289
 50923b0:	109f6304 	addi	r2,r2,32140
 50923b4:	10800017 	ldw	r2,0(r2)
 50923b8:	e1fffd17 	ldw	r7,-12(fp)
 50923bc:	01814274 	movhi	r6,1289
 50923c0:	31898304 	addi	r6,r6,9740
 50923c4:	100b883a 	mov	r5,r2
 50923c8:	1809883a 	mov	r4,r3
 50923cc:	50930e00 	call	50930e0 <alt_alarm_start>
 50923d0:	1000040e 	bge	r2,zero,50923e4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 50923d4:	e0fffd17 	ldw	r3,-12(fp)
 50923d8:	00a00034 	movhi	r2,32768
 50923dc:	10bfffc4 	addi	r2,r2,-1
 50923e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 50923e4:	0001883a 	nop
 50923e8:	e037883a 	mov	sp,fp
 50923ec:	dfc00117 	ldw	ra,4(sp)
 50923f0:	df000017 	ldw	fp,0(sp)
 50923f4:	dec00204 	addi	sp,sp,8
 50923f8:	f800283a 	ret

050923fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 50923fc:	defff704 	addi	sp,sp,-36
 5092400:	df000815 	stw	fp,32(sp)
 5092404:	df000804 	addi	fp,sp,32
 5092408:	e13ffe15 	stw	r4,-8(fp)
 509240c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 5092410:	e0bffe17 	ldw	r2,-8(fp)
 5092414:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 5092418:	e0bffa17 	ldw	r2,-24(fp)
 509241c:	10800017 	ldw	r2,0(r2)
 5092420:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5092424:	e0bffb17 	ldw	r2,-20(fp)
 5092428:	10800104 	addi	r2,r2,4
 509242c:	10800037 	ldwio	r2,0(r2)
 5092430:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 5092434:	e0bffc17 	ldw	r2,-16(fp)
 5092438:	1080c00c 	andi	r2,r2,768
 509243c:	10006d26 	beq	r2,zero,50925f4 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 5092440:	e0bffc17 	ldw	r2,-16(fp)
 5092444:	1080400c 	andi	r2,r2,256
 5092448:	10003526 	beq	r2,zero,5092520 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 509244c:	00800074 	movhi	r2,1
 5092450:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5092454:	e0bffa17 	ldw	r2,-24(fp)
 5092458:	10800a17 	ldw	r2,40(r2)
 509245c:	10800044 	addi	r2,r2,1
 5092460:	1081ffcc 	andi	r2,r2,2047
 5092464:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 5092468:	e0bffa17 	ldw	r2,-24(fp)
 509246c:	10c00b17 	ldw	r3,44(r2)
 5092470:	e0bffd17 	ldw	r2,-12(fp)
 5092474:	18801526 	beq	r3,r2,50924cc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5092478:	e0bffb17 	ldw	r2,-20(fp)
 509247c:	10800037 	ldwio	r2,0(r2)
 5092480:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 5092484:	e0bff817 	ldw	r2,-32(fp)
 5092488:	10a0000c 	andi	r2,r2,32768
 509248c:	10001126 	beq	r2,zero,50924d4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5092490:	e0bffa17 	ldw	r2,-24(fp)
 5092494:	10800a17 	ldw	r2,40(r2)
 5092498:	e0fff817 	ldw	r3,-32(fp)
 509249c:	1809883a 	mov	r4,r3
 50924a0:	e0fffa17 	ldw	r3,-24(fp)
 50924a4:	1885883a 	add	r2,r3,r2
 50924a8:	10800e04 	addi	r2,r2,56
 50924ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50924b0:	e0bffa17 	ldw	r2,-24(fp)
 50924b4:	10800a17 	ldw	r2,40(r2)
 50924b8:	10800044 	addi	r2,r2,1
 50924bc:	10c1ffcc 	andi	r3,r2,2047
 50924c0:	e0bffa17 	ldw	r2,-24(fp)
 50924c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 50924c8:	003fe206 	br	5092454 <__alt_data_end+0xfffc4254>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 50924cc:	0001883a 	nop
 50924d0:	00000106 	br	50924d8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 50924d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 50924d8:	e0bff817 	ldw	r2,-32(fp)
 50924dc:	10bfffec 	andhi	r2,r2,65535
 50924e0:	10000f26 	beq	r2,zero,5092520 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 50924e4:	e0bffa17 	ldw	r2,-24(fp)
 50924e8:	10c00817 	ldw	r3,32(r2)
 50924ec:	00bfff84 	movi	r2,-2
 50924f0:	1886703a 	and	r3,r3,r2
 50924f4:	e0bffa17 	ldw	r2,-24(fp)
 50924f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 50924fc:	e0bffb17 	ldw	r2,-20(fp)
 5092500:	10800104 	addi	r2,r2,4
 5092504:	1007883a 	mov	r3,r2
 5092508:	e0bffa17 	ldw	r2,-24(fp)
 509250c:	10800817 	ldw	r2,32(r2)
 5092510:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5092514:	e0bffb17 	ldw	r2,-20(fp)
 5092518:	10800104 	addi	r2,r2,4
 509251c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 5092520:	e0bffc17 	ldw	r2,-16(fp)
 5092524:	1080800c 	andi	r2,r2,512
 5092528:	103fbe26 	beq	r2,zero,5092424 <__alt_data_end+0xfffc4224>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 509252c:	e0bffc17 	ldw	r2,-16(fp)
 5092530:	1004d43a 	srli	r2,r2,16
 5092534:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 5092538:	00001406 	br	509258c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 509253c:	e0bffb17 	ldw	r2,-20(fp)
 5092540:	e0fffa17 	ldw	r3,-24(fp)
 5092544:	18c00d17 	ldw	r3,52(r3)
 5092548:	e13ffa17 	ldw	r4,-24(fp)
 509254c:	20c7883a 	add	r3,r4,r3
 5092550:	18c20e04 	addi	r3,r3,2104
 5092554:	18c00003 	ldbu	r3,0(r3)
 5092558:	18c03fcc 	andi	r3,r3,255
 509255c:	18c0201c 	xori	r3,r3,128
 5092560:	18ffe004 	addi	r3,r3,-128
 5092564:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5092568:	e0bffa17 	ldw	r2,-24(fp)
 509256c:	10800d17 	ldw	r2,52(r2)
 5092570:	10800044 	addi	r2,r2,1
 5092574:	10c1ffcc 	andi	r3,r2,2047
 5092578:	e0bffa17 	ldw	r2,-24(fp)
 509257c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5092580:	e0bff917 	ldw	r2,-28(fp)
 5092584:	10bfffc4 	addi	r2,r2,-1
 5092588:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 509258c:	e0bff917 	ldw	r2,-28(fp)
 5092590:	10000526 	beq	r2,zero,50925a8 <altera_avalon_jtag_uart_irq+0x1ac>
 5092594:	e0bffa17 	ldw	r2,-24(fp)
 5092598:	10c00d17 	ldw	r3,52(r2)
 509259c:	e0bffa17 	ldw	r2,-24(fp)
 50925a0:	10800c17 	ldw	r2,48(r2)
 50925a4:	18bfe51e 	bne	r3,r2,509253c <__alt_data_end+0xfffc433c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 50925a8:	e0bff917 	ldw	r2,-28(fp)
 50925ac:	103f9d26 	beq	r2,zero,5092424 <__alt_data_end+0xfffc4224>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 50925b0:	e0bffa17 	ldw	r2,-24(fp)
 50925b4:	10c00817 	ldw	r3,32(r2)
 50925b8:	00bfff44 	movi	r2,-3
 50925bc:	1886703a 	and	r3,r3,r2
 50925c0:	e0bffa17 	ldw	r2,-24(fp)
 50925c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 50925c8:	e0bffa17 	ldw	r2,-24(fp)
 50925cc:	10800017 	ldw	r2,0(r2)
 50925d0:	10800104 	addi	r2,r2,4
 50925d4:	1007883a 	mov	r3,r2
 50925d8:	e0bffa17 	ldw	r2,-24(fp)
 50925dc:	10800817 	ldw	r2,32(r2)
 50925e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 50925e4:	e0bffb17 	ldw	r2,-20(fp)
 50925e8:	10800104 	addi	r2,r2,4
 50925ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 50925f0:	003f8c06 	br	5092424 <__alt_data_end+0xfffc4224>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 50925f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 50925f8:	0001883a 	nop
 50925fc:	e037883a 	mov	sp,fp
 5092600:	df000017 	ldw	fp,0(sp)
 5092604:	dec00104 	addi	sp,sp,4
 5092608:	f800283a 	ret

0509260c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 509260c:	defff804 	addi	sp,sp,-32
 5092610:	df000715 	stw	fp,28(sp)
 5092614:	df000704 	addi	fp,sp,28
 5092618:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 509261c:	e0bffb17 	ldw	r2,-20(fp)
 5092620:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 5092624:	e0bff917 	ldw	r2,-28(fp)
 5092628:	10800017 	ldw	r2,0(r2)
 509262c:	10800104 	addi	r2,r2,4
 5092630:	10800037 	ldwio	r2,0(r2)
 5092634:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 5092638:	e0bffa17 	ldw	r2,-24(fp)
 509263c:	1081000c 	andi	r2,r2,1024
 5092640:	10000b26 	beq	r2,zero,5092670 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 5092644:	e0bff917 	ldw	r2,-28(fp)
 5092648:	10800017 	ldw	r2,0(r2)
 509264c:	10800104 	addi	r2,r2,4
 5092650:	1007883a 	mov	r3,r2
 5092654:	e0bff917 	ldw	r2,-28(fp)
 5092658:	10800817 	ldw	r2,32(r2)
 509265c:	10810014 	ori	r2,r2,1024
 5092660:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 5092664:	e0bff917 	ldw	r2,-28(fp)
 5092668:	10000915 	stw	zero,36(r2)
 509266c:	00000a06 	br	5092698 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 5092670:	e0bff917 	ldw	r2,-28(fp)
 5092674:	10c00917 	ldw	r3,36(r2)
 5092678:	00a00034 	movhi	r2,32768
 509267c:	10bfff04 	addi	r2,r2,-4
 5092680:	10c00536 	bltu	r2,r3,5092698 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 5092684:	e0bff917 	ldw	r2,-28(fp)
 5092688:	10800917 	ldw	r2,36(r2)
 509268c:	10c00044 	addi	r3,r2,1
 5092690:	e0bff917 	ldw	r2,-28(fp)
 5092694:	10c00915 	stw	r3,36(r2)
 5092698:	00814274 	movhi	r2,1289
 509269c:	109f6304 	addi	r2,r2,32140
 50926a0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 50926a4:	e037883a 	mov	sp,fp
 50926a8:	df000017 	ldw	fp,0(sp)
 50926ac:	dec00104 	addi	sp,sp,4
 50926b0:	f800283a 	ret

050926b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 50926b4:	defffd04 	addi	sp,sp,-12
 50926b8:	df000215 	stw	fp,8(sp)
 50926bc:	df000204 	addi	fp,sp,8
 50926c0:	e13ffe15 	stw	r4,-8(fp)
 50926c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 50926c8:	00000506 	br	50926e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 50926cc:	e0bfff17 	ldw	r2,-4(fp)
 50926d0:	1090000c 	andi	r2,r2,16384
 50926d4:	10000226 	beq	r2,zero,50926e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 50926d8:	00bffd44 	movi	r2,-11
 50926dc:	00000b06 	br	509270c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 50926e0:	e0bffe17 	ldw	r2,-8(fp)
 50926e4:	10c00d17 	ldw	r3,52(r2)
 50926e8:	e0bffe17 	ldw	r2,-8(fp)
 50926ec:	10800c17 	ldw	r2,48(r2)
 50926f0:	18800526 	beq	r3,r2,5092708 <altera_avalon_jtag_uart_close+0x54>
 50926f4:	e0bffe17 	ldw	r2,-8(fp)
 50926f8:	10c00917 	ldw	r3,36(r2)
 50926fc:	e0bffe17 	ldw	r2,-8(fp)
 5092700:	10800117 	ldw	r2,4(r2)
 5092704:	18bff136 	bltu	r3,r2,50926cc <__alt_data_end+0xfffc44cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 5092708:	0005883a 	mov	r2,zero
}
 509270c:	e037883a 	mov	sp,fp
 5092710:	df000017 	ldw	fp,0(sp)
 5092714:	dec00104 	addi	sp,sp,4
 5092718:	f800283a 	ret

0509271c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 509271c:	defffa04 	addi	sp,sp,-24
 5092720:	df000515 	stw	fp,20(sp)
 5092724:	df000504 	addi	fp,sp,20
 5092728:	e13ffd15 	stw	r4,-12(fp)
 509272c:	e17ffe15 	stw	r5,-8(fp)
 5092730:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 5092734:	00bff9c4 	movi	r2,-25
 5092738:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 509273c:	e0bffe17 	ldw	r2,-8(fp)
 5092740:	10da8060 	cmpeqi	r3,r2,27137
 5092744:	1800031e 	bne	r3,zero,5092754 <altera_avalon_jtag_uart_ioctl+0x38>
 5092748:	109a80a0 	cmpeqi	r2,r2,27138
 509274c:	1000181e 	bne	r2,zero,50927b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 5092750:	00002906 	br	50927f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 5092754:	e0bffd17 	ldw	r2,-12(fp)
 5092758:	10c00117 	ldw	r3,4(r2)
 509275c:	00a00034 	movhi	r2,32768
 5092760:	10bfffc4 	addi	r2,r2,-1
 5092764:	18802126 	beq	r3,r2,50927ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 5092768:	e0bfff17 	ldw	r2,-4(fp)
 509276c:	10800017 	ldw	r2,0(r2)
 5092770:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 5092774:	e0bffc17 	ldw	r2,-16(fp)
 5092778:	10800090 	cmplti	r2,r2,2
 509277c:	1000061e 	bne	r2,zero,5092798 <altera_avalon_jtag_uart_ioctl+0x7c>
 5092780:	e0fffc17 	ldw	r3,-16(fp)
 5092784:	00a00034 	movhi	r2,32768
 5092788:	10bfffc4 	addi	r2,r2,-1
 509278c:	18800226 	beq	r3,r2,5092798 <altera_avalon_jtag_uart_ioctl+0x7c>
 5092790:	e0bffc17 	ldw	r2,-16(fp)
 5092794:	00000206 	br	50927a0 <altera_avalon_jtag_uart_ioctl+0x84>
 5092798:	00a00034 	movhi	r2,32768
 509279c:	10bfff84 	addi	r2,r2,-2
 50927a0:	e0fffd17 	ldw	r3,-12(fp)
 50927a4:	18800115 	stw	r2,4(r3)
      rc = 0;
 50927a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 50927ac:	00000f06 	br	50927ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 50927b0:	e0bffd17 	ldw	r2,-12(fp)
 50927b4:	10c00117 	ldw	r3,4(r2)
 50927b8:	00a00034 	movhi	r2,32768
 50927bc:	10bfffc4 	addi	r2,r2,-1
 50927c0:	18800c26 	beq	r3,r2,50927f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 50927c4:	e0bffd17 	ldw	r2,-12(fp)
 50927c8:	10c00917 	ldw	r3,36(r2)
 50927cc:	e0bffd17 	ldw	r2,-12(fp)
 50927d0:	10800117 	ldw	r2,4(r2)
 50927d4:	1885803a 	cmpltu	r2,r3,r2
 50927d8:	10c03fcc 	andi	r3,r2,255
 50927dc:	e0bfff17 	ldw	r2,-4(fp)
 50927e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 50927e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 50927e8:	00000206 	br	50927f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 50927ec:	0001883a 	nop
 50927f0:	00000106 	br	50927f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 50927f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 50927f8:	e0bffb17 	ldw	r2,-20(fp)
}
 50927fc:	e037883a 	mov	sp,fp
 5092800:	df000017 	ldw	fp,0(sp)
 5092804:	dec00104 	addi	sp,sp,4
 5092808:	f800283a 	ret

0509280c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 509280c:	defff304 	addi	sp,sp,-52
 5092810:	dfc00c15 	stw	ra,48(sp)
 5092814:	df000b15 	stw	fp,44(sp)
 5092818:	df000b04 	addi	fp,sp,44
 509281c:	e13ffc15 	stw	r4,-16(fp)
 5092820:	e17ffd15 	stw	r5,-12(fp)
 5092824:	e1bffe15 	stw	r6,-8(fp)
 5092828:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 509282c:	e0bffd17 	ldw	r2,-12(fp)
 5092830:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5092834:	00004706 	br	5092954 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 5092838:	e0bffc17 	ldw	r2,-16(fp)
 509283c:	10800a17 	ldw	r2,40(r2)
 5092840:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 5092844:	e0bffc17 	ldw	r2,-16(fp)
 5092848:	10800b17 	ldw	r2,44(r2)
 509284c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 5092850:	e0fff717 	ldw	r3,-36(fp)
 5092854:	e0bff817 	ldw	r2,-32(fp)
 5092858:	18800536 	bltu	r3,r2,5092870 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 509285c:	e0fff717 	ldw	r3,-36(fp)
 5092860:	e0bff817 	ldw	r2,-32(fp)
 5092864:	1885c83a 	sub	r2,r3,r2
 5092868:	e0bff615 	stw	r2,-40(fp)
 509286c:	00000406 	br	5092880 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 5092870:	00c20004 	movi	r3,2048
 5092874:	e0bff817 	ldw	r2,-32(fp)
 5092878:	1885c83a 	sub	r2,r3,r2
 509287c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 5092880:	e0bff617 	ldw	r2,-40(fp)
 5092884:	10001e26 	beq	r2,zero,5092900 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 5092888:	e0fffe17 	ldw	r3,-8(fp)
 509288c:	e0bff617 	ldw	r2,-40(fp)
 5092890:	1880022e 	bgeu	r3,r2,509289c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 5092894:	e0bffe17 	ldw	r2,-8(fp)
 5092898:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 509289c:	e0bffc17 	ldw	r2,-16(fp)
 50928a0:	10c00e04 	addi	r3,r2,56
 50928a4:	e0bff817 	ldw	r2,-32(fp)
 50928a8:	1885883a 	add	r2,r3,r2
 50928ac:	e1bff617 	ldw	r6,-40(fp)
 50928b0:	100b883a 	mov	r5,r2
 50928b4:	e13ff517 	ldw	r4,-44(fp)
 50928b8:	508cd8c0 	call	508cd8c <memcpy>
      ptr   += n;
 50928bc:	e0fff517 	ldw	r3,-44(fp)
 50928c0:	e0bff617 	ldw	r2,-40(fp)
 50928c4:	1885883a 	add	r2,r3,r2
 50928c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 50928cc:	e0fffe17 	ldw	r3,-8(fp)
 50928d0:	e0bff617 	ldw	r2,-40(fp)
 50928d4:	1885c83a 	sub	r2,r3,r2
 50928d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50928dc:	e0fff817 	ldw	r3,-32(fp)
 50928e0:	e0bff617 	ldw	r2,-40(fp)
 50928e4:	1885883a 	add	r2,r3,r2
 50928e8:	10c1ffcc 	andi	r3,r2,2047
 50928ec:	e0bffc17 	ldw	r2,-16(fp)
 50928f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 50928f4:	e0bffe17 	ldw	r2,-8(fp)
 50928f8:	00bfcf16 	blt	zero,r2,5092838 <__alt_data_end+0xfffc4638>
 50928fc:	00000106 	br	5092904 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 5092900:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 5092904:	e0fff517 	ldw	r3,-44(fp)
 5092908:	e0bffd17 	ldw	r2,-12(fp)
 509290c:	1880141e 	bne	r3,r2,5092960 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 5092910:	e0bfff17 	ldw	r2,-4(fp)
 5092914:	1090000c 	andi	r2,r2,16384
 5092918:	1000131e 	bne	r2,zero,5092968 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 509291c:	0001883a 	nop
 5092920:	e0bffc17 	ldw	r2,-16(fp)
 5092924:	10c00a17 	ldw	r3,40(r2)
 5092928:	e0bff717 	ldw	r2,-36(fp)
 509292c:	1880051e 	bne	r3,r2,5092944 <altera_avalon_jtag_uart_read+0x138>
 5092930:	e0bffc17 	ldw	r2,-16(fp)
 5092934:	10c00917 	ldw	r3,36(r2)
 5092938:	e0bffc17 	ldw	r2,-16(fp)
 509293c:	10800117 	ldw	r2,4(r2)
 5092940:	18bff736 	bltu	r3,r2,5092920 <__alt_data_end+0xfffc4720>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 5092944:	e0bffc17 	ldw	r2,-16(fp)
 5092948:	10c00a17 	ldw	r3,40(r2)
 509294c:	e0bff717 	ldw	r2,-36(fp)
 5092950:	18800726 	beq	r3,r2,5092970 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5092954:	e0bffe17 	ldw	r2,-8(fp)
 5092958:	00bfb716 	blt	zero,r2,5092838 <__alt_data_end+0xfffc4638>
 509295c:	00000506 	br	5092974 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 5092960:	0001883a 	nop
 5092964:	00000306 	br	5092974 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 5092968:	0001883a 	nop
 509296c:	00000106 	br	5092974 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 5092970:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 5092974:	e0fff517 	ldw	r3,-44(fp)
 5092978:	e0bffd17 	ldw	r2,-12(fp)
 509297c:	18801826 	beq	r3,r2,50929e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5092980:	0005303a 	rdctl	r2,status
 5092984:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5092988:	e0fffb17 	ldw	r3,-20(fp)
 509298c:	00bfff84 	movi	r2,-2
 5092990:	1884703a 	and	r2,r3,r2
 5092994:	1001703a 	wrctl	status,r2
  
  return context;
 5092998:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 509299c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 50929a0:	e0bffc17 	ldw	r2,-16(fp)
 50929a4:	10800817 	ldw	r2,32(r2)
 50929a8:	10c00054 	ori	r3,r2,1
 50929ac:	e0bffc17 	ldw	r2,-16(fp)
 50929b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 50929b4:	e0bffc17 	ldw	r2,-16(fp)
 50929b8:	10800017 	ldw	r2,0(r2)
 50929bc:	10800104 	addi	r2,r2,4
 50929c0:	1007883a 	mov	r3,r2
 50929c4:	e0bffc17 	ldw	r2,-16(fp)
 50929c8:	10800817 	ldw	r2,32(r2)
 50929cc:	18800035 	stwio	r2,0(r3)
 50929d0:	e0bffa17 	ldw	r2,-24(fp)
 50929d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50929d8:	e0bff917 	ldw	r2,-28(fp)
 50929dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 50929e0:	e0fff517 	ldw	r3,-44(fp)
 50929e4:	e0bffd17 	ldw	r2,-12(fp)
 50929e8:	18800426 	beq	r3,r2,50929fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 50929ec:	e0fff517 	ldw	r3,-44(fp)
 50929f0:	e0bffd17 	ldw	r2,-12(fp)
 50929f4:	1885c83a 	sub	r2,r3,r2
 50929f8:	00000606 	br	5092a14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 50929fc:	e0bfff17 	ldw	r2,-4(fp)
 5092a00:	1090000c 	andi	r2,r2,16384
 5092a04:	10000226 	beq	r2,zero,5092a10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 5092a08:	00bffd44 	movi	r2,-11
 5092a0c:	00000106 	br	5092a14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 5092a10:	00bffec4 	movi	r2,-5
}
 5092a14:	e037883a 	mov	sp,fp
 5092a18:	dfc00117 	ldw	ra,4(sp)
 5092a1c:	df000017 	ldw	fp,0(sp)
 5092a20:	dec00204 	addi	sp,sp,8
 5092a24:	f800283a 	ret

05092a28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 5092a28:	defff304 	addi	sp,sp,-52
 5092a2c:	dfc00c15 	stw	ra,48(sp)
 5092a30:	df000b15 	stw	fp,44(sp)
 5092a34:	df000b04 	addi	fp,sp,44
 5092a38:	e13ffc15 	stw	r4,-16(fp)
 5092a3c:	e17ffd15 	stw	r5,-12(fp)
 5092a40:	e1bffe15 	stw	r6,-8(fp)
 5092a44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 5092a48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 5092a4c:	e0bffd17 	ldw	r2,-12(fp)
 5092a50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5092a54:	00003706 	br	5092b34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 5092a58:	e0bffc17 	ldw	r2,-16(fp)
 5092a5c:	10800c17 	ldw	r2,48(r2)
 5092a60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 5092a64:	e0bffc17 	ldw	r2,-16(fp)
 5092a68:	10800d17 	ldw	r2,52(r2)
 5092a6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 5092a70:	e0fff917 	ldw	r3,-28(fp)
 5092a74:	e0bff517 	ldw	r2,-44(fp)
 5092a78:	1880062e 	bgeu	r3,r2,5092a94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 5092a7c:	e0fff517 	ldw	r3,-44(fp)
 5092a80:	e0bff917 	ldw	r2,-28(fp)
 5092a84:	1885c83a 	sub	r2,r3,r2
 5092a88:	10bfffc4 	addi	r2,r2,-1
 5092a8c:	e0bff615 	stw	r2,-40(fp)
 5092a90:	00000b06 	br	5092ac0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 5092a94:	e0bff517 	ldw	r2,-44(fp)
 5092a98:	10000526 	beq	r2,zero,5092ab0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 5092a9c:	00c20004 	movi	r3,2048
 5092aa0:	e0bff917 	ldw	r2,-28(fp)
 5092aa4:	1885c83a 	sub	r2,r3,r2
 5092aa8:	e0bff615 	stw	r2,-40(fp)
 5092aac:	00000406 	br	5092ac0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 5092ab0:	00c1ffc4 	movi	r3,2047
 5092ab4:	e0bff917 	ldw	r2,-28(fp)
 5092ab8:	1885c83a 	sub	r2,r3,r2
 5092abc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 5092ac0:	e0bff617 	ldw	r2,-40(fp)
 5092ac4:	10001e26 	beq	r2,zero,5092b40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 5092ac8:	e0fffe17 	ldw	r3,-8(fp)
 5092acc:	e0bff617 	ldw	r2,-40(fp)
 5092ad0:	1880022e 	bgeu	r3,r2,5092adc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 5092ad4:	e0bffe17 	ldw	r2,-8(fp)
 5092ad8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 5092adc:	e0bffc17 	ldw	r2,-16(fp)
 5092ae0:	10c20e04 	addi	r3,r2,2104
 5092ae4:	e0bff917 	ldw	r2,-28(fp)
 5092ae8:	1885883a 	add	r2,r3,r2
 5092aec:	e1bff617 	ldw	r6,-40(fp)
 5092af0:	e17ffd17 	ldw	r5,-12(fp)
 5092af4:	1009883a 	mov	r4,r2
 5092af8:	508cd8c0 	call	508cd8c <memcpy>
      ptr   += n;
 5092afc:	e0fffd17 	ldw	r3,-12(fp)
 5092b00:	e0bff617 	ldw	r2,-40(fp)
 5092b04:	1885883a 	add	r2,r3,r2
 5092b08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 5092b0c:	e0fffe17 	ldw	r3,-8(fp)
 5092b10:	e0bff617 	ldw	r2,-40(fp)
 5092b14:	1885c83a 	sub	r2,r3,r2
 5092b18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5092b1c:	e0fff917 	ldw	r3,-28(fp)
 5092b20:	e0bff617 	ldw	r2,-40(fp)
 5092b24:	1885883a 	add	r2,r3,r2
 5092b28:	10c1ffcc 	andi	r3,r2,2047
 5092b2c:	e0bffc17 	ldw	r2,-16(fp)
 5092b30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5092b34:	e0bffe17 	ldw	r2,-8(fp)
 5092b38:	00bfc716 	blt	zero,r2,5092a58 <__alt_data_end+0xfffc4858>
 5092b3c:	00000106 	br	5092b44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 5092b40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5092b44:	0005303a 	rdctl	r2,status
 5092b48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5092b4c:	e0fffb17 	ldw	r3,-20(fp)
 5092b50:	00bfff84 	movi	r2,-2
 5092b54:	1884703a 	and	r2,r3,r2
 5092b58:	1001703a 	wrctl	status,r2
  
  return context;
 5092b5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 5092b60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5092b64:	e0bffc17 	ldw	r2,-16(fp)
 5092b68:	10800817 	ldw	r2,32(r2)
 5092b6c:	10c00094 	ori	r3,r2,2
 5092b70:	e0bffc17 	ldw	r2,-16(fp)
 5092b74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5092b78:	e0bffc17 	ldw	r2,-16(fp)
 5092b7c:	10800017 	ldw	r2,0(r2)
 5092b80:	10800104 	addi	r2,r2,4
 5092b84:	1007883a 	mov	r3,r2
 5092b88:	e0bffc17 	ldw	r2,-16(fp)
 5092b8c:	10800817 	ldw	r2,32(r2)
 5092b90:	18800035 	stwio	r2,0(r3)
 5092b94:	e0bffa17 	ldw	r2,-24(fp)
 5092b98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5092b9c:	e0bff817 	ldw	r2,-32(fp)
 5092ba0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 5092ba4:	e0bffe17 	ldw	r2,-8(fp)
 5092ba8:	0080100e 	bge	zero,r2,5092bec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 5092bac:	e0bfff17 	ldw	r2,-4(fp)
 5092bb0:	1090000c 	andi	r2,r2,16384
 5092bb4:	1000101e 	bne	r2,zero,5092bf8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 5092bb8:	0001883a 	nop
 5092bbc:	e0bffc17 	ldw	r2,-16(fp)
 5092bc0:	10c00d17 	ldw	r3,52(r2)
 5092bc4:	e0bff517 	ldw	r2,-44(fp)
 5092bc8:	1880051e 	bne	r3,r2,5092be0 <altera_avalon_jtag_uart_write+0x1b8>
 5092bcc:	e0bffc17 	ldw	r2,-16(fp)
 5092bd0:	10c00917 	ldw	r3,36(r2)
 5092bd4:	e0bffc17 	ldw	r2,-16(fp)
 5092bd8:	10800117 	ldw	r2,4(r2)
 5092bdc:	18bff736 	bltu	r3,r2,5092bbc <__alt_data_end+0xfffc49bc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 5092be0:	e0bffc17 	ldw	r2,-16(fp)
 5092be4:	10800917 	ldw	r2,36(r2)
 5092be8:	1000051e 	bne	r2,zero,5092c00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 5092bec:	e0bffe17 	ldw	r2,-8(fp)
 5092bf0:	00bfd016 	blt	zero,r2,5092b34 <__alt_data_end+0xfffc4934>
 5092bf4:	00000306 	br	5092c04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 5092bf8:	0001883a 	nop
 5092bfc:	00000106 	br	5092c04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 5092c00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 5092c04:	e0fffd17 	ldw	r3,-12(fp)
 5092c08:	e0bff717 	ldw	r2,-36(fp)
 5092c0c:	18800426 	beq	r3,r2,5092c20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 5092c10:	e0fffd17 	ldw	r3,-12(fp)
 5092c14:	e0bff717 	ldw	r2,-36(fp)
 5092c18:	1885c83a 	sub	r2,r3,r2
 5092c1c:	00000606 	br	5092c38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 5092c20:	e0bfff17 	ldw	r2,-4(fp)
 5092c24:	1090000c 	andi	r2,r2,16384
 5092c28:	10000226 	beq	r2,zero,5092c34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 5092c2c:	00bffd44 	movi	r2,-11
 5092c30:	00000106 	br	5092c38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 5092c34:	00bffec4 	movi	r2,-5
}
 5092c38:	e037883a 	mov	sp,fp
 5092c3c:	dfc00117 	ldw	ra,4(sp)
 5092c40:	df000017 	ldw	fp,0(sp)
 5092c44:	dec00204 	addi	sp,sp,8
 5092c48:	f800283a 	ret

05092c4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 5092c4c:	defff904 	addi	sp,sp,-28
 5092c50:	dfc00615 	stw	ra,24(sp)
 5092c54:	df000515 	stw	fp,20(sp)
 5092c58:	df000504 	addi	fp,sp,20
 5092c5c:	e13ffe15 	stw	r4,-8(fp)
 5092c60:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 5092c64:	0007883a 	mov	r3,zero
 5092c68:	e0bffe17 	ldw	r2,-8(fp)
 5092c6c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 5092c70:	e0bffe17 	ldw	r2,-8(fp)
 5092c74:	10800104 	addi	r2,r2,4
 5092c78:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5092c7c:	0005303a 	rdctl	r2,status
 5092c80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5092c84:	e0fffc17 	ldw	r3,-16(fp)
 5092c88:	00bfff84 	movi	r2,-2
 5092c8c:	1884703a 	and	r2,r3,r2
 5092c90:	1001703a 	wrctl	status,r2
  
  return context;
 5092c94:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 5092c98:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 5092c9c:	5093a880 	call	5093a88 <alt_tick>
 5092ca0:	e0bffb17 	ldw	r2,-20(fp)
 5092ca4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5092ca8:	e0bffd17 	ldw	r2,-12(fp)
 5092cac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 5092cb0:	0001883a 	nop
 5092cb4:	e037883a 	mov	sp,fp
 5092cb8:	dfc00117 	ldw	ra,4(sp)
 5092cbc:	df000017 	ldw	fp,0(sp)
 5092cc0:	dec00204 	addi	sp,sp,8
 5092cc4:	f800283a 	ret

05092cc8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 5092cc8:	defff904 	addi	sp,sp,-28
 5092ccc:	dfc00615 	stw	ra,24(sp)
 5092cd0:	df000515 	stw	fp,20(sp)
 5092cd4:	df000504 	addi	fp,sp,20
 5092cd8:	e13ffc15 	stw	r4,-16(fp)
 5092cdc:	e17ffd15 	stw	r5,-12(fp)
 5092ce0:	e1bffe15 	stw	r6,-8(fp)
 5092ce4:	e1ffff15 	stw	r7,-4(fp)
 5092ce8:	e0bfff17 	ldw	r2,-4(fp)
 5092cec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 5092cf0:	00814274 	movhi	r2,1289
 5092cf4:	109f6304 	addi	r2,r2,32140
 5092cf8:	10800017 	ldw	r2,0(r2)
 5092cfc:	1000041e 	bne	r2,zero,5092d10 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 5092d00:	00814274 	movhi	r2,1289
 5092d04:	109f6304 	addi	r2,r2,32140
 5092d08:	e0fffb17 	ldw	r3,-20(fp)
 5092d0c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 5092d10:	e0bffc17 	ldw	r2,-16(fp)
 5092d14:	10800104 	addi	r2,r2,4
 5092d18:	00c001c4 	movi	r3,7
 5092d1c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 5092d20:	01814274 	movhi	r6,1289
 5092d24:	318b1304 	addi	r6,r6,11340
 5092d28:	e17ffc17 	ldw	r5,-16(fp)
 5092d2c:	e13ffe17 	ldw	r4,-8(fp)
 5092d30:	50917ac0 	call	50917ac <alt_irq_register>
#endif  
}
 5092d34:	0001883a 	nop
 5092d38:	e037883a 	mov	sp,fp
 5092d3c:	dfc00117 	ldw	ra,4(sp)
 5092d40:	df000017 	ldw	fp,0(sp)
 5092d44:	dec00204 	addi	sp,sp,8
 5092d48:	f800283a 	ret

05092d4c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 5092d4c:	defffd04 	addi	sp,sp,-12
 5092d50:	df000215 	stw	fp,8(sp)
 5092d54:	df000204 	addi	fp,sp,8
 5092d58:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 5092d5c:	e0bfff17 	ldw	r2,-4(fp)
 5092d60:	10800a17 	ldw	r2,40(r2)
 5092d64:	10800104 	addi	r2,r2,4
 5092d68:	10800037 	ldwio	r2,0(r2)
 5092d6c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 5092d70:	e0bffe17 	ldw	r2,-8(fp)
 5092d74:	10800054 	ori	r2,r2,1
 5092d78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 5092d7c:	e0bfff17 	ldw	r2,-4(fp)
 5092d80:	10800a17 	ldw	r2,40(r2)
 5092d84:	10800104 	addi	r2,r2,4
 5092d88:	1007883a 	mov	r3,r2
 5092d8c:	e0bffe17 	ldw	r2,-8(fp)
 5092d90:	18800035 	stwio	r2,0(r3)
}
 5092d94:	0001883a 	nop
 5092d98:	e037883a 	mov	sp,fp
 5092d9c:	df000017 	ldw	fp,0(sp)
 5092da0:	dec00104 	addi	sp,sp,4
 5092da4:	f800283a 	ret

05092da8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 5092da8:	defffd04 	addi	sp,sp,-12
 5092dac:	df000215 	stw	fp,8(sp)
 5092db0:	df000204 	addi	fp,sp,8
 5092db4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 5092db8:	e0bfff17 	ldw	r2,-4(fp)
 5092dbc:	10800a17 	ldw	r2,40(r2)
 5092dc0:	10800104 	addi	r2,r2,4
 5092dc4:	10800037 	ldwio	r2,0(r2)
 5092dc8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 5092dcc:	e0fffe17 	ldw	r3,-8(fp)
 5092dd0:	00bfff84 	movi	r2,-2
 5092dd4:	1884703a 	and	r2,r3,r2
 5092dd8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 5092ddc:	e0bfff17 	ldw	r2,-4(fp)
 5092de0:	10800a17 	ldw	r2,40(r2)
 5092de4:	10800104 	addi	r2,r2,4
 5092de8:	1007883a 	mov	r3,r2
 5092dec:	e0bffe17 	ldw	r2,-8(fp)
 5092df0:	18800035 	stwio	r2,0(r3)
}
 5092df4:	0001883a 	nop
 5092df8:	e037883a 	mov	sp,fp
 5092dfc:	df000017 	ldw	fp,0(sp)
 5092e00:	dec00104 	addi	sp,sp,4
 5092e04:	f800283a 	ret

05092e08 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 5092e08:	defffd04 	addi	sp,sp,-12
 5092e0c:	df000215 	stw	fp,8(sp)
 5092e10:	df000204 	addi	fp,sp,8
 5092e14:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 5092e18:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 5092e1c:	e0bfff17 	ldw	r2,-4(fp)
 5092e20:	10800a17 	ldw	r2,40(r2)
 5092e24:	10800084 	addi	r2,r2,2
 5092e28:	1080002b 	ldhuio	r2,0(r2)
 5092e2c:	10bfffcc 	andi	r2,r2,65535
 5092e30:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 5092e34:	e0bffe0b 	ldhu	r2,-8(fp)
}
 5092e38:	e037883a 	mov	sp,fp
 5092e3c:	df000017 	ldw	fp,0(sp)
 5092e40:	dec00104 	addi	sp,sp,4
 5092e44:	f800283a 	ret

05092e48 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 5092e48:	defffd04 	addi	sp,sp,-12
 5092e4c:	df000215 	stw	fp,8(sp)
 5092e50:	df000204 	addi	fp,sp,8
 5092e54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 5092e58:	e0bfff17 	ldw	r2,-4(fp)
 5092e5c:	10800a17 	ldw	r2,40(r2)
 5092e60:	10800104 	addi	r2,r2,4
 5092e64:	10800037 	ldwio	r2,0(r2)
 5092e68:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 5092e6c:	e0bffe17 	ldw	r2,-8(fp)
 5092e70:	1004d43a 	srli	r2,r2,16
}
 5092e74:	e037883a 	mov	sp,fp
 5092e78:	df000017 	ldw	fp,0(sp)
 5092e7c:	dec00104 	addi	sp,sp,4
 5092e80:	f800283a 	ret

05092e84 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 5092e84:	defffd04 	addi	sp,sp,-12
 5092e88:	df000215 	stw	fp,8(sp)
 5092e8c:	df000204 	addi	fp,sp,8
 5092e90:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 5092e94:	e0bfff17 	ldw	r2,-4(fp)
 5092e98:	1080800c 	andi	r2,r2,512
 5092e9c:	1004d27a 	srli	r2,r2,9
 5092ea0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 5092ea4:	e0bffe17 	ldw	r2,-8(fp)
 5092ea8:	10000226 	beq	r2,zero,5092eb4 <alt_up_rs232_check_parity+0x30>
 5092eac:	00bfffc4 	movi	r2,-1
 5092eb0:	00000106 	br	5092eb8 <alt_up_rs232_check_parity+0x34>
 5092eb4:	0005883a 	mov	r2,zero
}
 5092eb8:	e037883a 	mov	sp,fp
 5092ebc:	df000017 	ldw	fp,0(sp)
 5092ec0:	dec00104 	addi	sp,sp,4
 5092ec4:	f800283a 	ret

05092ec8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 5092ec8:	defffd04 	addi	sp,sp,-12
 5092ecc:	df000215 	stw	fp,8(sp)
 5092ed0:	df000204 	addi	fp,sp,8
 5092ed4:	e13ffe15 	stw	r4,-8(fp)
 5092ed8:	2805883a 	mov	r2,r5
 5092edc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 5092ee0:	e0bffe17 	ldw	r2,-8(fp)
 5092ee4:	10800a17 	ldw	r2,40(r2)
 5092ee8:	1007883a 	mov	r3,r2
 5092eec:	e0bfff03 	ldbu	r2,-4(fp)
 5092ef0:	18800035 	stwio	r2,0(r3)
	return 0;
 5092ef4:	0005883a 	mov	r2,zero
}
 5092ef8:	e037883a 	mov	sp,fp
 5092efc:	df000017 	ldw	fp,0(sp)
 5092f00:	dec00104 	addi	sp,sp,4
 5092f04:	f800283a 	ret

05092f08 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 5092f08:	defffa04 	addi	sp,sp,-24
 5092f0c:	dfc00515 	stw	ra,20(sp)
 5092f10:	df000415 	stw	fp,16(sp)
 5092f14:	df000404 	addi	fp,sp,16
 5092f18:	e13ffd15 	stw	r4,-12(fp)
 5092f1c:	e17ffe15 	stw	r5,-8(fp)
 5092f20:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 5092f24:	e0bffd17 	ldw	r2,-12(fp)
 5092f28:	10800a17 	ldw	r2,40(r2)
 5092f2c:	10800037 	ldwio	r2,0(r2)
 5092f30:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 5092f34:	e0bffc17 	ldw	r2,-16(fp)
 5092f38:	1007883a 	mov	r3,r2
 5092f3c:	e0bffe17 	ldw	r2,-8(fp)
 5092f40:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 5092f44:	e13ffc17 	ldw	r4,-16(fp)
 5092f48:	5092e840 	call	5092e84 <alt_up_rs232_check_parity>
 5092f4c:	1007883a 	mov	r3,r2
 5092f50:	e0bfff17 	ldw	r2,-4(fp)
 5092f54:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 5092f58:	e0bffc17 	ldw	r2,-16(fp)
 5092f5c:	10a0000c 	andi	r2,r2,32768
 5092f60:	1004d3fa 	srli	r2,r2,15
 5092f64:	10bfffc4 	addi	r2,r2,-1
}
 5092f68:	e037883a 	mov	sp,fp
 5092f6c:	dfc00117 	ldw	ra,4(sp)
 5092f70:	df000017 	ldw	fp,0(sp)
 5092f74:	dec00204 	addi	sp,sp,8
 5092f78:	f800283a 	ret

05092f7c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 5092f7c:	defff804 	addi	sp,sp,-32
 5092f80:	dfc00715 	stw	ra,28(sp)
 5092f84:	df000615 	stw	fp,24(sp)
 5092f88:	df000604 	addi	fp,sp,24
 5092f8c:	e13ffd15 	stw	r4,-12(fp)
 5092f90:	e17ffe15 	stw	r5,-8(fp)
 5092f94:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 5092f98:	e0bffd17 	ldw	r2,-12(fp)
 5092f9c:	10800017 	ldw	r2,0(r2)
 5092fa0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 5092fa4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 5092fa8:	00000c06 	br	5092fdc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 5092fac:	e0bffe17 	ldw	r2,-8(fp)
 5092fb0:	10c00044 	addi	r3,r2,1
 5092fb4:	e0fffe15 	stw	r3,-8(fp)
 5092fb8:	e0fffc04 	addi	r3,fp,-16
 5092fbc:	180d883a 	mov	r6,r3
 5092fc0:	100b883a 	mov	r5,r2
 5092fc4:	e13ffb17 	ldw	r4,-20(fp)
 5092fc8:	5092f080 	call	5092f08 <alt_up_rs232_read_data>
 5092fcc:	1000081e 	bne	r2,zero,5092ff0 <alt_up_rs232_read_fd+0x74>
			count++;
 5092fd0:	e0bffa17 	ldw	r2,-24(fp)
 5092fd4:	10800044 	addi	r2,r2,1
 5092fd8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 5092fdc:	e0bfff17 	ldw	r2,-4(fp)
 5092fe0:	10ffffc4 	addi	r3,r2,-1
 5092fe4:	e0ffff15 	stw	r3,-4(fp)
 5092fe8:	103ff01e 	bne	r2,zero,5092fac <__alt_data_end+0xfffc4dac>
 5092fec:	00000106 	br	5092ff4 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
 5092ff0:	0001883a 	nop
	}
	return count;
 5092ff4:	e0bffa17 	ldw	r2,-24(fp)
}
 5092ff8:	e037883a 	mov	sp,fp
 5092ffc:	dfc00117 	ldw	ra,4(sp)
 5093000:	df000017 	ldw	fp,0(sp)
 5093004:	dec00204 	addi	sp,sp,8
 5093008:	f800283a 	ret

0509300c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 509300c:	defff904 	addi	sp,sp,-28
 5093010:	dfc00615 	stw	ra,24(sp)
 5093014:	df000515 	stw	fp,20(sp)
 5093018:	df000504 	addi	fp,sp,20
 509301c:	e13ffd15 	stw	r4,-12(fp)
 5093020:	e17ffe15 	stw	r5,-8(fp)
 5093024:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 5093028:	e0bffd17 	ldw	r2,-12(fp)
 509302c:	10800017 	ldw	r2,0(r2)
 5093030:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 5093034:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 5093038:	00000d06 	br	5093070 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 509303c:	e0bffe17 	ldw	r2,-8(fp)
 5093040:	10800003 	ldbu	r2,0(r2)
 5093044:	10803fcc 	andi	r2,r2,255
 5093048:	100b883a 	mov	r5,r2
 509304c:	e13ffc17 	ldw	r4,-16(fp)
 5093050:	5092ec80 	call	5092ec8 <alt_up_rs232_write_data>
 5093054:	10000b1e 	bne	r2,zero,5093084 <alt_up_rs232_write_fd+0x78>
		{
			count++;
 5093058:	e0bffb17 	ldw	r2,-20(fp)
 509305c:	10800044 	addi	r2,r2,1
 5093060:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 5093064:	e0bffe17 	ldw	r2,-8(fp)
 5093068:	10800044 	addi	r2,r2,1
 509306c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 5093070:	e0bfff17 	ldw	r2,-4(fp)
 5093074:	10ffffc4 	addi	r3,r2,-1
 5093078:	e0ffff15 	stw	r3,-4(fp)
 509307c:	103fef1e 	bne	r2,zero,509303c <__alt_data_end+0xfffc4e3c>
 5093080:	00000106 	br	5093088 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
 5093084:	0001883a 	nop
	}
	return count;
 5093088:	e0bffb17 	ldw	r2,-20(fp)
}
 509308c:	e037883a 	mov	sp,fp
 5093090:	dfc00117 	ldw	ra,4(sp)
 5093094:	df000017 	ldw	fp,0(sp)
 5093098:	dec00204 	addi	sp,sp,8
 509309c:	f800283a 	ret

050930a0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 50930a0:	defffc04 	addi	sp,sp,-16
 50930a4:	dfc00315 	stw	ra,12(sp)
 50930a8:	df000215 	stw	fp,8(sp)
 50930ac:	df000204 	addi	fp,sp,8
 50930b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 50930b4:	01414274 	movhi	r5,1289
 50930b8:	29586904 	addi	r5,r5,24996
 50930bc:	e13fff17 	ldw	r4,-4(fp)
 50930c0:	50935740 	call	5093574 <alt_find_dev>
 50930c4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 50930c8:	e0bffe17 	ldw	r2,-8(fp)
}
 50930cc:	e037883a 	mov	sp,fp
 50930d0:	dfc00117 	ldw	ra,4(sp)
 50930d4:	df000017 	ldw	fp,0(sp)
 50930d8:	dec00204 	addi	sp,sp,8
 50930dc:	f800283a 	ret

050930e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 50930e0:	defff504 	addi	sp,sp,-44
 50930e4:	df000a15 	stw	fp,40(sp)
 50930e8:	df000a04 	addi	fp,sp,40
 50930ec:	e13ffc15 	stw	r4,-16(fp)
 50930f0:	e17ffd15 	stw	r5,-12(fp)
 50930f4:	e1bffe15 	stw	r6,-8(fp)
 50930f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 50930fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5093100:	00814274 	movhi	r2,1289
 5093104:	109f6304 	addi	r2,r2,32140
 5093108:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 509310c:	10003f26 	beq	r2,zero,509320c <alt_alarm_start+0x12c>
  {
    if (alarm)
 5093110:	e0bffc17 	ldw	r2,-16(fp)
 5093114:	10003b26 	beq	r2,zero,5093204 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 5093118:	e0bffc17 	ldw	r2,-16(fp)
 509311c:	e0fffe17 	ldw	r3,-8(fp)
 5093120:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 5093124:	e0bffc17 	ldw	r2,-16(fp)
 5093128:	e0ffff17 	ldw	r3,-4(fp)
 509312c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093130:	0005303a 	rdctl	r2,status
 5093134:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5093138:	e0fff917 	ldw	r3,-28(fp)
 509313c:	00bfff84 	movi	r2,-2
 5093140:	1884703a 	and	r2,r3,r2
 5093144:	1001703a 	wrctl	status,r2
  
  return context;
 5093148:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 509314c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5093150:	00814274 	movhi	r2,1289
 5093154:	109f6404 	addi	r2,r2,32144
 5093158:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 509315c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 5093160:	e0fffd17 	ldw	r3,-12(fp)
 5093164:	e0bff617 	ldw	r2,-40(fp)
 5093168:	1885883a 	add	r2,r3,r2
 509316c:	10c00044 	addi	r3,r2,1
 5093170:	e0bffc17 	ldw	r2,-16(fp)
 5093174:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 5093178:	e0bffc17 	ldw	r2,-16(fp)
 509317c:	10c00217 	ldw	r3,8(r2)
 5093180:	e0bff617 	ldw	r2,-40(fp)
 5093184:	1880042e 	bgeu	r3,r2,5093198 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 5093188:	e0bffc17 	ldw	r2,-16(fp)
 509318c:	00c00044 	movi	r3,1
 5093190:	10c00405 	stb	r3,16(r2)
 5093194:	00000206 	br	50931a0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 5093198:	e0bffc17 	ldw	r2,-16(fp)
 509319c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 50931a0:	e0fffc17 	ldw	r3,-16(fp)
 50931a4:	00814274 	movhi	r2,1289
 50931a8:	10986f04 	addi	r2,r2,25020
 50931ac:	e0bffa15 	stw	r2,-24(fp)
 50931b0:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 50931b4:	e0bffb17 	ldw	r2,-20(fp)
 50931b8:	e0fffa17 	ldw	r3,-24(fp)
 50931bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 50931c0:	e0bffa17 	ldw	r2,-24(fp)
 50931c4:	10c00017 	ldw	r3,0(r2)
 50931c8:	e0bffb17 	ldw	r2,-20(fp)
 50931cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 50931d0:	e0bffa17 	ldw	r2,-24(fp)
 50931d4:	10800017 	ldw	r2,0(r2)
 50931d8:	e0fffb17 	ldw	r3,-20(fp)
 50931dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 50931e0:	e0bffa17 	ldw	r2,-24(fp)
 50931e4:	e0fffb17 	ldw	r3,-20(fp)
 50931e8:	10c00015 	stw	r3,0(r2)
 50931ec:	e0bff817 	ldw	r2,-32(fp)
 50931f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50931f4:	e0bff717 	ldw	r2,-36(fp)
 50931f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 50931fc:	0005883a 	mov	r2,zero
 5093200:	00000306 	br	5093210 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 5093204:	00bffa84 	movi	r2,-22
 5093208:	00000106 	br	5093210 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 509320c:	00bfde84 	movi	r2,-134
  }
}
 5093210:	e037883a 	mov	sp,fp
 5093214:	df000017 	ldw	fp,0(sp)
 5093218:	dec00104 	addi	sp,sp,4
 509321c:	f800283a 	ret

05093220 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 5093220:	defffa04 	addi	sp,sp,-24
 5093224:	dfc00515 	stw	ra,20(sp)
 5093228:	df000415 	stw	fp,16(sp)
 509322c:	df000404 	addi	fp,sp,16
 5093230:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 5093234:	008000c4 	movi	r2,3
 5093238:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 509323c:	e0fffd17 	ldw	r3,-12(fp)
 5093240:	008003f4 	movhi	r2,15
 5093244:	10909004 	addi	r2,r2,16960
 5093248:	1885383a 	mul	r2,r3,r2
 509324c:	100b883a 	mov	r5,r2
 5093250:	01017db4 	movhi	r4,1526
 5093254:	21384004 	addi	r4,r4,-7936
 5093258:	5084b000 	call	5084b00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 509325c:	100b883a 	mov	r5,r2
 5093260:	01200034 	movhi	r4,32768
 5093264:	213fffc4 	addi	r4,r4,-1
 5093268:	5084b000 	call	5084b00 <__udivsi3>
 509326c:	100b883a 	mov	r5,r2
 5093270:	e13fff17 	ldw	r4,-4(fp)
 5093274:	5084b000 	call	5084b00 <__udivsi3>
 5093278:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 509327c:	e0bffe17 	ldw	r2,-8(fp)
 5093280:	10002a26 	beq	r2,zero,509332c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 5093284:	e03ffc15 	stw	zero,-16(fp)
 5093288:	00001706 	br	50932e8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 509328c:	00a00034 	movhi	r2,32768
 5093290:	10bfffc4 	addi	r2,r2,-1
 5093294:	10bfffc4 	addi	r2,r2,-1
 5093298:	103ffe1e 	bne	r2,zero,5093294 <__alt_data_end+0xfffc5094>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 509329c:	e0fffd17 	ldw	r3,-12(fp)
 50932a0:	008003f4 	movhi	r2,15
 50932a4:	10909004 	addi	r2,r2,16960
 50932a8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 50932ac:	100b883a 	mov	r5,r2
 50932b0:	01017db4 	movhi	r4,1526
 50932b4:	21384004 	addi	r4,r4,-7936
 50932b8:	5084b000 	call	5084b00 <__udivsi3>
 50932bc:	100b883a 	mov	r5,r2
 50932c0:	01200034 	movhi	r4,32768
 50932c4:	213fffc4 	addi	r4,r4,-1
 50932c8:	5084b000 	call	5084b00 <__udivsi3>
 50932cc:	1007883a 	mov	r3,r2
 50932d0:	e0bfff17 	ldw	r2,-4(fp)
 50932d4:	10c5c83a 	sub	r2,r2,r3
 50932d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 50932dc:	e0bffc17 	ldw	r2,-16(fp)
 50932e0:	10800044 	addi	r2,r2,1
 50932e4:	e0bffc15 	stw	r2,-16(fp)
 50932e8:	e0fffc17 	ldw	r3,-16(fp)
 50932ec:	e0bffe17 	ldw	r2,-8(fp)
 50932f0:	18bfe616 	blt	r3,r2,509328c <__alt_data_end+0xfffc508c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 50932f4:	e0fffd17 	ldw	r3,-12(fp)
 50932f8:	008003f4 	movhi	r2,15
 50932fc:	10909004 	addi	r2,r2,16960
 5093300:	1885383a 	mul	r2,r3,r2
 5093304:	100b883a 	mov	r5,r2
 5093308:	01017db4 	movhi	r4,1526
 509330c:	21384004 	addi	r4,r4,-7936
 5093310:	5084b000 	call	5084b00 <__udivsi3>
 5093314:	1007883a 	mov	r3,r2
 5093318:	e0bfff17 	ldw	r2,-4(fp)
 509331c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5093320:	10bfffc4 	addi	r2,r2,-1
 5093324:	103ffe1e 	bne	r2,zero,5093320 <__alt_data_end+0xfffc5120>
 5093328:	00000d06 	br	5093360 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 509332c:	e0fffd17 	ldw	r3,-12(fp)
 5093330:	008003f4 	movhi	r2,15
 5093334:	10909004 	addi	r2,r2,16960
 5093338:	1885383a 	mul	r2,r3,r2
 509333c:	100b883a 	mov	r5,r2
 5093340:	01017db4 	movhi	r4,1526
 5093344:	21384004 	addi	r4,r4,-7936
 5093348:	5084b000 	call	5084b00 <__udivsi3>
 509334c:	1007883a 	mov	r3,r2
 5093350:	e0bfff17 	ldw	r2,-4(fp)
 5093354:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5093358:	10bfffc4 	addi	r2,r2,-1
 509335c:	00bffe16 	blt	zero,r2,5093358 <__alt_data_end+0xfffc5158>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 5093360:	0005883a 	mov	r2,zero
}
 5093364:	e037883a 	mov	sp,fp
 5093368:	dfc00117 	ldw	ra,4(sp)
 509336c:	df000017 	ldw	fp,0(sp)
 5093370:	dec00204 	addi	sp,sp,8
 5093374:	f800283a 	ret

05093378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 5093378:	defffe04 	addi	sp,sp,-8
 509337c:	df000115 	stw	fp,4(sp)
 5093380:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 5093384:	e03fff15 	stw	zero,-4(fp)
 5093388:	00000506 	br	50933a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 509338c:	e0bfff17 	ldw	r2,-4(fp)
 5093390:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 5093394:	e0bfff17 	ldw	r2,-4(fp)
 5093398:	10800804 	addi	r2,r2,32
 509339c:	e0bfff15 	stw	r2,-4(fp)
 50933a0:	e0bfff17 	ldw	r2,-4(fp)
 50933a4:	10820030 	cmpltui	r2,r2,2048
 50933a8:	103ff81e 	bne	r2,zero,509338c <__alt_data_end+0xfffc518c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 50933ac:	0001883a 	nop
 50933b0:	e037883a 	mov	sp,fp
 50933b4:	df000017 	ldw	fp,0(sp)
 50933b8:	dec00104 	addi	sp,sp,4
 50933bc:	f800283a 	ret

050933c0 <alt_get_errno>:
 50933c0:	defffe04 	addi	sp,sp,-8
 50933c4:	dfc00115 	stw	ra,4(sp)
 50933c8:	df000015 	stw	fp,0(sp)
 50933cc:	d839883a 	mov	fp,sp
 50933d0:	00814274 	movhi	r2,1289
 50933d4:	10986c04 	addi	r2,r2,25008
 50933d8:	10800017 	ldw	r2,0(r2)
 50933dc:	10000526 	beq	r2,zero,50933f4 <alt_get_errno+0x34>
 50933e0:	00814274 	movhi	r2,1289
 50933e4:	10986c04 	addi	r2,r2,25008
 50933e8:	10800017 	ldw	r2,0(r2)
 50933ec:	103ee83a 	callr	r2
 50933f0:	00000206 	br	50933fc <alt_get_errno+0x3c>
 50933f4:	00814274 	movhi	r2,1289
 50933f8:	109f5e04 	addi	r2,r2,32120
 50933fc:	e037883a 	mov	sp,fp
 5093400:	dfc00117 	ldw	ra,4(sp)
 5093404:	df000017 	ldw	fp,0(sp)
 5093408:	dec00204 	addi	sp,sp,8
 509340c:	f800283a 	ret

05093410 <alt_dev_llist_insert>:
 5093410:	defffa04 	addi	sp,sp,-24
 5093414:	dfc00515 	stw	ra,20(sp)
 5093418:	df000415 	stw	fp,16(sp)
 509341c:	df000404 	addi	fp,sp,16
 5093420:	e13ffe15 	stw	r4,-8(fp)
 5093424:	e17fff15 	stw	r5,-4(fp)
 5093428:	e0bffe17 	ldw	r2,-8(fp)
 509342c:	10000326 	beq	r2,zero,509343c <alt_dev_llist_insert+0x2c>
 5093430:	e0bffe17 	ldw	r2,-8(fp)
 5093434:	10800217 	ldw	r2,8(r2)
 5093438:	1000061e 	bne	r2,zero,5093454 <alt_dev_llist_insert+0x44>
 509343c:	50933c00 	call	50933c0 <alt_get_errno>
 5093440:	1007883a 	mov	r3,r2
 5093444:	00800584 	movi	r2,22
 5093448:	18800015 	stw	r2,0(r3)
 509344c:	00bffa84 	movi	r2,-22
 5093450:	00001306 	br	50934a0 <alt_dev_llist_insert+0x90>
 5093454:	e0bffe17 	ldw	r2,-8(fp)
 5093458:	e0ffff17 	ldw	r3,-4(fp)
 509345c:	e0fffc15 	stw	r3,-16(fp)
 5093460:	e0bffd15 	stw	r2,-12(fp)
 5093464:	e0bffd17 	ldw	r2,-12(fp)
 5093468:	e0fffc17 	ldw	r3,-16(fp)
 509346c:	10c00115 	stw	r3,4(r2)
 5093470:	e0bffc17 	ldw	r2,-16(fp)
 5093474:	10c00017 	ldw	r3,0(r2)
 5093478:	e0bffd17 	ldw	r2,-12(fp)
 509347c:	10c00015 	stw	r3,0(r2)
 5093480:	e0bffc17 	ldw	r2,-16(fp)
 5093484:	10800017 	ldw	r2,0(r2)
 5093488:	e0fffd17 	ldw	r3,-12(fp)
 509348c:	10c00115 	stw	r3,4(r2)
 5093490:	e0bffc17 	ldw	r2,-16(fp)
 5093494:	e0fffd17 	ldw	r3,-12(fp)
 5093498:	10c00015 	stw	r3,0(r2)
 509349c:	0005883a 	mov	r2,zero
 50934a0:	e037883a 	mov	sp,fp
 50934a4:	dfc00117 	ldw	ra,4(sp)
 50934a8:	df000017 	ldw	fp,0(sp)
 50934ac:	dec00204 	addi	sp,sp,8
 50934b0:	f800283a 	ret

050934b4 <_do_ctors>:
 50934b4:	defffd04 	addi	sp,sp,-12
 50934b8:	dfc00215 	stw	ra,8(sp)
 50934bc:	df000115 	stw	fp,4(sp)
 50934c0:	df000104 	addi	fp,sp,4
 50934c4:	00814274 	movhi	r2,1289
 50934c8:	10906704 	addi	r2,r2,16796
 50934cc:	e0bfff15 	stw	r2,-4(fp)
 50934d0:	00000606 	br	50934ec <_do_ctors+0x38>
 50934d4:	e0bfff17 	ldw	r2,-4(fp)
 50934d8:	10800017 	ldw	r2,0(r2)
 50934dc:	103ee83a 	callr	r2
 50934e0:	e0bfff17 	ldw	r2,-4(fp)
 50934e4:	10bfff04 	addi	r2,r2,-4
 50934e8:	e0bfff15 	stw	r2,-4(fp)
 50934ec:	e0ffff17 	ldw	r3,-4(fp)
 50934f0:	00814274 	movhi	r2,1289
 50934f4:	10906804 	addi	r2,r2,16800
 50934f8:	18bff62e 	bgeu	r3,r2,50934d4 <__alt_data_end+0xfffc52d4>
 50934fc:	0001883a 	nop
 5093500:	e037883a 	mov	sp,fp
 5093504:	dfc00117 	ldw	ra,4(sp)
 5093508:	df000017 	ldw	fp,0(sp)
 509350c:	dec00204 	addi	sp,sp,8
 5093510:	f800283a 	ret

05093514 <_do_dtors>:
 5093514:	defffd04 	addi	sp,sp,-12
 5093518:	dfc00215 	stw	ra,8(sp)
 509351c:	df000115 	stw	fp,4(sp)
 5093520:	df000104 	addi	fp,sp,4
 5093524:	00814274 	movhi	r2,1289
 5093528:	10906704 	addi	r2,r2,16796
 509352c:	e0bfff15 	stw	r2,-4(fp)
 5093530:	00000606 	br	509354c <_do_dtors+0x38>
 5093534:	e0bfff17 	ldw	r2,-4(fp)
 5093538:	10800017 	ldw	r2,0(r2)
 509353c:	103ee83a 	callr	r2
 5093540:	e0bfff17 	ldw	r2,-4(fp)
 5093544:	10bfff04 	addi	r2,r2,-4
 5093548:	e0bfff15 	stw	r2,-4(fp)
 509354c:	e0ffff17 	ldw	r3,-4(fp)
 5093550:	00814274 	movhi	r2,1289
 5093554:	10906804 	addi	r2,r2,16800
 5093558:	18bff62e 	bgeu	r3,r2,5093534 <__alt_data_end+0xfffc5334>
 509355c:	0001883a 	nop
 5093560:	e037883a 	mov	sp,fp
 5093564:	dfc00117 	ldw	ra,4(sp)
 5093568:	df000017 	ldw	fp,0(sp)
 509356c:	dec00204 	addi	sp,sp,8
 5093570:	f800283a 	ret

05093574 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 5093574:	defffa04 	addi	sp,sp,-24
 5093578:	dfc00515 	stw	ra,20(sp)
 509357c:	df000415 	stw	fp,16(sp)
 5093580:	df000404 	addi	fp,sp,16
 5093584:	e13ffe15 	stw	r4,-8(fp)
 5093588:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 509358c:	e0bfff17 	ldw	r2,-4(fp)
 5093590:	10800017 	ldw	r2,0(r2)
 5093594:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 5093598:	e13ffe17 	ldw	r4,-8(fp)
 509359c:	50874000 	call	5087400 <strlen>
 50935a0:	10800044 	addi	r2,r2,1
 50935a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50935a8:	00000d06 	br	50935e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 50935ac:	e0bffc17 	ldw	r2,-16(fp)
 50935b0:	10800217 	ldw	r2,8(r2)
 50935b4:	e0fffd17 	ldw	r3,-12(fp)
 50935b8:	180d883a 	mov	r6,r3
 50935bc:	e17ffe17 	ldw	r5,-8(fp)
 50935c0:	1009883a 	mov	r4,r2
 50935c4:	5093e580 	call	5093e58 <memcmp>
 50935c8:	1000021e 	bne	r2,zero,50935d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 50935cc:	e0bffc17 	ldw	r2,-16(fp)
 50935d0:	00000706 	br	50935f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 50935d4:	e0bffc17 	ldw	r2,-16(fp)
 50935d8:	10800017 	ldw	r2,0(r2)
 50935dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50935e0:	e0fffc17 	ldw	r3,-16(fp)
 50935e4:	e0bfff17 	ldw	r2,-4(fp)
 50935e8:	18bff01e 	bne	r3,r2,50935ac <__alt_data_end+0xfffc53ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 50935ec:	0005883a 	mov	r2,zero
}
 50935f0:	e037883a 	mov	sp,fp
 50935f4:	dfc00117 	ldw	ra,4(sp)
 50935f8:	df000017 	ldw	fp,0(sp)
 50935fc:	dec00204 	addi	sp,sp,8
 5093600:	f800283a 	ret

05093604 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 5093604:	defffe04 	addi	sp,sp,-8
 5093608:	dfc00115 	stw	ra,4(sp)
 509360c:	df000015 	stw	fp,0(sp)
 5093610:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 5093614:	01440004 	movi	r5,4096
 5093618:	0009883a 	mov	r4,zero
 509361c:	5093d7c0 	call	5093d7c <alt_icache_flush>
#endif
}
 5093620:	0001883a 	nop
 5093624:	e037883a 	mov	sp,fp
 5093628:	dfc00117 	ldw	ra,4(sp)
 509362c:	df000017 	ldw	fp,0(sp)
 5093630:	dec00204 	addi	sp,sp,8
 5093634:	f800283a 	ret

05093638 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 5093638:	defff904 	addi	sp,sp,-28
 509363c:	dfc00615 	stw	ra,24(sp)
 5093640:	df000515 	stw	fp,20(sp)
 5093644:	df000504 	addi	fp,sp,20
 5093648:	e13ffc15 	stw	r4,-16(fp)
 509364c:	e17ffd15 	stw	r5,-12(fp)
 5093650:	e1bffe15 	stw	r6,-8(fp)
 5093654:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 5093658:	e1bfff17 	ldw	r6,-4(fp)
 509365c:	e17ffe17 	ldw	r5,-8(fp)
 5093660:	e13ffd17 	ldw	r4,-12(fp)
 5093664:	50938940 	call	5093894 <open>
 5093668:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 509366c:	e0bffb17 	ldw	r2,-20(fp)
 5093670:	10001c16 	blt	r2,zero,50936e4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 5093674:	00814274 	movhi	r2,1289
 5093678:	1093d804 	addi	r2,r2,20320
 509367c:	e0fffb17 	ldw	r3,-20(fp)
 5093680:	18c00324 	muli	r3,r3,12
 5093684:	10c5883a 	add	r2,r2,r3
 5093688:	10c00017 	ldw	r3,0(r2)
 509368c:	e0bffc17 	ldw	r2,-16(fp)
 5093690:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5093694:	00814274 	movhi	r2,1289
 5093698:	1093d804 	addi	r2,r2,20320
 509369c:	e0fffb17 	ldw	r3,-20(fp)
 50936a0:	18c00324 	muli	r3,r3,12
 50936a4:	10c5883a 	add	r2,r2,r3
 50936a8:	10800104 	addi	r2,r2,4
 50936ac:	10c00017 	ldw	r3,0(r2)
 50936b0:	e0bffc17 	ldw	r2,-16(fp)
 50936b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 50936b8:	00814274 	movhi	r2,1289
 50936bc:	1093d804 	addi	r2,r2,20320
 50936c0:	e0fffb17 	ldw	r3,-20(fp)
 50936c4:	18c00324 	muli	r3,r3,12
 50936c8:	10c5883a 	add	r2,r2,r3
 50936cc:	10800204 	addi	r2,r2,8
 50936d0:	10c00017 	ldw	r3,0(r2)
 50936d4:	e0bffc17 	ldw	r2,-16(fp)
 50936d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 50936dc:	e13ffb17 	ldw	r4,-20(fp)
 50936e0:	5091e700 	call	5091e70 <alt_release_fd>
  }
} 
 50936e4:	0001883a 	nop
 50936e8:	e037883a 	mov	sp,fp
 50936ec:	dfc00117 	ldw	ra,4(sp)
 50936f0:	df000017 	ldw	fp,0(sp)
 50936f4:	dec00204 	addi	sp,sp,8
 50936f8:	f800283a 	ret

050936fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 50936fc:	defffb04 	addi	sp,sp,-20
 5093700:	dfc00415 	stw	ra,16(sp)
 5093704:	df000315 	stw	fp,12(sp)
 5093708:	df000304 	addi	fp,sp,12
 509370c:	e13ffd15 	stw	r4,-12(fp)
 5093710:	e17ffe15 	stw	r5,-8(fp)
 5093714:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 5093718:	01c07fc4 	movi	r7,511
 509371c:	01800044 	movi	r6,1
 5093720:	e17ffd17 	ldw	r5,-12(fp)
 5093724:	01014274 	movhi	r4,1289
 5093728:	2113db04 	addi	r4,r4,20332
 509372c:	50936380 	call	5093638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 5093730:	01c07fc4 	movi	r7,511
 5093734:	000d883a 	mov	r6,zero
 5093738:	e17ffe17 	ldw	r5,-8(fp)
 509373c:	01014274 	movhi	r4,1289
 5093740:	2113d804 	addi	r4,r4,20320
 5093744:	50936380 	call	5093638 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 5093748:	01c07fc4 	movi	r7,511
 509374c:	01800044 	movi	r6,1
 5093750:	e17fff17 	ldw	r5,-4(fp)
 5093754:	01014274 	movhi	r4,1289
 5093758:	2113de04 	addi	r4,r4,20344
 509375c:	50936380 	call	5093638 <alt_open_fd>
}  
 5093760:	0001883a 	nop
 5093764:	e037883a 	mov	sp,fp
 5093768:	dfc00117 	ldw	ra,4(sp)
 509376c:	df000017 	ldw	fp,0(sp)
 5093770:	dec00204 	addi	sp,sp,8
 5093774:	f800283a 	ret

05093778 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5093778:	defffe04 	addi	sp,sp,-8
 509377c:	dfc00115 	stw	ra,4(sp)
 5093780:	df000015 	stw	fp,0(sp)
 5093784:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5093788:	00814274 	movhi	r2,1289
 509378c:	10986c04 	addi	r2,r2,25008
 5093790:	10800017 	ldw	r2,0(r2)
 5093794:	10000526 	beq	r2,zero,50937ac <alt_get_errno+0x34>
 5093798:	00814274 	movhi	r2,1289
 509379c:	10986c04 	addi	r2,r2,25008
 50937a0:	10800017 	ldw	r2,0(r2)
 50937a4:	103ee83a 	callr	r2
 50937a8:	00000206 	br	50937b4 <alt_get_errno+0x3c>
 50937ac:	00814274 	movhi	r2,1289
 50937b0:	109f5e04 	addi	r2,r2,32120
}
 50937b4:	e037883a 	mov	sp,fp
 50937b8:	dfc00117 	ldw	ra,4(sp)
 50937bc:	df000017 	ldw	fp,0(sp)
 50937c0:	dec00204 	addi	sp,sp,8
 50937c4:	f800283a 	ret

050937c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 50937c8:	defffd04 	addi	sp,sp,-12
 50937cc:	df000215 	stw	fp,8(sp)
 50937d0:	df000204 	addi	fp,sp,8
 50937d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 50937d8:	e0bfff17 	ldw	r2,-4(fp)
 50937dc:	10800217 	ldw	r2,8(r2)
 50937e0:	10d00034 	orhi	r3,r2,16384
 50937e4:	e0bfff17 	ldw	r2,-4(fp)
 50937e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 50937ec:	e03ffe15 	stw	zero,-8(fp)
 50937f0:	00001d06 	br	5093868 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 50937f4:	00814274 	movhi	r2,1289
 50937f8:	1093d804 	addi	r2,r2,20320
 50937fc:	e0fffe17 	ldw	r3,-8(fp)
 5093800:	18c00324 	muli	r3,r3,12
 5093804:	10c5883a 	add	r2,r2,r3
 5093808:	10c00017 	ldw	r3,0(r2)
 509380c:	e0bfff17 	ldw	r2,-4(fp)
 5093810:	10800017 	ldw	r2,0(r2)
 5093814:	1880111e 	bne	r3,r2,509385c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5093818:	00814274 	movhi	r2,1289
 509381c:	1093d804 	addi	r2,r2,20320
 5093820:	e0fffe17 	ldw	r3,-8(fp)
 5093824:	18c00324 	muli	r3,r3,12
 5093828:	10c5883a 	add	r2,r2,r3
 509382c:	10800204 	addi	r2,r2,8
 5093830:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5093834:	1000090e 	bge	r2,zero,509385c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 5093838:	e0bffe17 	ldw	r2,-8(fp)
 509383c:	10c00324 	muli	r3,r2,12
 5093840:	00814274 	movhi	r2,1289
 5093844:	1093d804 	addi	r2,r2,20320
 5093848:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 509384c:	e0bfff17 	ldw	r2,-4(fp)
 5093850:	18800226 	beq	r3,r2,509385c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 5093854:	00bffcc4 	movi	r2,-13
 5093858:	00000a06 	br	5093884 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 509385c:	e0bffe17 	ldw	r2,-8(fp)
 5093860:	10800044 	addi	r2,r2,1
 5093864:	e0bffe15 	stw	r2,-8(fp)
 5093868:	00814274 	movhi	r2,1289
 509386c:	10986b04 	addi	r2,r2,25004
 5093870:	10800017 	ldw	r2,0(r2)
 5093874:	1007883a 	mov	r3,r2
 5093878:	e0bffe17 	ldw	r2,-8(fp)
 509387c:	18bfdd2e 	bgeu	r3,r2,50937f4 <__alt_data_end+0xfffc55f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5093880:	0005883a 	mov	r2,zero
}
 5093884:	e037883a 	mov	sp,fp
 5093888:	df000017 	ldw	fp,0(sp)
 509388c:	dec00104 	addi	sp,sp,4
 5093890:	f800283a 	ret

05093894 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5093894:	defff604 	addi	sp,sp,-40
 5093898:	dfc00915 	stw	ra,36(sp)
 509389c:	df000815 	stw	fp,32(sp)
 50938a0:	df000804 	addi	fp,sp,32
 50938a4:	e13ffd15 	stw	r4,-12(fp)
 50938a8:	e17ffe15 	stw	r5,-8(fp)
 50938ac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 50938b0:	00bfffc4 	movi	r2,-1
 50938b4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 50938b8:	00bffb44 	movi	r2,-19
 50938bc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 50938c0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 50938c4:	01414274 	movhi	r5,1289
 50938c8:	29586904 	addi	r5,r5,24996
 50938cc:	e13ffd17 	ldw	r4,-12(fp)
 50938d0:	50935740 	call	5093574 <alt_find_dev>
 50938d4:	e0bff815 	stw	r2,-32(fp)
 50938d8:	e0bff817 	ldw	r2,-32(fp)
 50938dc:	1000051e 	bne	r2,zero,50938f4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 50938e0:	e13ffd17 	ldw	r4,-12(fp)
 50938e4:	5093bb40 	call	5093bb4 <alt_find_file>
 50938e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 50938ec:	00800044 	movi	r2,1
 50938f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 50938f4:	e0bff817 	ldw	r2,-32(fp)
 50938f8:	10002926 	beq	r2,zero,50939a0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 50938fc:	e13ff817 	ldw	r4,-32(fp)
 5093900:	5093cc80 	call	5093cc8 <alt_get_fd>
 5093904:	e0bff915 	stw	r2,-28(fp)
 5093908:	e0bff917 	ldw	r2,-28(fp)
 509390c:	1000030e 	bge	r2,zero,509391c <open+0x88>
    {
      status = index;
 5093910:	e0bff917 	ldw	r2,-28(fp)
 5093914:	e0bffa15 	stw	r2,-24(fp)
 5093918:	00002306 	br	50939a8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 509391c:	e0bff917 	ldw	r2,-28(fp)
 5093920:	10c00324 	muli	r3,r2,12
 5093924:	00814274 	movhi	r2,1289
 5093928:	1093d804 	addi	r2,r2,20320
 509392c:	1885883a 	add	r2,r3,r2
 5093930:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 5093934:	e0fffe17 	ldw	r3,-8(fp)
 5093938:	00900034 	movhi	r2,16384
 509393c:	10bfffc4 	addi	r2,r2,-1
 5093940:	1886703a 	and	r3,r3,r2
 5093944:	e0bffc17 	ldw	r2,-16(fp)
 5093948:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 509394c:	e0bffb17 	ldw	r2,-20(fp)
 5093950:	1000051e 	bne	r2,zero,5093968 <open+0xd4>
 5093954:	e13ffc17 	ldw	r4,-16(fp)
 5093958:	50937c80 	call	50937c8 <alt_file_locked>
 509395c:	e0bffa15 	stw	r2,-24(fp)
 5093960:	e0bffa17 	ldw	r2,-24(fp)
 5093964:	10001016 	blt	r2,zero,50939a8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 5093968:	e0bff817 	ldw	r2,-32(fp)
 509396c:	10800317 	ldw	r2,12(r2)
 5093970:	10000826 	beq	r2,zero,5093994 <open+0x100>
 5093974:	e0bff817 	ldw	r2,-32(fp)
 5093978:	10800317 	ldw	r2,12(r2)
 509397c:	e1ffff17 	ldw	r7,-4(fp)
 5093980:	e1bffe17 	ldw	r6,-8(fp)
 5093984:	e17ffd17 	ldw	r5,-12(fp)
 5093988:	e13ffc17 	ldw	r4,-16(fp)
 509398c:	103ee83a 	callr	r2
 5093990:	00000106 	br	5093998 <open+0x104>
 5093994:	0005883a 	mov	r2,zero
 5093998:	e0bffa15 	stw	r2,-24(fp)
 509399c:	00000206 	br	50939a8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 50939a0:	00bffb44 	movi	r2,-19
 50939a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 50939a8:	e0bffa17 	ldw	r2,-24(fp)
 50939ac:	1000090e 	bge	r2,zero,50939d4 <open+0x140>
  {
    alt_release_fd (index);  
 50939b0:	e13ff917 	ldw	r4,-28(fp)
 50939b4:	5091e700 	call	5091e70 <alt_release_fd>
    ALT_ERRNO = -status;
 50939b8:	50937780 	call	5093778 <alt_get_errno>
 50939bc:	1007883a 	mov	r3,r2
 50939c0:	e0bffa17 	ldw	r2,-24(fp)
 50939c4:	0085c83a 	sub	r2,zero,r2
 50939c8:	18800015 	stw	r2,0(r3)
    return -1;
 50939cc:	00bfffc4 	movi	r2,-1
 50939d0:	00000106 	br	50939d8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 50939d4:	e0bff917 	ldw	r2,-28(fp)
}
 50939d8:	e037883a 	mov	sp,fp
 50939dc:	dfc00117 	ldw	ra,4(sp)
 50939e0:	df000017 	ldw	fp,0(sp)
 50939e4:	dec00204 	addi	sp,sp,8
 50939e8:	f800283a 	ret

050939ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 50939ec:	defffa04 	addi	sp,sp,-24
 50939f0:	df000515 	stw	fp,20(sp)
 50939f4:	df000504 	addi	fp,sp,20
 50939f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50939fc:	0005303a 	rdctl	r2,status
 5093a00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5093a04:	e0fffc17 	ldw	r3,-16(fp)
 5093a08:	00bfff84 	movi	r2,-2
 5093a0c:	1884703a 	and	r2,r3,r2
 5093a10:	1001703a 	wrctl	status,r2
  
  return context;
 5093a14:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 5093a18:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 5093a1c:	e0bfff17 	ldw	r2,-4(fp)
 5093a20:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 5093a24:	e0bffd17 	ldw	r2,-12(fp)
 5093a28:	10800017 	ldw	r2,0(r2)
 5093a2c:	e0fffd17 	ldw	r3,-12(fp)
 5093a30:	18c00117 	ldw	r3,4(r3)
 5093a34:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 5093a38:	e0bffd17 	ldw	r2,-12(fp)
 5093a3c:	10800117 	ldw	r2,4(r2)
 5093a40:	e0fffd17 	ldw	r3,-12(fp)
 5093a44:	18c00017 	ldw	r3,0(r3)
 5093a48:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 5093a4c:	e0bffd17 	ldw	r2,-12(fp)
 5093a50:	e0fffd17 	ldw	r3,-12(fp)
 5093a54:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 5093a58:	e0bffd17 	ldw	r2,-12(fp)
 5093a5c:	e0fffd17 	ldw	r3,-12(fp)
 5093a60:	10c00015 	stw	r3,0(r2)
 5093a64:	e0bffb17 	ldw	r2,-20(fp)
 5093a68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5093a6c:	e0bffe17 	ldw	r2,-8(fp)
 5093a70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 5093a74:	0001883a 	nop
 5093a78:	e037883a 	mov	sp,fp
 5093a7c:	df000017 	ldw	fp,0(sp)
 5093a80:	dec00104 	addi	sp,sp,4
 5093a84:	f800283a 	ret

05093a88 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 5093a88:	defffb04 	addi	sp,sp,-20
 5093a8c:	dfc00415 	stw	ra,16(sp)
 5093a90:	df000315 	stw	fp,12(sp)
 5093a94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 5093a98:	d0a01417 	ldw	r2,-32688(gp)
 5093a9c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 5093aa0:	d0a70917 	ldw	r2,-25564(gp)
 5093aa4:	10800044 	addi	r2,r2,1
 5093aa8:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5093aac:	00002e06 	br	5093b68 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 5093ab0:	e0bffd17 	ldw	r2,-12(fp)
 5093ab4:	10800017 	ldw	r2,0(r2)
 5093ab8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 5093abc:	e0bffd17 	ldw	r2,-12(fp)
 5093ac0:	10800403 	ldbu	r2,16(r2)
 5093ac4:	10803fcc 	andi	r2,r2,255
 5093ac8:	10000426 	beq	r2,zero,5093adc <alt_tick+0x54>
 5093acc:	d0a70917 	ldw	r2,-25564(gp)
 5093ad0:	1000021e 	bne	r2,zero,5093adc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 5093ad4:	e0bffd17 	ldw	r2,-12(fp)
 5093ad8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 5093adc:	e0bffd17 	ldw	r2,-12(fp)
 5093ae0:	10800217 	ldw	r2,8(r2)
 5093ae4:	d0e70917 	ldw	r3,-25564(gp)
 5093ae8:	18801d36 	bltu	r3,r2,5093b60 <alt_tick+0xd8>
 5093aec:	e0bffd17 	ldw	r2,-12(fp)
 5093af0:	10800403 	ldbu	r2,16(r2)
 5093af4:	10803fcc 	andi	r2,r2,255
 5093af8:	1000191e 	bne	r2,zero,5093b60 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 5093afc:	e0bffd17 	ldw	r2,-12(fp)
 5093b00:	10800317 	ldw	r2,12(r2)
 5093b04:	e0fffd17 	ldw	r3,-12(fp)
 5093b08:	18c00517 	ldw	r3,20(r3)
 5093b0c:	1809883a 	mov	r4,r3
 5093b10:	103ee83a 	callr	r2
 5093b14:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 5093b18:	e0bfff17 	ldw	r2,-4(fp)
 5093b1c:	1000031e 	bne	r2,zero,5093b2c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 5093b20:	e13ffd17 	ldw	r4,-12(fp)
 5093b24:	50939ec0 	call	50939ec <alt_alarm_stop>
 5093b28:	00000d06 	br	5093b60 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 5093b2c:	e0bffd17 	ldw	r2,-12(fp)
 5093b30:	10c00217 	ldw	r3,8(r2)
 5093b34:	e0bfff17 	ldw	r2,-4(fp)
 5093b38:	1887883a 	add	r3,r3,r2
 5093b3c:	e0bffd17 	ldw	r2,-12(fp)
 5093b40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 5093b44:	e0bffd17 	ldw	r2,-12(fp)
 5093b48:	10c00217 	ldw	r3,8(r2)
 5093b4c:	d0a70917 	ldw	r2,-25564(gp)
 5093b50:	1880032e 	bgeu	r3,r2,5093b60 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 5093b54:	e0bffd17 	ldw	r2,-12(fp)
 5093b58:	00c00044 	movi	r3,1
 5093b5c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 5093b60:	e0bffe17 	ldw	r2,-8(fp)
 5093b64:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5093b68:	e0fffd17 	ldw	r3,-12(fp)
 5093b6c:	d0a01404 	addi	r2,gp,-32688
 5093b70:	18bfcf1e 	bne	r3,r2,5093ab0 <__alt_data_end+0xfffc58b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5093b74:	0001883a 	nop
}
 5093b78:	0001883a 	nop
 5093b7c:	e037883a 	mov	sp,fp
 5093b80:	dfc00117 	ldw	ra,4(sp)
 5093b84:	df000017 	ldw	fp,0(sp)
 5093b88:	dec00204 	addi	sp,sp,8
 5093b8c:	f800283a 	ret

05093b90 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 5093b90:	deffff04 	addi	sp,sp,-4
 5093b94:	df000015 	stw	fp,0(sp)
 5093b98:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 5093b9c:	000170fa 	wrctl	ienable,zero
}
 5093ba0:	0001883a 	nop
 5093ba4:	e037883a 	mov	sp,fp
 5093ba8:	df000017 	ldw	fp,0(sp)
 5093bac:	dec00104 	addi	sp,sp,4
 5093bb0:	f800283a 	ret

05093bb4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 5093bb4:	defffb04 	addi	sp,sp,-20
 5093bb8:	dfc00415 	stw	ra,16(sp)
 5093bbc:	df000315 	stw	fp,12(sp)
 5093bc0:	df000304 	addi	fp,sp,12
 5093bc4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 5093bc8:	00814274 	movhi	r2,1289
 5093bcc:	10986704 	addi	r2,r2,24988
 5093bd0:	10800017 	ldw	r2,0(r2)
 5093bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 5093bd8:	00003106 	br	5093ca0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 5093bdc:	e0bffd17 	ldw	r2,-12(fp)
 5093be0:	10800217 	ldw	r2,8(r2)
 5093be4:	1009883a 	mov	r4,r2
 5093be8:	50874000 	call	5087400 <strlen>
 5093bec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 5093bf0:	e0bffd17 	ldw	r2,-12(fp)
 5093bf4:	10c00217 	ldw	r3,8(r2)
 5093bf8:	e0bffe17 	ldw	r2,-8(fp)
 5093bfc:	10bfffc4 	addi	r2,r2,-1
 5093c00:	1885883a 	add	r2,r3,r2
 5093c04:	10800003 	ldbu	r2,0(r2)
 5093c08:	10803fcc 	andi	r2,r2,255
 5093c0c:	1080201c 	xori	r2,r2,128
 5093c10:	10bfe004 	addi	r2,r2,-128
 5093c14:	10800bd8 	cmpnei	r2,r2,47
 5093c18:	1000031e 	bne	r2,zero,5093c28 <alt_find_file+0x74>
    {
      len -= 1;
 5093c1c:	e0bffe17 	ldw	r2,-8(fp)
 5093c20:	10bfffc4 	addi	r2,r2,-1
 5093c24:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5093c28:	e0bffe17 	ldw	r2,-8(fp)
 5093c2c:	e0ffff17 	ldw	r3,-4(fp)
 5093c30:	1885883a 	add	r2,r3,r2
 5093c34:	10800003 	ldbu	r2,0(r2)
 5093c38:	10803fcc 	andi	r2,r2,255
 5093c3c:	1080201c 	xori	r2,r2,128
 5093c40:	10bfe004 	addi	r2,r2,-128
 5093c44:	10800be0 	cmpeqi	r2,r2,47
 5093c48:	1000081e 	bne	r2,zero,5093c6c <alt_find_file+0xb8>
 5093c4c:	e0bffe17 	ldw	r2,-8(fp)
 5093c50:	e0ffff17 	ldw	r3,-4(fp)
 5093c54:	1885883a 	add	r2,r3,r2
 5093c58:	10800003 	ldbu	r2,0(r2)
 5093c5c:	10803fcc 	andi	r2,r2,255
 5093c60:	1080201c 	xori	r2,r2,128
 5093c64:	10bfe004 	addi	r2,r2,-128
 5093c68:	10000a1e 	bne	r2,zero,5093c94 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 5093c6c:	e0bffd17 	ldw	r2,-12(fp)
 5093c70:	10800217 	ldw	r2,8(r2)
 5093c74:	e0fffe17 	ldw	r3,-8(fp)
 5093c78:	180d883a 	mov	r6,r3
 5093c7c:	e17fff17 	ldw	r5,-4(fp)
 5093c80:	1009883a 	mov	r4,r2
 5093c84:	5093e580 	call	5093e58 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5093c88:	1000021e 	bne	r2,zero,5093c94 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 5093c8c:	e0bffd17 	ldw	r2,-12(fp)
 5093c90:	00000806 	br	5093cb4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 5093c94:	e0bffd17 	ldw	r2,-12(fp)
 5093c98:	10800017 	ldw	r2,0(r2)
 5093c9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 5093ca0:	e0fffd17 	ldw	r3,-12(fp)
 5093ca4:	00814274 	movhi	r2,1289
 5093ca8:	10986704 	addi	r2,r2,24988
 5093cac:	18bfcb1e 	bne	r3,r2,5093bdc <__alt_data_end+0xfffc59dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 5093cb0:	0005883a 	mov	r2,zero
}
 5093cb4:	e037883a 	mov	sp,fp
 5093cb8:	dfc00117 	ldw	ra,4(sp)
 5093cbc:	df000017 	ldw	fp,0(sp)
 5093cc0:	dec00204 	addi	sp,sp,8
 5093cc4:	f800283a 	ret

05093cc8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 5093cc8:	defffc04 	addi	sp,sp,-16
 5093ccc:	df000315 	stw	fp,12(sp)
 5093cd0:	df000304 	addi	fp,sp,12
 5093cd4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 5093cd8:	00bffa04 	movi	r2,-24
 5093cdc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5093ce0:	e03ffd15 	stw	zero,-12(fp)
 5093ce4:	00001d06 	br	5093d5c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 5093ce8:	00814274 	movhi	r2,1289
 5093cec:	1093d804 	addi	r2,r2,20320
 5093cf0:	e0fffd17 	ldw	r3,-12(fp)
 5093cf4:	18c00324 	muli	r3,r3,12
 5093cf8:	10c5883a 	add	r2,r2,r3
 5093cfc:	10800017 	ldw	r2,0(r2)
 5093d00:	1000131e 	bne	r2,zero,5093d50 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 5093d04:	00814274 	movhi	r2,1289
 5093d08:	1093d804 	addi	r2,r2,20320
 5093d0c:	e0fffd17 	ldw	r3,-12(fp)
 5093d10:	18c00324 	muli	r3,r3,12
 5093d14:	10c5883a 	add	r2,r2,r3
 5093d18:	e0ffff17 	ldw	r3,-4(fp)
 5093d1c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 5093d20:	00814274 	movhi	r2,1289
 5093d24:	10986b04 	addi	r2,r2,25004
 5093d28:	10c00017 	ldw	r3,0(r2)
 5093d2c:	e0bffd17 	ldw	r2,-12(fp)
 5093d30:	1880040e 	bge	r3,r2,5093d44 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 5093d34:	00814274 	movhi	r2,1289
 5093d38:	10986b04 	addi	r2,r2,25004
 5093d3c:	e0fffd17 	ldw	r3,-12(fp)
 5093d40:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 5093d44:	e0bffd17 	ldw	r2,-12(fp)
 5093d48:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 5093d4c:	00000606 	br	5093d68 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5093d50:	e0bffd17 	ldw	r2,-12(fp)
 5093d54:	10800044 	addi	r2,r2,1
 5093d58:	e0bffd15 	stw	r2,-12(fp)
 5093d5c:	e0bffd17 	ldw	r2,-12(fp)
 5093d60:	10800810 	cmplti	r2,r2,32
 5093d64:	103fe01e 	bne	r2,zero,5093ce8 <__alt_data_end+0xfffc5ae8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5093d68:	e0bffe17 	ldw	r2,-8(fp)
}
 5093d6c:	e037883a 	mov	sp,fp
 5093d70:	df000017 	ldw	fp,0(sp)
 5093d74:	dec00104 	addi	sp,sp,4
 5093d78:	f800283a 	ret

05093d7c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 5093d7c:	defffb04 	addi	sp,sp,-20
 5093d80:	df000415 	stw	fp,16(sp)
 5093d84:	df000404 	addi	fp,sp,16
 5093d88:	e13ffe15 	stw	r4,-8(fp)
 5093d8c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 5093d90:	e0bfff17 	ldw	r2,-4(fp)
 5093d94:	10840070 	cmpltui	r2,r2,4097
 5093d98:	1000021e 	bne	r2,zero,5093da4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 5093d9c:	00840004 	movi	r2,4096
 5093da0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 5093da4:	e0fffe17 	ldw	r3,-8(fp)
 5093da8:	e0bfff17 	ldw	r2,-4(fp)
 5093dac:	1885883a 	add	r2,r3,r2
 5093db0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 5093db4:	e0bffe17 	ldw	r2,-8(fp)
 5093db8:	e0bffc15 	stw	r2,-16(fp)
 5093dbc:	00000506 	br	5093dd4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 5093dc0:	e0bffc17 	ldw	r2,-16(fp)
 5093dc4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 5093dc8:	e0bffc17 	ldw	r2,-16(fp)
 5093dcc:	10800804 	addi	r2,r2,32
 5093dd0:	e0bffc15 	stw	r2,-16(fp)
 5093dd4:	e0fffc17 	ldw	r3,-16(fp)
 5093dd8:	e0bffd17 	ldw	r2,-12(fp)
 5093ddc:	18bff836 	bltu	r3,r2,5093dc0 <__alt_data_end+0xfffc5bc0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 5093de0:	e0bffe17 	ldw	r2,-8(fp)
 5093de4:	108007cc 	andi	r2,r2,31
 5093de8:	10000226 	beq	r2,zero,5093df4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 5093dec:	e0bffc17 	ldw	r2,-16(fp)
 5093df0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 5093df4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 5093df8:	0001883a 	nop
 5093dfc:	e037883a 	mov	sp,fp
 5093e00:	df000017 	ldw	fp,0(sp)
 5093e04:	dec00104 	addi	sp,sp,4
 5093e08:	f800283a 	ret

05093e0c <atexit>:
 5093e0c:	200b883a 	mov	r5,r4
 5093e10:	000f883a 	mov	r7,zero
 5093e14:	000d883a 	mov	r6,zero
 5093e18:	0009883a 	mov	r4,zero
 5093e1c:	5093ed41 	jmpi	5093ed4 <__register_exitproc>

05093e20 <exit>:
 5093e20:	defffe04 	addi	sp,sp,-8
 5093e24:	000b883a 	mov	r5,zero
 5093e28:	dc000015 	stw	r16,0(sp)
 5093e2c:	dfc00115 	stw	ra,4(sp)
 5093e30:	2021883a 	mov	r16,r4
 5093e34:	5093fec0 	call	5093fec <__call_exitprocs>
 5093e38:	00814274 	movhi	r2,1289
 5093e3c:	10986104 	addi	r2,r2,24964
 5093e40:	11000017 	ldw	r4,0(r2)
 5093e44:	20800f17 	ldw	r2,60(r4)
 5093e48:	10000126 	beq	r2,zero,5093e50 <exit+0x30>
 5093e4c:	103ee83a 	callr	r2
 5093e50:	8009883a 	mov	r4,r16
 5093e54:	509416c0 	call	509416c <_exit>

05093e58 <memcmp>:
 5093e58:	01c000c4 	movi	r7,3
 5093e5c:	3980192e 	bgeu	r7,r6,5093ec4 <memcmp+0x6c>
 5093e60:	2144b03a 	or	r2,r4,r5
 5093e64:	11c4703a 	and	r2,r2,r7
 5093e68:	10000f26 	beq	r2,zero,5093ea8 <memcmp+0x50>
 5093e6c:	20800003 	ldbu	r2,0(r4)
 5093e70:	28c00003 	ldbu	r3,0(r5)
 5093e74:	10c0151e 	bne	r2,r3,5093ecc <memcmp+0x74>
 5093e78:	31bfff84 	addi	r6,r6,-2
 5093e7c:	01ffffc4 	movi	r7,-1
 5093e80:	00000406 	br	5093e94 <memcmp+0x3c>
 5093e84:	20800003 	ldbu	r2,0(r4)
 5093e88:	28c00003 	ldbu	r3,0(r5)
 5093e8c:	31bfffc4 	addi	r6,r6,-1
 5093e90:	10c00e1e 	bne	r2,r3,5093ecc <memcmp+0x74>
 5093e94:	21000044 	addi	r4,r4,1
 5093e98:	29400044 	addi	r5,r5,1
 5093e9c:	31fff91e 	bne	r6,r7,5093e84 <__alt_data_end+0xfffc5c84>
 5093ea0:	0005883a 	mov	r2,zero
 5093ea4:	f800283a 	ret
 5093ea8:	20c00017 	ldw	r3,0(r4)
 5093eac:	28800017 	ldw	r2,0(r5)
 5093eb0:	18bfee1e 	bne	r3,r2,5093e6c <__alt_data_end+0xfffc5c6c>
 5093eb4:	31bfff04 	addi	r6,r6,-4
 5093eb8:	21000104 	addi	r4,r4,4
 5093ebc:	29400104 	addi	r5,r5,4
 5093ec0:	39bff936 	bltu	r7,r6,5093ea8 <__alt_data_end+0xfffc5ca8>
 5093ec4:	303fe91e 	bne	r6,zero,5093e6c <__alt_data_end+0xfffc5c6c>
 5093ec8:	003ff506 	br	5093ea0 <__alt_data_end+0xfffc5ca0>
 5093ecc:	10c5c83a 	sub	r2,r2,r3
 5093ed0:	f800283a 	ret

05093ed4 <__register_exitproc>:
 5093ed4:	defffa04 	addi	sp,sp,-24
 5093ed8:	dc000315 	stw	r16,12(sp)
 5093edc:	04014274 	movhi	r16,1289
 5093ee0:	84186104 	addi	r16,r16,24964
 5093ee4:	80c00017 	ldw	r3,0(r16)
 5093ee8:	dc400415 	stw	r17,16(sp)
 5093eec:	dfc00515 	stw	ra,20(sp)
 5093ef0:	18805217 	ldw	r2,328(r3)
 5093ef4:	2023883a 	mov	r17,r4
 5093ef8:	10003726 	beq	r2,zero,5093fd8 <__register_exitproc+0x104>
 5093efc:	10c00117 	ldw	r3,4(r2)
 5093f00:	010007c4 	movi	r4,31
 5093f04:	20c00e16 	blt	r4,r3,5093f40 <__register_exitproc+0x6c>
 5093f08:	1a000044 	addi	r8,r3,1
 5093f0c:	8800221e 	bne	r17,zero,5093f98 <__register_exitproc+0xc4>
 5093f10:	18c00084 	addi	r3,r3,2
 5093f14:	18c7883a 	add	r3,r3,r3
 5093f18:	18c7883a 	add	r3,r3,r3
 5093f1c:	12000115 	stw	r8,4(r2)
 5093f20:	10c7883a 	add	r3,r2,r3
 5093f24:	19400015 	stw	r5,0(r3)
 5093f28:	0005883a 	mov	r2,zero
 5093f2c:	dfc00517 	ldw	ra,20(sp)
 5093f30:	dc400417 	ldw	r17,16(sp)
 5093f34:	dc000317 	ldw	r16,12(sp)
 5093f38:	dec00604 	addi	sp,sp,24
 5093f3c:	f800283a 	ret
 5093f40:	00800034 	movhi	r2,0
 5093f44:	10800004 	addi	r2,r2,0
 5093f48:	10002626 	beq	r2,zero,5093fe4 <__register_exitproc+0x110>
 5093f4c:	01006404 	movi	r4,400
 5093f50:	d9400015 	stw	r5,0(sp)
 5093f54:	d9800115 	stw	r6,4(sp)
 5093f58:	d9c00215 	stw	r7,8(sp)
 5093f5c:	00000000 	call	0 <__alt_mem_sdram>
 5093f60:	d9400017 	ldw	r5,0(sp)
 5093f64:	d9800117 	ldw	r6,4(sp)
 5093f68:	d9c00217 	ldw	r7,8(sp)
 5093f6c:	10001d26 	beq	r2,zero,5093fe4 <__register_exitproc+0x110>
 5093f70:	81000017 	ldw	r4,0(r16)
 5093f74:	10000115 	stw	zero,4(r2)
 5093f78:	02000044 	movi	r8,1
 5093f7c:	22405217 	ldw	r9,328(r4)
 5093f80:	0007883a 	mov	r3,zero
 5093f84:	12400015 	stw	r9,0(r2)
 5093f88:	20805215 	stw	r2,328(r4)
 5093f8c:	10006215 	stw	zero,392(r2)
 5093f90:	10006315 	stw	zero,396(r2)
 5093f94:	883fde26 	beq	r17,zero,5093f10 <__alt_data_end+0xfffc5d10>
 5093f98:	18c9883a 	add	r4,r3,r3
 5093f9c:	2109883a 	add	r4,r4,r4
 5093fa0:	1109883a 	add	r4,r2,r4
 5093fa4:	21802215 	stw	r6,136(r4)
 5093fa8:	01800044 	movi	r6,1
 5093fac:	12406217 	ldw	r9,392(r2)
 5093fb0:	30cc983a 	sll	r6,r6,r3
 5093fb4:	4992b03a 	or	r9,r9,r6
 5093fb8:	12406215 	stw	r9,392(r2)
 5093fbc:	21c04215 	stw	r7,264(r4)
 5093fc0:	01000084 	movi	r4,2
 5093fc4:	893fd21e 	bne	r17,r4,5093f10 <__alt_data_end+0xfffc5d10>
 5093fc8:	11006317 	ldw	r4,396(r2)
 5093fcc:	218cb03a 	or	r6,r4,r6
 5093fd0:	11806315 	stw	r6,396(r2)
 5093fd4:	003fce06 	br	5093f10 <__alt_data_end+0xfffc5d10>
 5093fd8:	18805304 	addi	r2,r3,332
 5093fdc:	18805215 	stw	r2,328(r3)
 5093fe0:	003fc606 	br	5093efc <__alt_data_end+0xfffc5cfc>
 5093fe4:	00bfffc4 	movi	r2,-1
 5093fe8:	003fd006 	br	5093f2c <__alt_data_end+0xfffc5d2c>

05093fec <__call_exitprocs>:
 5093fec:	defff504 	addi	sp,sp,-44
 5093ff0:	df000915 	stw	fp,36(sp)
 5093ff4:	dd400615 	stw	r21,24(sp)
 5093ff8:	dc800315 	stw	r18,12(sp)
 5093ffc:	dfc00a15 	stw	ra,40(sp)
 5094000:	ddc00815 	stw	r23,32(sp)
 5094004:	dd800715 	stw	r22,28(sp)
 5094008:	dd000515 	stw	r20,20(sp)
 509400c:	dcc00415 	stw	r19,16(sp)
 5094010:	dc400215 	stw	r17,8(sp)
 5094014:	dc000115 	stw	r16,4(sp)
 5094018:	d9000015 	stw	r4,0(sp)
 509401c:	2839883a 	mov	fp,r5
 5094020:	04800044 	movi	r18,1
 5094024:	057fffc4 	movi	r21,-1
 5094028:	00814274 	movhi	r2,1289
 509402c:	10986104 	addi	r2,r2,24964
 5094030:	12000017 	ldw	r8,0(r2)
 5094034:	45005217 	ldw	r20,328(r8)
 5094038:	44c05204 	addi	r19,r8,328
 509403c:	a0001c26 	beq	r20,zero,50940b0 <__call_exitprocs+0xc4>
 5094040:	a0800117 	ldw	r2,4(r20)
 5094044:	15ffffc4 	addi	r23,r2,-1
 5094048:	b8000d16 	blt	r23,zero,5094080 <__call_exitprocs+0x94>
 509404c:	14000044 	addi	r16,r2,1
 5094050:	8421883a 	add	r16,r16,r16
 5094054:	8421883a 	add	r16,r16,r16
 5094058:	84402004 	addi	r17,r16,128
 509405c:	a463883a 	add	r17,r20,r17
 5094060:	a421883a 	add	r16,r20,r16
 5094064:	e0001e26 	beq	fp,zero,50940e0 <__call_exitprocs+0xf4>
 5094068:	80804017 	ldw	r2,256(r16)
 509406c:	e0801c26 	beq	fp,r2,50940e0 <__call_exitprocs+0xf4>
 5094070:	bdffffc4 	addi	r23,r23,-1
 5094074:	843fff04 	addi	r16,r16,-4
 5094078:	8c7fff04 	addi	r17,r17,-4
 509407c:	bd7ff91e 	bne	r23,r21,5094064 <__alt_data_end+0xfffc5e64>
 5094080:	00800034 	movhi	r2,0
 5094084:	10800004 	addi	r2,r2,0
 5094088:	10000926 	beq	r2,zero,50940b0 <__call_exitprocs+0xc4>
 509408c:	a0800117 	ldw	r2,4(r20)
 5094090:	1000301e 	bne	r2,zero,5094154 <__call_exitprocs+0x168>
 5094094:	a0800017 	ldw	r2,0(r20)
 5094098:	10003226 	beq	r2,zero,5094164 <__call_exitprocs+0x178>
 509409c:	a009883a 	mov	r4,r20
 50940a0:	98800015 	stw	r2,0(r19)
 50940a4:	00000000 	call	0 <__alt_mem_sdram>
 50940a8:	9d000017 	ldw	r20,0(r19)
 50940ac:	a03fe41e 	bne	r20,zero,5094040 <__alt_data_end+0xfffc5e40>
 50940b0:	dfc00a17 	ldw	ra,40(sp)
 50940b4:	df000917 	ldw	fp,36(sp)
 50940b8:	ddc00817 	ldw	r23,32(sp)
 50940bc:	dd800717 	ldw	r22,28(sp)
 50940c0:	dd400617 	ldw	r21,24(sp)
 50940c4:	dd000517 	ldw	r20,20(sp)
 50940c8:	dcc00417 	ldw	r19,16(sp)
 50940cc:	dc800317 	ldw	r18,12(sp)
 50940d0:	dc400217 	ldw	r17,8(sp)
 50940d4:	dc000117 	ldw	r16,4(sp)
 50940d8:	dec00b04 	addi	sp,sp,44
 50940dc:	f800283a 	ret
 50940e0:	a0800117 	ldw	r2,4(r20)
 50940e4:	80c00017 	ldw	r3,0(r16)
 50940e8:	10bfffc4 	addi	r2,r2,-1
 50940ec:	15c01426 	beq	r2,r23,5094140 <__call_exitprocs+0x154>
 50940f0:	80000015 	stw	zero,0(r16)
 50940f4:	183fde26 	beq	r3,zero,5094070 <__alt_data_end+0xfffc5e70>
 50940f8:	95c8983a 	sll	r4,r18,r23
 50940fc:	a0806217 	ldw	r2,392(r20)
 5094100:	a5800117 	ldw	r22,4(r20)
 5094104:	2084703a 	and	r2,r4,r2
 5094108:	10000b26 	beq	r2,zero,5094138 <__call_exitprocs+0x14c>
 509410c:	a0806317 	ldw	r2,396(r20)
 5094110:	2088703a 	and	r4,r4,r2
 5094114:	20000c1e 	bne	r4,zero,5094148 <__call_exitprocs+0x15c>
 5094118:	89400017 	ldw	r5,0(r17)
 509411c:	d9000017 	ldw	r4,0(sp)
 5094120:	183ee83a 	callr	r3
 5094124:	a0800117 	ldw	r2,4(r20)
 5094128:	15bfbf1e 	bne	r2,r22,5094028 <__alt_data_end+0xfffc5e28>
 509412c:	98800017 	ldw	r2,0(r19)
 5094130:	153fcf26 	beq	r2,r20,5094070 <__alt_data_end+0xfffc5e70>
 5094134:	003fbc06 	br	5094028 <__alt_data_end+0xfffc5e28>
 5094138:	183ee83a 	callr	r3
 509413c:	003ff906 	br	5094124 <__alt_data_end+0xfffc5f24>
 5094140:	a5c00115 	stw	r23,4(r20)
 5094144:	003feb06 	br	50940f4 <__alt_data_end+0xfffc5ef4>
 5094148:	89000017 	ldw	r4,0(r17)
 509414c:	183ee83a 	callr	r3
 5094150:	003ff406 	br	5094124 <__alt_data_end+0xfffc5f24>
 5094154:	a0800017 	ldw	r2,0(r20)
 5094158:	a027883a 	mov	r19,r20
 509415c:	1029883a 	mov	r20,r2
 5094160:	003fb606 	br	509403c <__alt_data_end+0xfffc5e3c>
 5094164:	0005883a 	mov	r2,zero
 5094168:	003ffb06 	br	5094158 <__alt_data_end+0xfffc5f58>

0509416c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 509416c:	defffd04 	addi	sp,sp,-12
 5094170:	df000215 	stw	fp,8(sp)
 5094174:	df000204 	addi	fp,sp,8
 5094178:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 509417c:	0001883a 	nop
 5094180:	e0bfff17 	ldw	r2,-4(fp)
 5094184:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5094188:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 509418c:	10000226 	beq	r2,zero,5094198 <_exit+0x2c>
    ALT_SIM_FAIL();
 5094190:	002af070 	cmpltui	zero,zero,43969
 5094194:	00000106 	br	509419c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 5094198:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 509419c:	003fff06 	br	509419c <__alt_data_end+0xfffc5f9c>
